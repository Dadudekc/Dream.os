{
    "project_root": "D:\\overnight_scripts\\chat_mate",
    "num_files_analyzed": 208,
    "analysis_details": {
        "cache\\openai_profile\\CommerceHeuristics\\2023.3.30.1305\\cart_product_extraction.js": {
            "language": ".js",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "chat_mate\\setup.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "chat_mate\\content\\AletheiaContentDispatcher.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "execute_full_dispatch"
            ],
            "classes": {
                "AletheiaContentDispatcher": {
                    "methods": [
                        "__init__",
                        "execute_full_dispatch"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 4
        },
        "chat_mate\\core\\AletheiaFeedbackLoopManager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "generate_feedback_loops",
                "_calculate_success_rate",
                "_get_top_tags",
                "_auto_adjust_rate_limits",
                "export_feedback_report",
                "process_feedback"
            ],
            "classes": {
                "AletheiaFeedbackLoopManager": {
                    "methods": [
                        "__init__",
                        "generate_feedback_loops",
                        "_calculate_success_rate",
                        "_get_top_tags",
                        "_auto_adjust_rate_limits",
                        "export_feedback_report",
                        "process_feedback"
                    ],
                    "docstring": "FULL SYNC Feedback Loop Manager:\n- Reviews log summaries.\n- Detects failure clusters and reinforces actions.\n- Adjusts system configurations (rate limits, retries, etc).",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 14
        },
        "chat_mate\\core\\AgentDispatcher.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_config",
                "add_task",
                "_start_workers",
                "_worker_loop",
                "_get_next_task",
                "_can_execute_task",
                "_execute_task",
                "_dispatch_to_agent",
                "_execute_social_task",
                "_execute_chat_task",
                "_execute_reinforcement_task",
                "_execute_refactor_task",
                "_execute_test_task",
                "_execute_doc_task",
                "_retry_task",
                "_allocate_resources",
                "_release_resources",
                "_update_performance_metrics",
                "get_task_status",
                "cancel_task",
                "get_performance_metrics",
                "shutdown",
                "__enter__",
                "__exit__"
            ],
            "classes": {
                "TaskPriority": {
                    "methods": [],
                    "docstring": "Task priority levels for intelligent dispatching.",
                    "base_classes": [
                        "Enum"
                    ]
                },
                "TaskStatus": {
                    "methods": [],
                    "docstring": "Possible states for a task in the system.",
                    "base_classes": [
                        "Enum"
                    ]
                },
                "Task": {
                    "methods": [],
                    "docstring": "Represents a task in the system with metadata.",
                    "base_classes": []
                },
                "AgentDispatcher": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "add_task",
                        "_start_workers",
                        "_worker_loop",
                        "_get_next_task",
                        "_can_execute_task",
                        "_execute_task",
                        "_dispatch_to_agent",
                        "_execute_social_task",
                        "_execute_chat_task",
                        "_execute_reinforcement_task",
                        "_execute_refactor_task",
                        "_execute_test_task",
                        "_execute_doc_task",
                        "_retry_task",
                        "_allocate_resources",
                        "_release_resources",
                        "_update_performance_metrics",
                        "get_task_status",
                        "cancel_task",
                        "get_performance_metrics",
                        "shutdown",
                        "__enter__",
                        "__exit__"
                    ],
                    "docstring": "Enhanced Agent Dispatcher that orchestrates tasks across different engines\nwith intelligent prioritization and task management.\n\nFeatures:\n- Priority-based task scheduling\n- Dependency resolution\n- Automatic retries with backoff\n- Resource management\n- Task batching and optimization\n- Real-time monitoring\n- Performance analytics",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 50
        },
        "chat_mate\\core\\CycleExecutionService.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "run_cycle"
            ],
            "classes": {
                "CycleExecutionService": {
                    "methods": [
                        "__init__",
                        "run_cycle"
                    ],
                    "docstring": "Handles prompt cycle execution and orchestration in a scalable way using dependency injection.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 4
        },
        "chat_mate\\core\\FileLogger.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_log_file",
                "_rotate_logs",
                "_write_log",
                "log",
                "log_error",
                "log_debug",
                "log_event",
                "log_system_event"
            ],
            "classes": {
                "FileLogger": {
                    "methods": [
                        "__init__",
                        "_get_log_file",
                        "_rotate_logs",
                        "_write_log",
                        "log",
                        "log_error",
                        "log_debug",
                        "log_event",
                        "log_system_event"
                    ],
                    "docstring": "Logger implementation for file output with rotation.",
                    "base_classes": [
                        "ILoggingAgent"
                    ]
                }
            },
            "routes": [],
            "complexity": 18
        },
        "chat_mate\\core\\MemoryManager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_initialize_db",
                "record_interaction",
                "initialize_conversation",
                "get_conversation",
                "close",
                "__init__",
                "_load_memory",
                "_backup_corrupted_file",
                "_create_initial_memory",
                "_save_memory",
                "_validate_memory",
                "_backup_file",
                "set",
                "get",
                "delete",
                "clear_segment",
                "get_segment_keys",
                "get_segment_size",
                "_save_segment",
                "optimize",
                "get_stats",
                "get_user_history",
                "clear_user_history",
                "clear_platform_history",
                "record_interaction",
                "initialize_conversation",
                "retrieve_conversation",
                "export_conversation_for_finetuning",
                "user_sentiment_summary",
                "_track_user_interaction",
                "generate_narrative",
                "update_context",
                "close"
            ],
            "classes": {
                "DatabaseManager": {
                    "methods": [
                        "__init__",
                        "_initialize_db",
                        "record_interaction",
                        "initialize_conversation",
                        "get_conversation",
                        "close"
                    ],
                    "docstring": "DatabaseManager stores interactions and conversation metadata for\nlong-term retention using SQLite.",
                    "base_classes": []
                },
                "MemoryManager": {
                    "methods": [
                        "__init__",
                        "_load_memory",
                        "_backup_corrupted_file",
                        "_create_initial_memory",
                        "_save_memory",
                        "_validate_memory",
                        "_backup_file",
                        "set",
                        "get",
                        "delete",
                        "clear_segment",
                        "get_segment_keys",
                        "get_segment_size",
                        "_save_segment",
                        "optimize",
                        "get_stats",
                        "get_user_history",
                        "clear_user_history",
                        "clear_platform_history",
                        "record_interaction",
                        "initialize_conversation",
                        "retrieve_conversation",
                        "export_conversation_for_finetuning",
                        "user_sentiment_summary",
                        "_track_user_interaction",
                        "generate_narrative",
                        "update_context",
                        "close"
                    ],
                    "docstring": "MemoryManager combines:\n  - LRU caching + zlib compression for short-term memory\n  - JSON-based loading/saving with schema validation + backup on corruption\n  - SQLite-based long-term storage of interactions\n  - Conversation/interaction management\n  - Narrative generation via Jinja2 templates",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 68
        },
        "chat_mate\\core\\PromptEngine.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "send_prompt",
                "fetch_response",
                "wait_for_stable_response",
                "log_ai_response",
                "clean_response",
                "__init__",
                "_load_config",
                "execute_prompt",
                "_get_optimized_prompt",
                "_optimize_prompt",
                "_enhance_prompt",
                "_execute_with_retry",
                "_analyze_response",
                "_assess_creativity",
                "_assess_technical_accuracy",
                "_record_feedback",
                "_calculate_feedback_score",
                "_update_stats",
                "get_stats"
            ],
            "classes": {
                "PromptEngine": {
                    "methods": [
                        "__init__",
                        "_load_config",
                        "execute_prompt",
                        "_get_optimized_prompt",
                        "_optimize_prompt",
                        "_enhance_prompt",
                        "_execute_with_retry",
                        "_analyze_response",
                        "_assess_creativity",
                        "_assess_technical_accuracy",
                        "_record_feedback",
                        "_calculate_feedback_score",
                        "_update_stats",
                        "get_stats"
                    ],
                    "docstring": "Centralized prompt execution engine that:\n  - Retrieves and optionally optimizes a prompt template.\n  - Executes the prompt via a lower-level PromptEngine with automatic retry and exponential backoff.\n  - Analyzes the response and records feedback.\n  - Maintains performance statistics.",
                    "base_classes": []
                },
                "PromptExecutionError": {
                    "methods": [],
                    "docstring": "Raised when prompt execution fails.",
                    "base_classes": [
                        "Exception"
                    ]
                }
            },
            "routes": [],
            "complexity": 34
        },
        "chat_mate\\core\\UnifiedFeedbackMemory.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "to_dict",
                "from_dict",
                "__init__",
                "add_feedback",
                "get_feedback",
                "get_context_stats",
                "_update_stats",
                "_prune_memory",
                "load",
                "save",
                "analyze_feedback",
                "_filter_by_timeframe"
            ],
            "classes": {
                "FeedbackEntry": {
                    "methods": [
                        "__init__",
                        "to_dict",
                        "from_dict"
                    ],
                    "docstring": "Structured feedback entry for reinforcement learning.",
                    "base_classes": []
                },
                "UnifiedFeedbackMemory": {
                    "methods": [
                        "__init__",
                        "add_feedback",
                        "get_feedback",
                        "get_context_stats",
                        "_update_stats",
                        "_prune_memory",
                        "load",
                        "save",
                        "analyze_feedback",
                        "_filter_by_timeframe"
                    ],
                    "docstring": "Centralized reinforcement learning memory system.\nFeatures:\n- Thread-safe operations\n- Memory segmentation by context\n- Real-time feedback processing\n- Automatic memory pruning\n- Score-based filtering\n- Context-aware learning",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 26
        },
        "chat_mate\\core\\UnifiedLoggingAgent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "log",
                "_setup_log_directories",
                "_setup_file_handler",
                "log_ai_output",
                "log_social",
                "log_system_event",
                "get_logs",
                "_matches_filters",
                "log_error",
                "log_debug",
                "log_event"
            ],
            "classes": {
                "UnifiedLoggingAgent": {
                    "methods": [
                        "__init__",
                        "log",
                        "_setup_log_directories",
                        "_setup_file_handler",
                        "log_ai_output",
                        "log_social",
                        "log_system_event",
                        "get_logs",
                        "_matches_filters",
                        "log_error",
                        "log_debug",
                        "log_event"
                    ],
                    "docstring": "Centralized logging system for ChatMate that handles all logging operations.\nFeatures:\n- Thread-safe logging operations\n- Multiple output formats (text, JSON, JSONL)\n- Structured logging with metadata\n- Integration with FileManager for consistent file operations\n- Real-time logging with rotation support\n- Domain-specific logging (AI outputs, social interactions, system events)",
                    "base_classes": [
                        "ILoggingAgent"
                    ]
                }
            },
            "routes": [],
            "complexity": 24
        },
        "chat_mate\\core\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "chat_mate\\core\\Agents\\AgentDispatcher.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start",
                "stop",
                "event_loop",
                "add_task",
                "_handle_task",
                "_execute_prompts_on_chat",
                "_review_memory"
            ],
            "classes": {
                "AgentDispatcher": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop",
                        "event_loop",
                        "add_task",
                        "_handle_task",
                        "_execute_prompts_on_chat",
                        "_review_memory"
                    ],
                    "docstring": "Orchestrates and manages all system agents. Handles task distribution,\nlifecycle management, and communication between agents.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 16
        },
        "chat_mate\\core\\Agents\\chat_scraper_agent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "handle_task",
                "get_all_chats",
                "filter_chats",
                "validate_login",
                "manual_login_flow"
            ],
            "classes": {
                "ChatScraperAgent": {
                    "methods": [
                        "__init__",
                        "handle_task",
                        "get_all_chats",
                        "filter_chats",
                        "validate_login",
                        "manual_login_flow"
                    ],
                    "docstring": "ChatScraperAgent: Autonomous agent responsible for scraping chat metadata.",
                    "base_classes": [
                        "BaseAgent"
                    ]
                }
            },
            "routes": [],
            "complexity": 12
        },
        "chat_mate\\core\\Agents\\DocAgent.py": {
            "language": ".py",
            "functions": [
                "run_task",
                "generate_docs"
            ],
            "classes": {
                "DocAgent": {
                    "methods": [
                        "run_task",
                        "generate_docs"
                    ],
                    "docstring": "Agent for handling documentation generation tasks.",
                    "base_classes": [
                        "CursorAgentInterface"
                    ]
                }
            },
            "routes": [],
            "complexity": 4
        },
        "chat_mate\\core\\Agents\\ReinforcementEvaluator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "evaluate_task",
                "optimize_agent",
                "_calculate_code_quality",
                "_calculate_test_coverage",
                "_calculate_doc_coverage",
                "_calculate_performance",
                "_calculate_maintainability",
                "_generate_optimization_suggestions",
                "_update_agent_config"
            ],
            "classes": {
                "EvaluationMetrics": {
                    "methods": [],
                    "docstring": "Metrics for evaluating agent performance.",
                    "base_classes": []
                },
                "ReinforcementEvaluator": {
                    "methods": [
                        "__init__",
                        "evaluate_task",
                        "optimize_agent",
                        "_calculate_code_quality",
                        "_calculate_test_coverage",
                        "_calculate_doc_coverage",
                        "_calculate_performance",
                        "_calculate_maintainability",
                        "_generate_optimization_suggestions",
                        "_update_agent_config"
                    ],
                    "docstring": "Evaluates and optimizes agent performance through reinforcement learning.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 20
        },
        "chat_mate\\core\\Agents\\TestAgent.py": {
            "language": ".py",
            "functions": [
                "run_task",
                "run_tests"
            ],
            "classes": {
                "TestAgent": {
                    "methods": [
                        "run_task",
                        "run_tests"
                    ],
                    "docstring": "Agent for handling test generation tasks.",
                    "base_classes": [
                        "CursorAgentInterface"
                    ]
                }
            },
            "routes": [],
            "complexity": 4
        },
        "chat_mate\\core\\chatgpt_automation\\bot_worker.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_login_with_retries",
                "run",
                "process_task",
                "_revalidate_session",
                "shutdown"
            ],
            "classes": {
                "BotWorker": {
                    "methods": [
                        "__init__",
                        "_login_with_retries",
                        "run",
                        "process_task",
                        "_revalidate_session",
                        "shutdown"
                    ],
                    "docstring": "A threaded worker that processes tasks using OpenAIClient.\nHandles login sessions, periodic revalidation, and task execution.\n\nThis implementation supports:\n  - Robust login with retries\n  - Graceful handling of task exceptions\n  - Periodic session revalidation for long-running tasks\n  - Scalability for beta and production environments",
                    "base_classes": [
                        "threading.Thread"
                    ]
                }
            },
            "routes": [],
            "complexity": 12
        },
        "chat_mate\\core\\chatgpt_automation\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "chat_mate\\core\\chatgpt_automation\\models\\model_gpt4.py": {
            "language": ".py",
            "functions": [
                "process_with_gpt4",
                "register"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "chat_mate\\core\\chatgpt_automation\\models\\model_gpt4o.py": {
            "language": ".py",
            "functions": [
                "process_with_gpt4o",
                "register"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "chat_mate\\core\\chatgpt_automation\\models\\model_gpt4o_mini.py": {
            "language": ".py",
            "functions": [
                "process_with_gpt4o_mini",
                "register"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "chat_mate\\core\\chatgpt_automation\\models\\model_gpt4_5.py": {
            "language": ".py",
            "functions": [
                "process_with_gpt4_5",
                "register"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "chat_mate\\core\\chatgpt_automation\\models\\model_o1.py": {
            "language": ".py",
            "functions": [
                "process_with_o1",
                "register"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "chat_mate\\core\\chatgpt_automation\\models\\model_o3_mini.py": {
            "language": ".py",
            "functions": [
                "process_with_o3mini",
                "register"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "chat_mate\\core\\chatgpt_automation\\models\\model_o3_mini_high.py": {
            "language": ".py",
            "functions": [
                "process_with_o3_mini_high",
                "register"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "chat_mate\\core\\chatgpt_automation\\models\\model_template.py": {
            "language": ".py",
            "functions": [
                "process_with_template",
                "register"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "chat_mate\\core\\chatgpt_automation\\views\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "chat_mate\\core\\chat_engine\\chat_cycle_controller.py": {
            "language": ".py",
            "functions": [
                "sanitize_filename",
                "__init__",
                "append_output",
                "start",
                "process_chat",
                "run_single_chat",
                "retrieve_project_context",
                "post_cycle_analysis",
                "_save_prompt_response",
                "_save_run_summary",
                "shutdown"
            ],
            "classes": {
                "ChatCycleController": {
                    "methods": [
                        "__init__",
                        "append_output",
                        "start",
                        "process_chat",
                        "run_single_chat",
                        "retrieve_project_context",
                        "post_cycle_analysis",
                        "_save_prompt_response",
                        "_save_run_summary",
                        "shutdown"
                    ],
                    "docstring": "Master orchestrator for chat scraping, prompt cycles,\nmemory updates, and Discord dispatching.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 21
        },
        "chat_mate\\core\\chat_engine\\discord_dispatcher.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_setup_events",
                "send_message",
                "dispatch_memory_update",
                "dispatch_dreamscape_episode",
                "dispatch_feedback_loop",
                "run_bot",
                "shutdown"
            ],
            "classes": {
                "DiscordDispatcher": {
                    "methods": [
                        "__init__",
                        "_setup_events",
                        "send_message",
                        "dispatch_memory_update",
                        "dispatch_dreamscape_episode",
                        "dispatch_feedback_loop",
                        "run_bot",
                        "shutdown"
                    ],
                    "docstring": "DiscordDispatcher - Manages communication to a Discord server.\nSends updates on system events, memory updates, and AI output.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 16
        },
        "chat_mate\\core\\logging\\ConsoleLogger.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_format_message",
                "debug",
                "info",
                "warning",
                "error",
                "critical",
                "log"
            ],
            "classes": {
                "ConsoleLogger": {
                    "methods": [
                        "__init__",
                        "_format_message",
                        "debug",
                        "info",
                        "warning",
                        "error",
                        "critical",
                        "log"
                    ],
                    "docstring": "A logger that outputs messages to the console with color formatting.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 16
        },
        "chat_mate\\core\\logging\\LoggingService.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_add_console_handler",
                "_add_file_handler",
                "add_custom_handler",
                "debug",
                "info",
                "warning",
                "error",
                "critical",
                "exception",
                "log_system_event",
                "set_level"
            ],
            "classes": {
                "LoggingService": {
                    "methods": [
                        "__init__",
                        "_add_console_handler",
                        "_add_file_handler",
                        "add_custom_handler",
                        "debug",
                        "info",
                        "warning",
                        "error",
                        "critical",
                        "exception",
                        "log_system_event",
                        "set_level"
                    ],
                    "docstring": "Centralized logging service that provides standardized logging capabilities\nacross the application. Supports multiple output destinations including\nconsole, file, and custom handlers.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 24
        },
        "chat_mate\\core\\logging\\handlers\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "chat_mate\\core\\logging\\services\\ai_output_service.py": {
            "language": ".py",
            "functions": [
                "log_ai_output",
                "sanitize_filename"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "chat_mate\\core\\refactor\\CursorSessionManager.py": {
            "language": ".py",
            "functions": [
                "_demo",
                "__init__",
                "_load_or_calibrate_coords",
                "_save_calibrated_coords",
                "_calibrate",
                "queue_task",
                "start_loop",
                "stop_loop",
                "accept_next_task",
                "toggle_auto_accept",
                "set_on_update_callback",
                "build_prompt_batch",
                "run_overnight_mode",
                "_task_loop",
                "_execute_task",
                "_inject_context",
                "_focus_cursor_window",
                "_click_coordinate",
                "_type_prompt_and_send",
                "_wait_for_response",
                "shutdown"
            ],
            "classes": {
                "CursorSessionManager": {
                    "methods": [
                        "__init__",
                        "_load_or_calibrate_coords",
                        "_save_calibrated_coords",
                        "_calibrate",
                        "queue_task",
                        "start_loop",
                        "stop_loop",
                        "accept_next_task",
                        "toggle_auto_accept",
                        "set_on_update_callback",
                        "build_prompt_batch",
                        "run_overnight_mode",
                        "_task_loop",
                        "_execute_task",
                        "_inject_context",
                        "_focus_cursor_window",
                        "_click_coordinate",
                        "_type_prompt_and_send",
                        "_wait_for_response",
                        "shutdown"
                    ],
                    "docstring": "Unified class that handles:\n  1) UI calibration for Cursor (prompt box + accept button)\n  2) Task queueing with auto/manual acceptance\n  3) Batch prompt building (optional)\n  4) Dynamic wait for 'Accept' detection\n  5) Execution history of tasks",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 41
        },
        "chat_mate\\core\\services\\fix_service.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "apply_fix",
                "fix_issue",
                "_log_fix",
                "_get_current_timestamp"
            ],
            "classes": {
                "FixService": {
                    "methods": [
                        "__init__",
                        "apply_fix",
                        "fix_issue",
                        "_log_fix",
                        "_get_current_timestamp"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 10
        },
        "chat_mate\\core\\services\\discord\\DiscordTemplateManager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_resolve_template_dir",
                "render_message",
                "list_templates"
            ],
            "classes": {
                "DiscordTemplateManager": {
                    "methods": [
                        "__init__",
                        "_resolve_template_dir",
                        "render_message",
                        "list_templates"
                    ],
                    "docstring": "Manages Discord templates using Jinja2.\n\nTemplate directory resolution order:\n1. Environment variable DISCORD_TEMPLATE_DIR\n2. New config system key: discord.template_dir\n3. Hard-coded fallback: \"templates/discord\"",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 8
        },
        "chat_mate\\core\\social\\AIChatAgent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "ask",
                "_ask_openai",
                "_ask_ollama",
                "_build_prompt",
                "_initialize_chat_thread",
                "append_to_chat_thread",
                "_log_interaction"
            ],
            "classes": {
                "AIChatAgent": {
                    "methods": [
                        "__init__",
                        "ask",
                        "_ask_openai",
                        "_ask_ollama",
                        "_build_prompt",
                        "_initialize_chat_thread",
                        "append_to_chat_thread",
                        "_log_interaction"
                    ],
                    "docstring": "AIChatAgent: Unified AI assistant optimized for context-rich, personalized interactions in Victor's voice.\nSupports OpenAI, local LLMs (Ollama), automatic ChatGPT thread creation, persistent memory logging, and fine-tuning dataset preparation.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 16
        },
        "chat_mate\\core\\social\\platform_login_manager.py": {
            "language": ".py",
            "functions": [
                "load_cookies",
                "save_cookies",
                "wait_for_manual_login",
                "__init__",
                "login",
                "post",
                "__init__",
                "dispatch_all",
                "_process_platform",
                "_generate_content",
                "_shutdown_all_drivers"
            ],
            "classes": {
                "PlatformStrategy": {
                    "methods": [
                        "__init__",
                        "login",
                        "post"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "SocialPlatformDispatcher": {
                    "methods": [
                        "__init__",
                        "dispatch_all",
                        "_process_platform",
                        "_generate_content",
                        "_shutdown_all_drivers"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 19
        },
        "chat_mate\\core\\social\\social_config_wrapper.py": {
            "language": ".py",
            "functions": [
                "get_social_config"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "chat_mate\\core\\social\\social_post_db.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load",
                "_save",
                "_load_memory",
                "_save_memory",
                "update_memory",
                "get_memory",
                "add_to_queue",
                "mark_posted",
                "mark_failed",
                "get_next_post",
                "get_queue_length"
            ],
            "classes": {
                "SocialPostDatabase": {
                    "methods": [
                        "__init__",
                        "_load",
                        "_save",
                        "_load_memory",
                        "_save_memory",
                        "update_memory",
                        "get_memory",
                        "add_to_queue",
                        "mark_posted",
                        "mark_failed",
                        "get_next_post",
                        "get_queue_length"
                    ],
                    "docstring": "Manages the queue of social media posts.\nTracks pending, posted, and failed posts in a JSON database.\nAlso integrates with a persistent memory system to store global context.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 24
        },
        "chat_mate\\core\\social\\social_post_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "post_next",
                "post_all",
                "enqueue_post",
                "shutdown",
                "post_to_platform"
            ],
            "classes": {
                "SocialPostManager": {
                    "methods": [
                        "__init__",
                        "post_next",
                        "post_all",
                        "enqueue_post",
                        "shutdown"
                    ],
                    "docstring": "Manages posting of social media content across multiple platforms.\nSupports multi-threading for faster execution and centralized error handling.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 11
        },
        "chat_mate\\core\\social\\ai\\chat_agent.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "AIChatAgent": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 2
        },
        "chat_mate\\core\\social\\ai\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "chat_mate\\core\\social\\strategies\\ai_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze_sentiment",
                "_build_response_prompt",
                "_get_response_template",
                "_get_fallback_response",
                "_summarize_recent_content",
                "_get_sentiment_label",
                "_load_templates",
                "_load_history",
                "_track_response",
                "get_response_analytics"
            ],
            "classes": {
                "AIStrategy": {
                    "methods": [
                        "__init__",
                        "analyze_sentiment",
                        "_build_response_prompt",
                        "_get_response_template",
                        "_get_fallback_response",
                        "_summarize_recent_content",
                        "_get_sentiment_label",
                        "_load_templates",
                        "_load_history",
                        "_track_response",
                        "get_response_analytics"
                    ],
                    "docstring": "Enhanced AI strategy for community management and content generation.\nHandles all AI-related tasks including:\n- Content generation\n- Comment responses\n- Engagement prompts\n- Sentiment analysis\n- Content optimization",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 22
        },
        "chat_mate\\core\\social\\strategies\\base_platform_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "analyze_comment_sentiment",
                "reinforce_engagement",
                "reward_top_engagers",
                "cross_platform_feedback_loop",
                "run_feedback_loop",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction"
            ],
            "classes": {
                "BasePlatformStrategy": {
                    "methods": [
                        "__init__",
                        "_load_feedback_data",
                        "_save_feedback_data",
                        "analyze_engagement_metrics",
                        "analyze_comment_sentiment",
                        "reinforce_engagement",
                        "reward_top_engagers",
                        "cross_platform_feedback_loop",
                        "run_feedback_loop",
                        "initialize",
                        "cleanup",
                        "get_community_metrics",
                        "get_top_members",
                        "track_member_interaction"
                    ],
                    "docstring": "Base class for all platform-specific strategies.\nProvides common functionality for:\n- Feedback tracking and metrics\n- Sentiment analysis\n- Engagement reinforcement\n- Cross-platform data integration\n- Reward systems",
                    "base_classes": [
                        "ABC"
                    ]
                }
            },
            "routes": [],
            "complexity": 28
        },
        "chat_mate\\core\\social\\strategies\\community_scheduler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "schedule_task",
                "schedule_engagement_check",
                "schedule_ai_responses",
                "schedule_daily_report",
                "_check_engagement",
                "_load_schedules",
                "_save_schedules",
                "_is_comment_processed",
                "_mark_comment_processed",
                "start",
                "stop"
            ],
            "classes": {
                "CommunityScheduler": {
                    "methods": [
                        "__init__",
                        "schedule_task",
                        "schedule_engagement_check",
                        "schedule_ai_responses",
                        "schedule_daily_report",
                        "_check_engagement",
                        "_load_schedules",
                        "_save_schedules",
                        "_is_comment_processed",
                        "_mark_comment_processed",
                        "start",
                        "stop"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 24
        },
        "chat_mate\\core\\social\\strategies\\config_loader.py": {
            "language": ".py",
            "functions": [
                "load_yaml_config",
                "load_json_config",
                "load_configs",
                "get_nested",
                "get_env_or_config",
                "reload_configs"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "chat_mate\\core\\social\\strategies\\context_db.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "create_tables",
                "log_post",
                "fetch_recent_posts",
                "fetch_last_post_content",
                "log_engagement",
                "fetch_engagements_for_post",
                "get_rate_limit",
                "update_rate_limit",
                "update_sentiment",
                "close"
            ],
            "classes": {
                "UnifiedContextEngine": {
                    "methods": [
                        "__init__",
                        "create_tables",
                        "log_post",
                        "fetch_recent_posts",
                        "fetch_last_post_content",
                        "log_engagement",
                        "fetch_engagements_for_post",
                        "get_rate_limit",
                        "update_rate_limit",
                        "update_sentiment",
                        "close"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 22
        },
        "chat_mate\\core\\social\\strategies\\facebook_strategy.py": {
            "language": ".py",
            "functions": [
                "retry_on_failure",
                "get_random_user_agent",
                "start_scheduler",
                "post_to_facebook",
                "decorator_retry",
                "__init__",
                "_wait",
                "get_driver",
                "is_logged_in",
                "login",
                "post",
                "like_posts",
                "comment_on_posts",
                "follow_users",
                "unfollow_non_returners",
                "_log_followed_users",
                "go_viral",
                "run_daily_session",
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "get_random_user_agent",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "adaptive_posting_strategy",
                "analyze_comment_sentiment",
                "reinforce_engagement",
                "reward_top_followers",
                "cross_platform_feedback_loop",
                "run_feedback_loop",
                "wrapper_retry"
            ],
            "classes": {
                "FacebookBot": {
                    "methods": [
                        "__init__",
                        "_wait",
                        "get_driver",
                        "is_logged_in",
                        "login",
                        "post"
                    ],
                    "docstring": "Automates Facebook login and posting.\nThis base class handles authentication and AI-powered post creation.",
                    "base_classes": []
                },
                "FacebookEngagementBot": {
                    "methods": [
                        "like_posts",
                        "comment_on_posts",
                        "follow_users",
                        "unfollow_non_returners",
                        "_log_followed_users",
                        "go_viral",
                        "run_daily_session"
                    ],
                    "docstring": "Extends FacebookBot with essential community building functions:\n  - Like posts, comment, follow/unfollow users, and viral engagement.\n  - Maintains a FOLLOW_DB to track engagements.\n  - Runs daily engagement sessions.",
                    "base_classes": [
                        "FacebookBot"
                    ]
                },
                "FacebookStrategy": {
                    "methods": [
                        "__init__",
                        "initialize",
                        "cleanup",
                        "get_community_metrics",
                        "get_top_members",
                        "track_member_interaction",
                        "_get_driver",
                        "get_random_user_agent",
                        "_wait",
                        "login",
                        "is_logged_in",
                        "post_content",
                        "run_daily_strategy_session",
                        "_load_feedback_data",
                        "_save_feedback_data",
                        "analyze_engagement_metrics",
                        "adaptive_posting_strategy",
                        "analyze_comment_sentiment",
                        "reinforce_engagement",
                        "reward_top_followers",
                        "cross_platform_feedback_loop",
                        "run_feedback_loop"
                    ],
                    "docstring": "Centralized strategy class for managing Facebook automation and community building.\nExtends BasePlatformStrategy with Facebook-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops using ChatGPT responses\n  - Reward system for top engaging followers\n  - Cross-platform feedback integration",
                    "base_classes": [
                        "BasePlatformStrategy"
                    ]
                }
            },
            "routes": [],
            "complexity": 76
        },
        "chat_mate\\core\\social\\strategies\\linkedin_strategy.py": {
            "language": ".py",
            "functions": [
                "retry_on_failure",
                "decorator_retry",
                "__init__",
                "_get_driver",
                "get_random_user_agent",
                "_wait",
                "login",
                "is_logged_in",
                "_login_with_credentials",
                "post",
                "like_posts",
                "comment_on_posts",
                "follow_users",
                "unfollow_non_returners",
                "go_viral",
                "_log_followed_users",
                "_find_posts",
                "_find_like_button",
                "_find_comment_box",
                "_find_profile_url",
                "_find_follow_button",
                "_find_unfollow_button",
                "run_daily_session",
                "__init__",
                "is_logged_in",
                "_login_with_credentials",
                "post",
                "_find_posts",
                "_find_like_button",
                "_find_comment_box",
                "_find_profile_url",
                "_find_follow_button",
                "_find_unfollow_button",
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "get_random_user_agent",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "wrapper_retry"
            ],
            "classes": {
                "BaseEngagementBot": {
                    "methods": [
                        "__init__",
                        "_get_driver",
                        "get_random_user_agent",
                        "_wait",
                        "login",
                        "is_logged_in",
                        "_login_with_credentials",
                        "post",
                        "like_posts",
                        "comment_on_posts",
                        "follow_users",
                        "unfollow_non_returners",
                        "go_viral",
                        "_log_followed_users",
                        "_find_posts",
                        "_find_like_button",
                        "_find_comment_box",
                        "_find_profile_url",
                        "_find_follow_button",
                        "_find_unfollow_button",
                        "run_daily_session"
                    ],
                    "docstring": "A universal base class for social media engagement bots.\nProvides core community building functions:\n  - Login (with cookie & credential fallback)\n  - Post content (AI-generated if needed)\n  - Like, comment, follow, unfollow, viral engagement, and DM functionalities\n  - Daily session orchestration",
                    "base_classes": [
                        "ABC"
                    ]
                },
                "LinkedInEngagementBot": {
                    "methods": [
                        "__init__",
                        "is_logged_in",
                        "_login_with_credentials",
                        "post",
                        "_find_posts",
                        "_find_like_button",
                        "_find_comment_box",
                        "_find_profile_url",
                        "_find_follow_button",
                        "_find_unfollow_button"
                    ],
                    "docstring": "LinkedIn-specific implementation of BaseEngagementBot.\nImplements abstract methods using LinkedIn's DOM structure.",
                    "base_classes": [
                        "BaseEngagementBot"
                    ]
                },
                "LinkedinStrategy": {
                    "methods": [
                        "__init__",
                        "initialize",
                        "cleanup",
                        "get_community_metrics",
                        "get_top_members",
                        "track_member_interaction",
                        "_get_driver",
                        "get_random_user_agent",
                        "_wait",
                        "login",
                        "is_logged_in",
                        "post_content",
                        "run_daily_strategy_session"
                    ],
                    "docstring": "Centralized strategy class for LinkedIn automation and community building.\nExtends BasePlatformStrategy with LinkedIn-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops using ChatGPT responses\n  - Reward system for top engaging followers\n  - Cross-platform feedback integration",
                    "base_classes": [
                        "BasePlatformStrategy"
                    ]
                }
            },
            "routes": [],
            "complexity": 91
        },
        "chat_mate\\core\\social\\strategies\\instagram_strategy.py": {
            "language": ".py",
            "functions": [
                "retry_on_failure",
                "get_random_mobile_user_agent",
                "start_scheduler",
                "post_to_instagram",
                "decorator_retry",
                "__init__",
                "get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "create_post",
                "like_posts",
                "comment_on_posts",
                "_gather_post_links",
                "follow_users",
                "unfollow_user",
                "__init__",
                "run_daily_session",
                "generate_ai_comments",
                "like_posts",
                "comment_on_posts",
                "follow_users",
                "unfollow_non_returners",
                "_log_followed_users",
                "go_viral",
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "analyze_comment_sentiment",
                "reinforce_engagement",
                "reward_top_engagers",
                "cross_platform_feedback_loop",
                "run_feedback_loop",
                "wrapper_retry"
            ],
            "classes": {
                "InstagramBot": {
                    "methods": [
                        "__init__",
                        "get_driver",
                        "_wait",
                        "login",
                        "is_logged_in",
                        "create_post",
                        "like_posts",
                        "comment_on_posts",
                        "_gather_post_links",
                        "follow_users",
                        "unfollow_user"
                    ],
                    "docstring": "Automates Instagram login, posting, and engagement actions using Selenium.\nUses mobile emulation (Pixel 5) to enable posting via Instagram's mobile interface.",
                    "base_classes": []
                },
                "InstagramEngagementBot": {
                    "methods": [
                        "__init__",
                        "run_daily_session",
                        "generate_ai_comments",
                        "like_posts",
                        "comment_on_posts",
                        "follow_users",
                        "unfollow_non_returners",
                        "_log_followed_users",
                        "go_viral"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "InstagramStrategy": {
                    "methods": [
                        "__init__",
                        "initialize",
                        "cleanup",
                        "get_community_metrics",
                        "get_top_members",
                        "track_member_interaction",
                        "_get_driver",
                        "_wait",
                        "login",
                        "is_logged_in",
                        "post_content",
                        "run_daily_strategy_session",
                        "_load_feedback_data",
                        "_save_feedback_data",
                        "analyze_engagement_metrics",
                        "analyze_comment_sentiment",
                        "reinforce_engagement",
                        "reward_top_engagers",
                        "cross_platform_feedback_loop",
                        "run_feedback_loop"
                    ],
                    "docstring": "Centralized strategy class for Instagram automation and community building.\nExtends BasePlatformStrategy with Instagram-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops using ChatGPT responses\n  - Reward system for top engaging followers\n  - Cross-platform feedback integration",
                    "base_classes": [
                        "BasePlatformStrategy"
                    ]
                }
            },
            "routes": [],
            "complexity": 86
        },
        "chat_mate\\core\\social\\strategies\\tiktok_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_video",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "run_feedback_loop",
                "adaptive_posting_strategy",
                "update_trending_hashtags",
                "reward_top_creators",
                "cross_platform_feedback_loop"
            ],
            "classes": {
                "TikTokStrategy": {
                    "methods": [
                        "__init__",
                        "initialize",
                        "cleanup",
                        "get_community_metrics",
                        "get_top_members",
                        "track_member_interaction",
                        "_get_driver",
                        "_wait",
                        "login",
                        "is_logged_in",
                        "post_video",
                        "run_daily_strategy_session",
                        "_load_feedback_data",
                        "_save_feedback_data",
                        "analyze_engagement_metrics",
                        "run_feedback_loop",
                        "adaptive_posting_strategy",
                        "update_trending_hashtags",
                        "reward_top_creators",
                        "cross_platform_feedback_loop"
                    ],
                    "docstring": "Centralized strategy class for TikTok automation and community building.\nExtends BasePlatformStrategy with TikTok-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Video content scheduling and posting\n  - Hashtag trend analysis and optimization\n  - Cross-platform content repurposing\n  - Engagement analytics and community growth tracking",
                    "base_classes": [
                        "BasePlatformStrategy"
                    ]
                }
            },
            "routes": [],
            "complexity": 40
        },
        "chat_mate\\core\\social\\strategies\\twitter_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "login",
                "is_logged_in",
                "post_tweet",
                "post_thread",
                "_extract_tweet_id",
                "engage_community",
                "_follow_author",
                "_log_follow",
                "unfollow_non_returners",
                "run_daily_session",
                "post_thread",
                "__init__",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "adaptive_posting_strategy",
                "analyze_comment_sentiment",
                "reinforce_engagement",
                "reward_top_engagers",
                "cross_platform_feedback_loop",
                "run_feedback_loop",
                "run_daily_strategy_session"
            ],
            "classes": {
                "TwitterCommunityArchitect": {
                    "methods": [
                        "__init__",
                        "login",
                        "is_logged_in",
                        "post_tweet",
                        "post_thread",
                        "_extract_tweet_id",
                        "engage_community",
                        "_follow_author",
                        "_log_follow",
                        "unfollow_non_returners",
                        "run_daily_session",
                        "post_thread"
                    ],
                    "docstring": "Ultimate Twitter Engagement Bot.\nCombines posting, commenting, following, and adaptive AI-powered interactions.",
                    "base_classes": []
                },
                "TwitterStrategy": {
                    "methods": [
                        "__init__",
                        "_load_feedback_data",
                        "_save_feedback_data",
                        "analyze_engagement_metrics",
                        "adaptive_posting_strategy",
                        "analyze_comment_sentiment",
                        "reinforce_engagement",
                        "reward_top_engagers",
                        "cross_platform_feedback_loop",
                        "run_feedback_loop",
                        "run_daily_strategy_session"
                    ],
                    "docstring": "Centralized strategy class for Twitter automation and community building.\nExtends TwitterCommunityArchitect with:\n  - Dynamic feedback loops for engagement metrics analysis.\n  - AI sentiment analysis & reinforcement loops.\n  - Reward system for top engagers.\n  - Cross-platform feedback integration.",
                    "base_classes": [
                        "TwitterCommunityArchitect"
                    ]
                }
            },
            "routes": [],
            "complexity": 46
        },
        "chat_mate\\cursor_prompts\\ollama_tests\\test_chat_mate.py": {
            "language": ".py",
            "functions": [
                "test_placeholder"
            ],
            "classes": {
                "PlaceholderTest": {
                    "methods": [
                        "test_placeholder"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 2
        },
        "chat_mate\\cursor_prompts\\ollama_tests\\test_extract_unused_code_safely.py": {
            "language": ".py",
            "functions": [
                "test_placeholder"
            ],
            "classes": {
                "PlaceholderTest": {
                    "methods": [
                        "test_placeholder"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 2
        },
        "chat_mate\\cursor_prompts\\ollama_tests\\test_generate_dependency_graph.py": {
            "language": ".py",
            "functions": [
                "test_placeholder"
            ],
            "classes": {
                "PlaceholderTest": {
                    "methods": [
                        "test_placeholder"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 2
        },
        "chat_mate\\interfaces\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "chat_mate\\interfaces\\pyqt\\dreamscape_gui.py": {
            "language": ".py",
            "functions": [
                "initialize_services",
                "initialize_community_manager",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "chat_mate\\interfaces\\pyqt\\dreamscape_ui_logic.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "set_output_signal",
                "set_discord_log_signal",
                "set_status_update_signal",
                "_output",
                "_discord_log",
                "_update_status",
                "get_service",
                "is_service_available",
                "execute_prompt",
                "save_prompts",
                "reset_prompts",
                "execute_single_prompt",
                "run_single_chat_mode",
                "run_multi_chat_mode",
                "start_prompt_cycle",
                "load_prompt",
                "save_prompt",
                "launch_discord_bot",
                "stop_discord_bot",
                "run_prompt_tuning",
                "analyze_execution_response",
                "shutdown",
                "worker",
                "worker"
            ],
            "classes": {
                "DreamscapeUILogic": {
                    "methods": [
                        "__init__",
                        "set_output_signal",
                        "set_discord_log_signal",
                        "set_status_update_signal",
                        "_output",
                        "_discord_log",
                        "_update_status",
                        "get_service",
                        "is_service_available",
                        "execute_prompt",
                        "save_prompts",
                        "reset_prompts",
                        "execute_single_prompt",
                        "run_single_chat_mode",
                        "run_multi_chat_mode",
                        "start_prompt_cycle",
                        "load_prompt",
                        "save_prompt",
                        "launch_discord_bot",
                        "stop_discord_bot",
                        "run_prompt_tuning",
                        "analyze_execution_response",
                        "shutdown"
                    ],
                    "docstring": "Bridges UI interactions with backend services.\nProvides async support and emits signals for UI updates.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 48
        },
        "chat_mate\\interfaces\\pyqt\\feedback_dashboard.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initUI",
                "refresh_dashboard",
                "update_display"
            ],
            "classes": {
                "FeedbackDashboard": {
                    "methods": [
                        "__init__",
                        "initUI",
                        "refresh_dashboard",
                        "update_display"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QWidget"
                    ]
                }
            },
            "routes": [],
            "complexity": 8
        },
        "chat_mate\\interfaces\\pyqt\\components\\discord_tab.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_connect_signals",
                "initUI",
                "_create_discord_group",
                "update_status",
                "append_log",
                "get_bot_config",
                "_on_task_done",
                "handle_discord_event",
                "handle_dreamscape_generated",
                "handle_prompt_executed"
            ],
            "classes": {
                "DiscordTab": {
                    "methods": [
                        "__init__",
                        "_connect_signals",
                        "initUI",
                        "_create_discord_group",
                        "update_status",
                        "append_log",
                        "get_bot_config",
                        "_on_task_done",
                        "handle_discord_event",
                        "handle_dreamscape_generated",
                        "handle_prompt_executed"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QWidget"
                    ]
                }
            },
            "routes": [],
            "complexity": 22
        },
        "chat_mate\\interfaces\\pyqt\\components\\logs_panel.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initUI",
                "append_log",
                "clear_logs",
                "export_logs",
                "get_logs"
            ],
            "classes": {
                "LogsPanel": {
                    "methods": [
                        "__init__",
                        "initUI",
                        "append_log",
                        "clear_logs",
                        "export_logs",
                        "get_logs"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QWidget"
                    ]
                }
            },
            "routes": [],
            "complexity": 12
        },
        "chat_mate\\interfaces\\pyqt\\components\\logs_tab.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initUI",
                "append_log",
                "clear_logs",
                "get_logs"
            ],
            "classes": {
                "LogsTab": {
                    "methods": [
                        "__init__",
                        "initUI",
                        "append_log",
                        "clear_logs",
                        "get_logs"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QWidget"
                    ]
                }
            },
            "routes": [],
            "complexity": 10
        },
        "chat_mate\\interfaces\\pyqt\\components\\prompt_panel.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "setup_ui",
                "load_sample_prompts",
                "_add_prompt_to_list",
                "on_prompt_selected",
                "save_prompt",
                "use_prompt",
                "add_custom_prompt",
                "remove_custom_prompt",
                "get_prompt_text",
                "set_prompt_text"
            ],
            "classes": {
                "PromptPanel": {
                    "methods": [
                        "__init__",
                        "setup_ui",
                        "load_sample_prompts",
                        "_add_prompt_to_list",
                        "on_prompt_selected",
                        "save_prompt",
                        "use_prompt",
                        "add_custom_prompt",
                        "remove_custom_prompt",
                        "get_prompt_text",
                        "set_prompt_text"
                    ],
                    "docstring": "Panel for managing and executing prompts",
                    "base_classes": [
                        "QWidget"
                    ]
                }
            },
            "routes": [],
            "complexity": 22
        },
        "chat_mate\\interfaces\\pyqt\\components\\dialogs\\reinforcement_dialog.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initUI",
                "load_feedback",
                "display_feedback_details",
                "export_feedback",
                "clear_feedback",
                "auto_tune_prompts"
            ],
            "classes": {
                "ReinforcementToolsDialog": {
                    "methods": [
                        "__init__",
                        "initUI",
                        "load_feedback",
                        "display_feedback_details",
                        "export_feedback",
                        "clear_feedback",
                        "auto_tune_prompts"
                    ],
                    "docstring": "Dialog window for reinforcement learning tools.\nProvides prompt feedback review, tuning, and export functionality.",
                    "base_classes": [
                        "QDialog"
                    ]
                }
            },
            "routes": [],
            "complexity": 14
        },
        "chat_mate\\interfaces\\pyqt\\tabs\\LogsTab.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initUI",
                "load_log_files",
                "load_selected_log",
                "filter_logs",
                "append_log",
                "append_output",
                "clear_logs"
            ],
            "classes": {
                "LogsTab": {
                    "methods": [
                        "__init__",
                        "initUI",
                        "load_log_files",
                        "load_selected_log",
                        "filter_logs",
                        "append_log",
                        "append_output",
                        "clear_logs"
                    ],
                    "docstring": "Provides a unified interface for viewing, filtering, and managing logs.",
                    "base_classes": [
                        "QWidget"
                    ]
                }
            },
            "routes": [],
            "complexity": 16
        },
        "chat_mate\\interfaces\\pyqt\\tabs\\meredith_tab.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "cancel",
                "run",
                "__init__",
                "init_ui",
                "populate_model_selector",
                "switch_model",
                "log",
                "run_full_scan",
                "stop_scan",
                "on_scan_completed",
                "populate_results_table",
                "open_profile_in_browser",
                "export_results",
                "clear_results",
                "_reset_ui_for_new_scan",
                "toggle_visibility"
            ],
            "classes": {
                "ScraperThread": {
                    "methods": [
                        "__init__",
                        "cancel",
                        "run"
                    ],
                    "docstring": "A separate QThread to perform the Meredith scraping process off the main UI thread.\nThis prevents UI blocking while ScraperManager runs.\n\nSignals:\n    scan_completed (list): Emitted when scraping+filtering completes or is canceled/errored.\n    log_update (str): Emitted for logging messages to the UI.\n    progress_update (int): Emitted for updating a progress bar (0-100).",
                    "base_classes": [
                        "QThread"
                    ]
                },
                "MeredithTab": {
                    "methods": [
                        "__init__",
                        "init_ui",
                        "populate_model_selector",
                        "switch_model",
                        "log",
                        "run_full_scan",
                        "stop_scan",
                        "on_scan_completed",
                        "populate_results_table",
                        "open_profile_in_browser",
                        "export_results",
                        "clear_results",
                        "_reset_ui_for_new_scan",
                        "toggle_visibility"
                    ],
                    "docstring": "A private PyQt5 tab that orchestrates:\n  - Running the Meredith scraping (in a background thread).\n  - Displaying progress logs and a progress bar.\n  - Showing the final filtered profiles in a QTableWidget.\n  - Exporting or clearing results.\n  - Providing a 'Message' button that opens each profile in your default browser.\n  - Displaying a \"Resonance Score\" computed via the ResonanceScorer.\n  - Dynamically loading available resonance models from a directory.\n  - Can be toggled visible/invisible if running in \"private mode.\"\n\nArgs:\n    parent (QWidget): Parent widget, if any.\n    private_mode (bool): If True, the tab is hidden by default.",
                    "base_classes": [
                        "QWidget"
                    ]
                }
            },
            "routes": [],
            "complexity": 34
        },
        "chat_mate\\interfaces\\web\\app.py": {
            "language": ".py",
            "functions": [
                "create_app"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "chat_mate\\interfaces\\web\\dependencies.py": {
            "language": ".py",
            "functions": [
                "get_chat_agent",
                "get_memory_manager"
            ],
            "classes": {
                "Dependencies": {
                    "methods": [
                        "get_chat_agent",
                        "get_memory_manager"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 4
        },
        "chat_mate\\interfaces\\web\\routes\\chat_routes.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "ChatProcessingResponse": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "ChatProcessingRequest": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                }
            },
            "routes": [],
            "complexity": 0
        },
        "chat_mate\\interfaces\\web\\routes\\memory_routes.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "MemoryStats": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "MemoryStatsResponse": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "Episode": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                },
                "RecentEpisodesResponse": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                }
            },
            "routes": [],
            "complexity": 0
        },
        "chat_mate\\interfaces\\web\\routes\\system_routes.py": {
            "language": ".py",
            "functions": [],
            "classes": {
                "HealthResponse": {
                    "methods": [],
                    "docstring": null,
                    "base_classes": [
                        "BaseModel"
                    ]
                }
            },
            "routes": [],
            "complexity": 0
        },
        "chat_mate\\social\\community_integration.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_initialize_strategies",
                "_initialize_dashboard",
                "_initialize_post_manager",
                "analyze_community_health",
                "generate_insights_and_recommendations",
                "create_community_building_plan",
                "identify_advocates",
                "post_across_platforms",
                "track_member_interaction",
                "optimize_platform_strategies",
                "generate_visualizations",
                "run_daily_community_management"
            ],
            "classes": {
                "CommunityIntegrationManager": {
                    "methods": [
                        "__init__",
                        "_initialize_strategies",
                        "_initialize_dashboard",
                        "_initialize_post_manager",
                        "analyze_community_health",
                        "generate_insights_and_recommendations",
                        "create_community_building_plan",
                        "identify_advocates",
                        "post_across_platforms",
                        "track_member_interaction",
                        "optimize_platform_strategies",
                        "generate_visualizations",
                        "run_daily_community_management"
                    ],
                    "docstring": "Integrates all social media platforms with the unified community dashboard.\n\nThis class serves as the main entry point for community management,\nconnecting platform-specific strategies with unified analytics and reporting.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 26
        },
        "chat_mate\\social\\CommunityIntegrationManager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_check_platform_credentials",
                "_initialize_platforms",
                "_load_strategies",
                "_load_platform_status",
                "_save_platform_status",
                "get_available_platforms",
                "get_platform",
                "get_all_platforms",
                "enable_platform",
                "disable_platform",
                "connect_platform",
                "disconnect_platform",
                "run_daily_community_management",
                "_connect_enabled_platforms",
                "_collect_metrics",
                "analyze_community_health",
                "generate_insights_and_recommendations",
                "create_community_building_plan",
                "post_content",
                "identify_advocates",
                "track_member_interactions"
            ],
            "classes": {
                "CommunityIntegrationManager": {
                    "methods": [
                        "__init__",
                        "_check_platform_credentials",
                        "_initialize_platforms",
                        "_load_strategies",
                        "_load_platform_status",
                        "_save_platform_status",
                        "get_available_platforms",
                        "get_platform",
                        "get_all_platforms",
                        "enable_platform",
                        "disable_platform",
                        "connect_platform",
                        "disconnect_platform",
                        "run_daily_community_management",
                        "_connect_enabled_platforms",
                        "_collect_metrics",
                        "analyze_community_health",
                        "generate_insights_and_recommendations",
                        "create_community_building_plan",
                        "post_content",
                        "identify_advocates",
                        "track_member_interactions"
                    ],
                    "docstring": "Manages integrations with various social platforms, handles authentication,\nand provides a unified interface for community building.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 44
        },
        "chat_mate\\social\\DriverSession.py": {
            "language": ".py",
            "functions": [
                "get_multi_driver_sessions",
                "__init__",
                "initialize_driver",
                "_build_chrome_options",
                "_apply_stealth_settings",
                "shutdown_driver",
                "cleanup_profile",
                "restart_driver",
                "_get_profile_dir"
            ],
            "classes": {
                "DriverSession": {
                    "methods": [
                        "__init__",
                        "initialize_driver",
                        "_build_chrome_options",
                        "_apply_stealth_settings",
                        "shutdown_driver",
                        "cleanup_profile",
                        "restart_driver",
                        "_get_profile_dir"
                    ],
                    "docstring": "Manages a single Selenium WebDriver session.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 17
        },
        "chat_mate\\social\\log_writer.py": {
            "language": ".py",
            "functions": [
                "write_json_log",
                "log_login",
                "log_post",
                "log_error"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "chat_mate\\social\\social_post_db.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load",
                "_save",
                "_load_memory",
                "_save_memory",
                "update_memory",
                "get_memory",
                "add_to_queue",
                "mark_posted",
                "mark_failed",
                "get_next_post",
                "get_queue_length"
            ],
            "classes": {
                "SocialPostDatabase": {
                    "methods": [
                        "__init__",
                        "_load",
                        "_save",
                        "_load_memory",
                        "_save_memory",
                        "update_memory",
                        "get_memory",
                        "add_to_queue",
                        "mark_posted",
                        "mark_failed",
                        "get_next_post",
                        "get_queue_length"
                    ],
                    "docstring": "Manages the queue of social media posts.\nTracks pending, posted, and failed posts in a JSON database.\nAlso integrates with a persistent memory system to store global context.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 24
        },
        "chat_mate\\social\\StrategyLoader.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load_strategy",
                "_validate_strategy",
                "get_available_strategies",
                "reload_strategy",
                "register_strategy"
            ],
            "classes": {
                "StrategyLoader": {
                    "methods": [
                        "__init__",
                        "load_strategy",
                        "_validate_strategy",
                        "get_available_strategies",
                        "reload_strategy",
                        "register_strategy"
                    ],
                    "docstring": "Dynamically loads platform-specific strategy classes.\nHandles strategy initialization and validation.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 12
        },
        "chat_mate\\social\\TaskQueueManager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start",
                "stop",
                "add_task",
                "_worker",
                "queue_size",
                "status",
                "sample_task"
            ],
            "classes": {
                "TaskQueueManager": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop",
                        "add_task",
                        "_worker",
                        "queue_size",
                        "status"
                    ],
                    "docstring": "TaskQueueManager: A robust, priority-based task queue with threaded workers.\nThis manager supports:\n  - Prioritized task scheduling (lower value = higher priority)\n  - Delayed execution for rate-limiting or scheduling\n  - Configurable retries with exponential backoff\n  - Structured logging of task outcomes for feedback and reinforcement learning loops",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 15
        },
        "chat_mate\\social\\UnifiedCommunityDashboard.py": {
            "language": ".py",
            "functions": [
                "to_dict",
                "__init__",
                "_initialize_strategies",
                "_load_saved_data",
                "save_data",
                "update_metrics",
                "update_top_members",
                "generate_insights",
                "_calculate_trends",
                "_generate_platform_insights",
                "_generate_overall_insights",
                "get_metrics_history",
                "get_latest_metrics",
                "generate_metrics_chart",
                "get_platform_status",
                "get_community_building_plan",
                "_get_recommended_platforms_for_day"
            ],
            "classes": {
                "CommunityMetrics": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Data structure for standardized community metrics across platforms.",
                    "base_classes": []
                },
                "UnifiedCommunityDashboard": {
                    "methods": [
                        "__init__",
                        "_initialize_strategies",
                        "_load_saved_data",
                        "save_data",
                        "update_metrics",
                        "update_top_members",
                        "generate_insights",
                        "_calculate_trends",
                        "_generate_platform_insights",
                        "_generate_overall_insights",
                        "get_metrics_history",
                        "get_latest_metrics",
                        "generate_metrics_chart",
                        "get_platform_status",
                        "get_community_building_plan",
                        "_get_recommended_platforms_for_day"
                    ],
                    "docstring": "Provides a centralized dashboard for cross-platform community analytics and insights",
                    "base_classes": [
                        "QObject"
                    ]
                }
            },
            "routes": [],
            "complexity": 34
        },
        "chat_mate\\social\\UnifiedPostManager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_post_history",
                "_save_post_history",
                "post_to_platform",
                "_adapt_content_for_platform",
                "schedule_post",
                "get_scheduled_posts",
                "cancel_scheduled_post",
                "get_post_analytics",
                "_get_current_metrics",
                "generate_content_ideas"
            ],
            "classes": {
                "UnifiedPostManager": {
                    "methods": [
                        "__init__",
                        "_load_post_history",
                        "_save_post_history",
                        "post_to_platform",
                        "_adapt_content_for_platform",
                        "schedule_post",
                        "get_scheduled_posts",
                        "cancel_scheduled_post",
                        "get_post_analytics",
                        "_get_current_metrics",
                        "generate_content_ideas"
                    ],
                    "docstring": "Manages post creation, scheduling, and distribution across multiple social platforms.\nProvides a unified interface for content management and cross-platform posting.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 22
        },
        "chat_mate\\social\\ai\\chat_agent.py": {
            "language": ".py",
            "functions": [
                "__init__"
            ],
            "classes": {
                "AIChatAgent": {
                    "methods": [
                        "__init__"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 2
        },
        "chat_mate\\social\\data\\post_history.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_history",
                "_save_history",
                "add_post",
                "get_posts",
                "clear_history"
            ],
            "classes": {
                "PostHistory": {
                    "methods": [
                        "__init__",
                        "_load_history",
                        "_save_history",
                        "add_post",
                        "get_posts",
                        "clear_history"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 12
        },
        "chat_mate\\social\\data\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "chat_mate\\social\\strategies\\base_platform_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "analyze_comment_sentiment",
                "reinforce_engagement",
                "reward_top_engagers",
                "cross_platform_feedback_loop",
                "run_feedback_loop",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction"
            ],
            "classes": {
                "BasePlatformStrategy": {
                    "methods": [
                        "__init__",
                        "_load_feedback_data",
                        "_save_feedback_data",
                        "analyze_engagement_metrics",
                        "analyze_comment_sentiment",
                        "reinforce_engagement",
                        "reward_top_engagers",
                        "cross_platform_feedback_loop",
                        "run_feedback_loop",
                        "initialize",
                        "cleanup",
                        "get_community_metrics",
                        "get_top_members",
                        "track_member_interaction"
                    ],
                    "docstring": "Base class for all platform-specific strategies.\nProvides common functionality for:\n- Feedback tracking and metrics\n- Sentiment analysis\n- Engagement reinforcement\n- Cross-platform data integration\n- Reward systems",
                    "base_classes": [
                        "ABC"
                    ]
                }
            },
            "routes": [],
            "complexity": 28
        },
        "chat_mate\\social\\strategies\\community_scheduler.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "schedule_task",
                "schedule_engagement_check",
                "schedule_ai_responses",
                "schedule_daily_report",
                "_check_engagement",
                "_load_schedules",
                "_save_schedules",
                "_is_comment_processed",
                "_mark_comment_processed",
                "start",
                "stop"
            ],
            "classes": {
                "CommunityScheduler": {
                    "methods": [
                        "__init__",
                        "schedule_task",
                        "schedule_engagement_check",
                        "schedule_ai_responses",
                        "schedule_daily_report",
                        "_check_engagement",
                        "_load_schedules",
                        "_save_schedules",
                        "_is_comment_processed",
                        "_mark_comment_processed",
                        "start",
                        "stop"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 24
        },
        "chat_mate\\social\\strategies\\reddit_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "run_feedback_loop",
                "adaptive_posting_strategy"
            ],
            "classes": {
                "RedditStrategy": {
                    "methods": [
                        "__init__",
                        "initialize",
                        "cleanup",
                        "get_community_metrics",
                        "get_top_members",
                        "track_member_interaction",
                        "_get_driver",
                        "_wait",
                        "login",
                        "is_logged_in",
                        "post_content",
                        "run_daily_strategy_session",
                        "_load_feedback_data",
                        "_save_feedback_data",
                        "analyze_engagement_metrics",
                        "run_feedback_loop",
                        "adaptive_posting_strategy"
                    ],
                    "docstring": "Centralized strategy class for Reddit automation and community building.\nExtends BasePlatformStrategy with Reddit-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops using ChatGPT responses\n  - Reward system for top engaging followers\n  - Cross-platform feedback integration",
                    "base_classes": [
                        "BasePlatformStrategy"
                    ]
                }
            },
            "routes": [],
            "complexity": 34
        },
        "chat_mate\\social\\strategies\\linkedin_strategy.py": {
            "language": ".py",
            "functions": [
                "retry_on_failure",
                "decorator_retry",
                "__init__",
                "_get_driver",
                "get_random_user_agent",
                "_wait",
                "login",
                "is_logged_in",
                "_login_with_credentials",
                "post",
                "like_posts",
                "comment_on_posts",
                "follow_users",
                "unfollow_non_returners",
                "go_viral",
                "_log_followed_users",
                "_find_posts",
                "_find_like_button",
                "_find_comment_box",
                "_find_profile_url",
                "_find_follow_button",
                "_find_unfollow_button",
                "run_daily_session",
                "__init__",
                "is_logged_in",
                "_login_with_credentials",
                "post",
                "_find_posts",
                "_find_like_button",
                "_find_comment_box",
                "_find_profile_url",
                "_find_follow_button",
                "_find_unfollow_button",
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "get_random_user_agent",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "wrapper_retry"
            ],
            "classes": {
                "BaseEngagementBot": {
                    "methods": [
                        "__init__",
                        "_get_driver",
                        "get_random_user_agent",
                        "_wait",
                        "login",
                        "is_logged_in",
                        "_login_with_credentials",
                        "post",
                        "like_posts",
                        "comment_on_posts",
                        "follow_users",
                        "unfollow_non_returners",
                        "go_viral",
                        "_log_followed_users",
                        "_find_posts",
                        "_find_like_button",
                        "_find_comment_box",
                        "_find_profile_url",
                        "_find_follow_button",
                        "_find_unfollow_button",
                        "run_daily_session"
                    ],
                    "docstring": "A universal base class for social media engagement bots.\nProvides core community building functions:\n  - Login (with cookie & credential fallback)\n  - Post content (AI-generated if needed)\n  - Like, comment, follow, unfollow, viral engagement, and DM functionalities\n  - Daily session orchestration",
                    "base_classes": [
                        "ABC"
                    ]
                },
                "LinkedInEngagementBot": {
                    "methods": [
                        "__init__",
                        "is_logged_in",
                        "_login_with_credentials",
                        "post",
                        "_find_posts",
                        "_find_like_button",
                        "_find_comment_box",
                        "_find_profile_url",
                        "_find_follow_button",
                        "_find_unfollow_button"
                    ],
                    "docstring": "LinkedIn-specific implementation of BaseEngagementBot.\nImplements abstract methods using LinkedIn's DOM structure.",
                    "base_classes": [
                        "BaseEngagementBot"
                    ]
                },
                "LinkedinStrategy": {
                    "methods": [
                        "__init__",
                        "initialize",
                        "cleanup",
                        "get_community_metrics",
                        "get_top_members",
                        "track_member_interaction",
                        "_get_driver",
                        "get_random_user_agent",
                        "_wait",
                        "login",
                        "is_logged_in",
                        "post_content",
                        "run_daily_strategy_session"
                    ],
                    "docstring": "Centralized strategy class for LinkedIn automation and community building.\nExtends BasePlatformStrategy with LinkedIn-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops using ChatGPT responses\n  - Reward system for top engaging followers\n  - Cross-platform feedback integration",
                    "base_classes": [
                        "BasePlatformStrategy"
                    ]
                }
            },
            "routes": [],
            "complexity": 91
        },
        "chat_mate\\social\\strategies\\stocktwits_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "login",
                "is_logged_in",
                "post",
                "engage_community",
                "_log_follow",
                "unfollow_non_returners",
                "run_daily_session",
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "run_feedback_loop",
                "adaptive_posting_strategy",
                "reinforce_engagement",
                "reward_top_engagers",
                "cross_platform_feedback_loop"
            ],
            "classes": {
                "StocktwitsCommunityArchitect": {
                    "methods": [
                        "__init__",
                        "login",
                        "is_logged_in",
                        "post",
                        "engage_community",
                        "_log_follow",
                        "unfollow_non_returners",
                        "run_daily_session"
                    ],
                    "docstring": "Stocktwits Community Builder:\nAutomates posts, engagement, and follower interactions with AI-generated content in Victor's authentic tone.",
                    "base_classes": []
                },
                "StocktwitsStrategy": {
                    "methods": [
                        "__init__",
                        "initialize",
                        "cleanup",
                        "get_community_metrics",
                        "get_top_members",
                        "track_member_interaction",
                        "_get_driver",
                        "_wait",
                        "login",
                        "is_logged_in",
                        "post_content",
                        "run_daily_strategy_session",
                        "_load_feedback_data",
                        "_save_feedback_data",
                        "analyze_engagement_metrics",
                        "run_feedback_loop",
                        "adaptive_posting_strategy",
                        "reinforce_engagement",
                        "reward_top_engagers",
                        "cross_platform_feedback_loop"
                    ],
                    "docstring": "Centralized strategy class for Stocktwits automation and community building.\nExtends BasePlatformStrategy with Stocktwits-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops using ChatGPT responses\n  - Reward system for top engaging followers\n  - Cross-platform feedback integration",
                    "base_classes": [
                        "BasePlatformStrategy"
                    ]
                }
            },
            "routes": [],
            "complexity": 56
        },
        "chat_mate\\social\\strategies\\wordpress_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initialize",
                "cleanup",
                "sync_youtube_video",
                "moderate_comment",
                "get_community_metrics",
                "get_top_members",
                "_load_community_data",
                "_save_community_data",
                "generate_engagement_report",
                "track_member_interaction"
            ],
            "classes": {
                "WordPressCommunityStrategy": {
                    "methods": [
                        "__init__",
                        "initialize",
                        "cleanup",
                        "sync_youtube_video",
                        "moderate_comment",
                        "get_community_metrics",
                        "get_top_members",
                        "_load_community_data",
                        "_save_community_data",
                        "generate_engagement_report",
                        "track_member_interaction"
                    ],
                    "docstring": "WordPress community strategy that integrates with YouTube for automated community building.\nFeatures:\n- Auto-syncs YouTube videos as WordPress posts\n- Manages comments across both platforms\n- Generates engagement reports\n- Handles community moderation\n- Creates automated responses",
                    "base_classes": [
                        "BasePlatformStrategy"
                    ]
                }
            },
            "routes": [],
            "complexity": 22
        },
        "chat_mate\\sync_ops\\micro_factories\\sync_ops_factory.py": {
            "language": ".py",
            "functions": [
                "get_service",
                "reset_service"
            ],
            "classes": {
                "SyncOpsFactory": {
                    "methods": [
                        "get_service",
                        "reset_service"
                    ],
                    "docstring": "A simple factory for creating and managing a singleton instance of SyncOpsService.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 4
        },
        "chat_mate\\social\\strategies\\youtube_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_video",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "run_feedback_loop",
                "adaptive_posting_strategy",
                "reward_top_creators",
                "cross_platform_feedback_loop"
            ],
            "classes": {
                "YouTubeStrategy": {
                    "methods": [
                        "__init__",
                        "initialize",
                        "cleanup",
                        "get_community_metrics",
                        "get_top_members",
                        "track_member_interaction",
                        "_get_driver",
                        "_wait",
                        "login",
                        "is_logged_in",
                        "post_video",
                        "run_daily_strategy_session",
                        "_load_feedback_data",
                        "_save_feedback_data",
                        "analyze_engagement_metrics",
                        "run_feedback_loop",
                        "adaptive_posting_strategy",
                        "reward_top_creators",
                        "cross_platform_feedback_loop"
                    ],
                    "docstring": "Centralized strategy class for YouTube automation and community building.\nExtends BasePlatformStrategy with YouTube-specific implementations.\nFeatures:\n  - Video content management and scheduling\n  - Shorts creation and optimization\n  - Community post engagement\n  - Analytics tracking and optimization\n  - Cross-platform content distribution",
                    "base_classes": [
                        "BasePlatformStrategy"
                    ]
                }
            },
            "routes": [],
            "complexity": 38
        },
        "chat_mate\\sync_ops\\services\\sync_ops_service.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "clock_in",
                "clock_out",
                "start_pomodoro",
                "stop_pomodoro",
                "update_pomodoro",
                "log_event",
                "save_session"
            ],
            "classes": {
                "SyncOpsService": {
                    "methods": [
                        "__init__",
                        "clock_in",
                        "clock_out",
                        "start_pomodoro",
                        "stop_pomodoro",
                        "update_pomodoro",
                        "log_event",
                        "save_session"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 16
        },
        "chat_mate\\utils\\cookie_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_get_cookie_path",
                "load_cookies",
                "save_cookies",
                "wait_for_manual_login"
            ],
            "classes": {
                "CookieManager": {
                    "methods": [
                        "__init__",
                        "_get_cookie_path",
                        "load_cookies",
                        "save_cookies",
                        "wait_for_manual_login"
                    ],
                    "docstring": "Manages loading, saving, and validating cookies for different platforms.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 10
        },
        "chat_mate\\utils\\filesystem.py": {
            "language": ".py",
            "functions": [
                "sanitize_filename",
                "get_project_root",
                "ensure_directory_exists"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "chat_mate\\utils\\logging_utils.py": {
            "language": ".py",
            "functions": [
                "write_json_log",
                "log_success",
                "log_error",
                "setup_basic_logging"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "chat_mate\\utils\\nltk_init.py": {
            "language": ".py",
            "functions": [
                "ensure_nltk_data"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "chat_mate\\utils\\SentimentAnalyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load_lexicon",
                "analyze",
                "analyze_batch",
                "analyze_with_context",
                "analyze_trend",
                "get_keyword_sentiment",
                "analyze_feedback_trends",
                "_generate_trend_visualization",
                "extract_topics",
                "add_custom_keywords",
                "load_custom_lexicon"
            ],
            "classes": {
                "SentimentAnalyzer": {
                    "methods": [
                        "__init__",
                        "load_lexicon",
                        "analyze",
                        "analyze_batch",
                        "analyze_with_context",
                        "analyze_trend",
                        "get_keyword_sentiment",
                        "analyze_feedback_trends",
                        "_generate_trend_visualization",
                        "extract_topics",
                        "add_custom_keywords",
                        "load_custom_lexicon"
                    ],
                    "docstring": "Analyzes sentiment in text content, optimized for social media posts and comments.\nSupports both individual and batch processing.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 24
        },
        "chat_mate\\utils\\ai\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "chat_mate\\utils\\web\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\AIOutputLogAnalyzer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_log",
                "load_context_db",
                "save_context_db",
                "iterate_logs",
                "_validate_log",
                "extract_context_from_logs",
                "get_recent_context",
                "get_user_context",
                "get_platform_context",
                "identify_community_champions",
                "trigger_community_invites",
                "summarize",
                "export_summary_report",
                "send_discord_report_sync",
                "_parse_date"
            ],
            "classes": {
                "AIOutputLogAnalyzer": {
                    "methods": [
                        "__init__",
                        "_log",
                        "load_context_db",
                        "save_context_db",
                        "iterate_logs",
                        "_validate_log",
                        "extract_context_from_logs",
                        "get_recent_context",
                        "get_user_context",
                        "get_platform_context",
                        "identify_community_champions",
                        "trigger_community_invites",
                        "summarize",
                        "export_summary_report",
                        "send_discord_report_sync",
                        "_parse_date"
                    ],
                    "docstring": "Analyzes AI output logs stored in JSONL format.\nNow integrated with UnifiedLoggingAgent for consistent log access.\n\nFeatures:\n  - Community champion identification\n  - Community digest reporting\n  - Persistent context memory for adaptive AI responses\n  - Discord integration for reports and updates",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 32
        },
        "core\\AletheiaPromptManager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load_all_memory_states",
                "save_all_memory_states",
                "start_conversation_cycle",
                "end_conversation_cycle",
                "record_conversation",
                "get_prompt",
                "load_conversation_memory",
                "save_conversation_memory",
                "load_cycle_memory",
                "save_cycle_memory",
                "_load_json_file",
                "_merge_cycle_memory_updates",
                "list_available_prompts",
                "load_memory_state",
                "save_memory_state",
                "parse_memory_updates",
                "_extract_memory_update_block",
                "_merge_memory_updates",
                "archive_episode",
                "_log_memory_diff",
                "review_memory_log",
                "_async_save",
                "save_task"
            ],
            "classes": {
                "AletheiaPromptManager": {
                    "methods": [
                        "__init__",
                        "load_all_memory_states",
                        "save_all_memory_states",
                        "start_conversation_cycle",
                        "end_conversation_cycle",
                        "record_conversation",
                        "get_prompt",
                        "load_conversation_memory",
                        "save_conversation_memory",
                        "load_cycle_memory",
                        "save_cycle_memory",
                        "_load_json_file",
                        "_merge_cycle_memory_updates",
                        "list_available_prompts",
                        "load_memory_state",
                        "save_memory_state",
                        "parse_memory_updates",
                        "_extract_memory_update_block",
                        "_merge_memory_updates",
                        "archive_episode",
                        "_log_memory_diff",
                        "review_memory_log",
                        "_async_save"
                    ],
                    "docstring": "Aletheia - Autonomous Architect of Strategic Convergence.\n\nThis class handles:\n  - Template-based prompt generation using Jinja2\n  - Adaptive structured memory updates\n  - FULL SYNC integration with Victor.OS\n  - Auto-dispatch of Discord notifications on episode archiving\nManaged by Aletheia (Thea).",
                    "base_classes": [
                        "IPromptManager"
                    ]
                }
            },
            "routes": [],
            "complexity": 47
        },
        "core\\config.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\config_base.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_env",
                "get_env",
                "_validate_required_keys"
            ],
            "classes": {
                "ConfigBase": {
                    "methods": [
                        "__init__",
                        "_load_env",
                        "get_env",
                        "_validate_required_keys"
                    ],
                    "docstring": "Base configuration class with shared functionality.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 8
        },
        "core\\EngagementAgent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "handle_mentions",
                "proactive_engagement",
                "_process_mention",
                "_process_proactive",
                "_log_interaction"
            ],
            "classes": {
                "EngagementAgent": {
                    "methods": [
                        "__init__",
                        "handle_mentions",
                        "proactive_engagement",
                        "_process_mention",
                        "_process_proactive",
                        "_log_interaction"
                    ],
                    "docstring": "Manages intelligent, automated interactions leveraging AIChatAgent \nfor personalized, context-aware community engagement.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 12
        },
        "core\\DriverSessionManager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initialize_driver",
                "get_driver",
                "_is_session_expired",
                "shutdown_driver",
                "refresh_session",
                "execute_with_retry",
                "get_session_info",
                "set_session_timeout",
                "clear_cookies"
            ],
            "classes": {
                "DriverSessionManager": {
                    "methods": [
                        "__init__",
                        "initialize_driver",
                        "get_driver",
                        "_is_session_expired",
                        "shutdown_driver",
                        "refresh_session",
                        "execute_with_retry",
                        "get_session_info",
                        "set_session_timeout",
                        "clear_cookies"
                    ],
                    "docstring": "Backward compatibility wrapper for the legacy DriverSessionManager.\nThis class maintains the same interface as the original DriverSessionManager \nbut delegates all functionality to the new unified DriverManager.\n\nDO NOT use this class for new code. Use DriverManager directly instead.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 20
        },
        "core\\EventMessageBuilder.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "on_modified",
                "on_created",
                "on_deleted",
                "__init__",
                "_start_template_watcher",
                "build_message",
                "list_available_templates",
                "clear_cache"
            ],
            "classes": {
                "TemplateChangeHandler": {
                    "methods": [
                        "__init__",
                        "on_modified",
                        "on_created",
                        "on_deleted"
                    ],
                    "docstring": "Watches the template directory for changes. When a template file is modified,\ncreated, or deleted, it will trigger a cache clear in the EventMessageBuilder.",
                    "base_classes": [
                        "FileSystemEventHandler"
                    ]
                },
                "EventMessageBuilder": {
                    "methods": [
                        "__init__",
                        "_start_template_watcher",
                        "build_message",
                        "list_available_templates",
                        "clear_cache"
                    ],
                    "docstring": "Builds Discord messages using Jinja2 templates for various event types.\nPlace your templates (e.g., quest_complete.j2, protocol_unlock.j2, tier_up.j2)\nin your designated template directory.\n\nIf no template directory is provided, the default location is:\n  ../templates/message_templates relative to this file.\n  \nThis builder will automatically watch for changes in the template directory\nand clear its cache accordingly.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 18
        },
        "core\\NarrativeAnalytics.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "analyze",
                "_summarize",
                "_analyze_sentiment",
                "_extract_keywords"
            ],
            "classes": {
                "NarrativeAnalytics": {
                    "methods": [
                        "__init__",
                        "analyze",
                        "_summarize",
                        "_analyze_sentiment",
                        "_extract_keywords"
                    ],
                    "docstring": "A simple narrative analytics engine placeholder.\nProvides basic summarization, sentiment analysis, and keyword extraction.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 10
        },
        "core\\OpenAIPromptEngine.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_is_driver_alive",
                "render_prompt",
                "_retry",
                "send_prompt",
                "_wait_for_response_completion",
                "_scrape_response",
                "log_interaction",
                "execute"
            ],
            "classes": {
                "OpenAIPromptEngine": {
                    "methods": [
                        "__init__",
                        "_is_driver_alive",
                        "render_prompt",
                        "_retry",
                        "send_prompt",
                        "_wait_for_response_completion",
                        "_scrape_response",
                        "log_interaction",
                        "execute"
                    ],
                    "docstring": "OpenAIPromptEngine:\n  - Renders prompts using Jinja2 templates.\n  - Uses Selenium to interact with a custom GPT endpoint.\n  - Logs interactions for reinforcement learning.\n  - Optionally triggers voice automation.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 18
        },
        "core\\ReinforcementEngine.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load_memory",
                "save_memory",
                "detect_hallucination",
                "calculate_length_score",
                "detect_clarity_issues",
                "calculate_coherence_score",
                "analyze_response",
                "append_execution_log",
                "auto_tune_prompts",
                "append_tuning_log",
                "__init__",
                "initUI",
                "load_feedback",
                "display_feedback_details",
                "export_feedback",
                "clear_feedback",
                "auto_tune_prompts"
            ],
            "classes": {
                "ReinforcementEngine": {
                    "methods": [
                        "__init__",
                        "load_memory",
                        "save_memory",
                        "detect_hallucination",
                        "calculate_length_score",
                        "detect_clarity_issues",
                        "calculate_coherence_score",
                        "analyze_response",
                        "append_execution_log",
                        "auto_tune_prompts",
                        "append_tuning_log"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "ReinforcementToolsDialog": {
                    "methods": [
                        "__init__",
                        "initUI",
                        "load_feedback",
                        "display_feedback_details",
                        "export_feedback",
                        "clear_feedback",
                        "auto_tune_prompts"
                    ],
                    "docstring": "A dialog for managing reinforcement feedback, exporting logs,\nclearing feedback data, and auto-tuning prompts.",
                    "base_classes": [
                        "QDialog"
                    ]
                }
            },
            "routes": [],
            "complexity": 36
        },
        "core\\reinforcement_tools.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load_feedback",
                "show_feedback_details",
                "export_feedback",
                "clear_feedback",
                "auto_tune_prompts"
            ],
            "classes": {
                "ReinforcementToolsDialog": {
                    "methods": [
                        "__init__",
                        "load_feedback",
                        "show_feedback_details",
                        "export_feedback",
                        "clear_feedback",
                        "auto_tune_prompts"
                    ],
                    "docstring": "Dialog UI for Reinforcement Engine analysis and feedback management.",
                    "base_classes": [
                        "QDialog"
                    ]
                }
            },
            "routes": [],
            "complexity": 12
        },
        "core\\ResponseHandler.py": {
            "language": ".py",
            "functions": [
                "setup_logging",
                "parse_hybrid_response",
                "__init__",
                "_init_driver",
                "save_cookies",
                "load_cookies",
                "is_logged_in",
                "send_prompt",
                "fetch_response",
                "wait_for_stable_response",
                "clean_response",
                "handle_hybrid_response",
                "execute_prompt_cycle",
                "execute_prompts_on_all_chats",
                "shutdown"
            ],
            "classes": {
                "HybridResponseHandler": {
                    "methods": [
                        "parse_hybrid_response"
                    ],
                    "docstring": "Parses a hybrid response that includes both narrative text and a MEMORY_UPDATE JSON block.\nReturns a tuple of (text_part, memory_update_json).",
                    "base_classes": []
                },
                "ResponseHandler": {
                    "methods": [
                        "__init__",
                        "_init_driver",
                        "save_cookies",
                        "load_cookies",
                        "is_logged_in",
                        "send_prompt",
                        "fetch_response",
                        "wait_for_stable_response",
                        "clean_response",
                        "handle_hybrid_response",
                        "execute_prompt_cycle",
                        "execute_prompts_on_all_chats",
                        "shutdown"
                    ],
                    "docstring": "Handles sending prompts, fetching, and stabilizing ChatGPT responses.\nNow includes hybrid response processing: it will extract narrative text and MEMORY_UPDATE JSON.\nAlso hooks into the AI output logger for reinforcement training.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 29
        },
        "core\\TaskOrchestrator.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "set_cycle_service",
                "execute_task"
            ],
            "classes": {
                "TaskOrchestrator": {
                    "methods": [
                        "__init__",
                        "set_cycle_service",
                        "execute_task"
                    ],
                    "docstring": "Coordinates task execution between agents and cycle services.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 6
        },
        "core\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\Agents\\main.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\Agents\\RefactorAgent.py": {
            "language": ".py",
            "functions": [
                "run_task",
                "run_refactor"
            ],
            "classes": {
                "RefactorAgent": {
                    "methods": [
                        "run_task",
                        "run_refactor"
                    ],
                    "docstring": "Agent for handling code refactoring tasks.",
                    "base_classes": [
                        "CursorAgentInterface"
                    ]
                }
            },
            "routes": [],
            "complexity": 4
        },
        "core\\chat_engine\\chat_engine_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_memory",
                "start",
                "shutdown",
                "shutdown_driver",
                "send_prompt",
                "get_all_chat_titles",
                "execute_prompts_single_chat",
                "analyze_execution_response",
                "send_chat_prompt",
                "switch_execution_mode",
                "generate_dreamscape_episode",
                "execute_prompt_cycle",
                "queue_prompts",
                "get_last_response",
                "inject_context",
                "run_cycle"
            ],
            "classes": {
                "ChatEngineManager": {
                    "methods": [
                        "__init__",
                        "_load_memory",
                        "start",
                        "shutdown",
                        "shutdown_driver",
                        "send_prompt",
                        "get_all_chat_titles",
                        "execute_prompts_single_chat",
                        "analyze_execution_response",
                        "send_chat_prompt",
                        "switch_execution_mode",
                        "generate_dreamscape_episode",
                        "execute_prompt_cycle",
                        "queue_prompts",
                        "get_last_response",
                        "inject_context",
                        "run_cycle"
                    ],
                    "docstring": "Facade for managing the chat engine services.\nThis class coordinates the various components of the chat engine.",
                    "base_classes": [
                        "IChatManager"
                    ]
                }
            },
            "routes": [],
            "complexity": 34
        },
        "core\\chat_engine\\chat_scraper_service.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_driver",
                "get_all_chats",
                "get_filtered_chats",
                "validate_login",
                "manual_login_flow"
            ],
            "classes": {
                "ChatScraperService": {
                    "methods": [
                        "__init__",
                        "get_driver",
                        "get_all_chats",
                        "get_filtered_chats",
                        "validate_login",
                        "manual_login_flow"
                    ],
                    "docstring": "ChatScraperService retrieves available chat titles and links from the chat UI.\nIt handles exclusions and filtering for downstream execution cycles.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 12
        },
        "core\\factories\\ChatFactory.py": {
            "language": ".py",
            "functions": [
                "create"
            ],
            "classes": {
                "ChatFactory": {
                    "methods": [
                        "create"
                    ],
                    "docstring": "Factory for constructing a fully-wired ChatManager from the ServiceRegistry.\nThis is used internally within Dream.OS, where all services are orchestrated.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 2
        },
        "core\\factories\\chat_manager_factory.py": {
            "language": ".py",
            "functions": [
                "create_chat_manager",
                "create"
            ],
            "classes": {
                "ChatManagerFactory": {
                    "methods": [
                        "create_chat_manager",
                        "create"
                    ],
                    "docstring": "Factory for constructing a ChatManager with OpenAIClient bootstrapping.\nUsed when ChatManager must be created standalone or early in the pipeline.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 4
        },
        "core\\factories\\openai_client_factory.py": {
            "language": ".py",
            "functions": [
                "create_openai_client",
                "create"
            ],
            "classes": {
                "OpenAIClientFactory": {
                    "methods": [
                        "create_openai_client",
                        "create"
                    ],
                    "docstring": "Factory for creating and configuring OpenAIClient instances.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 4
        },
        "core\\factories\\prompt_manager_factory.py": {
            "language": ".py",
            "functions": [
                "create_prompt_manager",
                "create"
            ],
            "classes": {
                "PromptManagerFactory": {
                    "methods": [
                        "create_prompt_manager",
                        "create"
                    ],
                    "docstring": "Factory for constructing a PromptManager (AletheiaPromptManager).\nSupports injection via service registry or manual parameters.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 4
        },
        "core\\logging\\factories\\LoggerFactory.py": {
            "language": ".py",
            "functions": [
                "create_standard_logger",
                "create_module_logger",
                "create_agent_logger",
                "get_logger"
            ],
            "classes": {
                "LoggerFactory": {
                    "methods": [
                        "create_standard_logger",
                        "create_module_logger",
                        "create_agent_logger",
                        "get_logger"
                    ],
                    "docstring": "Factory class for creating standardized loggers across the application.\nProvides methods to create different types of loggers with consistent \nconfiguration.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 8
        },
        "core\\logging\\utils\\setup.py": {
            "language": ".py",
            "functions": [
                "setup_logging"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "core\\meredith\\resonance_scorer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load_model",
                "score_profile"
            ],
            "classes": {
                "ResonanceScorer": {
                    "methods": [
                        "__init__",
                        "load_model",
                        "score_profile"
                    ],
                    "docstring": "Loads a resonance model (e.g. romantic.json, side_chick.json, etc.)\nand scores a given profile dict based on alignment with:\n  - required traits\n  - bonus traits\n  - frequency keywords\n  - deal breakers\n  - location preference (ZIP or keywords)\n\nDesigned for dynamic model switching via `load_model(path)`.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 6
        },
        "core\\meredith\\profile_scraper.py": {
            "language": ".py",
            "functions": [
                "main",
                "__init__",
                "scrape_profiles",
                "__init__",
                "scrape_profiles",
                "_safe_get_text",
                "__init__",
                "scrape_profiles",
                "__init__",
                "scrape_profiles",
                "__init__",
                "_init_driver",
                "register_scraper",
                "register_default_scrapers",
                "run_all",
                "close",
                "filter_by_location",
                "filter_by_gender"
            ],
            "classes": {
                "BaseScraper": {
                    "methods": [
                        "__init__",
                        "scrape_profiles"
                    ],
                    "docstring": "Abstract base class that enforces a 'scrape_profiles' method.\nEach platform-specific scraper will inherit and implement its own logic.",
                    "base_classes": [
                        "ABC"
                    ]
                },
                "TwitterScraper": {
                    "methods": [
                        "__init__",
                        "scrape_profiles",
                        "_safe_get_text"
                    ],
                    "docstring": "Scrapes Twitter user search results based on a text query.",
                    "base_classes": [
                        "BaseScraper"
                    ]
                },
                "InstagramScraper": {
                    "methods": [
                        "__init__",
                        "scrape_profiles"
                    ],
                    "docstring": "Scrapes Instagram hashtag pages to find recent posts, used here as a proxy\nfor user profiles. Real user data might require additional steps or logins.",
                    "base_classes": [
                        "BaseScraper"
                    ]
                },
                "FacebookScraper": {
                    "methods": [
                        "__init__",
                        "scrape_profiles"
                    ],
                    "docstring": "Scrapes public Facebook \"people\" search results. Facebook often requires\nlogin or advanced dynamic handling, so YMMV with purely anonymous scraping.",
                    "base_classes": [
                        "BaseScraper"
                    ]
                },
                "ScraperManager": {
                    "methods": [
                        "__init__",
                        "_init_driver",
                        "register_scraper",
                        "register_default_scrapers",
                        "run_all",
                        "close"
                    ],
                    "docstring": "Orchestrates multiple platform scrapers, aggregates their results,\nand manages the Selenium WebDriver lifecycle.",
                    "base_classes": []
                },
                "ProfileFilter": {
                    "methods": [
                        "filter_by_location",
                        "filter_by_gender"
                    ],
                    "docstring": "A utility class to filter scraped profiles by location, gender, or any custom rules.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 35
        },
        "core\\micro_factories\\template_manager_factory.py": {
            "language": ".py",
            "functions": [
                "create_template_manager"
            ],
            "classes": {
                "TemplateManagerFactory": {
                    "methods": [
                        "create_template_manager"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 2
        },
        "core\\openai\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\services\\debug_service.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start_debug_session",
                "get_debug_info",
                "_save_debug_info",
                "_get_current_timestamp"
            ],
            "classes": {
                "DebugService": {
                    "methods": [
                        "__init__",
                        "start_debug_session",
                        "get_debug_info",
                        "_save_debug_info",
                        "_get_current_timestamp"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 10
        },
        "core\\services\\rollback_service.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "rollback",
                "create_backup",
                "_find_backup"
            ],
            "classes": {
                "RollbackService": {
                    "methods": [
                        "__init__",
                        "rollback",
                        "create_backup",
                        "_find_backup"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 8
        },
        "core\\services\\service_registry.py": {
            "language": ".py",
            "functions": [
                "create_config_service",
                "create_logging_service",
                "create_prompt_service",
                "create_chat_service",
                "create_discord_service",
                "create_cursor_service",
                "create_reinforcement_service",
                "create_cycle_service",
                "create_response_handler",
                "create_task_orchestrator",
                "create_dreamscape_generator",
                "create_memory_service",
                "create_template_manager",
                "register_all_services",
                "get_service",
                "_create_empty_service",
                "info",
                "warning",
                "error",
                "debug",
                "get",
                "set",
                "load",
                "save",
                "get_prompt",
                "save_prompt",
                "get_model",
                "reset_to_defaults",
                "load",
                "save",
                "get",
                "set",
                "clear",
                "execute_prompts_single_chat",
                "get_all_chat_titles",
                "shutdown_driver",
                "run",
                "stop",
                "send_message",
                "send_file",
                "send_template",
                "get_status",
                "auto_tune_prompts",
                "apply_fix",
                "rollback_changes",
                "execute_prompt",
                "debug_code",
                "shutdown_all",
                "__init__",
                "register",
                "get",
                "validate_service_registry",
                "_is_empty_service",
                "_create_empty_service",
                "initialize",
                "_register_core_services",
                "register_service",
                "get_service",
                "has_service",
                "create_prompt_manager_safely",
                "__init__",
                "__getattr__",
                "__init__",
                "__getattr__"
            ],
            "classes": {
                "LoggingService": {
                    "methods": [
                        "info",
                        "warning",
                        "error",
                        "debug"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "Protocol"
                    ]
                },
                "ConfigService": {
                    "methods": [
                        "get",
                        "set",
                        "load",
                        "save"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "Protocol"
                    ]
                },
                "UnifiedPromptService": {
                    "methods": [
                        "get_prompt",
                        "save_prompt",
                        "get_model",
                        "reset_to_defaults"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "Protocol"
                    ]
                },
                "MemoryService": {
                    "methods": [
                        "load",
                        "save",
                        "get",
                        "set",
                        "clear"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "Protocol"
                    ]
                },
                "ChatService": {
                    "methods": [
                        "execute_prompts_single_chat",
                        "get_all_chat_titles",
                        "shutdown_driver"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "Protocol"
                    ]
                },
                "DiscordService": {
                    "methods": [
                        "run",
                        "stop",
                        "send_message",
                        "send_file",
                        "send_template",
                        "get_status"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "Protocol"
                    ]
                },
                "ReinforcementService": {
                    "methods": [
                        "auto_tune_prompts",
                        "apply_fix",
                        "rollback_changes"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "Protocol"
                    ]
                },
                "CursorService": {
                    "methods": [
                        "execute_prompt",
                        "debug_code",
                        "shutdown_all"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "Protocol"
                    ]
                },
                "ServiceRegistry": {
                    "methods": [
                        "__init__",
                        "register",
                        "get",
                        "validate_service_registry",
                        "_is_empty_service",
                        "_create_empty_service",
                        "initialize",
                        "_register_core_services",
                        "register_service",
                        "get_service",
                        "has_service"
                    ],
                    "docstring": "Central registry for managing and validating services.",
                    "base_classes": []
                },
                "EmptyService": {
                    "methods": [
                        "__init__",
                        "__getattr__"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 109
        },
        "core\\services\\discord\\DiscordManager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "set_log_callback",
                "_log",
                "load_config",
                "save_config",
                "update_credentials",
                "map_prompt_to_channel",
                "unmap_prompt_channel",
                "get_channel_for_prompt",
                "_register_events",
                "_register_commands",
                "_build_status_message",
                "run_bot",
                "_run_bot_loop",
                "stop_bot",
                "send_message",
                "send_file",
                "send_dreamscape_episode",
                "send_prompt_response",
                "send_event_notification",
                "update_status",
                "test_connection",
                "__init__",
                "initUI",
                "load_prompt_types",
                "update_credentials",
                "map_prompt_to_channel",
                "unmap_selected_prompt",
                "refresh_prompt_channel_list"
            ],
            "classes": {
                "DiscordManager": {
                    "methods": [
                        "__init__",
                        "set_log_callback",
                        "_log",
                        "load_config",
                        "save_config",
                        "update_credentials",
                        "map_prompt_to_channel",
                        "unmap_prompt_channel",
                        "get_channel_for_prompt",
                        "_register_events",
                        "_register_commands",
                        "_build_status_message",
                        "run_bot",
                        "_run_bot_loop",
                        "stop_bot",
                        "send_message",
                        "send_file",
                        "send_dreamscape_episode",
                        "send_prompt_response",
                        "send_event_notification",
                        "update_status",
                        "test_connection"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "DiscordSettingsDialog": {
                    "methods": [
                        "__init__",
                        "initUI",
                        "load_prompt_types",
                        "update_credentials",
                        "map_prompt_to_channel",
                        "unmap_selected_prompt",
                        "refresh_prompt_channel_list"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QDialog"
                    ]
                }
            },
            "routes": [],
            "complexity": 58
        },
        "core\\social\\AIChatAgent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "ask",
                "_ask_openai",
                "_ask_ollama",
                "_build_prompt",
                "_initialize_chat_thread",
                "append_to_chat_thread",
                "_log_interaction"
            ],
            "classes": {
                "AIChatAgent": {
                    "methods": [
                        "__init__",
                        "ask",
                        "_ask_openai",
                        "_ask_ollama",
                        "_build_prompt",
                        "_initialize_chat_thread",
                        "append_to_chat_thread",
                        "_log_interaction"
                    ],
                    "docstring": "AIChatAgent: Unified AI assistant optimized for context-rich, personalized interactions in Victor's voice.\nSupports OpenAI, local LLMs (Ollama), automatic ChatGPT thread creation, persistent memory logging, and fine-tuning dataset preparation.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 16
        },
        "core\\social\\CommunityIntegrationManager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_check_platform_credentials",
                "_initialize_platforms",
                "_load_strategies",
                "_load_platform_status",
                "_save_platform_status",
                "get_available_platforms",
                "get_platform",
                "get_all_platforms",
                "enable_platform",
                "disable_platform",
                "connect_platform",
                "disconnect_platform",
                "run_daily_community_management",
                "_connect_enabled_platforms",
                "_collect_metrics",
                "analyze_community_health",
                "generate_insights_and_recommendations",
                "create_community_building_plan",
                "post_content",
                "identify_advocates",
                "track_member_interactions"
            ],
            "classes": {
                "CommunityIntegrationManager": {
                    "methods": [
                        "__init__",
                        "_check_platform_credentials",
                        "_initialize_platforms",
                        "_load_strategies",
                        "_load_platform_status",
                        "_save_platform_status",
                        "get_available_platforms",
                        "get_platform",
                        "get_all_platforms",
                        "enable_platform",
                        "disable_platform",
                        "connect_platform",
                        "disconnect_platform",
                        "run_daily_community_management",
                        "_connect_enabled_platforms",
                        "_collect_metrics",
                        "analyze_community_health",
                        "generate_insights_and_recommendations",
                        "create_community_building_plan",
                        "post_content",
                        "identify_advocates",
                        "track_member_interactions"
                    ],
                    "docstring": "Manages integrations with various social platforms, handles authentication,\nand provides a unified interface for community building.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 44
        },
        "core\\social\\community_integration.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_initialize_strategies",
                "_initialize_dashboard",
                "_initialize_post_manager",
                "analyze_community_health",
                "generate_insights_and_recommendations",
                "create_community_building_plan",
                "identify_advocates",
                "post_across_platforms",
                "track_member_interaction",
                "optimize_platform_strategies",
                "generate_visualizations",
                "run_daily_community_management"
            ],
            "classes": {
                "CommunityIntegrationManager": {
                    "methods": [
                        "__init__",
                        "_initialize_strategies",
                        "_initialize_dashboard",
                        "_initialize_post_manager",
                        "analyze_community_health",
                        "generate_insights_and_recommendations",
                        "create_community_building_plan",
                        "identify_advocates",
                        "post_across_platforms",
                        "track_member_interaction",
                        "optimize_platform_strategies",
                        "generate_visualizations",
                        "run_daily_community_management"
                    ],
                    "docstring": "Integrates all social media platforms with the unified community dashboard.\n\nThis class serves as the main entry point for community management,\nconnecting platform-specific strategies with unified analytics and reporting.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 26
        },
        "core\\social\\log_writer.py": {
            "language": ".py",
            "functions": [
                "write_json_log",
                "log_login",
                "log_post",
                "log_error"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "core\\social\\social_config.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "get_env",
                "_validate_required_keys",
                "_default_platform_urls",
                "get_platform_url",
                "chrome_profile_path",
                "_default_rate_limits",
                "within_rate_limit",
                "register_action",
                "_check_daily_reset",
                "_save_rate_limit_state",
                "_load_rate_limit_state",
                "register_rate_limit"
            ],
            "classes": {
                "SocialConfig": {
                    "methods": [
                        "__init__",
                        "get_env",
                        "_validate_required_keys",
                        "_default_platform_urls",
                        "get_platform_url",
                        "chrome_profile_path",
                        "_default_rate_limits",
                        "within_rate_limit",
                        "register_action",
                        "_check_daily_reset",
                        "_save_rate_limit_state",
                        "_load_rate_limit_state",
                        "register_rate_limit"
                    ],
                    "docstring": "FULL SYNC social_config with integrated rate limit and daily reset handling.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 26
        },
        "core\\social\\social_post_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "post_next",
                "post_all",
                "enqueue_post",
                "shutdown",
                "post_to_platform"
            ],
            "classes": {
                "SocialPostManager": {
                    "methods": [
                        "__init__",
                        "post_next",
                        "post_all",
                        "enqueue_post",
                        "shutdown"
                    ],
                    "docstring": "Manages posting of social media content across multiple platforms.\nSupports multi-threading for faster execution and centralized error handling.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 11
        },
        "core\\social\\StrategyLoader.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load_strategy",
                "_validate_strategy",
                "get_available_strategies",
                "reload_strategy",
                "register_strategy"
            ],
            "classes": {
                "StrategyLoader": {
                    "methods": [
                        "__init__",
                        "load_strategy",
                        "_validate_strategy",
                        "get_available_strategies",
                        "reload_strategy",
                        "register_strategy"
                    ],
                    "docstring": "Dynamically loads platform-specific strategy classes.\nHandles strategy initialization and validation.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 12
        },
        "core\\social\\TaskQueueManager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start",
                "stop",
                "add_task",
                "_worker",
                "queue_size",
                "status",
                "sample_task"
            ],
            "classes": {
                "TaskQueueManager": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop",
                        "add_task",
                        "_worker",
                        "queue_size",
                        "status"
                    ],
                    "docstring": "TaskQueueManager: A robust, priority-based task queue with threaded workers.\nThis manager supports:\n  - Prioritized task scheduling (lower value = higher priority)\n  - Delayed execution for rate-limiting or scheduling\n  - Configurable retries with exponential backoff\n  - Structured logging of task outcomes for feedback and reinforcement learning loops",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 15
        },
        "core\\social\\UnifiedCommunityDashboard.py": {
            "language": ".py",
            "functions": [
                "to_dict",
                "__init__",
                "_initialize_strategies",
                "_load_saved_data",
                "save_data",
                "update_metrics",
                "update_top_members",
                "generate_insights",
                "_calculate_trends",
                "_generate_platform_insights",
                "_generate_overall_insights",
                "get_metrics_history",
                "get_latest_metrics",
                "generate_metrics_chart",
                "get_platform_status",
                "get_community_building_plan",
                "_get_recommended_platforms_for_day"
            ],
            "classes": {
                "CommunityMetrics": {
                    "methods": [
                        "to_dict"
                    ],
                    "docstring": "Data structure for standardized community metrics across platforms.",
                    "base_classes": []
                },
                "CommunityDashboard": {
                    "methods": [
                        "__init__",
                        "_initialize_strategies",
                        "_load_saved_data",
                        "save_data",
                        "update_metrics",
                        "update_top_members",
                        "generate_insights",
                        "_calculate_trends",
                        "_generate_platform_insights",
                        "_generate_overall_insights",
                        "get_metrics_history",
                        "get_latest_metrics",
                        "generate_metrics_chart",
                        "get_platform_status",
                        "get_community_building_plan",
                        "_get_recommended_platforms_for_day"
                    ],
                    "docstring": "Provides a centralized dashboard for cross-platform community analytics and insights",
                    "base_classes": [
                        "QObject"
                    ]
                }
            },
            "routes": [],
            "complexity": 34
        },
        "core\\social\\UnifiedPostManager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_post_history",
                "_save_post_history",
                "post_to_platform",
                "_adapt_content_for_platform",
                "schedule_post",
                "get_scheduled_posts",
                "cancel_scheduled_post",
                "get_post_analytics",
                "_get_current_metrics",
                "generate_content_ideas"
            ],
            "classes": {
                "UnifiedPostManager": {
                    "methods": [
                        "__init__",
                        "_load_post_history",
                        "_save_post_history",
                        "post_to_platform",
                        "_adapt_content_for_platform",
                        "schedule_post",
                        "get_scheduled_posts",
                        "cancel_scheduled_post",
                        "get_post_analytics",
                        "_get_current_metrics",
                        "generate_content_ideas"
                    ],
                    "docstring": "Manages post creation, scheduling, and distribution across multiple social platforms.\nProvides a unified interface for content management and cross-platform posting.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 22
        },
        "core\\social\\data\\post_history.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_load_history",
                "_save_history",
                "add_post",
                "get_posts",
                "clear_history"
            ],
            "classes": {
                "PostHistory": {
                    "methods": [
                        "__init__",
                        "_load_history",
                        "_save_history",
                        "add_post",
                        "get_posts",
                        "clear_history"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 12
        },
        "core\\social\\data\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\social\\strategies\\BaseEngagementBot.py": {
            "language": ".py",
            "functions": [
                "retry_on_failure",
                "decorator_retry",
                "__init__",
                "get_driver",
                "get_random_user_agent",
                "_wait",
                "login",
                "is_logged_in",
                "_login_with_credentials",
                "post",
                "like_posts",
                "comment_on_posts",
                "follow_users",
                "unfollow_non_returners",
                "go_viral",
                "_log_followed_users",
                "_find_posts",
                "_find_like_button",
                "_find_comment_box",
                "_find_profile_url",
                "_find_follow_button",
                "_find_unfollow_button",
                "run_daily_session",
                "wrapper_retry"
            ],
            "classes": {
                "BaseEngagementBot": {
                    "methods": [
                        "__init__",
                        "get_driver",
                        "get_random_user_agent",
                        "_wait",
                        "login",
                        "is_logged_in",
                        "_login_with_credentials",
                        "post",
                        "like_posts",
                        "comment_on_posts",
                        "follow_users",
                        "unfollow_non_returners",
                        "go_viral",
                        "_log_followed_users",
                        "_find_posts",
                        "_find_like_button",
                        "_find_comment_box",
                        "_find_profile_url",
                        "_find_follow_button",
                        "_find_unfollow_button",
                        "run_daily_session"
                    ],
                    "docstring": "Base class for all social platform engagement bots.\nProvides unified methods for:\n  - Login (cookie and credential-based, with manual fallback)\n  - Community engagement actions (like, comment, follow, unfollow, viral actions)\n  - Daily session orchestration.\n\nPlatform-specific details are provided via abstract helper methods.",
                    "base_classes": [
                        "ABC"
                    ]
                }
            },
            "routes": [],
            "complexity": 45
        },
        "core\\social\\strategies\\config_loader.py": {
            "language": ".py",
            "functions": [
                "load_yaml_config",
                "load_json_config",
                "load_configs",
                "get_nested",
                "get_env_or_config",
                "reload_configs"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "core\\social\\strategies\\context_db.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "create_tables",
                "log_post",
                "fetch_recent_posts",
                "fetch_last_post_content",
                "log_engagement",
                "fetch_engagements_for_post",
                "get_rate_limit",
                "update_rate_limit",
                "update_sentiment",
                "close"
            ],
            "classes": {
                "UnifiedContextEngine": {
                    "methods": [
                        "__init__",
                        "create_tables",
                        "log_post",
                        "fetch_recent_posts",
                        "fetch_last_post_content",
                        "log_engagement",
                        "fetch_engagements_for_post",
                        "get_rate_limit",
                        "update_rate_limit",
                        "update_sentiment",
                        "close"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 22
        },
        "core\\social\\strategies\\facebook_strategy.py": {
            "language": ".py",
            "functions": [
                "retry_on_failure",
                "get_random_user_agent",
                "start_scheduler",
                "post_to_facebook",
                "decorator_retry",
                "__init__",
                "_wait",
                "get_driver",
                "is_logged_in",
                "login",
                "post",
                "like_posts",
                "comment_on_posts",
                "follow_users",
                "unfollow_non_returners",
                "_log_followed_users",
                "go_viral",
                "run_daily_session",
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "get_random_user_agent",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "adaptive_posting_strategy",
                "analyze_comment_sentiment",
                "reinforce_engagement",
                "reward_top_followers",
                "cross_platform_feedback_loop",
                "run_feedback_loop",
                "wrapper_retry"
            ],
            "classes": {
                "FacebookBot": {
                    "methods": [
                        "__init__",
                        "_wait",
                        "get_driver",
                        "is_logged_in",
                        "login",
                        "post"
                    ],
                    "docstring": "Automates Facebook login and posting.\nThis base class handles authentication and AI-powered post creation.",
                    "base_classes": []
                },
                "FacebookEngagementBot": {
                    "methods": [
                        "like_posts",
                        "comment_on_posts",
                        "follow_users",
                        "unfollow_non_returners",
                        "_log_followed_users",
                        "go_viral",
                        "run_daily_session"
                    ],
                    "docstring": "Extends FacebookBot with essential community building functions:\n  - Like posts, comment, follow/unfollow users, and viral engagement.\n  - Maintains a FOLLOW_DB to track engagements.\n  - Runs daily engagement sessions.",
                    "base_classes": [
                        "FacebookBot"
                    ]
                },
                "FacebookStrategy": {
                    "methods": [
                        "__init__",
                        "initialize",
                        "cleanup",
                        "get_community_metrics",
                        "get_top_members",
                        "track_member_interaction",
                        "_get_driver",
                        "get_random_user_agent",
                        "_wait",
                        "login",
                        "is_logged_in",
                        "post_content",
                        "run_daily_strategy_session",
                        "_load_feedback_data",
                        "_save_feedback_data",
                        "analyze_engagement_metrics",
                        "adaptive_posting_strategy",
                        "analyze_comment_sentiment",
                        "reinforce_engagement",
                        "reward_top_followers",
                        "cross_platform_feedback_loop",
                        "run_feedback_loop"
                    ],
                    "docstring": "Centralized strategy class for managing Facebook automation and community building.\nExtends BasePlatformStrategy with Facebook-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops using ChatGPT responses\n  - Reward system for top engaging followers\n  - Cross-platform feedback integration",
                    "base_classes": [
                        "BasePlatformStrategy"
                    ]
                }
            },
            "routes": [],
            "complexity": 76
        },
        "core\\social\\strategies\\instagram_strategy.py": {
            "language": ".py",
            "functions": [
                "retry_on_failure",
                "get_random_mobile_user_agent",
                "start_scheduler",
                "post_to_instagram",
                "decorator_retry",
                "__init__",
                "get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "create_post",
                "like_posts",
                "comment_on_posts",
                "_gather_post_links",
                "follow_users",
                "unfollow_user",
                "__init__",
                "run_daily_session",
                "generate_ai_comments",
                "like_posts",
                "comment_on_posts",
                "follow_users",
                "unfollow_non_returners",
                "_log_followed_users",
                "go_viral",
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "analyze_comment_sentiment",
                "reinforce_engagement",
                "reward_top_engagers",
                "cross_platform_feedback_loop",
                "run_feedback_loop",
                "wrapper_retry"
            ],
            "classes": {
                "InstagramBot": {
                    "methods": [
                        "__init__",
                        "get_driver",
                        "_wait",
                        "login",
                        "is_logged_in",
                        "create_post",
                        "like_posts",
                        "comment_on_posts",
                        "_gather_post_links",
                        "follow_users",
                        "unfollow_user"
                    ],
                    "docstring": "Automates Instagram login, posting, and engagement actions using Selenium.\nUses mobile emulation (Pixel 5) to enable posting via Instagram's mobile interface.",
                    "base_classes": []
                },
                "InstagramEngagementBot": {
                    "methods": [
                        "__init__",
                        "run_daily_session",
                        "generate_ai_comments",
                        "like_posts",
                        "comment_on_posts",
                        "follow_users",
                        "unfollow_non_returners",
                        "_log_followed_users",
                        "go_viral"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "InstagramStrategy": {
                    "methods": [
                        "__init__",
                        "initialize",
                        "cleanup",
                        "get_community_metrics",
                        "get_top_members",
                        "track_member_interaction",
                        "_get_driver",
                        "_wait",
                        "login",
                        "is_logged_in",
                        "post_content",
                        "run_daily_strategy_session",
                        "_load_feedback_data",
                        "_save_feedback_data",
                        "analyze_engagement_metrics",
                        "analyze_comment_sentiment",
                        "reinforce_engagement",
                        "reward_top_engagers",
                        "cross_platform_feedback_loop",
                        "run_feedback_loop"
                    ],
                    "docstring": "Centralized strategy class for Instagram automation and community building.\nExtends BasePlatformStrategy with Instagram-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops using ChatGPT responses\n  - Reward system for top engaging followers\n  - Cross-platform feedback integration",
                    "base_classes": [
                        "BasePlatformStrategy"
                    ]
                }
            },
            "routes": [],
            "complexity": 86
        },
        "core\\social\\strategies\\stocktwits_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "login",
                "is_logged_in",
                "post",
                "engage_community",
                "_log_follow",
                "unfollow_non_returners",
                "run_daily_session",
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "run_feedback_loop",
                "adaptive_posting_strategy",
                "reinforce_engagement",
                "reward_top_engagers",
                "cross_platform_feedback_loop"
            ],
            "classes": {
                "StocktwitsCommunityArchitect": {
                    "methods": [
                        "__init__",
                        "login",
                        "is_logged_in",
                        "post",
                        "engage_community",
                        "_log_follow",
                        "unfollow_non_returners",
                        "run_daily_session"
                    ],
                    "docstring": "Stocktwits Community Builder:\nAutomates posts, engagement, and follower interactions with AI-generated content in Victor's authentic tone.",
                    "base_classes": []
                },
                "StocktwitsStrategy": {
                    "methods": [
                        "__init__",
                        "initialize",
                        "cleanup",
                        "get_community_metrics",
                        "get_top_members",
                        "track_member_interaction",
                        "_get_driver",
                        "_wait",
                        "login",
                        "is_logged_in",
                        "post_content",
                        "run_daily_strategy_session",
                        "_load_feedback_data",
                        "_save_feedback_data",
                        "analyze_engagement_metrics",
                        "run_feedback_loop",
                        "adaptive_posting_strategy",
                        "reinforce_engagement",
                        "reward_top_engagers",
                        "cross_platform_feedback_loop"
                    ],
                    "docstring": "Centralized strategy class for Stocktwits automation and community building.\nExtends BasePlatformStrategy with Stocktwits-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops using ChatGPT responses\n  - Reward system for top engaging followers\n  - Cross-platform feedback integration",
                    "base_classes": [
                        "BasePlatformStrategy"
                    ]
                }
            },
            "routes": [],
            "complexity": 56
        },
        "core\\social\\strategies\\reddit_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "run_feedback_loop",
                "adaptive_posting_strategy"
            ],
            "classes": {
                "RedditStrategy": {
                    "methods": [
                        "__init__",
                        "initialize",
                        "cleanup",
                        "get_community_metrics",
                        "get_top_members",
                        "track_member_interaction",
                        "_get_driver",
                        "_wait",
                        "login",
                        "is_logged_in",
                        "post_content",
                        "run_daily_strategy_session",
                        "_load_feedback_data",
                        "_save_feedback_data",
                        "analyze_engagement_metrics",
                        "run_feedback_loop",
                        "adaptive_posting_strategy"
                    ],
                    "docstring": "Centralized strategy class for Reddit automation and community building.\nExtends BasePlatformStrategy with Reddit-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops using ChatGPT responses\n  - Reward system for top engaging followers\n  - Cross-platform feedback integration",
                    "base_classes": [
                        "BasePlatformStrategy"
                    ]
                }
            },
            "routes": [],
            "complexity": 34
        },
        "core\\social\\strategies\\tiktok_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_video",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "run_feedback_loop",
                "adaptive_posting_strategy",
                "update_trending_hashtags",
                "reward_top_creators",
                "cross_platform_feedback_loop"
            ],
            "classes": {
                "TikTokStrategy": {
                    "methods": [
                        "__init__",
                        "initialize",
                        "cleanup",
                        "get_community_metrics",
                        "get_top_members",
                        "track_member_interaction",
                        "_get_driver",
                        "_wait",
                        "login",
                        "is_logged_in",
                        "post_video",
                        "run_daily_strategy_session",
                        "_load_feedback_data",
                        "_save_feedback_data",
                        "analyze_engagement_metrics",
                        "run_feedback_loop",
                        "adaptive_posting_strategy",
                        "update_trending_hashtags",
                        "reward_top_creators",
                        "cross_platform_feedback_loop"
                    ],
                    "docstring": "Centralized strategy class for TikTok automation and community building.\nExtends BasePlatformStrategy with TikTok-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Video content scheduling and posting\n  - Hashtag trend analysis and optimization\n  - Cross-platform content repurposing\n  - Engagement analytics and community growth tracking",
                    "base_classes": [
                        "BasePlatformStrategy"
                    ]
                }
            },
            "routes": [],
            "complexity": 40
        },
        "core\\social\\strategies\\twitter_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "login",
                "is_logged_in",
                "post_tweet",
                "post_thread",
                "_extract_tweet_id",
                "engage_community",
                "_follow_author",
                "_log_follow",
                "unfollow_non_returners",
                "run_daily_session",
                "post_thread",
                "__init__",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "adaptive_posting_strategy",
                "analyze_comment_sentiment",
                "reinforce_engagement",
                "reward_top_engagers",
                "cross_platform_feedback_loop",
                "run_feedback_loop",
                "run_daily_strategy_session"
            ],
            "classes": {
                "TwitterCommunityArchitect": {
                    "methods": [
                        "__init__",
                        "login",
                        "is_logged_in",
                        "post_tweet",
                        "post_thread",
                        "_extract_tweet_id",
                        "engage_community",
                        "_follow_author",
                        "_log_follow",
                        "unfollow_non_returners",
                        "run_daily_session",
                        "post_thread"
                    ],
                    "docstring": "Ultimate Twitter Engagement Bot.\nCombines posting, commenting, following, and adaptive AI-powered interactions.",
                    "base_classes": []
                },
                "TwitterStrategy": {
                    "methods": [
                        "__init__",
                        "_load_feedback_data",
                        "_save_feedback_data",
                        "analyze_engagement_metrics",
                        "adaptive_posting_strategy",
                        "analyze_comment_sentiment",
                        "reinforce_engagement",
                        "reward_top_engagers",
                        "cross_platform_feedback_loop",
                        "run_feedback_loop",
                        "run_daily_strategy_session"
                    ],
                    "docstring": "Centralized strategy class for Twitter automation and community building.\nExtends TwitterCommunityArchitect with:\n  - Dynamic feedback loops for engagement metrics analysis.\n  - AI sentiment analysis & reinforcement loops.\n  - Reward system for top engagers.\n  - Cross-platform feedback integration.",
                    "base_classes": [
                        "TwitterCommunityArchitect"
                    ]
                }
            },
            "routes": [],
            "complexity": 46
        },
        "core\\social\\strategies\\wordpress_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initialize",
                "cleanup",
                "sync_youtube_video",
                "moderate_comment",
                "get_community_metrics",
                "get_top_members",
                "_load_community_data",
                "_save_community_data",
                "generate_engagement_report",
                "track_member_interaction"
            ],
            "classes": {
                "WordPressCommunityStrategy": {
                    "methods": [
                        "__init__",
                        "initialize",
                        "cleanup",
                        "sync_youtube_video",
                        "moderate_comment",
                        "get_community_metrics",
                        "get_top_members",
                        "_load_community_data",
                        "_save_community_data",
                        "generate_engagement_report",
                        "track_member_interaction"
                    ],
                    "docstring": "WordPress community strategy that integrates with YouTube for automated community building.\nFeatures:\n- Auto-syncs YouTube videos as WordPress posts\n- Manages comments across both platforms\n- Generates engagement reports\n- Handles community moderation\n- Creates automated responses",
                    "base_classes": [
                        "BasePlatformStrategy"
                    ]
                }
            },
            "routes": [],
            "complexity": 22
        },
        "core\\social\\strategies\\youtube_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_video",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "run_feedback_loop",
                "adaptive_posting_strategy",
                "reward_top_creators",
                "cross_platform_feedback_loop"
            ],
            "classes": {
                "YouTubeStrategy": {
                    "methods": [
                        "__init__",
                        "initialize",
                        "cleanup",
                        "get_community_metrics",
                        "get_top_members",
                        "track_member_interaction",
                        "_get_driver",
                        "_wait",
                        "login",
                        "is_logged_in",
                        "post_video",
                        "run_daily_strategy_session",
                        "_load_feedback_data",
                        "_save_feedback_data",
                        "analyze_engagement_metrics",
                        "run_feedback_loop",
                        "adaptive_posting_strategy",
                        "reward_top_creators",
                        "cross_platform_feedback_loop"
                    ],
                    "docstring": "Centralized strategy class for YouTube automation and community building.\nExtends BasePlatformStrategy with YouTube-specific implementations.\nFeatures:\n  - Video content management and scheduling\n  - Shorts creation and optimization\n  - Community post engagement\n  - Analytics tracking and optimization\n  - Cross-platform content distribution",
                    "base_classes": [
                        "BasePlatformStrategy"
                    ]
                }
            },
            "routes": [],
            "complexity": 38
        },
        "core\\system_loaders\\dreamscape_system_loader.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "load"
            ],
            "classes": {
                "DreamscapeSystemLoader": {
                    "methods": [
                        "__init__",
                        "load"
                    ],
                    "docstring": "Handles the initialization and wiring of all components required \nfor the Dreamscape generation subsystem.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 4
        },
        "cursor_prompts\\ollama_tests\\test_chat_mate.py": {
            "language": ".py",
            "functions": [
                "test_placeholder"
            ],
            "classes": {
                "PlaceholderTest": {
                    "methods": [
                        "test_placeholder"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 2
        },
        "cursor_prompts\\ollama_tests\\test_extract_unused_code_safely.py": {
            "language": ".py",
            "functions": [
                "test_placeholder"
            ],
            "classes": {
                "PlaceholderTest": {
                    "methods": [
                        "test_placeholder"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 2
        },
        "cursor_prompts\\ollama_tests\\test_ProjectScanner.py": {
            "language": ".py",
            "functions": [
                "test_placeholder"
            ],
            "classes": {
                "PlaceholderTest": {
                    "methods": [
                        "test_placeholder"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "unittest.TestCase"
                    ]
                }
            },
            "routes": [],
            "complexity": 2
        },
        "interfaces\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "interfaces\\pyqt\\bootstrap.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initUI",
                "closeEvent"
            ],
            "classes": {
                "DreamscapeGUI": {
                    "methods": [
                        "__init__",
                        "initUI",
                        "closeEvent"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QWidget"
                    ]
                }
            },
            "routes": [],
            "complexity": 6
        },
        "interfaces\\pyqt\\dreamscape_services.py": {
            "language": ".py",
            "functions": [
                "find_project_root",
                "__init__",
                "_init_service",
                "_init_discord_service",
                "_init_task_orchestrator",
                "_create_empty_service",
                "_map_service_dependencies",
                "get_service",
                "set_service",
                "_log_initialization_status",
                "service_health_check",
                "shutdown",
                "create_chat_manager",
                "execute_prompt",
                "start_prompt_cycle",
                "load_prompt",
                "save_prompt",
                "reset_prompts",
                "launch_discord_bot",
                "stop_discord_bot",
                "send_discord_message",
                "send_discord_file",
                "send_discord_template",
                "get_discord_status",
                "get_dreamscape_context",
                "send_context_to_chatgpt",
                "schedule_context_updates",
                "analyze_execution_response",
                "discord",
                "discord",
                "bootstrap_services",
                "shutdown_all",
                "__init__",
                "__getattr__",
                "is_empty_service",
                "method"
            ],
            "classes": {
                "DreamscapeService": {
                    "methods": [
                        "__init__",
                        "_init_service",
                        "_init_discord_service",
                        "_init_task_orchestrator",
                        "_create_empty_service",
                        "_map_service_dependencies",
                        "get_service",
                        "set_service",
                        "_log_initialization_status",
                        "service_health_check",
                        "shutdown",
                        "create_chat_manager",
                        "execute_prompt",
                        "start_prompt_cycle",
                        "load_prompt",
                        "save_prompt",
                        "reset_prompts",
                        "launch_discord_bot",
                        "stop_discord_bot",
                        "send_discord_message",
                        "send_discord_file",
                        "send_discord_template",
                        "get_discord_status",
                        "get_dreamscape_context",
                        "send_context_to_chatgpt",
                        "schedule_context_updates",
                        "analyze_execution_response",
                        "discord",
                        "discord",
                        "bootstrap_services",
                        "shutdown_all"
                    ],
                    "docstring": "Central service class that encapsulates all core business logic.\nThis module has zero dependencies on any UI framework.\n\nDesign rationale:\n- Centralizes all business logic and service creation\n- Provides robust error handling for all service initialization\n- Implements fallback mechanisms with EmptyService implementations\n- Supports runtime service creation and health checks",
                    "base_classes": []
                },
                "EmptyService": {
                    "methods": [
                        "__init__",
                        "__getattr__",
                        "is_empty_service"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 70
        },
        "interfaces\\pyqt\\IntegratedMainWindow.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_wire_ui_actions",
                "on_execute_prompt",
                "on_save_prompt",
                "on_reset_prompts",
                "on_launch_discord_bot",
                "on_stop_discord_bot",
                "on_launch_dashboard",
                "append_output",
                "append_discord_log",
                "update_discord_status",
                "task"
            ],
            "classes": {
                "IntegratedMainWindow": {
                    "methods": [
                        "__init__",
                        "_wire_ui_actions",
                        "on_execute_prompt",
                        "on_save_prompt",
                        "on_reset_prompts",
                        "on_launch_discord_bot",
                        "on_stop_discord_bot",
                        "on_launch_dashboard",
                        "append_output",
                        "append_discord_log",
                        "update_discord_status"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "DreamscapeMainWindow"
                    ]
                }
            },
            "routes": [],
            "complexity": 23
        },
        "interfaces\\pyqt\\__main__.py": {
            "language": ".py",
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "interfaces\\pyqt\\components\\community_dashboard_tab.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "setup_ui",
                "setup_overview_tab",
                "setup_insights_tab",
                "setup_community_tab",
                "setup_planning_tab",
                "refresh_data",
                "generate_insights",
                "generate_plan",
                "on_platform_changed",
                "on_focus_changed",
                "update_metrics_view",
                "update_insights_view",
                "update_members_view",
                "update_platform_status",
                "update_plan_view",
                "generate_content_strategy",
                "add_activity_log"
            ],
            "classes": {
                "CommunityDashboardTab": {
                    "methods": [
                        "__init__",
                        "setup_ui",
                        "setup_overview_tab",
                        "setup_insights_tab",
                        "setup_community_tab",
                        "setup_planning_tab",
                        "refresh_data",
                        "generate_insights",
                        "generate_plan",
                        "on_platform_changed",
                        "on_focus_changed",
                        "update_metrics_view",
                        "update_insights_view",
                        "update_members_view",
                        "update_platform_status",
                        "update_plan_view",
                        "generate_content_strategy",
                        "add_activity_log"
                    ],
                    "docstring": "Provides a comprehensive dashboard for monitoring social media community metrics\nand insights across all platforms.",
                    "base_classes": [
                        "QWidget"
                    ]
                }
            },
            "routes": [],
            "complexity": 36
        },
        "interfaces\\pyqt\\components\\prompt_execution_tab.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initUI",
                "_create_exclusion_group",
                "_create_prompt_controls_group",
                "add_exclusion",
                "remove_exclusion",
                "get_excluded_chats",
                "update_execution_mode",
                "load_prompt"
            ],
            "classes": {
                "PromptExecutionTab": {
                    "methods": [
                        "__init__",
                        "initUI",
                        "_create_exclusion_group",
                        "_create_prompt_controls_group",
                        "add_exclusion",
                        "remove_exclusion",
                        "get_excluded_chats",
                        "update_execution_mode",
                        "load_prompt"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QWidget"
                    ]
                }
            },
            "routes": [],
            "complexity": 18
        },
        "interfaces\\pyqt\\components\\dialogs\\discord_settings.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initUI",
                "save_credentials",
                "map_prompt_to_channel",
                "unmap_selected_prompt",
                "refresh_prompt_channel_list"
            ],
            "classes": {
                "DiscordSettingsDialog": {
                    "methods": [
                        "__init__",
                        "initUI",
                        "save_credentials",
                        "map_prompt_to_channel",
                        "unmap_selected_prompt",
                        "refresh_prompt_channel_list"
                    ],
                    "docstring": "Dialog window for configuring Discord bot settings and prompt channel mappings.",
                    "base_classes": [
                        "QDialog"
                    ]
                }
            },
            "routes": [],
            "complexity": 12
        },
        "interfaces\\pyqt\\components\\dialogs\\exclusions_dialog.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initUI",
                "refresh_list",
                "add_exclusion",
                "remove_selected",
                "get_exclusions"
            ],
            "classes": {
                "ExclusionsDialog": {
                    "methods": [
                        "__init__",
                        "initUI",
                        "refresh_list",
                        "add_exclusion",
                        "remove_selected",
                        "get_exclusions"
                    ],
                    "docstring": "Dialog window for managing excluded items (chats, users, etc.)",
                    "base_classes": [
                        "QDialog"
                    ]
                }
            },
            "routes": [],
            "complexity": 12
        },
        "interfaces\\pyqt\\components\\digital_dreamscape\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "interfaces\\pyqt\\tabs\\ConfigurationTab.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initUI",
                "open_exclusions_dialog",
                "open_discord_settings_dialog",
                "open_reinforcement_tools_dialog",
                "log_action"
            ],
            "classes": {
                "ConfigurationTab": {
                    "methods": [
                        "__init__",
                        "initUI",
                        "open_exclusions_dialog",
                        "open_discord_settings_dialog",
                        "open_reinforcement_tools_dialog",
                        "log_action"
                    ],
                    "docstring": "Configuration & Discord Settings tab.\nManages dialogs for exclusions, Discord setup, and reinforcement tools.",
                    "base_classes": [
                        "QWidget"
                    ]
                }
            },
            "routes": [],
            "complexity": 12
        },
        "interfaces\\pyqt\\tabs\\DreamscapeGenerationTab.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_initialize_ui_vars",
                "_store_service_references",
                "_log_service_status",
                "_setup_timers",
                "_load_initial_data",
                "init_ui",
                "_setup_title",
                "_setup_left_panel",
                "_setup_episode_list_group",
                "_setup_controls_group",
                "_setup_context_controls",
                "_setup_right_panel",
                "_setup_content_tab",
                "_setup_context_tab",
                "_setup_log_tab",
                "_setup_template_tab",
                "on_episode_selected",
                "share_to_discord",
                "_on_template_selected",
                "_validate_template_context",
                "_save_rendered_output",
                "refresh_episode_list",
                "refresh_context_memory",
                "log_output",
                "render_dreamscape_template",
                "on_cancel_clicked",
                "send_context_to_chatgpt",
                "save_context_schedule",
                "cleanup",
                "_connect_ui_signals"
            ],
            "classes": {
                "DreamscapeGenerationTab": {
                    "methods": [
                        "__init__",
                        "_initialize_ui_vars",
                        "_store_service_references",
                        "_log_service_status",
                        "_setup_timers",
                        "_load_initial_data",
                        "init_ui",
                        "_setup_title",
                        "_setup_left_panel",
                        "_setup_episode_list_group",
                        "_setup_controls_group",
                        "_setup_context_controls",
                        "_setup_right_panel",
                        "_setup_content_tab",
                        "_setup_context_tab",
                        "_setup_log_tab",
                        "_setup_template_tab",
                        "on_episode_selected",
                        "share_to_discord",
                        "_on_template_selected",
                        "_validate_template_context",
                        "_save_rendered_output",
                        "refresh_episode_list",
                        "refresh_context_memory",
                        "log_output",
                        "render_dreamscape_template",
                        "on_cancel_clicked",
                        "send_context_to_chatgpt",
                        "save_context_schedule",
                        "cleanup",
                        "_connect_ui_signals"
                    ],
                    "docstring": "Main UI tab for generating and managing Dreamscape episodes.\nUses DreamscapeSystemLoader for service initialization and management.",
                    "base_classes": [
                        "QWidget"
                    ]
                }
            },
            "routes": [],
            "complexity": 62
        },
        "interfaces\\pyqt\\tabs\\PromptExecutionTab.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "generate",
                "__init__",
                "_init_ui",
                "_connect_signals",
                "log_output",
                "ensure_local_llm_loaded",
                "on_prompt_loaded",
                "_on_task_done",
                "__init__",
                "_init_ui",
                "log",
                "cancel_sync",
                "_on_sync_completed"
            ],
            "classes": {
                "LocalLLMWrapper": {
                    "methods": [
                        "__init__",
                        "generate"
                    ],
                    "docstring": "Example local LLM wrapper for demonstration purposes.\nReplace the model name or adapt for other frameworks as needed.",
                    "base_classes": []
                },
                "PromptExecutionTab": {
                    "methods": [
                        "__init__",
                        "_init_ui",
                        "_connect_signals",
                        "log_output",
                        "ensure_local_llm_loaded",
                        "on_prompt_loaded",
                        "_on_task_done"
                    ],
                    "docstring": "Tab for executing prompts through various services.\nProvides a unified interface for prompt selection, editing, and execution.\nSupports both online and offline (local LLM) modes.",
                    "base_classes": [
                        "QWidget"
                    ]
                },
                "FullSyncTab": {
                    "methods": [
                        "__init__",
                        "_init_ui",
                        "log",
                        "cancel_sync",
                        "_on_sync_completed"
                    ],
                    "docstring": "Tab interface for running and monitoring full sync operations.\nProvides visual feedback and control over the sync process.",
                    "base_classes": [
                        "QWidget"
                    ]
                }
            },
            "routes": [],
            "complexity": 28
        },
        "interfaces\\pyqt\\tabs\\SyncOpsTab.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_init_ui",
                "toggle_clock",
                "toggle_pomodoro",
                "update_pomodoro_timer",
                "_log_event",
                "save_session"
            ],
            "classes": {
                "SyncOpsTab": {
                    "methods": [
                        "__init__",
                        "_init_ui",
                        "toggle_clock",
                        "toggle_pomodoro",
                        "update_pomodoro_timer",
                        "_log_event",
                        "save_session"
                    ],
                    "docstring": null,
                    "base_classes": [
                        "QWidget"
                    ]
                }
            },
            "routes": [],
            "complexity": 14
        },
        "interfaces\\pyqt\\tabs\\dreamscape_generation\\DreamscapeEpisodeGenerator.py": {
            "language": ".py",
            "functions": [
                "get_base_template_dir",
                "__init__",
                "_load_context_memory",
                "_save_context_memory",
                "_extract_themes",
                "_update_context_with_episode",
                "get_context_summary",
                "get_episode_number",
                "shutdown",
                "get_chatgpt_context_prompt",
                "_generate_dreamscape_entry",
                "ensure_model_in_url",
                "_write_file",
                "_extract_protocols",
                "get_status",
                "cancel_generation",
                "_update_status",
                "_extract_episode_title",
                "generate_episodes",
                "append_log",
                "run_episode_generation"
            ],
            "classes": {
                "DreamscapeEpisodeGenerator": {
                    "methods": [
                        "__init__",
                        "_load_context_memory",
                        "_save_context_memory",
                        "_extract_themes",
                        "_update_context_with_episode",
                        "get_context_summary",
                        "get_episode_number",
                        "shutdown",
                        "get_chatgpt_context_prompt",
                        "_generate_dreamscape_entry",
                        "ensure_model_in_url",
                        "_write_file",
                        "_extract_protocols",
                        "get_status",
                        "cancel_generation",
                        "_update_status",
                        "_extract_episode_title",
                        "generate_episodes",
                        "append_log"
                    ],
                    "docstring": "Digital Dreamscape Lore Automation \u2013 Generates creative narrative episodes from ChatGPT chats.\n\nThis class implements a scalable approach to:\n  - Interact with ChatGPT chats via Selenium WebDriver.\n  - Send a predefined Dreamscape prompt, enhanced with context (rendered via Jinja2).\n  - Wait for and capture a stabilized response.\n  - Update context memory with themes and recent episodes.\n  - Save generated narrative episodes to disk with sanitized filenames.\n  - Optionally post previews to Discord.",
                    "base_classes": []
                },
                "UnifiedPromptService": {
                    "methods": [
                        "run_episode_generation"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 41
        },
        "interfaces\\pyqt\\tabs\\dreamscape_generation\\ServiceInitializer.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initialize_services",
                "_extract_services_from_registry",
                "_get_initialized_services",
                "get_chat_manager",
                "get_template_manager",
                "get_dreamscape_generator"
            ],
            "classes": {
                "ServiceInitializer": {
                    "methods": [
                        "__init__",
                        "initialize_services",
                        "_extract_services_from_registry",
                        "_get_initialized_services",
                        "get_chat_manager",
                        "get_template_manager",
                        "get_dreamscape_generator"
                    ],
                    "docstring": "ServiceInitializer encapsulates the initialization of all services required by\nthe DreamscapeGenerationTab using the DreamscapeSystemLoader.\n\nIt handles:\n  - Injecting external services (or retrieving them from a ui_logic container).\n  - Using DreamscapeSystemLoader for core service initialization.\n  - Setting up component managers with proper dependency injection.\n  - Determining and ensuring the output directory exists.\n  \nAfter initialization, it returns a dictionary of initialized services and component managers.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 14
        },
        "newtest\\2MemoryManager.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "social\\AIChatAgent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "ask",
                "_ask_openai",
                "_ask_ollama",
                "_build_prompt",
                "_initialize_chat_thread",
                "append_to_chat_thread",
                "_log_interaction"
            ],
            "classes": {
                "AIChatAgent": {
                    "methods": [
                        "__init__",
                        "ask",
                        "_ask_openai",
                        "_ask_ollama",
                        "_build_prompt",
                        "_initialize_chat_thread",
                        "append_to_chat_thread",
                        "_log_interaction"
                    ],
                    "docstring": "AIChatAgent: Unified AI assistant optimized for context-rich, personalized interactions in Victor's voice.\nSupports OpenAI, local LLMs (Ollama), automatic ChatGPT thread creation, persistent memory logging, and fine-tuning dataset preparation.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 16
        },
        "social\\community_integration.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_initialize_strategies",
                "_initialize_dashboard",
                "_initialize_post_manager",
                "analyze_community_health",
                "generate_insights_and_recommendations",
                "create_community_building_plan",
                "identify_advocates",
                "post_across_platforms",
                "track_member_interaction",
                "optimize_platform_strategies",
                "generate_visualizations",
                "run_daily_community_management"
            ],
            "classes": {
                "CommunityIntegrationManager": {
                    "methods": [
                        "__init__",
                        "_initialize_strategies",
                        "_initialize_dashboard",
                        "_initialize_post_manager",
                        "analyze_community_health",
                        "generate_insights_and_recommendations",
                        "create_community_building_plan",
                        "identify_advocates",
                        "post_across_platforms",
                        "track_member_interaction",
                        "optimize_platform_strategies",
                        "generate_visualizations",
                        "run_daily_community_management"
                    ],
                    "docstring": "Integrates all social media platforms with the unified community dashboard.\n\nThis class serves as the main entry point for community management,\nconnecting platform-specific strategies with unified analytics and reporting.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 26
        },
        "social\\log_writer.py": {
            "language": ".py",
            "functions": [
                "write_json_log",
                "log_login",
                "log_post",
                "log_error"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "social\\platform_login_manager.py": {
            "language": ".py",
            "functions": [
                "load_cookies",
                "save_cookies",
                "wait_for_manual_login",
                "__init__",
                "login",
                "post",
                "__init__",
                "dispatch_all",
                "_process_platform",
                "_generate_content",
                "_shutdown_all_drivers"
            ],
            "classes": {
                "PlatformStrategy": {
                    "methods": [
                        "__init__",
                        "login",
                        "post"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "SocialPlatformDispatcher": {
                    "methods": [
                        "__init__",
                        "dispatch_all",
                        "_process_platform",
                        "_generate_content",
                        "_shutdown_all_drivers"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 19
        },
        "social\\social_config.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_default_platform_urls",
                "get_platform_url",
                "chrome_profile_path",
                "within_rate_limit",
                "register_action",
                "_check_daily_reset",
                "_save_rate_limit_state",
                "_load_rate_limit_state"
            ],
            "classes": {
                "SocialConfig": {
                    "methods": [
                        "__init__",
                        "_default_platform_urls",
                        "get_platform_url",
                        "chrome_profile_path",
                        "within_rate_limit",
                        "register_action",
                        "_check_daily_reset",
                        "_save_rate_limit_state",
                        "_load_rate_limit_state"
                    ],
                    "docstring": "FULL SYNC social_config with integrated rate limit and daily reset handling.",
                    "base_classes": [
                        "ConfigBase"
                    ]
                }
            },
            "routes": [],
            "complexity": 18
        },
        "social\\social_config_wrapper.py": {
            "language": ".py",
            "functions": [
                "get_social_config"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "social\\social_post_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "post_next",
                "post_all",
                "enqueue_post",
                "shutdown",
                "post_to_platform"
            ],
            "classes": {
                "SocialPostManager": {
                    "methods": [
                        "__init__",
                        "post_next",
                        "post_all",
                        "enqueue_post",
                        "shutdown"
                    ],
                    "docstring": "Manages posting of social media content across multiple platforms.\nSupports multi-threading for faster execution and centralized error handling.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 11
        },
        "social\\TaskQueueManager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start",
                "stop",
                "add_task",
                "_worker",
                "queue_size",
                "status",
                "sample_task"
            ],
            "classes": {
                "TaskQueueManager": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop",
                        "add_task",
                        "_worker",
                        "queue_size",
                        "status"
                    ],
                    "docstring": "TaskQueueManager: A robust, priority-based task queue with threaded workers.\nThis manager supports:\n  - Prioritized task scheduling (lower value = higher priority)\n  - Delayed execution for rate-limiting or scheduling\n  - Configurable retries with exponential backoff\n  - Structured logging of task outcomes for feedback and reinforcement learning loops",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 15
        },
        "social\\ai\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "social\\strategies\\BaseEngagementBot.py": {
            "language": ".py",
            "functions": [
                "retry_on_failure",
                "decorator_retry",
                "__init__",
                "get_driver",
                "get_random_user_agent",
                "_wait",
                "login",
                "is_logged_in",
                "_login_with_credentials",
                "post",
                "like_posts",
                "comment_on_posts",
                "follow_users",
                "unfollow_non_returners",
                "go_viral",
                "_log_followed_users",
                "_find_posts",
                "_find_like_button",
                "_find_comment_box",
                "_find_profile_url",
                "_find_follow_button",
                "_find_unfollow_button",
                "run_daily_session",
                "wrapper_retry"
            ],
            "classes": {
                "BaseEngagementBot": {
                    "methods": [
                        "__init__",
                        "get_driver",
                        "get_random_user_agent",
                        "_wait",
                        "login",
                        "is_logged_in",
                        "_login_with_credentials",
                        "post",
                        "like_posts",
                        "comment_on_posts",
                        "follow_users",
                        "unfollow_non_returners",
                        "go_viral",
                        "_log_followed_users",
                        "_find_posts",
                        "_find_like_button",
                        "_find_comment_box",
                        "_find_profile_url",
                        "_find_follow_button",
                        "_find_unfollow_button",
                        "run_daily_session"
                    ],
                    "docstring": "Base class for all social platform engagement bots.\nProvides unified methods for:\n  - Login (cookie and credential-based, with manual fallback)\n  - Community engagement actions (like, comment, follow, unfollow, viral actions)\n  - Daily session orchestration.\n\nPlatform-specific details are provided via abstract helper methods.",
                    "base_classes": [
                        "ABC"
                    ]
                }
            },
            "routes": [],
            "complexity": 45
        },
        "social\\strategies\\context_db.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "create_tables",
                "log_post",
                "fetch_recent_posts",
                "fetch_last_post_content",
                "log_engagement",
                "fetch_engagements_for_post",
                "get_rate_limit",
                "update_rate_limit",
                "update_sentiment",
                "close"
            ],
            "classes": {
                "UnifiedContextEngine": {
                    "methods": [
                        "__init__",
                        "create_tables",
                        "log_post",
                        "fetch_recent_posts",
                        "fetch_last_post_content",
                        "log_engagement",
                        "fetch_engagements_for_post",
                        "get_rate_limit",
                        "update_rate_limit",
                        "update_sentiment",
                        "close"
                    ],
                    "docstring": null,
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 22
        },
        "social\\strategies\\facebook_strategy.py": {
            "language": ".py",
            "functions": [
                "retry_on_failure",
                "get_random_user_agent",
                "start_scheduler",
                "post_to_facebook",
                "decorator_retry",
                "__init__",
                "_wait",
                "get_driver",
                "is_logged_in",
                "login",
                "post",
                "like_posts",
                "comment_on_posts",
                "follow_users",
                "unfollow_non_returners",
                "_log_followed_users",
                "go_viral",
                "run_daily_session",
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "get_random_user_agent",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "adaptive_posting_strategy",
                "analyze_comment_sentiment",
                "reinforce_engagement",
                "reward_top_followers",
                "cross_platform_feedback_loop",
                "run_feedback_loop",
                "wrapper_retry"
            ],
            "classes": {
                "FacebookBot": {
                    "methods": [
                        "__init__",
                        "_wait",
                        "get_driver",
                        "is_logged_in",
                        "login",
                        "post"
                    ],
                    "docstring": "Automates Facebook login and posting.\nThis base class handles authentication and AI-powered post creation.",
                    "base_classes": []
                },
                "FacebookEngagementBot": {
                    "methods": [
                        "like_posts",
                        "comment_on_posts",
                        "follow_users",
                        "unfollow_non_returners",
                        "_log_followed_users",
                        "go_viral",
                        "run_daily_session"
                    ],
                    "docstring": "Extends FacebookBot with essential community building functions:\n  - Like posts, comment, follow/unfollow users, and viral engagement.\n  - Maintains a FOLLOW_DB to track engagements.\n  - Runs daily engagement sessions.",
                    "base_classes": [
                        "FacebookBot"
                    ]
                },
                "FacebookStrategy": {
                    "methods": [
                        "__init__",
                        "initialize",
                        "cleanup",
                        "get_community_metrics",
                        "get_top_members",
                        "track_member_interaction",
                        "_get_driver",
                        "get_random_user_agent",
                        "_wait",
                        "login",
                        "is_logged_in",
                        "post_content",
                        "run_daily_strategy_session",
                        "_load_feedback_data",
                        "_save_feedback_data",
                        "analyze_engagement_metrics",
                        "adaptive_posting_strategy",
                        "analyze_comment_sentiment",
                        "reinforce_engagement",
                        "reward_top_followers",
                        "cross_platform_feedback_loop",
                        "run_feedback_loop"
                    ],
                    "docstring": "Centralized strategy class for managing Facebook automation and community building.\nExtends BasePlatformStrategy with Facebook-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops using ChatGPT responses\n  - Reward system for top engaging followers\n  - Cross-platform feedback integration",
                    "base_classes": [
                        "BasePlatformStrategy"
                    ]
                }
            },
            "routes": [],
            "complexity": 76
        },
        "social\\strategies\\instagram_strategy.py": {
            "language": ".py",
            "functions": [
                "retry_on_failure",
                "get_random_mobile_user_agent",
                "start_scheduler",
                "post_to_instagram",
                "decorator_retry",
                "__init__",
                "get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "create_post",
                "like_posts",
                "comment_on_posts",
                "_gather_post_links",
                "follow_users",
                "unfollow_user",
                "__init__",
                "run_daily_session",
                "generate_ai_comments",
                "like_posts",
                "comment_on_posts",
                "follow_users",
                "unfollow_non_returners",
                "_log_followed_users",
                "go_viral",
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "analyze_comment_sentiment",
                "reinforce_engagement",
                "reward_top_engagers",
                "cross_platform_feedback_loop",
                "run_feedback_loop",
                "wrapper_retry"
            ],
            "classes": {
                "InstagramBot": {
                    "methods": [
                        "__init__",
                        "get_driver",
                        "_wait",
                        "login",
                        "is_logged_in",
                        "create_post",
                        "like_posts",
                        "comment_on_posts",
                        "_gather_post_links",
                        "follow_users",
                        "unfollow_user"
                    ],
                    "docstring": "Automates Instagram login, posting, and engagement actions using Selenium.\nUses mobile emulation (Pixel 5) to enable posting via Instagram's mobile interface.",
                    "base_classes": []
                },
                "InstagramEngagementBot": {
                    "methods": [
                        "__init__",
                        "run_daily_session",
                        "generate_ai_comments",
                        "like_posts",
                        "comment_on_posts",
                        "follow_users",
                        "unfollow_non_returners",
                        "_log_followed_users",
                        "go_viral"
                    ],
                    "docstring": null,
                    "base_classes": []
                },
                "InstagramStrategy": {
                    "methods": [
                        "__init__",
                        "initialize",
                        "cleanup",
                        "get_community_metrics",
                        "get_top_members",
                        "track_member_interaction",
                        "_get_driver",
                        "_wait",
                        "login",
                        "is_logged_in",
                        "post_content",
                        "run_daily_strategy_session",
                        "_load_feedback_data",
                        "_save_feedback_data",
                        "analyze_engagement_metrics",
                        "analyze_comment_sentiment",
                        "reinforce_engagement",
                        "reward_top_engagers",
                        "cross_platform_feedback_loop",
                        "run_feedback_loop"
                    ],
                    "docstring": "Centralized strategy class for Instagram automation and community building.\nExtends BasePlatformStrategy with Instagram-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops using ChatGPT responses\n  - Reward system for top engaging followers\n  - Cross-platform feedback integration",
                    "base_classes": [
                        "BasePlatformStrategy"
                    ]
                }
            },
            "routes": [],
            "complexity": 86
        },
        "social\\strategies\\linkedin_strategy.py": {
            "language": ".py",
            "functions": [
                "retry_on_failure",
                "decorator_retry",
                "__init__",
                "_get_driver",
                "get_random_user_agent",
                "_wait",
                "login",
                "is_logged_in",
                "_login_with_credentials",
                "post",
                "like_posts",
                "comment_on_posts",
                "follow_users",
                "unfollow_non_returners",
                "go_viral",
                "_log_followed_users",
                "_find_posts",
                "_find_like_button",
                "_find_comment_box",
                "_find_profile_url",
                "_find_follow_button",
                "_find_unfollow_button",
                "run_daily_session",
                "__init__",
                "is_logged_in",
                "_login_with_credentials",
                "post",
                "_find_posts",
                "_find_like_button",
                "_find_comment_box",
                "_find_profile_url",
                "_find_follow_button",
                "_find_unfollow_button",
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "get_random_user_agent",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "wrapper_retry"
            ],
            "classes": {
                "BaseEngagementBot": {
                    "methods": [
                        "__init__",
                        "_get_driver",
                        "get_random_user_agent",
                        "_wait",
                        "login",
                        "is_logged_in",
                        "_login_with_credentials",
                        "post",
                        "like_posts",
                        "comment_on_posts",
                        "follow_users",
                        "unfollow_non_returners",
                        "go_viral",
                        "_log_followed_users",
                        "_find_posts",
                        "_find_like_button",
                        "_find_comment_box",
                        "_find_profile_url",
                        "_find_follow_button",
                        "_find_unfollow_button",
                        "run_daily_session"
                    ],
                    "docstring": "A universal base class for social media engagement bots.\nProvides core community building functions:\n  - Login (with cookie & credential fallback)\n  - Post content (AI-generated if needed)\n  - Like, comment, follow, unfollow, viral engagement, and DM functionalities\n  - Daily session orchestration",
                    "base_classes": [
                        "ABC"
                    ]
                },
                "LinkedInEngagementBot": {
                    "methods": [
                        "__init__",
                        "is_logged_in",
                        "_login_with_credentials",
                        "post",
                        "_find_posts",
                        "_find_like_button",
                        "_find_comment_box",
                        "_find_profile_url",
                        "_find_follow_button",
                        "_find_unfollow_button"
                    ],
                    "docstring": "LinkedIn-specific implementation of BaseEngagementBot.\nImplements abstract methods using LinkedIn's DOM structure.",
                    "base_classes": [
                        "BaseEngagementBot"
                    ]
                },
                "LinkedinStrategy": {
                    "methods": [
                        "__init__",
                        "initialize",
                        "cleanup",
                        "get_community_metrics",
                        "get_top_members",
                        "track_member_interaction",
                        "_get_driver",
                        "get_random_user_agent",
                        "_wait",
                        "login",
                        "is_logged_in",
                        "post_content",
                        "run_daily_strategy_session"
                    ],
                    "docstring": "Centralized strategy class for LinkedIn automation and community building.\nExtends BasePlatformStrategy with LinkedIn-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops using ChatGPT responses\n  - Reward system for top engaging followers\n  - Cross-platform feedback integration",
                    "base_classes": [
                        "BasePlatformStrategy"
                    ]
                }
            },
            "routes": [],
            "complexity": 91
        },
        "social\\strategies\\reddit_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "run_feedback_loop",
                "adaptive_posting_strategy"
            ],
            "classes": {
                "RedditStrategy": {
                    "methods": [
                        "__init__",
                        "initialize",
                        "cleanup",
                        "get_community_metrics",
                        "get_top_members",
                        "track_member_interaction",
                        "_get_driver",
                        "_wait",
                        "login",
                        "is_logged_in",
                        "post_content",
                        "run_daily_strategy_session",
                        "_load_feedback_data",
                        "_save_feedback_data",
                        "analyze_engagement_metrics",
                        "run_feedback_loop",
                        "adaptive_posting_strategy"
                    ],
                    "docstring": "Centralized strategy class for Reddit automation and community building.\nExtends BasePlatformStrategy with Reddit-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops using ChatGPT responses\n  - Reward system for top engaging followers\n  - Cross-platform feedback integration",
                    "base_classes": [
                        "BasePlatformStrategy"
                    ]
                }
            },
            "routes": [],
            "complexity": 34
        },
        "social\\strategies\\stocktwits_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "login",
                "is_logged_in",
                "post",
                "engage_community",
                "_log_follow",
                "unfollow_non_returners",
                "run_daily_session",
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "run_feedback_loop",
                "adaptive_posting_strategy",
                "reinforce_engagement",
                "reward_top_engagers",
                "cross_platform_feedback_loop"
            ],
            "classes": {
                "StocktwitsCommunityArchitect": {
                    "methods": [
                        "__init__",
                        "login",
                        "is_logged_in",
                        "post",
                        "engage_community",
                        "_log_follow",
                        "unfollow_non_returners",
                        "run_daily_session"
                    ],
                    "docstring": "Stocktwits Community Builder:\nAutomates posts, engagement, and follower interactions with AI-generated content in Victor's authentic tone.",
                    "base_classes": []
                },
                "StocktwitsStrategy": {
                    "methods": [
                        "__init__",
                        "initialize",
                        "cleanup",
                        "get_community_metrics",
                        "get_top_members",
                        "track_member_interaction",
                        "_get_driver",
                        "_wait",
                        "login",
                        "is_logged_in",
                        "post_content",
                        "run_daily_strategy_session",
                        "_load_feedback_data",
                        "_save_feedback_data",
                        "analyze_engagement_metrics",
                        "run_feedback_loop",
                        "adaptive_posting_strategy",
                        "reinforce_engagement",
                        "reward_top_engagers",
                        "cross_platform_feedback_loop"
                    ],
                    "docstring": "Centralized strategy class for Stocktwits automation and community building.\nExtends BasePlatformStrategy with Stocktwits-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops using ChatGPT responses\n  - Reward system for top engaging followers\n  - Cross-platform feedback integration",
                    "base_classes": [
                        "BasePlatformStrategy"
                    ]
                }
            },
            "routes": [],
            "complexity": 56
        },
        "social\\strategies\\twitter_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "login",
                "is_logged_in",
                "post_tweet",
                "post_thread",
                "_extract_tweet_id",
                "engage_community",
                "_follow_author",
                "_log_follow",
                "unfollow_non_returners",
                "run_daily_session",
                "post_thread",
                "__init__",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "adaptive_posting_strategy",
                "analyze_comment_sentiment",
                "reinforce_engagement",
                "reward_top_engagers",
                "cross_platform_feedback_loop",
                "run_feedback_loop",
                "run_daily_strategy_session"
            ],
            "classes": {
                "TwitterCommunityArchitect": {
                    "methods": [
                        "__init__",
                        "login",
                        "is_logged_in",
                        "post_tweet",
                        "post_thread",
                        "_extract_tweet_id",
                        "engage_community",
                        "_follow_author",
                        "_log_follow",
                        "unfollow_non_returners",
                        "run_daily_session",
                        "post_thread"
                    ],
                    "docstring": "Ultimate Twitter Engagement Bot.\nCombines posting, commenting, following, and adaptive AI-powered interactions.",
                    "base_classes": []
                },
                "TwitterStrategy": {
                    "methods": [
                        "__init__",
                        "_load_feedback_data",
                        "_save_feedback_data",
                        "analyze_engagement_metrics",
                        "adaptive_posting_strategy",
                        "analyze_comment_sentiment",
                        "reinforce_engagement",
                        "reward_top_engagers",
                        "cross_platform_feedback_loop",
                        "run_feedback_loop",
                        "run_daily_strategy_session"
                    ],
                    "docstring": "Centralized strategy class for Twitter automation and community building.\nExtends TwitterCommunityArchitect with:\n  - Dynamic feedback loops for engagement metrics analysis.\n  - AI sentiment analysis & reinforcement loops.\n  - Reward system for top engagers.\n  - Cross-platform feedback integration.",
                    "base_classes": [
                        "TwitterCommunityArchitect"
                    ]
                }
            },
            "routes": [],
            "complexity": 46
        },
        "social\\strategies\\wordpress_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initialize",
                "cleanup",
                "sync_youtube_video",
                "moderate_comment",
                "get_community_metrics",
                "get_top_members",
                "_load_community_data",
                "_save_community_data",
                "generate_engagement_report",
                "track_member_interaction"
            ],
            "classes": {
                "WordPressCommunityStrategy": {
                    "methods": [
                        "__init__",
                        "initialize",
                        "cleanup",
                        "sync_youtube_video",
                        "moderate_comment",
                        "get_community_metrics",
                        "get_top_members",
                        "_load_community_data",
                        "_save_community_data",
                        "generate_engagement_report",
                        "track_member_interaction"
                    ],
                    "docstring": "WordPress community strategy that integrates with YouTube for automated community building.\nFeatures:\n- Auto-syncs YouTube videos as WordPress posts\n- Manages comments across both platforms\n- Generates engagement reports\n- Handles community moderation\n- Creates automated responses",
                    "base_classes": [
                        "BasePlatformStrategy"
                    ]
                }
            },
            "routes": [],
            "complexity": 22
        },
        "social\\strategies\\tiktok_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_video",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "run_feedback_loop",
                "adaptive_posting_strategy",
                "update_trending_hashtags",
                "reward_top_creators",
                "cross_platform_feedback_loop"
            ],
            "classes": {
                "TikTokStrategy": {
                    "methods": [
                        "__init__",
                        "initialize",
                        "cleanup",
                        "get_community_metrics",
                        "get_top_members",
                        "track_member_interaction",
                        "_get_driver",
                        "_wait",
                        "login",
                        "is_logged_in",
                        "post_video",
                        "run_daily_strategy_session",
                        "_load_feedback_data",
                        "_save_feedback_data",
                        "analyze_engagement_metrics",
                        "run_feedback_loop",
                        "adaptive_posting_strategy",
                        "update_trending_hashtags",
                        "reward_top_creators",
                        "cross_platform_feedback_loop"
                    ],
                    "docstring": "Centralized strategy class for TikTok automation and community building.\nExtends BasePlatformStrategy with TikTok-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Video content scheduling and posting\n  - Hashtag trend analysis and optimization\n  - Cross-platform content repurposing\n  - Engagement analytics and community growth tracking",
                    "base_classes": [
                        "BasePlatformStrategy"
                    ]
                }
            },
            "routes": [],
            "complexity": 40
        },
        "SOS\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "social\\strategies\\youtube_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_video",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "run_feedback_loop",
                "adaptive_posting_strategy",
                "reward_top_creators",
                "cross_platform_feedback_loop"
            ],
            "classes": {
                "YouTubeStrategy": {
                    "methods": [
                        "__init__",
                        "initialize",
                        "cleanup",
                        "get_community_metrics",
                        "get_top_members",
                        "track_member_interaction",
                        "_get_driver",
                        "_wait",
                        "login",
                        "is_logged_in",
                        "post_video",
                        "run_daily_strategy_session",
                        "_load_feedback_data",
                        "_save_feedback_data",
                        "analyze_engagement_metrics",
                        "run_feedback_loop",
                        "adaptive_posting_strategy",
                        "reward_top_creators",
                        "cross_platform_feedback_loop"
                    ],
                    "docstring": "Centralized strategy class for YouTube automation and community building.\nExtends BasePlatformStrategy with YouTube-specific implementations.\nFeatures:\n  - Video content management and scheduling\n  - Shorts creation and optimization\n  - Community post engagement\n  - Analytics tracking and optimization\n  - Cross-platform content distribution",
                    "base_classes": [
                        "BasePlatformStrategy"
                    ]
                }
            },
            "routes": [],
            "complexity": 38
        },
        "tests\\test_youtube_strategy.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "utils\\ai_output_logger.py": {
            "language": ".py",
            "functions": [
                "log_ai_output"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "utils\\emoji_cleaner.py": {
            "language": ".py",
            "functions": [
                "remove_emojis",
                "clean_file",
                "clean_directory"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "utils\\io.py": {
            "language": ".py",
            "functions": [
                "read_file",
                "write_file",
                "read_json",
                "write_json"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "utils\\json_paths.py": {
            "language": ".py",
            "functions": [
                "get_path"
            ],
            "classes": {
                "JsonPaths": {
                    "methods": [
                        "get_path"
                    ],
                    "docstring": "Centralized configuration for all JSON file paths in the application.\nUses PathManager to ensure consistent path resolution across the application.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 2
        },
        "utils\\qasync_event_loop_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start",
                "schedule_task",
                "_shutdown_handler",
                "shutdown"
            ],
            "classes": {
                "QAsyncEventLoopManager": {
                    "methods": [
                        "__init__",
                        "start",
                        "schedule_task",
                        "_shutdown_handler",
                        "shutdown"
                    ],
                    "docstring": "Manages the qasync event loop, providing async task handling for PyQt applications.\nHandles lifecycle: initialization, task scheduling, and graceful shutdown.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 10
        },
        "utils\\rate_limit_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_initialize_default_limits",
                "get_rate_limits",
                "adjust_rate_limit",
                "adjust_from_failures"
            ],
            "classes": {
                "RateLimitManager": {
                    "methods": [
                        "__init__",
                        "_initialize_default_limits",
                        "get_rate_limits",
                        "adjust_rate_limit",
                        "adjust_from_failures"
                    ],
                    "docstring": "Manages rate limits for social media platforms.\nProvides functionality to adjust rate limits based on feedback.",
                    "base_classes": []
                }
            },
            "routes": [],
            "complexity": 10
        },
        "utils\\signal_dispatcher.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "emit_log_output",
                "emit_prompt_executed",
                "emit_dreamscape_generated",
                "emit_discord_event",
                "emit_task_started",
                "emit_task_progress",
                "emit_task_completed",
                "emit_task_failed",
                "emit_status_update",
                "emit_append_output",
                "emit_discord_log",
                "emit_automation_result",
                "register_listener",
                "unregister_listener"
            ],
            "classes": {
                "SignalDispatcher": {
                    "methods": [
                        "__init__",
                        "emit_log_output",
                        "emit_prompt_executed",
                        "emit_dreamscape_generated",
                        "emit_discord_event",
                        "emit_task_started",
                        "emit_task_progress",
                        "emit_task_completed",
                        "emit_task_failed",
                        "emit_status_update",
                        "emit_append_output",
                        "emit_discord_log",
                        "emit_automation_result",
                        "register_listener",
                        "unregister_listener"
                    ],
                    "docstring": "Centralized dispatcher for decoupled, scalable tab communication.",
                    "base_classes": [
                        "QObject"
                    ]
                }
            },
            "routes": [],
            "complexity": 30
        },
        "utils\\ai\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "utils\\web\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        }
    }
}