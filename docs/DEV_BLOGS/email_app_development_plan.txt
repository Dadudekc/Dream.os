DEVLOG // 03.14.25
How much energy am I bleeding by keeping things separate when they should be converging?
Mapped out the full structure and timeline for the email management app today. Initially tried compressing it to 4 weeks... but after thinking it through, reverted back to a 10-week timeline. Not because the system needs that long, but because I’d rather build in buffer and stay ahead of schedule instead of chasing it. Margin equals control.
The core stack is locked in:
Backend → Node.js (or Django if it makes sense later)
Frontend → Flutter or React Native
Payments → Stripe
Landing + Dashboard → Next.js
Infra → AWS / Firebase hybrid
What worked: the breakdown felt clean. Backend and mobile can be built in parallel. Web dashboard is low lift once the core API’s in place.
What’s tricky: Deciding how much of this process I automate out of the gate. If I build a system that deploys itself, I lose the signal on how the pieces feel. If I stay too close to the manual, I slow velocity. It’s a balance I’m still working out.
Also... after doing a deeper system audit, it's clear there’s too much fragmentation across my projects. Trading bots, content engines, FreeRide Investor—they’re not converged. Every time I build something, it doesn’t automatically scale across the system. That’s a problem.
So next move:
— Start converging codebases into a single monorepo
— Spin up AI dev agents to handle testing and deployment
— Automate the content repurposing loop so one post turns into 10 without me touching it
— Reinforcement learning on trading bots so losses automatically train the next iteration
There’s no reason to keep babysitting the system when it should be running itself.
“Margin isn’t laziness... it’s where you get leverage.”