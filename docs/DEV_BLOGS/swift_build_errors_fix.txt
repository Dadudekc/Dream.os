Devlog Drop — 2025-03-15
"What’s the cost of not centralizing the things I keep fixing?"
Diving into the TBOWTactics build tonight...
Thought it was going to be a clean compile. It wasn’t.
The system threw a pile of redeclaration errors on StockData.
Turns out I’ve got duplicate structs—same name, slight variations—living in different files. That ambiguity has been creeping in for a while... finally blew up.
Then I hit missing protocol definitions: NetworkServiceProtocol, OpenAIServiceProtocol... they weren’t where they should’ve been.
These were meant to abstract the services so I could swap implementations later. Right now, they’re just ghosts in the machine.
Also ran into error handling chaos. NetworkError, OpenAIError don’t exist yet, but the system is wired up like they do. I’ve been winging it with NSError, but it’s not scalable—especially if I want the trading and AI pipelines to self-correct without me babysitting.
The worst time sink? Manually building over and over to catch obvious issues.
No pre-commit checks. No CI pipeline yet.
I’m wasting cycles on stuff that should be automated.
What’s next?
Centralize the domain models. One StockData that everything uses. No drift.
Define the missing protocols and error types, drop them into their own Protocols module.
Set up an error handling framework that can scale... one place to route and respond, so the AI can actually own part of the process.
Kick off CI and linting... I’m done wasting time on builds that should fail early.
This is the work that unlocks velocity. It’s not sexy... but without it, nothing scales.
"Discipline equals freedom."
— Jocko Willink