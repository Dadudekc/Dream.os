# dream_os/social/feedback/strategy_updater.py
import json
import os
from pathlib import Path
from typing import Dict, Any, Optional
from datetime import datetime
import copy

# Default path for strategy configs relative to this file's parent directory
DEFAULT_CONFIG_DIR = Path(__file__).parent.parent.parent / "configs" / "strategies"

class StrategyUpdater:
    """
    Reads strategy configuration files, applies adjustments based on
    feedback recommendations, and writes the updated configurations back.
    """
    def __init__(self, config_dir: Path = DEFAULT_CONFIG_DIR):
        self.config_dir = config_dir
        self.config_dir.mkdir(parents=True, exist_ok=True)
        print(f"StrategyUpdater initialized. Config directory: {self.config_dir}")

    def _get_config_path(self, platform: str) -> Path:
        """Constructs the expected path for a platform's config file."""
        return self.config_dir / f"{platform}_strategy_config.json"

    def _load_config(self, platform: str) -> Optional[Dict[str, Any]]:
        """Loads the JSON configuration for a specific platform."""
        config_path = self._get_config_path(platform)
        if not config_path.is_file():
            print(f"Warning: Config file not found for platform '{platform}' at {config_path}")
            return None
        try:
            with open(config_path, 'r') as f:
                config = json.load(f)
            # Basic validation
            if config.get("platform") != platform:
                 print(f"Warning: Platform mismatch in config file {config_path}. Expected '{platform}', found '{config.get("platform")}'.")
                 # Decide whether to proceed or return None
            return config
        except json.JSONDecodeError as e:
            print(f"Error decoding JSON from {config_path}: {e}")
            return None
        except Exception as e:
            print(f"Error reading config file {config_path}: {e}")
            return None

    def _save_config(self, platform: str, config: Dict[str, Any]) -> bool:
        """Saves the updated configuration back to its JSON file."""
        config_path = self._get_config_path(platform)
        try:
            # Update timestamp
            config["last_updated"] = datetime.utcnow().isoformat() + "Z"
            with open(config_path, 'w') as f:
                json.dump(config, f, indent=2)
            print(f"Successfully saved updated config for platform '{platform}' to {config_path}")
            return True
        except Exception as e:
            print(f"Error writing config file {config_path}: {e}")
            return False

    def _apply_platform_adjustments(self, config: Dict[str, Any], platform_adjustments: Dict[str, Any]) -> Dict[str, Any]:
        """
        Applies specific adjustments to a loaded configuration dictionary.
        This is where the translation logic from recommendation -> parameter change happens.
        Placeholder: Implement more sophisticated adjustment logic.
        """
        if not config or "parameters" not in config:
            return config

        updated_config = copy.deepcopy(config) # Avoid modifying original until save
        params = updated_config["parameters"]
        platform = config.get("platform")

        print(f"Applying adjustments for platform: {platform}")

        adjustment_directive = platform_adjustments.get("adjustment")
        avg_score = platform_adjustments.get("avg_score") # Example: use score to modulate changes

        # --- Example Adjustment Logic --- #
        # This needs to be much more nuanced based on the actual recommendations
        # generated by FeedbackService/EngagementAnalyzer.

        if adjustment_directive == "increase posting" and "post_frequency_per_day" in params:
            current_freq = params["post_frequency_per_day"]
            params["post_frequency_per_day"] = min(current_freq + 1, 5) # Increase, cap at 5
            print(f"  - Increased post_frequency_per_day to {params['post_frequency_per_day']}")

        elif adjustment_directive == "decrease frequency" and "post_frequency_per_day" in params:
            current_freq = params["post_frequency_per_day"]
            params["post_frequency_per_day"] = max(current_freq - 1, 1) # Decrease, floor at 1
            print(f"  - Decreased post_frequency_per_day to {params['post_frequency_per_day']}")

        # Example: Adjust engagement focus based on high/low score
        if avg_score is not None:
            if avg_score > 70 and "like_weight" in params:
                params["like_weight"] = round(params["like_weight"] * 1.1, 2) # Slightly boost likes if doing well
                print(f"  - Slightly increased like_weight due to high score.")
            elif avg_score < 40 and "comment_weight" in params:
                 params["comment_weight"] = round(params["comment_weight"] * 1.1, 2) # Focus on deeper engagement if low score
                 print(f"  - Slightly increased comment_weight due to low score.")

        # Example: Modify content mix (needs logic based on top/low post analysis)
        # if "content_mix" in params and recommendations suggest more video:
        #    params["content_mix"]["video_reel"] = min(params["content_mix"].get("video_reel", 0) + 0.1, 1.0)
        #    # Adjust other types to keep sum = 1.0

        # ------------------------------ #

        return updated_config

    def apply(self, adjustments: Dict[str, Any]):
        """
        Main method to apply feedback adjustments.
        Loads relevant configs, applies changes, and saves them back.
        """
        print("\n--- [StrategyUpdater] Applying Strategy Adjustments --- ")
        # Log the raw adjustments received
        print("Received Adjustments Payload:")
        print(json.dumps(adjustments, indent=2))

        platform_specific = adjustments.get("platform_specific", {})

        if not platform_specific:
            print("No platform-specific adjustments found in payload.")
            # Process general recommendations if needed
            # For now, focus on platform-specific config changes

        platforms_updated = []
        for platform, platform_adjustments in platform_specific.items():
            print(f"\nProcessing adjustments for platform: {platform}")
            config = self._load_config(platform)
            if config:
                updated_config = self._apply_platform_adjustments(config, platform_adjustments)
                if updated_config != config: # Only save if changes were made
                    if self._save_config(platform, updated_config):
                        platforms_updated.append(platform)
                else:
                    print(f"No effective changes applied to {platform} config based on adjustments.")
            else:
                print(f"Skipping {platform}: Could not load configuration.")

        print(f"\n--- [StrategyUpdater] Adjustment Application Complete --- ")
        if platforms_updated:
            print(f"Configurations updated for: {', '.join(platforms_updated)}")
        else:
            print("No strategy configurations were modified.")
        print("--- --- --- \n")

# Example Usage
if __name__ == "__main__":
    updater = StrategyUpdater()

    # Example adjustment payload (similar to what FeedbackService might produce)
    mock_adjustments = {
        "general": [
            "Platform Avg Scores: twitter:42.0 (3 posts), instagram:88.1 (1 posts)",
            "Analyze top 1 posts for successful patterns.",
            "Review lowest 1 posts for improvement areas.",
            "Top post (test_insta_1) suggests: High saves on Instagram: Content is valuable; create more save-worthy posts (e.g., tutorials, tips)."
        ],
        "platform_specific": {
            "twitter": {
                "avg_score": 42.0,
                "adjustment": "decrease frequency" # Based on low avg score
            },
            "instagram": {
                "avg_score": 88.1,
                "adjustment": "increase posting" # Based on high avg score
            },
            "facebook": { # Example for a platform without a config file yet
                 "avg_score": 60.0,
                 "adjustment": "maintain"
            }
        },
        "top_posts": [{"id": "test_insta_1", "platform": "instagram", "score": 88.1}],
        "low_posts": [{"id": "test_tweet_2", "platform": "twitter", "score": 42.0}]
    }

    # Apply the mock adjustments
    updater.apply(mock_adjustments)

    print("\nStrategyUpdater Test Complete.")
    print(f"Check the JSON files in {updater.config_dir} for updates.") 