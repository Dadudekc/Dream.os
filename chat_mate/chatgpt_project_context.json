{
    "project_root": "D:\\overnight_scripts\\chat_mate",
    "num_files_analyzed": 30,
    "analysis_details": {
        "1.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\logging\\handlers\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\social\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\social\\AIChatAgent.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "ask",
                "_ask_openai",
                "_ask_ollama",
                "_build_prompt",
                "_initialize_chat_thread",
                "append_to_chat_thread",
                "_log_interaction"
            ],
            "classes": {
                "AIChatAgent": {
                    "methods": [
                        "__init__",
                        "ask",
                        "_ask_openai",
                        "_ask_ollama",
                        "_build_prompt",
                        "_initialize_chat_thread",
                        "append_to_chat_thread",
                        "_log_interaction"
                    ],
                    "docstring": "AIChatAgent: Unified AI assistant optimized for context-rich, personalized interactions in Victor's voice.\nSupports OpenAI, local LLMs (Ollama), automatic ChatGPT thread creation, persistent memory logging, and fine-tuning dataset preparation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 16
        },
        "core\\social\\community_integration.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "_initialize_strategies",
                "_initialize_dashboard",
                "_initialize_post_manager",
                "analyze_community_health",
                "generate_insights_and_recommendations",
                "create_community_building_plan",
                "identify_advocates",
                "post_across_platforms",
                "track_member_interaction",
                "optimize_platform_strategies",
                "generate_visualizations",
                "run_daily_community_management"
            ],
            "classes": {
                "CommunityIntegrationManager": {
                    "methods": [
                        "__init__",
                        "_initialize_strategies",
                        "_initialize_dashboard",
                        "_initialize_post_manager",
                        "analyze_community_health",
                        "generate_insights_and_recommendations",
                        "create_community_building_plan",
                        "identify_advocates",
                        "post_across_platforms",
                        "track_member_interaction",
                        "optimize_platform_strategies",
                        "generate_visualizations",
                        "run_daily_community_management"
                    ],
                    "docstring": "Integrates all social media platforms with the unified community dashboard.\n\nThis class serves as the main entry point for community management,\nconnecting platform-specific strategies with unified analytics and reporting.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 26
        },
        "core\\social\\TaskQueueManager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "start",
                "stop",
                "add_task",
                "_worker",
                "queue_size",
                "status",
                "sample_task"
            ],
            "classes": {
                "TaskQueueManager": {
                    "methods": [
                        "__init__",
                        "start",
                        "stop",
                        "add_task",
                        "_worker",
                        "queue_size",
                        "status"
                    ],
                    "docstring": "TaskQueueManager: A robust, priority-based task queue with threaded workers.\nThis manager supports:\n  - Prioritized task scheduling (lower value = higher priority)\n  - Delayed execution for rate-limiting or scheduling\n  - Configurable retries with exponential backoff\n  - Structured logging of task outcomes for feedback and reinforcement learning loops",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 15
        },
        "core\\social\\strategies\\facebook_strategy.py": {
            "language": ".py",
            "functions": [
                "retry_on_failure",
                "get_random_user_agent",
                "start_scheduler",
                "post_to_facebook",
                "decorator_retry",
                "__init__",
                "_wait",
                "get_driver",
                "is_logged_in",
                "login",
                "post",
                "like_posts",
                "comment_on_posts",
                "follow_users",
                "unfollow_non_returners",
                "_log_followed_users",
                "go_viral",
                "run_daily_session",
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "get_random_user_agent",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "adaptive_posting_strategy",
                "analyze_comment_sentiment",
                "reinforce_engagement",
                "reward_top_followers",
                "cross_platform_feedback_loop",
                "run_feedback_loop",
                "wrapper_retry"
            ],
            "classes": {
                "FacebookBot": {
                    "methods": [
                        "__init__",
                        "_wait",
                        "get_driver",
                        "is_logged_in",
                        "login",
                        "post"
                    ],
                    "docstring": "Automates Facebook login and posting.\nThis base class handles authentication and AI-powered post creation.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FacebookEngagementBot": {
                    "methods": [
                        "like_posts",
                        "comment_on_posts",
                        "follow_users",
                        "unfollow_non_returners",
                        "_log_followed_users",
                        "go_viral",
                        "run_daily_session"
                    ],
                    "docstring": "Extends FacebookBot with essential community building functions:\n  - Like posts, comment, follow/unfollow users, and viral engagement.\n  - Maintains a FOLLOW_DB to track engagements.\n  - Runs daily engagement sessions.",
                    "base_classes": [
                        "FacebookBot"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "FacebookStrategy": {
                    "methods": [
                        "__init__",
                        "initialize",
                        "cleanup",
                        "get_community_metrics",
                        "get_top_members",
                        "track_member_interaction",
                        "_get_driver",
                        "get_random_user_agent",
                        "_wait",
                        "login",
                        "is_logged_in",
                        "post_content",
                        "run_daily_strategy_session",
                        "_load_feedback_data",
                        "_save_feedback_data",
                        "analyze_engagement_metrics",
                        "adaptive_posting_strategy",
                        "analyze_comment_sentiment",
                        "reinforce_engagement",
                        "reward_top_followers",
                        "cross_platform_feedback_loop",
                        "run_feedback_loop"
                    ],
                    "docstring": "Centralized strategy class for managing Facebook automation and community building.\nExtends BasePlatformStrategy with Facebook-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops using ChatGPT responses\n  - Reward system for top engaging followers\n  - Cross-platform feedback integration",
                    "base_classes": [
                        "BasePlatformStrategy"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 76
        },
        "core\\social\\strategies\\instagram_strategy.py": {
            "language": ".py",
            "functions": [
                "retry_on_failure",
                "get_random_mobile_user_agent",
                "start_scheduler",
                "post_to_instagram",
                "decorator_retry",
                "__init__",
                "get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "create_post",
                "like_posts",
                "comment_on_posts",
                "_gather_post_links",
                "follow_users",
                "unfollow_user",
                "__init__",
                "run_daily_session",
                "generate_ai_comments",
                "like_posts",
                "comment_on_posts",
                "follow_users",
                "unfollow_non_returners",
                "_log_followed_users",
                "go_viral",
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "analyze_comment_sentiment",
                "reinforce_engagement",
                "reward_top_engagers",
                "cross_platform_feedback_loop",
                "run_feedback_loop",
                "wrapper_retry"
            ],
            "classes": {
                "InstagramBot": {
                    "methods": [
                        "__init__",
                        "get_driver",
                        "_wait",
                        "login",
                        "is_logged_in",
                        "create_post",
                        "like_posts",
                        "comment_on_posts",
                        "_gather_post_links",
                        "follow_users",
                        "unfollow_user"
                    ],
                    "docstring": "Automates Instagram login, posting, and engagement actions using Selenium.\nUses mobile emulation (Pixel 5) to enable posting via Instagram's mobile interface.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "InstagramEngagementBot": {
                    "methods": [
                        "__init__",
                        "run_daily_session",
                        "generate_ai_comments",
                        "like_posts",
                        "comment_on_posts",
                        "follow_users",
                        "unfollow_non_returners",
                        "_log_followed_users",
                        "go_viral"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "InstagramStrategy": {
                    "methods": [
                        "__init__",
                        "initialize",
                        "cleanup",
                        "get_community_metrics",
                        "get_top_members",
                        "track_member_interaction",
                        "_get_driver",
                        "_wait",
                        "login",
                        "is_logged_in",
                        "post_content",
                        "run_daily_strategy_session",
                        "_load_feedback_data",
                        "_save_feedback_data",
                        "analyze_engagement_metrics",
                        "analyze_comment_sentiment",
                        "reinforce_engagement",
                        "reward_top_engagers",
                        "cross_platform_feedback_loop",
                        "run_feedback_loop"
                    ],
                    "docstring": "Centralized strategy class for Instagram automation and community building.\nExtends BasePlatformStrategy with Instagram-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops using ChatGPT responses\n  - Reward system for top engaging followers\n  - Cross-platform feedback integration",
                    "base_classes": [
                        "BasePlatformStrategy"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 86
        },
        "core\\social\\strategies\\stocktwits_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "login",
                "is_logged_in",
                "post",
                "engage_community",
                "_log_follow",
                "unfollow_non_returners",
                "run_daily_session",
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "run_feedback_loop",
                "adaptive_posting_strategy",
                "reinforce_engagement",
                "reward_top_engagers",
                "cross_platform_feedback_loop"
            ],
            "classes": {
                "StocktwitsCommunityArchitect": {
                    "methods": [
                        "__init__",
                        "login",
                        "is_logged_in",
                        "post",
                        "engage_community",
                        "_log_follow",
                        "unfollow_non_returners",
                        "run_daily_session"
                    ],
                    "docstring": "Stocktwits Community Builder:\nAutomates posts, engagement, and follower interactions with AI-generated content in Victor's authentic tone.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "StocktwitsStrategy": {
                    "methods": [
                        "__init__",
                        "initialize",
                        "cleanup",
                        "get_community_metrics",
                        "get_top_members",
                        "track_member_interaction",
                        "_get_driver",
                        "_wait",
                        "login",
                        "is_logged_in",
                        "post_content",
                        "run_daily_strategy_session",
                        "_load_feedback_data",
                        "_save_feedback_data",
                        "analyze_engagement_metrics",
                        "run_feedback_loop",
                        "adaptive_posting_strategy",
                        "reinforce_engagement",
                        "reward_top_engagers",
                        "cross_platform_feedback_loop"
                    ],
                    "docstring": "Centralized strategy class for Stocktwits automation and community building.\nExtends BasePlatformStrategy with Stocktwits-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops using ChatGPT responses\n  - Reward system for top engaging followers\n  - Cross-platform feedback integration",
                    "base_classes": [
                        "BasePlatformStrategy"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 56
        },
        "core\\social\\strategies\\tiktok_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_video",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "run_feedback_loop",
                "adaptive_posting_strategy",
                "update_trending_hashtags",
                "reward_top_creators",
                "cross_platform_feedback_loop"
            ],
            "classes": {
                "TikTokStrategy": {
                    "methods": [
                        "__init__",
                        "initialize",
                        "cleanup",
                        "get_community_metrics",
                        "get_top_members",
                        "track_member_interaction",
                        "_get_driver",
                        "_wait",
                        "login",
                        "is_logged_in",
                        "post_video",
                        "run_daily_strategy_session",
                        "_load_feedback_data",
                        "_save_feedback_data",
                        "analyze_engagement_metrics",
                        "run_feedback_loop",
                        "adaptive_posting_strategy",
                        "update_trending_hashtags",
                        "reward_top_creators",
                        "cross_platform_feedback_loop"
                    ],
                    "docstring": "Centralized strategy class for TikTok automation and community building.\nExtends BasePlatformStrategy with TikTok-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Video content scheduling and posting\n  - Hashtag trend analysis and optimization\n  - Cross-platform content repurposing\n  - Engagement analytics and community growth tracking",
                    "base_classes": [
                        "BasePlatformStrategy"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 40
        },
        "core\\social\\strategies\\twitter_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "login",
                "is_logged_in",
                "post_tweet",
                "post_thread",
                "_extract_tweet_id",
                "engage_community",
                "_follow_author",
                "_log_follow",
                "unfollow_non_returners",
                "run_daily_session",
                "post_thread",
                "__init__",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "adaptive_posting_strategy",
                "analyze_comment_sentiment",
                "reinforce_engagement",
                "reward_top_engagers",
                "cross_platform_feedback_loop",
                "run_feedback_loop",
                "run_daily_strategy_session"
            ],
            "classes": {
                "TwitterCommunityArchitect": {
                    "methods": [
                        "__init__",
                        "login",
                        "is_logged_in",
                        "post_tweet",
                        "post_thread",
                        "_extract_tweet_id",
                        "engage_community",
                        "_follow_author",
                        "_log_follow",
                        "unfollow_non_returners",
                        "run_daily_session",
                        "post_thread"
                    ],
                    "docstring": "Ultimate Twitter Engagement Bot.\nCombines posting, commenting, following, and adaptive AI-powered interactions.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "TwitterStrategy": {
                    "methods": [
                        "__init__",
                        "_load_feedback_data",
                        "_save_feedback_data",
                        "analyze_engagement_metrics",
                        "adaptive_posting_strategy",
                        "analyze_comment_sentiment",
                        "reinforce_engagement",
                        "reward_top_engagers",
                        "cross_platform_feedback_loop",
                        "run_feedback_loop",
                        "run_daily_strategy_session"
                    ],
                    "docstring": "Centralized strategy class for Twitter automation and community building.\nExtends TwitterCommunityArchitect with:\n  - Dynamic feedback loops for engagement metrics analysis.\n  - AI sentiment analysis & reinforcement loops.\n  - Reward system for top engagers.\n  - Cross-platform feedback integration.",
                    "base_classes": [
                        "TwitterCommunityArchitect"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 46
        },
        "core\\social\\strategies\\wordpress_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initialize",
                "cleanup",
                "sync_youtube_video",
                "moderate_comment",
                "get_community_metrics",
                "get_top_members",
                "_load_community_data",
                "_save_community_data",
                "generate_engagement_report",
                "track_member_interaction"
            ],
            "classes": {
                "WordPressCommunityStrategy": {
                    "methods": [
                        "__init__",
                        "initialize",
                        "cleanup",
                        "sync_youtube_video",
                        "moderate_comment",
                        "get_community_metrics",
                        "get_top_members",
                        "_load_community_data",
                        "_save_community_data",
                        "generate_engagement_report",
                        "track_member_interaction"
                    ],
                    "docstring": "WordPress community strategy that integrates with YouTube for automated community building.\nFeatures:\n- Auto-syncs YouTube videos as WordPress posts\n- Manages comments across both platforms\n- Generates engagement reports\n- Handles community moderation\n- Creates automated responses",
                    "base_classes": [
                        "BasePlatformStrategy"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 22
        },
        "core\\social\\strategies\\youtube_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_video",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "run_feedback_loop",
                "adaptive_posting_strategy",
                "reward_top_creators",
                "cross_platform_feedback_loop"
            ],
            "classes": {
                "YouTubeStrategy": {
                    "methods": [
                        "__init__",
                        "initialize",
                        "cleanup",
                        "get_community_metrics",
                        "get_top_members",
                        "track_member_interaction",
                        "_get_driver",
                        "_wait",
                        "login",
                        "is_logged_in",
                        "post_video",
                        "run_daily_strategy_session",
                        "_load_feedback_data",
                        "_save_feedback_data",
                        "analyze_engagement_metrics",
                        "run_feedback_loop",
                        "adaptive_posting_strategy",
                        "reward_top_creators",
                        "cross_platform_feedback_loop"
                    ],
                    "docstring": "Centralized strategy class for YouTube automation and community building.\nExtends BasePlatformStrategy with YouTube-specific implementations.\nFeatures:\n  - Video content management and scheduling\n  - Shorts creation and optimization\n  - Community post engagement\n  - Analytics tracking and optimization\n  - Cross-platform content distribution",
                    "base_classes": [
                        "BasePlatformStrategy"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 38
        },
        "core\\social\\strategies\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "interfaces\\pyqt\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "interfaces\\pyqt\\tabs\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "social\\log_writer.py": {
            "language": ".py",
            "functions": [
                "write_json_log",
                "log_login",
                "log_post",
                "log_error"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "social\\social_config_wrapper.py": {
            "language": ".py",
            "functions": [
                "get_social_config"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "social\\social_post_manager.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "post_next",
                "post_all",
                "enqueue_post",
                "shutdown",
                "post_to_platform"
            ],
            "classes": {
                "SocialPostManager": {
                    "methods": [
                        "__init__",
                        "post_next",
                        "post_all",
                        "enqueue_post",
                        "shutdown"
                    ],
                    "docstring": "Manages posting of social media content across multiple platforms.\nSupports multi-threading for faster execution and centralized error handling.",
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 11
        },
        "social\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "social\\ai\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "social\\data\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "social\\strategies\\context_db.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "create_tables",
                "log_post",
                "fetch_recent_posts",
                "fetch_last_post_content",
                "log_engagement",
                "fetch_engagements_for_post",
                "get_rate_limit",
                "update_rate_limit",
                "update_sentiment",
                "close"
            ],
            "classes": {
                "UnifiedContextEngine": {
                    "methods": [
                        "__init__",
                        "create_tables",
                        "log_post",
                        "fetch_recent_posts",
                        "fetch_last_post_content",
                        "log_engagement",
                        "fetch_engagements_for_post",
                        "get_rate_limit",
                        "update_rate_limit",
                        "update_sentiment",
                        "close"
                    ],
                    "docstring": null,
                    "base_classes": [],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 22
        },
        "social\\strategies\\reddit_strategy.py": {
            "language": ".py",
            "functions": [
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "run_feedback_loop",
                "adaptive_posting_strategy"
            ],
            "classes": {
                "RedditStrategy": {
                    "methods": [
                        "__init__",
                        "initialize",
                        "cleanup",
                        "get_community_metrics",
                        "get_top_members",
                        "track_member_interaction",
                        "_get_driver",
                        "_wait",
                        "login",
                        "is_logged_in",
                        "post_content",
                        "run_daily_strategy_session",
                        "_load_feedback_data",
                        "_save_feedback_data",
                        "analyze_engagement_metrics",
                        "run_feedback_loop",
                        "adaptive_posting_strategy"
                    ],
                    "docstring": "Centralized strategy class for Reddit automation and community building.\nExtends BasePlatformStrategy with Reddit-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops using ChatGPT responses\n  - Reward system for top engaging followers\n  - Cross-platform feedback integration",
                    "base_classes": [
                        "BasePlatformStrategy"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 34
        },
        "social\\strategies\\linkedin_strategy.py": {
            "language": ".py",
            "functions": [
                "retry_on_failure",
                "decorator_retry",
                "__init__",
                "_get_driver",
                "get_random_user_agent",
                "_wait",
                "login",
                "is_logged_in",
                "_login_with_credentials",
                "post",
                "like_posts",
                "comment_on_posts",
                "follow_users",
                "unfollow_non_returners",
                "go_viral",
                "_log_followed_users",
                "_find_posts",
                "_find_like_button",
                "_find_comment_box",
                "_find_profile_url",
                "_find_follow_button",
                "_find_unfollow_button",
                "run_daily_session",
                "__init__",
                "is_logged_in",
                "_login_with_credentials",
                "post",
                "_find_posts",
                "_find_like_button",
                "_find_comment_box",
                "_find_profile_url",
                "_find_follow_button",
                "_find_unfollow_button",
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "get_random_user_agent",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "wrapper_retry"
            ],
            "classes": {
                "BaseEngagementBot": {
                    "methods": [
                        "__init__",
                        "_get_driver",
                        "get_random_user_agent",
                        "_wait",
                        "login",
                        "is_logged_in",
                        "_login_with_credentials",
                        "post",
                        "like_posts",
                        "comment_on_posts",
                        "follow_users",
                        "unfollow_non_returners",
                        "go_viral",
                        "_log_followed_users",
                        "_find_posts",
                        "_find_like_button",
                        "_find_comment_box",
                        "_find_profile_url",
                        "_find_follow_button",
                        "_find_unfollow_button",
                        "run_daily_session"
                    ],
                    "docstring": "A universal base class for social media engagement bots.\nProvides core community building functions:\n  - Login (with cookie & credential fallback)\n  - Post content (AI-generated if needed)\n  - Like, comment, follow, unfollow, viral engagement, and DM functionalities\n  - Daily session orchestration",
                    "base_classes": [
                        "ABC"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "LinkedInEngagementBot": {
                    "methods": [
                        "__init__",
                        "is_logged_in",
                        "_login_with_credentials",
                        "post",
                        "_find_posts",
                        "_find_like_button",
                        "_find_comment_box",
                        "_find_profile_url",
                        "_find_follow_button",
                        "_find_unfollow_button"
                    ],
                    "docstring": "LinkedIn-specific implementation of BaseEngagementBot.\nImplements abstract methods using LinkedIn's DOM structure.",
                    "base_classes": [
                        "BaseEngagementBot"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                },
                "LinkedinStrategy": {
                    "methods": [
                        "__init__",
                        "initialize",
                        "cleanup",
                        "get_community_metrics",
                        "get_top_members",
                        "track_member_interaction",
                        "_get_driver",
                        "get_random_user_agent",
                        "_wait",
                        "login",
                        "is_logged_in",
                        "post_content",
                        "run_daily_strategy_session"
                    ],
                    "docstring": "Centralized strategy class for LinkedIn automation and community building.\nExtends BasePlatformStrategy with LinkedIn-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops using ChatGPT responses\n  - Reward system for top engaging followers\n  - Cross-platform feedback integration",
                    "base_classes": [
                        "BasePlatformStrategy"
                    ],
                    "maturity": "Core Asset",
                    "agent_type": "Utility"
                }
            },
            "routes": [],
            "complexity": 91
        },
        "social\\strategies\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\test_youtube_strategy.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "utils\\web\\__init__.py": {
            "language": ".py",
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        }
    }
}