{
    "project_root": "D:\\overnight_scripts\\chat_mate",
    "num_files_analyzed": 833,
    "analysis_details": {
        "cleanup_sip_imports.py": {
            "functions": [
                "find_python_files",
                "process_file",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "run_pyqt_app.py": {
            "functions": [
                "patch_sip_imports",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "generate_dependency_graph.py": {
            "functions": [
                "extract_imports"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "chat_mate_config.py": {
            "functions": [
                "get_logger",
                "__init__",
                "load_from_file",
                "_ensure_directories",
                "create_driver",
                "_get_cached_driver",
                "_setup_logger",
                "sanitize_filename",
                "get",
                "to_dict",
                "ensure_directories"
            ],
            "classes": {
                "Config": [
                    "__init__",
                    "load_from_file",
                    "_ensure_directories",
                    "create_driver",
                    "_get_cached_driver",
                    "_setup_logger",
                    "sanitize_filename",
                    "get",
                    "to_dict"
                ],
                "PathManager": [
                    "ensure_directories"
                ]
            },
            "routes": [],
            "complexity": 21
        },
        "setup.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "main.py": {
            "functions": [
                "setup_logging",
                "initialize_services",
                "show_error_dialog",
                "run_agent_dispatcher",
                "run_pyqt_gui",
                "run_flask_app",
                "execute_mode",
                "main",
                "flask_thread"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "install_dev.py": {
            "functions": [
                "install_package",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "CursorExecutionTab.py": {
            "functions": [
                "__init__",
                "run",
                "__init__",
                "init_ui",
                "load_templates",
                "load_sequences",
                "load_sequence_info",
                "execute_prompt",
                "run_sequence",
                "browse_test_file",
                "generate_tests",
                "run_tests",
                "install_git_hooks",
                "commit_changes",
                "log_message",
                "log_sequence_message",
                "log_test_message",
                "log_git_message",
                "update_progress",
                "execution_finished",
                "sequence_finished",
                "tests_generated",
                "tests_run",
                "git_operation_finished",
                "__init__",
                "closeEvent",
                "execute_task",
                "execute_sequence_task",
                "generate_tests_task",
                "run_tests_task",
                "install_hooks_task",
                "commit_task"
            ],
            "classes": {
                "WorkerThread": [
                    "__init__",
                    "run"
                ],
                "CursorExecutionTab": [
                    "__init__",
                    "init_ui",
                    "load_templates",
                    "load_sequences",
                    "load_sequence_info",
                    "execute_prompt",
                    "run_sequence",
                    "browse_test_file",
                    "generate_tests",
                    "run_tests",
                    "install_git_hooks",
                    "commit_changes",
                    "log_message",
                    "log_sequence_message",
                    "log_test_message",
                    "log_git_message",
                    "update_progress",
                    "execution_finished",
                    "sequence_finished",
                    "tests_generated",
                    "tests_run",
                    "git_operation_finished"
                ],
                "CursorExecutionWindow": [
                    "__init__",
                    "closeEvent"
                ]
            },
            "routes": [],
            "complexity": 58
        },
        "cursor_dispatcher.py": {
            "functions": [
                "__init__",
                "_create_timestamp",
                "load_and_render",
                "run_prompt",
                "send_to_cursor",
                "wait_for_cursor_edit",
                "send_and_wait",
                "run_tests",
                "_create_test_file",
                "_append_to_json",
                "execute_prompt_sequence",
                "git_commit_changes",
                "install_git_hook"
            ],
            "classes": {
                "CursorDispatcher": [
                    "__init__",
                    "_create_timestamp",
                    "load_and_render",
                    "run_prompt",
                    "send_to_cursor",
                    "wait_for_cursor_edit",
                    "send_and_wait",
                    "run_tests",
                    "_create_test_file",
                    "_append_to_json",
                    "execute_prompt_sequence",
                    "git_commit_changes",
                    "install_git_hook"
                ]
            },
            "routes": [],
            "complexity": 26
        },
        "fix_pyqt_sip.py": {
            "functions": [
                "find_pyqt_files",
                "fix_file",
                "create_init_file",
                "ensure_pyqt5_sip_installed",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "run_pyqt_without_sip.py": {
            "functions": [
                "patch_sip",
                "main",
                "patched_import"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "chat_mate.py": {
            "functions": [
                "setup_logging",
                "get_driver",
                "save_cookies",
                "load_cookies",
                "is_logged_in",
                "force_model_in_url",
                "get_chat_titles",
                "send_prompt_to_chat",
                "get_latest_response",
                "generate_devlog",
                "save_rough_draft",
                "archive_chat",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 13
        },
        "social_main.py": {
            "functions": [
                "get_driver",
                "load_platforms_config",
                "run_social_engagement"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "test_tabs.py": {
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "chat_mate\\tests\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "test_basic.py": {
            "functions": [
                "test_basic"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "chat_mate\\tests\\test_simple.py": {
            "functions": [
                "test_simple",
                "test_addition"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "clean_venv\\Lib\\site-packages\\pip\\__pip-runner__.py": {
            "functions": [
                "version_str",
                "find_spec"
            ],
            "classes": {
                "PipImportRedirectingFinder": [
                    "find_spec"
                ]
            },
            "routes": [],
            "complexity": 3
        },
        "test_pyqt.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\__main__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "verify_env.py": {
            "functions": [
                "verify_imports",
                "verify_gui"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\build_env.py": {
            "functions": [
                "_dedup",
                "get_runnable_pip",
                "_get_system_sitepackages",
                "__init__",
                "__init__",
                "__enter__",
                "__exit__",
                "check_requirements",
                "install_requirements",
                "_install_requirements",
                "__init__",
                "__enter__",
                "__exit__",
                "cleanup",
                "install_requirements"
            ],
            "classes": {
                "_Prefix": [
                    "__init__"
                ],
                "BuildEnvironment": [
                    "__init__",
                    "__enter__",
                    "__exit__",
                    "check_requirements",
                    "install_requirements",
                    "_install_requirements"
                ],
                "NoOpBuildEnvironment": [
                    "__init__",
                    "__enter__",
                    "__exit__",
                    "cleanup",
                    "install_requirements"
                ]
            },
            "routes": [],
            "complexity": 27
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\main.py": {
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\configuration.py": {
            "functions": [
                "_normalize_name",
                "_disassemble_key",
                "get_configuration_files",
                "__init__",
                "load",
                "get_file_to_edit",
                "items",
                "get_value",
                "set_value",
                "unset_value",
                "save",
                "_ensure_have_load_only",
                "_dictionary",
                "_load_config_files",
                "_load_file",
                "_construct_parser",
                "_load_environment_vars",
                "_normalized_keys",
                "get_environ_vars",
                "iter_config_files",
                "get_values_in_config",
                "_get_parser_to_modify",
                "_mark_as_modified",
                "__repr__"
            ],
            "classes": {
                "Configuration": [
                    "__init__",
                    "load",
                    "get_file_to_edit",
                    "items",
                    "get_value",
                    "set_value",
                    "unset_value",
                    "save",
                    "_ensure_have_load_only",
                    "_dictionary",
                    "_load_config_files",
                    "_load_file",
                    "_construct_parser",
                    "_load_environment_vars",
                    "_normalized_keys",
                    "get_environ_vars",
                    "iter_config_files",
                    "get_values_in_config",
                    "_get_parser_to_modify",
                    "_mark_as_modified",
                    "__repr__"
                ]
            },
            "routes": [],
            "complexity": 45
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\exceptions.py": {
            "functions": [
                "_is_kebab_case",
                "_prefix_with_indent",
                "__init__",
                "__repr__",
                "__rich_console__",
                "__init__",
                "__init__",
                "__init__",
                "__str__",
                "__str__",
                "__str__",
                "__init__",
                "__str__",
                "__init__",
                "__str__",
                "__init__",
                "__str__",
                "__init__",
                "__str__",
                "__init__",
                "__str__",
                "__init__",
                "__str__",
                "__init__",
                "append",
                "__str__",
                "__bool__",
                "body",
                "__str__",
                "_requirement_name",
                "__init__",
                "body",
                "__init__",
                "body",
                "_hash_comparison",
                "__init__",
                "__str__",
                "__init__",
                "_iter_externally_managed_error_keys",
                "from_config",
                "__init__",
                "__init__",
                "hash_then_or"
            ],
            "classes": {
                "PipError": [],
                "DiagnosticPipError": [
                    "__init__",
                    "__repr__",
                    "__rich_console__"
                ],
                "ConfigurationError": [],
                "InstallationError": [],
                "MissingPyProjectBuildRequires": [
                    "__init__"
                ],
                "InvalidPyProjectBuildRequires": [
                    "__init__"
                ],
                "NoneMetadataError": [
                    "__init__",
                    "__str__"
                ],
                "UserInstallationInvalid": [
                    "__str__"
                ],
                "InvalidSchemeCombination": [
                    "__str__"
                ],
                "DistributionNotFound": [],
                "RequirementsFileParseError": [],
                "BestVersionAlreadyInstalled": [],
                "BadCommand": [],
                "CommandError": [],
                "PreviousBuildDirError": [],
                "NetworkConnectionError": [
                    "__init__",
                    "__str__"
                ],
                "InvalidWheelFilename": [],
                "UnsupportedWheel": [],
                "InvalidWheel": [
                    "__init__",
                    "__str__"
                ],
                "MetadataInconsistent": [
                    "__init__",
                    "__str__"
                ],
                "MetadataInvalid": [
                    "__init__",
                    "__str__"
                ],
                "InstallationSubprocessError": [
                    "__init__",
                    "__str__"
                ],
                "MetadataGenerationFailed": [
                    "__init__",
                    "__str__"
                ],
                "HashErrors": [
                    "__init__",
                    "append",
                    "__str__",
                    "__bool__"
                ],
                "HashError": [
                    "body",
                    "__str__",
                    "_requirement_name"
                ],
                "VcsHashUnsupported": [],
                "DirectoryUrlHashUnsupported": [],
                "HashMissing": [
                    "__init__",
                    "body"
                ],
                "HashUnpinned": [],
                "HashMismatch": [
                    "__init__",
                    "body",
                    "_hash_comparison"
                ],
                "UnsupportedPythonVersion": [],
                "ConfigurationFileCouldNotBeLoaded": [
                    "__init__",
                    "__str__"
                ],
                "ExternallyManagedEnvironment": [
                    "__init__",
                    "_iter_externally_managed_error_keys",
                    "from_config"
                ],
                "UninstallMissingRecord": [
                    "__init__"
                ],
                "LegacyDistutilsInstall": [
                    "__init__"
                ]
            },
            "routes": [],
            "complexity": 83
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\cache.py": {
            "functions": [
                "_hash_dict",
                "__init__",
                "_get_cache_path_parts",
                "_get_candidates",
                "get_path_for_link",
                "get",
                "__init__",
                "get_path_for_link",
                "get",
                "__init__",
                "__init__",
                "__init__",
                "get_path_for_link",
                "get_ephem_path_for_link",
                "get",
                "get_cache_entry",
                "record_download_origin"
            ],
            "classes": {
                "Cache": [
                    "__init__",
                    "_get_cache_path_parts",
                    "_get_candidates",
                    "get_path_for_link",
                    "get"
                ],
                "SimpleWheelCache": [
                    "__init__",
                    "get_path_for_link",
                    "get"
                ],
                "EphemWheelCache": [
                    "__init__"
                ],
                "CacheEntry": [
                    "__init__"
                ],
                "WheelCache": [
                    "__init__",
                    "get_path_for_link",
                    "get_ephem_path_for_link",
                    "get",
                    "get_cache_entry",
                    "record_download_origin"
                ]
            },
            "routes": [],
            "complexity": 33
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\self_outdated_check.py": {
            "functions": [
                "_get_statefile_name",
                "_convert_date",
                "was_installed_by_pip",
                "_get_current_remote_pip_version",
                "_self_version_check_logic",
                "pip_self_version_check",
                "__init__",
                "key",
                "get",
                "set",
                "__rich__"
            ],
            "classes": {
                "SelfCheckState": [
                    "__init__",
                    "key",
                    "get",
                    "set"
                ],
                "UpgradePrompt": [
                    "__rich__"
                ]
            },
            "routes": [],
            "complexity": 16
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\cli\\command_context.py": {
            "functions": [
                "__init__",
                "main_context",
                "enter_context"
            ],
            "classes": {
                "CommandContextMixIn": [
                    "__init__",
                    "main_context",
                    "enter_context"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\cli\\base_command.py": {
            "functions": [
                "__init__",
                "add_options",
                "handle_pip_version_check",
                "run",
                "_run_wrapper",
                "parse_args",
                "main",
                "_main",
                "_inner_run"
            ],
            "classes": {
                "Command": [
                    "__init__",
                    "add_options",
                    "handle_pip_version_check",
                    "run",
                    "_run_wrapper",
                    "parse_args",
                    "main",
                    "_main"
                ]
            },
            "routes": [],
            "complexity": 17
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\cli\\cmdoptions.py": {
            "functions": [
                "raise_option_error",
                "make_option_group",
                "check_dist_restriction",
                "_path_option_check",
                "_package_name_option_check",
                "exists_action",
                "extra_index_url",
                "find_links",
                "trusted_host",
                "constraints",
                "requirements",
                "editable",
                "_handle_src",
                "_get_format_control",
                "_handle_no_binary",
                "_handle_only_binary",
                "no_binary",
                "only_binary",
                "_convert_python_version",
                "_handle_python_version",
                "add_target_python_options",
                "make_target_python",
                "prefer_binary",
                "_handle_no_cache_dir",
                "_handle_no_use_pep517",
                "_handle_config_settings",
                "_handle_merge_hash",
                "check_list_path_option"
            ],
            "classes": {
                "PipOption": []
            },
            "routes": [],
            "complexity": 28
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\pyproject.py": {
            "functions": [
                "_is_list_of_str",
                "make_pyproject_path",
                "load_pyproject_toml"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\wheel_builder.py": {
            "functions": [
                "_contains_egg_info",
                "_should_build",
                "should_build_for_wheel_command",
                "should_build_for_install_command",
                "_should_cache",
                "_get_cache_dir",
                "_verify_one",
                "_build_one",
                "_build_one_inside_env",
                "_clean_one_legacy",
                "build"
            ],
            "classes": {},
            "routes": [],
            "complexity": 11
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\cli\\index_command.py": {
            "functions": [
                "_create_truststore_ssl_context",
                "_pip_self_version_check",
                "__init__",
                "_get_index_urls",
                "get_default_session",
                "_build_session",
                "handle_pip_version_check"
            ],
            "classes": {
                "SessionCommandMixin": [
                    "__init__",
                    "_get_index_urls",
                    "get_default_session",
                    "_build_session"
                ],
                "IndexGroupCommand": [
                    "handle_pip_version_check"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\cli\\autocompletion.py": {
            "functions": [
                "autocomplete",
                "get_path_completion_type",
                "auto_complete_paths"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\cli\\parser.py": {
            "functions": [
                "__init__",
                "format_option_strings",
                "_format_option_strings",
                "format_heading",
                "format_usage",
                "format_description",
                "format_epilog",
                "indent_lines",
                "expand_default",
                "insert_option_group",
                "option_list_all",
                "__init__",
                "check_default",
                "_get_ordered_configuration_items",
                "_update_defaults",
                "get_default_values",
                "error"
            ],
            "classes": {
                "PrettyHelpFormatter": [
                    "__init__",
                    "format_option_strings",
                    "_format_option_strings",
                    "format_heading",
                    "format_usage",
                    "format_description",
                    "format_epilog",
                    "indent_lines"
                ],
                "UpdatingDefaultsHelpFormatter": [
                    "expand_default"
                ],
                "CustomOptionParser": [
                    "insert_option_group",
                    "option_list_all"
                ],
                "ConfigOptionParser": [
                    "__init__",
                    "check_default",
                    "_get_ordered_configuration_items",
                    "_update_defaults",
                    "get_default_values",
                    "error"
                ]
            },
            "routes": [],
            "complexity": 34
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\cli\\main_parser.py": {
            "functions": [
                "create_main_parser",
                "identify_python_interpreter",
                "parse_command"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\cli\\main.py": {
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\cli\\spinners.py": {
            "functions": [
                "open_spinner",
                "hidden_cursor",
                "spin",
                "finish",
                "__init__",
                "_write",
                "spin",
                "finish",
                "__init__",
                "_update",
                "spin",
                "finish",
                "__init__",
                "ready",
                "reset"
            ],
            "classes": {
                "SpinnerInterface": [
                    "spin",
                    "finish"
                ],
                "InteractiveSpinner": [
                    "__init__",
                    "_write",
                    "spin",
                    "finish"
                ],
                "NonInteractiveSpinner": [
                    "__init__",
                    "_update",
                    "spin",
                    "finish"
                ],
                "RateLimiter": [
                    "__init__",
                    "ready",
                    "reset"
                ]
            },
            "routes": [],
            "complexity": 28
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\cli\\status_codes.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\commands\\check.py": {
            "functions": [
                "run"
            ],
            "classes": {
                "CheckCommand": [
                    "run"
                ]
            },
            "routes": [],
            "complexity": 2
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\cli\\req_command.py": {
            "functions": [
                "with_cleanup",
                "configure_tempdir_registry",
                "wrapper",
                "__init__",
                "determine_resolver_variant",
                "make_requirement_preparer",
                "make_resolver",
                "get_requirements",
                "trace_basic_info",
                "_build_package_finder"
            ],
            "classes": {
                "RequirementCommand": [
                    "__init__",
                    "determine_resolver_variant",
                    "make_requirement_preparer",
                    "make_resolver",
                    "get_requirements",
                    "trace_basic_info",
                    "_build_package_finder"
                ]
            },
            "routes": [],
            "complexity": 17
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\cli\\progress_bars.py": {
            "functions": [
                "_rich_progress_bar",
                "_raw_progress_bar",
                "get_download_progress_renderer",
                "write_progress"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\cli\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\commands\\configuration.py": {
            "functions": [
                "add_options",
                "run",
                "_determine_file",
                "list_values",
                "get_name",
                "set_name_value",
                "unset_name",
                "list_config_values",
                "print_config_file_values",
                "print_env_var_values",
                "open_in_editor",
                "_get_n_args",
                "_save_configuration",
                "_determine_editor"
            ],
            "classes": {
                "ConfigurationCommand": [
                    "add_options",
                    "run",
                    "_determine_file",
                    "list_values",
                    "get_name",
                    "set_name_value",
                    "unset_name",
                    "list_config_values",
                    "print_config_file_values",
                    "print_env_var_values",
                    "open_in_editor",
                    "_get_n_args",
                    "_save_configuration",
                    "_determine_editor"
                ]
            },
            "routes": [],
            "complexity": 28
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\commands\\completion.py": {
            "functions": [
                "add_options",
                "run"
            ],
            "classes": {
                "CompletionCommand": [
                    "add_options",
                    "run"
                ]
            },
            "routes": [],
            "complexity": 4
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\commands\\freeze.py": {
            "functions": [
                "_should_suppress_build_backends",
                "_dev_pkgs",
                "add_options",
                "run"
            ],
            "classes": {
                "FreezeCommand": [
                    "add_options",
                    "run"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\commands\\download.py": {
            "functions": [
                "add_options",
                "run"
            ],
            "classes": {
                "DownloadCommand": [
                    "add_options",
                    "run"
                ]
            },
            "routes": [],
            "complexity": 4
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\commands\\hash.py": {
            "functions": [
                "_hash_of_file",
                "add_options",
                "run"
            ],
            "classes": {
                "HashCommand": [
                    "add_options",
                    "run"
                ]
            },
            "routes": [],
            "complexity": 5
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\commands\\debug.py": {
            "functions": [
                "show_value",
                "show_sys_implementation",
                "create_vendor_txt_map",
                "get_module_from_module_name",
                "get_vendor_version_from_module",
                "show_actual_vendor_versions",
                "show_vendor_versions",
                "show_tags",
                "ca_bundle_info",
                "add_options",
                "run"
            ],
            "classes": {
                "DebugCommand": [
                    "add_options",
                    "run"
                ]
            },
            "routes": [],
            "complexity": 13
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\commands\\cache.py": {
            "functions": [
                "add_options",
                "run",
                "get_cache_dir",
                "get_cache_info",
                "list_cache_items",
                "format_for_human",
                "format_for_abspath",
                "remove_cache_items",
                "purge_cache",
                "_cache_dir",
                "_find_http_files",
                "_find_wheels"
            ],
            "classes": {
                "CacheCommand": [
                    "add_options",
                    "run",
                    "get_cache_dir",
                    "get_cache_info",
                    "list_cache_items",
                    "format_for_human",
                    "format_for_abspath",
                    "remove_cache_items",
                    "purge_cache",
                    "_cache_dir",
                    "_find_http_files",
                    "_find_wheels"
                ]
            },
            "routes": [],
            "complexity": 24
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\commands\\inspect.py": {
            "functions": [
                "add_options",
                "run",
                "_dist_to_dict"
            ],
            "classes": {
                "InspectCommand": [
                    "add_options",
                    "run",
                    "_dist_to_dict"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\commands\\help.py": {
            "functions": [
                "run"
            ],
            "classes": {
                "HelpCommand": [
                    "run"
                ]
            },
            "routes": [],
            "complexity": 2
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\commands\\list.py": {
            "functions": [
                "format_for_columns",
                "format_for_json",
                "add_options",
                "handle_pip_version_check",
                "_build_package_finder",
                "run",
                "get_outdated",
                "get_uptodate",
                "get_not_required",
                "iter_packages_latest_infos",
                "output_package_listing",
                "output_package_listing_columns",
                "latest_info"
            ],
            "classes": {
                "ListCommand": [
                    "add_options",
                    "handle_pip_version_check",
                    "_build_package_finder",
                    "run",
                    "get_outdated",
                    "get_uptodate",
                    "get_not_required",
                    "iter_packages_latest_infos",
                    "output_package_listing",
                    "output_package_listing_columns"
                ],
                "_DistWithLatestInfo": []
            },
            "routes": [],
            "complexity": 23
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\commands\\install.py": {
            "functions": [
                "get_lib_location_guesses",
                "site_packages_writable",
                "decide_user_install",
                "create_os_error_message",
                "add_options",
                "run",
                "_handle_target_dir",
                "_determine_conflicts",
                "_warn_about_conflicts"
            ],
            "classes": {
                "InstallCommand": [
                    "add_options",
                    "run",
                    "_handle_target_dir",
                    "_determine_conflicts",
                    "_warn_about_conflicts"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\commands\\index.py": {
            "functions": [
                "add_options",
                "run",
                "_build_package_finder",
                "get_available_package_versions"
            ],
            "classes": {
                "IndexCommand": [
                    "add_options",
                    "run",
                    "_build_package_finder",
                    "get_available_package_versions"
                ]
            },
            "routes": [],
            "complexity": 8
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\commands\\search.py": {
            "functions": [
                "transform_hits",
                "print_dist_installation_info",
                "print_results",
                "highest_version",
                "add_options",
                "run",
                "search"
            ],
            "classes": {
                "SearchCommand": [
                    "add_options",
                    "run",
                    "search"
                ],
                "TransformedHit": []
            },
            "routes": [],
            "complexity": 10
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\commands\\wheel.py": {
            "functions": [
                "add_options",
                "run"
            ],
            "classes": {
                "WheelCommand": [
                    "add_options",
                    "run"
                ]
            },
            "routes": [],
            "complexity": 4
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\commands\\show.py": {
            "functions": [
                "search_packages_info",
                "print_results",
                "add_options",
                "run",
                "_get_requiring_packages"
            ],
            "classes": {
                "ShowCommand": [
                    "add_options",
                    "run"
                ],
                "_PackageInfo": []
            },
            "routes": [],
            "complexity": 7
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\commands\\uninstall.py": {
            "functions": [
                "add_options",
                "run"
            ],
            "classes": {
                "UninstallCommand": [
                    "add_options",
                    "run"
                ]
            },
            "routes": [],
            "complexity": 4
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\commands\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\distributions\\base.py": {
            "functions": [
                "__init__",
                "build_tracker_id",
                "get_metadata_distribution",
                "prepare_distribution_metadata"
            ],
            "classes": {
                "AbstractDistribution": [
                    "__init__",
                    "build_tracker_id",
                    "get_metadata_distribution",
                    "prepare_distribution_metadata"
                ]
            },
            "routes": [],
            "complexity": 8
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\distributions\\installed.py": {
            "functions": [
                "build_tracker_id",
                "get_metadata_distribution",
                "prepare_distribution_metadata"
            ],
            "classes": {
                "InstalledDistribution": [
                    "build_tracker_id",
                    "get_metadata_distribution",
                    "prepare_distribution_metadata"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\distributions\\sdist.py": {
            "functions": [
                "build_tracker_id",
                "get_metadata_distribution",
                "prepare_distribution_metadata",
                "_prepare_build_backend",
                "_get_build_requires_wheel",
                "_get_build_requires_editable",
                "_install_build_reqs",
                "_raise_conflicts",
                "_raise_missing_reqs"
            ],
            "classes": {
                "SourceDistribution": [
                    "build_tracker_id",
                    "get_metadata_distribution",
                    "prepare_distribution_metadata",
                    "_prepare_build_backend",
                    "_get_build_requires_wheel",
                    "_get_build_requires_editable",
                    "_install_build_reqs",
                    "_raise_conflicts",
                    "_raise_missing_reqs"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\distributions\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\distributions\\wheel.py": {
            "functions": [
                "build_tracker_id",
                "get_metadata_distribution",
                "prepare_distribution_metadata"
            ],
            "classes": {
                "WheelDistribution": [
                    "build_tracker_id",
                    "get_metadata_distribution",
                    "prepare_distribution_metadata"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\index\\collector.py": {
            "functions": [
                "_match_vcs_scheme",
                "_ensure_api_header",
                "_ensure_api_response",
                "_get_simple_response",
                "_get_encoding_from_headers",
                "with_cached_index_content",
                "parse_links",
                "_handle_get_simple_fail",
                "_make_index_content",
                "_get_index_content",
                "__init__",
                "__init__",
                "__eq__",
                "__hash__",
                "__call__",
                "wrapper",
                "wrapper_wrapper",
                "__str__",
                "__init__",
                "handle_starttag",
                "get_href",
                "__init__",
                "create",
                "find_links",
                "fetch_response",
                "collect_sources"
            ],
            "classes": {
                "_NotAPIContent": [
                    "__init__"
                ],
                "_NotHTTP": [],
                "CacheablePageContent": [
                    "__init__",
                    "__eq__",
                    "__hash__"
                ],
                "ParseLinks": [
                    "__call__"
                ],
                "IndexContent": [
                    "__str__"
                ],
                "HTMLLinkParser": [
                    "__init__",
                    "handle_starttag",
                    "get_href"
                ],
                "CollectedSources": [],
                "LinkCollector": [
                    "__init__",
                    "create",
                    "find_links",
                    "fetch_response",
                    "collect_sources"
                ]
            },
            "routes": [],
            "complexity": 40
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\index\\package_finder.py": {
            "functions": [
                "_check_link_requires_python",
                "filter_unallowed_hashes",
                "_find_name_version_sep",
                "_extract_version_from_fragment",
                "__init__",
                "evaluate_link",
                "__init__",
                "iter_all",
                "iter_applicable",
                "create",
                "__init__",
                "get_applicable_candidates",
                "_sort_key",
                "sort_best_candidate",
                "compute_best_candidate",
                "__init__",
                "create",
                "target_python",
                "search_scope",
                "search_scope",
                "find_links",
                "index_urls",
                "trusted_hosts",
                "allow_all_prereleases",
                "set_allow_all_prereleases",
                "prefer_binary",
                "set_prefer_binary",
                "requires_python_skipped_reasons",
                "make_link_evaluator",
                "_sort_links",
                "_log_skipped_link",
                "get_install_candidate",
                "evaluate_links",
                "process_project_url",
                "find_all_candidates",
                "make_candidate_evaluator",
                "find_best_candidate",
                "find_requirement",
                "_format_versions",
                "_should_install_candidate"
            ],
            "classes": {
                "LinkType": [],
                "LinkEvaluator": [
                    "__init__",
                    "evaluate_link"
                ],
                "CandidatePreferences": [],
                "BestCandidateResult": [
                    "__init__",
                    "iter_all",
                    "iter_applicable"
                ],
                "CandidateEvaluator": [
                    "create",
                    "__init__",
                    "get_applicable_candidates",
                    "_sort_key",
                    "sort_best_candidate",
                    "compute_best_candidate"
                ],
                "PackageFinder": [
                    "__init__",
                    "create",
                    "target_python",
                    "search_scope",
                    "search_scope",
                    "find_links",
                    "index_urls",
                    "trusted_hosts",
                    "allow_all_prereleases",
                    "set_allow_all_prereleases",
                    "prefer_binary",
                    "set_prefer_binary",
                    "requires_python_skipped_reasons",
                    "make_link_evaluator",
                    "_sort_links",
                    "_log_skipped_link",
                    "get_install_candidate",
                    "evaluate_links",
                    "process_project_url",
                    "find_all_candidates",
                    "make_candidate_evaluator",
                    "find_best_candidate",
                    "find_requirement"
                ]
            },
            "routes": [],
            "complexity": 74
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\index\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\index\\sources.py": {
            "functions": [
                "_is_html_file",
                "build_source",
                "link",
                "page_candidates",
                "file_links",
                "__init__",
                "_scan_directory",
                "page_candidates",
                "project_name_to_urls",
                "__init__",
                "link",
                "page_candidates",
                "file_links",
                "__init__",
                "link",
                "page_candidates",
                "file_links",
                "__init__",
                "link",
                "page_candidates",
                "file_links",
                "__init__",
                "link",
                "page_candidates",
                "file_links"
            ],
            "classes": {
                "LinkSource": [
                    "link",
                    "page_candidates",
                    "file_links"
                ],
                "_FlatDirectoryToUrls": [
                    "__init__",
                    "_scan_directory",
                    "page_candidates",
                    "project_name_to_urls"
                ],
                "_FlatDirectorySource": [
                    "__init__",
                    "link",
                    "page_candidates",
                    "file_links"
                ],
                "_LocalFileSource": [
                    "__init__",
                    "link",
                    "page_candidates",
                    "file_links"
                ],
                "_RemoteFileSource": [
                    "__init__",
                    "link",
                    "page_candidates",
                    "file_links"
                ],
                "_IndexDirectorySource": [
                    "__init__",
                    "link",
                    "page_candidates",
                    "file_links"
                ]
            },
            "routes": [],
            "complexity": 48
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\locations\\_distutils.py": {
            "functions": [
                "distutils_scheme",
                "get_scheme",
                "get_bin_prefix",
                "get_purelib",
                "get_platlib"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\metadata\\pkg_resources.py": {
            "functions": [
                "__init__",
                "has_metadata",
                "get_metadata",
                "get_metadata_lines",
                "metadata_isdir",
                "metadata_listdir",
                "run_script",
                "__init__",
                "_extra_mapping",
                "from_directory",
                "from_metadata_file_contents",
                "from_wheel",
                "location",
                "installed_location",
                "info_location",
                "installed_by_distutils",
                "canonical_name",
                "version",
                "raw_version",
                "is_file",
                "iter_distutils_script_names",
                "read_text",
                "iter_entry_points",
                "_metadata_impl",
                "iter_dependencies",
                "iter_provided_extras",
                "__init__",
                "default",
                "from_paths",
                "_iter_distributions",
                "_search_distribution",
                "get_distribution"
            ],
            "classes": {
                "EntryPoint": [],
                "InMemoryMetadata": [
                    "__init__",
                    "has_metadata",
                    "get_metadata",
                    "get_metadata_lines",
                    "metadata_isdir",
                    "metadata_listdir",
                    "run_script"
                ],
                "Distribution": [
                    "__init__",
                    "_extra_mapping",
                    "from_directory",
                    "from_metadata_file_contents",
                    "from_wheel",
                    "location",
                    "installed_location",
                    "info_location",
                    "installed_by_distutils",
                    "canonical_name",
                    "version",
                    "raw_version",
                    "is_file",
                    "iter_distutils_script_names",
                    "read_text",
                    "iter_entry_points",
                    "_metadata_impl",
                    "iter_dependencies",
                    "iter_provided_extras"
                ],
                "Environment": [
                    "__init__",
                    "default",
                    "from_paths",
                    "_iter_distributions",
                    "_search_distribution",
                    "get_distribution"
                ]
            },
            "routes": [],
            "complexity": 64
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\metadata\\base.py": {
            "functions": [
                "_convert_installed_files_path",
                "name",
                "value",
                "group",
                "from_directory",
                "from_metadata_file_contents",
                "from_wheel",
                "__repr__",
                "__str__",
                "location",
                "editable_project_location",
                "installed_location",
                "info_location",
                "installed_by_distutils",
                "installed_as_egg",
                "installed_with_setuptools_egg_info",
                "installed_with_dist_info",
                "canonical_name",
                "version",
                "raw_version",
                "setuptools_filename",
                "direct_url",
                "installer",
                "requested",
                "editable",
                "local",
                "in_usersite",
                "in_site_packages",
                "is_file",
                "iter_distutils_script_names",
                "read_text",
                "iter_entry_points",
                "_metadata_impl",
                "metadata",
                "metadata_dict",
                "metadata_version",
                "raw_name",
                "requires_python",
                "iter_dependencies",
                "iter_raw_dependencies",
                "iter_provided_extras",
                "_iter_declared_entries_from_record",
                "_iter_declared_entries_from_legacy",
                "iter_declared_entries",
                "_iter_requires_txt_entries",
                "_iter_egg_info_extras",
                "_iter_egg_info_dependencies",
                "_add_egg_info_requires",
                "default",
                "from_paths",
                "get_distribution",
                "_iter_distributions",
                "iter_all_distributions",
                "iter_installed_distributions",
                "as_zipfile",
                "__init__",
                "as_zipfile",
                "__init__",
                "as_zipfile"
            ],
            "classes": {
                "BaseEntryPoint": [
                    "name",
                    "value",
                    "group"
                ],
                "RequiresEntry": [],
                "BaseDistribution": [
                    "from_directory",
                    "from_metadata_file_contents",
                    "from_wheel",
                    "__repr__",
                    "__str__",
                    "location",
                    "editable_project_location",
                    "installed_location",
                    "info_location",
                    "installed_by_distutils",
                    "installed_as_egg",
                    "installed_with_setuptools_egg_info",
                    "installed_with_dist_info",
                    "canonical_name",
                    "version",
                    "raw_version",
                    "setuptools_filename",
                    "direct_url",
                    "installer",
                    "requested",
                    "editable",
                    "local",
                    "in_usersite",
                    "in_site_packages",
                    "is_file",
                    "iter_distutils_script_names",
                    "read_text",
                    "iter_entry_points",
                    "_metadata_impl",
                    "metadata",
                    "metadata_dict",
                    "metadata_version",
                    "raw_name",
                    "requires_python",
                    "iter_dependencies",
                    "iter_raw_dependencies",
                    "iter_provided_extras",
                    "_iter_declared_entries_from_record",
                    "_iter_declared_entries_from_legacy",
                    "iter_declared_entries",
                    "_iter_requires_txt_entries",
                    "_iter_egg_info_extras",
                    "_iter_egg_info_dependencies",
                    "_add_egg_info_requires"
                ],
                "BaseEnvironment": [
                    "default",
                    "from_paths",
                    "get_distribution",
                    "_iter_distributions",
                    "iter_all_distributions",
                    "iter_installed_distributions"
                ],
                "Wheel": [
                    "as_zipfile"
                ],
                "FilesystemWheel": [
                    "__init__",
                    "as_zipfile"
                ],
                "MemoryWheel": [
                    "__init__",
                    "as_zipfile"
                ]
            },
            "routes": [],
            "complexity": 117
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\locations\\_sysconfig.py": {
            "functions": [
                "_should_use_osx_framework_prefix",
                "_infer_prefix",
                "_infer_user",
                "_infer_home",
                "get_scheme",
                "get_bin_prefix",
                "get_purelib",
                "get_platlib"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\locations\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\locations\\base.py": {
            "functions": [
                "get_major_minor_version",
                "change_root",
                "get_src_prefix",
                "is_osx_framework"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\metadata\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\metadata\\_json.py": {
            "functions": [
                "json_name",
                "msg_to_json",
                "sanitise_header"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\metadata\\importlib\\_dists.py": {
            "functions": [
                "__init__",
                "from_zipfile",
                "iterdir",
                "read_text",
                "__init__",
                "from_directory",
                "from_metadata_file_contents",
                "from_wheel",
                "location",
                "info_location",
                "installed_location",
                "canonical_name",
                "version",
                "raw_version",
                "is_file",
                "iter_distutils_script_names",
                "read_text",
                "iter_entry_points",
                "_metadata_impl",
                "iter_provided_extras",
                "iter_dependencies"
            ],
            "classes": {
                "WheelDistribution": [
                    "__init__",
                    "from_zipfile",
                    "iterdir",
                    "read_text"
                ],
                "Distribution": [
                    "__init__",
                    "from_directory",
                    "from_metadata_file_contents",
                    "from_wheel",
                    "location",
                    "info_location",
                    "installed_location",
                    "canonical_name",
                    "version",
                    "raw_version",
                    "is_file",
                    "iter_distutils_script_names",
                    "read_text",
                    "iter_entry_points",
                    "_metadata_impl",
                    "iter_provided_extras",
                    "iter_dependencies"
                ]
            },
            "routes": [],
            "complexity": 42
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\models\\direct_url.py": {
            "functions": [
                "_get",
                "_get_required",
                "_exactly_one_of",
                "_filter_none",
                "_from_dict",
                "_to_dict",
                "__init__",
                "hash",
                "hash",
                "_from_dict",
                "_to_dict",
                "_from_dict",
                "_to_dict",
                "_remove_auth_from_netloc",
                "redacted_url",
                "validate",
                "from_dict",
                "to_dict",
                "from_json",
                "to_json",
                "is_local_editable"
            ],
            "classes": {
                "DirectUrlValidationError": [],
                "VcsInfo": [
                    "_from_dict",
                    "_to_dict"
                ],
                "ArchiveInfo": [
                    "__init__",
                    "hash",
                    "hash",
                    "_from_dict",
                    "_to_dict"
                ],
                "DirInfo": [
                    "_from_dict",
                    "_to_dict"
                ],
                "DirectUrl": [
                    "_remove_auth_from_netloc",
                    "redacted_url",
                    "validate",
                    "from_dict",
                    "to_dict",
                    "from_json",
                    "to_json",
                    "is_local_editable"
                ]
            },
            "routes": [],
            "complexity": 38
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\metadata\\importlib\\_compat.py": {
            "functions": [
                "get_info_location",
                "parse_name_and_version_from_info_directory",
                "get_dist_canonical_name",
                "__init__",
                "__str__",
                "name",
                "parent"
            ],
            "classes": {
                "BadMetadata": [
                    "__init__",
                    "__str__"
                ],
                "BasePath": [
                    "name",
                    "parent"
                ]
            },
            "routes": [],
            "complexity": 11
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\metadata\\importlib\\_envs.py": {
            "functions": [
                "_looks_like_wheel",
                "_emit_egg_deprecation",
                "__init__",
                "_find_impl",
                "find",
                "find_linked",
                "_find_eggs_in_dir",
                "_find_eggs_in_zip",
                "find_eggs",
                "__init__",
                "default",
                "from_paths",
                "_iter_distributions",
                "get_distribution"
            ],
            "classes": {
                "_DistributionFinder": [
                    "__init__",
                    "_find_impl",
                    "find",
                    "find_linked",
                    "_find_eggs_in_dir",
                    "_find_eggs_in_zip",
                    "find_eggs"
                ],
                "Environment": [
                    "__init__",
                    "default",
                    "from_paths",
                    "_iter_distributions",
                    "get_distribution"
                ]
            },
            "routes": [],
            "complexity": 26
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\models\\candidate.py": {
            "functions": [
                "__init__",
                "__str__"
            ],
            "classes": {
                "InstallationCandidate": [
                    "__init__",
                    "__str__"
                ]
            },
            "routes": [],
            "complexity": 4
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\models\\index.py": {
            "functions": [
                "__init__",
                "_url_for_path"
            ],
            "classes": {
                "PackageIndex": [
                    "__init__",
                    "_url_for_path"
                ]
            },
            "routes": [],
            "complexity": 4
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\models\\format_control.py": {
            "functions": [
                "__init__",
                "__eq__",
                "__repr__",
                "handle_mutual_excludes",
                "get_allowed_formats",
                "disallow_binaries"
            ],
            "classes": {
                "FormatControl": [
                    "__init__",
                    "__eq__",
                    "__repr__",
                    "handle_mutual_excludes",
                    "get_allowed_formats",
                    "disallow_binaries"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\models\\installation_report.py": {
            "functions": [
                "__init__",
                "_install_req_to_dict",
                "to_dict"
            ],
            "classes": {
                "InstallationReport": [
                    "__init__",
                    "_install_req_to_dict",
                    "to_dict"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\models\\selection_prefs.py": {
            "functions": [
                "__init__"
            ],
            "classes": {
                "SelectionPreferences": [
                    "__init__"
                ]
            },
            "routes": [],
            "complexity": 2
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\metadata\\importlib\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\models\\scheme.py": {
            "functions": [],
            "classes": {
                "Scheme": []
            },
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\models\\link.py": {
            "functions": [
                "supported_hashes",
                "_clean_url_path_part",
                "_clean_file_url_path",
                "_clean_url_path",
                "_ensure_quoted_url",
                "_clean_link",
                "links_equivalent",
                "__post_init__",
                "find_hash_url_fragment",
                "as_dict",
                "as_hashes",
                "is_hash_allowed",
                "__post_init__",
                "__init__",
                "from_json",
                "from_element",
                "__str__",
                "__repr__",
                "__hash__",
                "__eq__",
                "__lt__",
                "url",
                "filename",
                "file_path",
                "scheme",
                "netloc",
                "path",
                "splitext",
                "ext",
                "url_without_fragment",
                "_egg_fragment",
                "subdirectory_fragment",
                "metadata_link",
                "as_hashes",
                "hash",
                "hash_name",
                "show_url",
                "is_file",
                "is_existing_dir",
                "is_wheel",
                "is_vcs",
                "is_yanked",
                "has_hash",
                "is_hash_allowed"
            ],
            "classes": {
                "LinkHash": [
                    "__post_init__",
                    "find_hash_url_fragment",
                    "as_dict",
                    "as_hashes",
                    "is_hash_allowed"
                ],
                "MetadataFile": [
                    "__post_init__"
                ],
                "Link": [
                    "__init__",
                    "from_json",
                    "from_element",
                    "__str__",
                    "__repr__",
                    "__hash__",
                    "__eq__",
                    "__lt__",
                    "url",
                    "filename",
                    "file_path",
                    "scheme",
                    "netloc",
                    "path",
                    "splitext",
                    "ext",
                    "url_without_fragment",
                    "_egg_fragment",
                    "subdirectory_fragment",
                    "metadata_link",
                    "as_hashes",
                    "hash",
                    "hash_name",
                    "show_url",
                    "is_file",
                    "is_existing_dir",
                    "is_wheel",
                    "is_vcs",
                    "is_yanked",
                    "has_hash",
                    "is_hash_allowed"
                ],
                "_CleanResult": []
            },
            "routes": [],
            "complexity": 81
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\models\\wheel.py": {
            "functions": [
                "__init__",
                "get_formatted_file_tags",
                "support_index_min",
                "find_most_preferred_tag",
                "supported"
            ],
            "classes": {
                "Wheel": [
                    "__init__",
                    "get_formatted_file_tags",
                    "support_index_min",
                    "find_most_preferred_tag",
                    "supported"
                ]
            },
            "routes": [],
            "complexity": 10
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\models\\search_scope.py": {
            "functions": [
                "create",
                "get_formatted_locations",
                "get_index_urls_locations",
                "mkurl_pypi_url"
            ],
            "classes": {
                "SearchScope": [
                    "create",
                    "get_formatted_locations",
                    "get_index_urls_locations"
                ]
            },
            "routes": [],
            "complexity": 7
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\models\\target_python.py": {
            "functions": [
                "__init__",
                "format_given",
                "get_sorted_tags",
                "get_unsorted_tags"
            ],
            "classes": {
                "TargetPython": [
                    "__init__",
                    "format_given",
                    "get_sorted_tags",
                    "get_unsorted_tags"
                ]
            },
            "routes": [],
            "complexity": 8
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\models\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\network\\auth.py": {
            "functions": [
                "get_keyring_provider",
                "get_auth_info",
                "save_auth_info",
                "get_auth_info",
                "save_auth_info",
                "__init__",
                "get_auth_info",
                "save_auth_info",
                "__init__",
                "get_auth_info",
                "save_auth_info",
                "_get_password",
                "_set_password",
                "__init__",
                "keyring_provider",
                "keyring_provider",
                "use_keyring",
                "_get_keyring_auth",
                "_get_index_url",
                "_get_new_credentials",
                "_get_url_and_credentials",
                "__call__",
                "_prompt_for_password",
                "_should_save_password_to_keyring",
                "handle_401",
                "warn_on_401",
                "save_credentials",
                "PATH_as_shutil_which_determines_it"
            ],
            "classes": {
                "Credentials": [],
                "KeyRingBaseProvider": [
                    "get_auth_info",
                    "save_auth_info"
                ],
                "KeyRingNullProvider": [
                    "get_auth_info",
                    "save_auth_info"
                ],
                "KeyRingPythonProvider": [
                    "__init__",
                    "get_auth_info",
                    "save_auth_info"
                ],
                "KeyRingCliProvider": [
                    "__init__",
                    "get_auth_info",
                    "save_auth_info",
                    "_get_password",
                    "_set_password"
                ],
                "MultiDomainBasicAuth": [
                    "__init__",
                    "keyring_provider",
                    "keyring_provider",
                    "use_keyring",
                    "_get_keyring_auth",
                    "_get_index_url",
                    "_get_new_credentials",
                    "_get_url_and_credentials",
                    "__call__",
                    "_prompt_for_password",
                    "_should_save_password_to_keyring",
                    "handle_401",
                    "warn_on_401",
                    "save_credentials"
                ]
            },
            "routes": [],
            "complexity": 54
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\network\\download.py": {
            "functions": [
                "_get_http_response_size",
                "_prepare_download",
                "sanitize_content_filename",
                "parse_content_disposition",
                "_get_http_response_filename",
                "_http_get_download",
                "__init__",
                "__call__",
                "__init__",
                "__call__"
            ],
            "classes": {
                "Downloader": [
                    "__init__",
                    "__call__"
                ],
                "BatchDownloader": [
                    "__init__",
                    "__call__"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\network\\cache.py": {
            "functions": [
                "is_from_cache",
                "suppressed_cache_errors",
                "__init__",
                "_get_cache_path",
                "get",
                "_write",
                "set",
                "delete",
                "get_body",
                "set_body"
            ],
            "classes": {
                "SafeFileCache": [
                    "__init__",
                    "_get_cache_path",
                    "get",
                    "_write",
                    "set",
                    "delete",
                    "get_body",
                    "set_body"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\network\\xmlrpc.py": {
            "functions": [
                "__init__",
                "request"
            ],
            "classes": {
                "PipXmlrpcTransport": [
                    "__init__",
                    "request"
                ]
            },
            "routes": [],
            "complexity": 4
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\network\\session.py": {
            "functions": [
                "looks_like_ci",
                "user_agent",
                "send",
                "close",
                "__init__",
                "init_poolmanager",
                "cert_verify",
                "cert_verify",
                "__init__",
                "update_index_urls",
                "add_trusted_host",
                "iter_secure_origins",
                "is_secure_origin",
                "request"
            ],
            "classes": {
                "LocalFSAdapter": [
                    "send",
                    "close"
                ],
                "_SSLContextAdapterMixin": [
                    "__init__",
                    "init_poolmanager"
                ],
                "HTTPAdapter": [],
                "CacheControlAdapter": [],
                "InsecureHTTPAdapter": [
                    "cert_verify"
                ],
                "InsecureCacheControlAdapter": [
                    "cert_verify"
                ],
                "PipSession": [
                    "__init__",
                    "update_index_urls",
                    "add_trusted_host",
                    "iter_secure_origins",
                    "is_secure_origin",
                    "request"
                ]
            },
            "routes": [],
            "complexity": 26
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\network\\utils.py": {
            "functions": [
                "raise_for_status",
                "response_chunks"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\operations\\freeze.py": {
            "functions": [
                "freeze",
                "_format_as_name_version",
                "_get_editable_info",
                "__init__",
                "from_dist",
                "__str__"
            ],
            "classes": {
                "_EditableInfo": [],
                "FrozenRequirement": [
                    "__init__",
                    "from_dist",
                    "__str__"
                ]
            },
            "routes": [],
            "complexity": 9
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\network\\lazy_wheel.py": {
            "functions": [
                "dist_from_wheel_url",
                "__init__",
                "mode",
                "name",
                "seekable",
                "close",
                "closed",
                "read",
                "readable",
                "seek",
                "tell",
                "truncate",
                "writable",
                "__enter__",
                "__exit__",
                "_stay",
                "_check_zip",
                "_stream_response",
                "_merge",
                "_download"
            ],
            "classes": {
                "HTTPRangeRequestUnsupported": [],
                "LazyZipOverHTTP": [
                    "__init__",
                    "mode",
                    "name",
                    "seekable",
                    "close",
                    "closed",
                    "read",
                    "readable",
                    "seek",
                    "tell",
                    "truncate",
                    "writable",
                    "__enter__",
                    "__exit__",
                    "_stay",
                    "_check_zip",
                    "_stream_response",
                    "_merge",
                    "_download"
                ]
            },
            "routes": [],
            "complexity": 39
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\operations\\prepare.py": {
            "functions": [
                "_get_prepared_distribution",
                "unpack_vcs_link",
                "get_http_url",
                "get_file_url",
                "unpack_url",
                "_check_download_dir",
                "__post_init__",
                "__init__",
                "_log_preparing_link",
                "_ensure_link_req_src_dir",
                "_get_linked_req_hashes",
                "_fetch_metadata_only",
                "_fetch_metadata_using_link_data_attr",
                "_fetch_metadata_using_lazy_wheel",
                "_complete_partial_requirements",
                "prepare_linked_requirement",
                "prepare_linked_requirements_more",
                "_prepare_linked_requirement",
                "save_linked_requirement",
                "prepare_editable_requirement",
                "prepare_installed_requirement"
            ],
            "classes": {
                "File": [
                    "__post_init__"
                ],
                "RequirementPreparer": [
                    "__init__",
                    "_log_preparing_link",
                    "_ensure_link_req_src_dir",
                    "_get_linked_req_hashes",
                    "_fetch_metadata_only",
                    "_fetch_metadata_using_link_data_attr",
                    "_fetch_metadata_using_lazy_wheel",
                    "_complete_partial_requirements",
                    "prepare_linked_requirement",
                    "prepare_linked_requirements_more",
                    "_prepare_linked_requirement",
                    "save_linked_requirement",
                    "prepare_editable_requirement",
                    "prepare_installed_requirement"
                ]
            },
            "routes": [],
            "complexity": 36
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\network\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\operations\\install\\editable_legacy.py": {
            "functions": [
                "install_editable"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\operations\\check.py": {
            "functions": [
                "create_package_set_from_installed",
                "check_package_set",
                "check_install_conflicts",
                "check_unsupported",
                "_simulate_installation_of",
                "_create_whitelist"
            ],
            "classes": {
                "PackageDetails": []
            },
            "routes": [],
            "complexity": 6
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\operations\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\req\\req_file.py": {
            "functions": [
                "parse_requirements",
                "preprocess",
                "handle_requirement_line",
                "handle_option_line",
                "handle_line",
                "get_line_parser",
                "break_args_options",
                "build_parser",
                "join_lines",
                "ignore_comments",
                "expand_env_variables",
                "get_file_content",
                "__init__",
                "__init__",
                "__init__",
                "parse",
                "_parse_and_recurse",
                "_parse_file",
                "parse_line",
                "__init__",
                "parser_exit"
            ],
            "classes": {
                "ParsedRequirement": [
                    "__init__"
                ],
                "ParsedLine": [
                    "__init__"
                ],
                "RequirementsFileParser": [
                    "__init__",
                    "parse",
                    "_parse_and_recurse",
                    "_parse_file"
                ],
                "OptionParsingError": [
                    "__init__"
                ]
            },
            "routes": [],
            "complexity": 28
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\req\\constructors.py": {
            "functions": [
                "_strip_extras",
                "convert_extras",
                "_set_requirement_extras",
                "parse_editable",
                "check_first_requirement_in_file",
                "deduce_helpful_msg",
                "parse_req_from_editable",
                "install_req_from_editable",
                "_looks_like_path",
                "_get_url_from_path",
                "parse_req_from_line",
                "install_req_from_line",
                "install_req_from_req_string",
                "install_req_from_parsed_requirement",
                "install_req_from_link_and_ireq",
                "install_req_drop_extras",
                "install_req_extend_extras",
                "with_source",
                "_parse_req_string"
            ],
            "classes": {
                "RequirementParts": []
            },
            "routes": [],
            "complexity": 19
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\operations\\install\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\operations\\install\\wheel.py": {
            "functions": [
                "rehash",
                "csv_io_kwargs",
                "fix_script",
                "wheel_root_is_purelib",
                "get_entrypoints",
                "message_about_scripts_not_on_PATH",
                "_normalized_outrows",
                "_record_to_fs_path",
                "_fs_to_record_path",
                "get_csv_rows_for_installed",
                "get_console_script_specs",
                "_raise_for_invalid_entrypoint",
                "_install_wheel",
                "req_error_context",
                "install_wheel",
                "__init__",
                "_getinfo",
                "save",
                "__init__",
                "save",
                "__init__",
                "make",
                "record_installed",
                "is_dir_path",
                "assert_no_path_traversal",
                "root_scheme_file_maker",
                "data_scheme_file_maker",
                "is_data_scheme_path",
                "is_script_scheme_path",
                "is_entrypoint_wrapper",
                "pyc_source_file_paths",
                "pyc_output_path",
                "_generate_file",
                "save",
                "make_root_scheme_file",
                "make_data_scheme_file"
            ],
            "classes": {
                "ZipBackedFile": [
                    "__init__",
                    "_getinfo",
                    "save"
                ],
                "ScriptFile": [
                    "__init__",
                    "save"
                ],
                "MissingCallableSuffix": [
                    "__init__"
                ],
                "PipScriptMaker": [
                    "make"
                ],
                "File": [
                    "save"
                ]
            },
            "routes": [],
            "complexity": 44
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\req\\req_set.py": {
            "functions": [
                "__init__",
                "__str__",
                "__repr__",
                "add_unnamed_requirement",
                "add_named_requirement",
                "has_requirement",
                "get_requirement",
                "all_requirements",
                "requirements_to_install"
            ],
            "classes": {
                "RequirementSet": [
                    "__init__",
                    "__str__",
                    "__repr__",
                    "add_unnamed_requirement",
                    "add_named_requirement",
                    "has_requirement",
                    "get_requirement",
                    "all_requirements",
                    "requirements_to_install"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\resolution\\base.py": {
            "functions": [
                "resolve",
                "get_installation_order"
            ],
            "classes": {
                "BaseResolver": [
                    "resolve",
                    "get_installation_order"
                ]
            },
            "routes": [],
            "complexity": 4
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\resolution\\legacy\\resolver.py": {
            "functions": [
                "_check_dist_requires_python",
                "__init__",
                "resolve",
                "_add_requirement_to_set",
                "_is_upgrade_allowed",
                "_set_req_to_reinstall",
                "_check_skip_installed",
                "_find_requirement_link",
                "_populate_link",
                "_get_dist_for",
                "_resolve_one",
                "get_installation_order",
                "add_req",
                "schedule"
            ],
            "classes": {
                "Resolver": [
                    "__init__",
                    "resolve",
                    "_add_requirement_to_set",
                    "_is_upgrade_allowed",
                    "_set_req_to_reinstall",
                    "_check_skip_installed",
                    "_find_requirement_link",
                    "_populate_link",
                    "_get_dist_for",
                    "_resolve_one",
                    "get_installation_order"
                ]
            },
            "routes": [],
            "complexity": 25
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\resolution\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\req\\req_uninstall.py": {
            "functions": [
                "_script_names",
                "_unique",
                "uninstallation_paths",
                "compact",
                "compress_for_rename",
                "compress_for_output_listing",
                "unique",
                "norm_join",
                "__init__",
                "_get_directory_stash",
                "_get_file_stash",
                "stash",
                "commit",
                "rollback",
                "can_rollback",
                "__init__",
                "_permitted",
                "add",
                "add_pth",
                "remove",
                "_allowed_to_proceed",
                "rollback",
                "commit",
                "from_dist",
                "__init__",
                "add",
                "remove",
                "rollback",
                "_display",
                "iter_scripts_to_remove"
            ],
            "classes": {
                "StashedUninstallPathSet": [
                    "__init__",
                    "_get_directory_stash",
                    "_get_file_stash",
                    "stash",
                    "commit",
                    "rollback",
                    "can_rollback"
                ],
                "UninstallPathSet": [
                    "__init__",
                    "_permitted",
                    "add",
                    "add_pth",
                    "remove",
                    "_allowed_to_proceed",
                    "rollback",
                    "commit",
                    "from_dist"
                ],
                "UninstallPthEntries": [
                    "__init__",
                    "add",
                    "remove",
                    "rollback"
                ]
            },
            "routes": [],
            "complexity": 50
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\req\\req_install.py": {
            "functions": [
                "check_invalid_constraint_type",
                "_has_option",
                "check_legacy_setup_py_options",
                "__init__",
                "__str__",
                "__repr__",
                "format_debug",
                "name",
                "supports_pyproject_editable",
                "specifier",
                "is_direct",
                "is_pinned",
                "match_markers",
                "has_hash_options",
                "hashes",
                "from_path",
                "ensure_build_location",
                "_set_requirement",
                "warn_on_mismatching_name",
                "check_if_exists",
                "is_wheel",
                "is_wheel_from_cache",
                "unpacked_source_directory",
                "setup_py_path",
                "setup_cfg_path",
                "pyproject_toml_path",
                "load_pyproject_toml",
                "isolated_editable_sanity_check",
                "prepare_metadata",
                "metadata",
                "get_dist",
                "assert_source_matches_version",
                "ensure_has_source_dir",
                "needs_unpacked_archive",
                "ensure_pristine_source_checkout",
                "update_editable",
                "uninstall",
                "_get_archive_name",
                "archive",
                "install",
                "_clean_zip_name"
            ],
            "classes": {
                "InstallRequirement": [
                    "__init__",
                    "__str__",
                    "__repr__",
                    "format_debug",
                    "name",
                    "supports_pyproject_editable",
                    "specifier",
                    "is_direct",
                    "is_pinned",
                    "match_markers",
                    "has_hash_options",
                    "hashes",
                    "from_path",
                    "ensure_build_location",
                    "_set_requirement",
                    "warn_on_mismatching_name",
                    "check_if_exists",
                    "is_wheel",
                    "is_wheel_from_cache",
                    "unpacked_source_directory",
                    "setup_py_path",
                    "setup_cfg_path",
                    "pyproject_toml_path",
                    "load_pyproject_toml",
                    "isolated_editable_sanity_check",
                    "prepare_metadata",
                    "metadata",
                    "get_dist",
                    "assert_source_matches_version",
                    "ensure_has_source_dir",
                    "needs_unpacked_archive",
                    "ensure_pristine_source_checkout",
                    "update_editable",
                    "uninstall",
                    "_get_archive_name",
                    "archive",
                    "install"
                ]
            },
            "routes": [],
            "complexity": 78
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\req\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\resolution\\legacy\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\candidates.py": {
            "functions": [
                "as_base_candidate",
                "make_install_req_from_link",
                "make_install_req_from_editable",
                "_make_install_req_from_dist",
                "__init__",
                "__str__",
                "__repr__",
                "__hash__",
                "__eq__",
                "source_link",
                "project_name",
                "name",
                "version",
                "format_for_error",
                "_prepare_distribution",
                "_check_metadata_consistency",
                "_prepare",
                "iter_dependencies",
                "get_install_requirement",
                "__init__",
                "_prepare_distribution",
                "__init__",
                "_prepare_distribution",
                "__init__",
                "__str__",
                "__repr__",
                "__eq__",
                "__hash__",
                "project_name",
                "name",
                "version",
                "is_editable",
                "format_for_error",
                "iter_dependencies",
                "get_install_requirement",
                "__init__",
                "__str__",
                "__repr__",
                "__hash__",
                "__eq__",
                "project_name",
                "name",
                "version",
                "format_for_error",
                "is_installed",
                "is_editable",
                "source_link",
                "iter_dependencies",
                "get_install_requirement",
                "__init__",
                "__str__",
                "project_name",
                "name",
                "version",
                "format_for_error",
                "iter_dependencies",
                "get_install_requirement"
            ],
            "classes": {
                "_InstallRequirementBackedCandidate": [
                    "__init__",
                    "__str__",
                    "__repr__",
                    "__hash__",
                    "__eq__",
                    "source_link",
                    "project_name",
                    "name",
                    "version",
                    "format_for_error",
                    "_prepare_distribution",
                    "_check_metadata_consistency",
                    "_prepare",
                    "iter_dependencies",
                    "get_install_requirement"
                ],
                "LinkCandidate": [
                    "__init__",
                    "_prepare_distribution"
                ],
                "EditableCandidate": [
                    "__init__",
                    "_prepare_distribution"
                ],
                "AlreadyInstalledCandidate": [
                    "__init__",
                    "__str__",
                    "__repr__",
                    "__eq__",
                    "__hash__",
                    "project_name",
                    "name",
                    "version",
                    "is_editable",
                    "format_for_error",
                    "iter_dependencies",
                    "get_install_requirement"
                ],
                "ExtrasCandidate": [
                    "__init__",
                    "__str__",
                    "__repr__",
                    "__hash__",
                    "__eq__",
                    "project_name",
                    "name",
                    "version",
                    "format_for_error",
                    "is_installed",
                    "is_editable",
                    "source_link",
                    "iter_dependencies",
                    "get_install_requirement"
                ],
                "RequiresPythonCandidate": [
                    "__init__",
                    "__str__",
                    "project_name",
                    "name",
                    "version",
                    "format_for_error",
                    "iter_dependencies",
                    "get_install_requirement"
                ]
            },
            "routes": [],
            "complexity": 110
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\base.py": {
            "functions": [
                "format_name",
                "_match_link",
                "empty",
                "from_ireq",
                "__bool__",
                "__and__",
                "is_satisfied_by",
                "project_name",
                "name",
                "is_satisfied_by",
                "get_candidate_lookup",
                "format_for_error",
                "project_name",
                "name",
                "version",
                "is_installed",
                "is_editable",
                "source_link",
                "iter_dependencies",
                "get_install_requirement",
                "format_for_error"
            ],
            "classes": {
                "Constraint": [
                    "empty",
                    "from_ireq",
                    "__bool__",
                    "__and__",
                    "is_satisfied_by"
                ],
                "Requirement": [
                    "project_name",
                    "name",
                    "is_satisfied_by",
                    "get_candidate_lookup",
                    "format_for_error"
                ],
                "Candidate": [
                    "project_name",
                    "name",
                    "version",
                    "is_installed",
                    "is_editable",
                    "source_link",
                    "iter_dependencies",
                    "get_install_requirement",
                    "format_for_error"
                ]
            },
            "routes": [],
            "complexity": 40
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\provider.py": {
            "functions": [
                "_get_with_identifier",
                "__init__",
                "identify",
                "get_preference",
                "find_matches",
                "is_satisfied_by",
                "get_dependencies",
                "is_backtrack_cause",
                "_eligible_for_upgrade"
            ],
            "classes": {
                "PipProvider": [
                    "__init__",
                    "identify",
                    "get_preference",
                    "find_matches",
                    "is_satisfied_by",
                    "get_dependencies",
                    "is_backtrack_cause"
                ]
            },
            "routes": [],
            "complexity": 16
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\found_candidates.py": {
            "functions": [
                "_iter_built",
                "_iter_built_with_prepended",
                "_iter_built_with_inserted",
                "__init__",
                "__getitem__",
                "__iter__",
                "__len__",
                "__bool__"
            ],
            "classes": {
                "FoundCandidates": [
                    "__init__",
                    "__getitem__",
                    "__iter__",
                    "__len__",
                    "__bool__"
                ]
            },
            "routes": [],
            "complexity": 13
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\reporter.py": {
            "functions": [
                "__init__",
                "rejecting_candidate",
                "starting",
                "starting_round",
                "ending_round",
                "ending",
                "adding_requirement",
                "rejecting_candidate",
                "pinning"
            ],
            "classes": {
                "PipReporter": [
                    "__init__",
                    "rejecting_candidate"
                ],
                "PipDebuggingReporter": [
                    "starting",
                    "starting_round",
                    "ending_round",
                    "ending",
                    "adding_requirement",
                    "rejecting_candidate",
                    "pinning"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\factory.py": {
            "functions": [
                "__init__",
                "force_reinstall",
                "_fail_if_link_is_unsupported_wheel",
                "_make_extras_candidate",
                "_make_candidate_from_dist",
                "_make_candidate_from_link",
                "_make_base_candidate_from_link",
                "_iter_found_candidates",
                "_iter_explicit_candidates_from_base",
                "_iter_candidates_from_constraints",
                "find_candidates",
                "_make_requirements_from_install_req",
                "collect_root_requirements",
                "make_requirement_from_candidate",
                "make_requirements_from_spec",
                "make_requires_python_requirement",
                "get_wheel_cache_entry",
                "get_dist_to_uninstall",
                "_report_requires_python_error",
                "_report_single_requirement_conflict",
                "get_installation_error",
                "_get_installed_candidate",
                "iter_index_candidate_infos",
                "text_join",
                "describe_trigger",
                "is_pinned"
            ],
            "classes": {
                "CollectedRootRequirements": [],
                "Factory": [
                    "__init__",
                    "force_reinstall",
                    "_fail_if_link_is_unsupported_wheel",
                    "_make_extras_candidate",
                    "_make_candidate_from_dist",
                    "_make_candidate_from_link",
                    "_make_base_candidate_from_link",
                    "_iter_found_candidates",
                    "_iter_explicit_candidates_from_base",
                    "_iter_candidates_from_constraints",
                    "find_candidates",
                    "_make_requirements_from_install_req",
                    "collect_root_requirements",
                    "make_requirement_from_candidate",
                    "make_requirements_from_spec",
                    "make_requires_python_requirement",
                    "get_wheel_cache_entry",
                    "get_dist_to_uninstall",
                    "_report_requires_python_error",
                    "_report_single_requirement_conflict",
                    "get_installation_error"
                ],
                "ConflictCause": []
            },
            "routes": [],
            "complexity": 47
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\resolver.py": {
            "functions": [
                "get_topological_weights",
                "_req_set_item_sorter",
                "__init__",
                "resolve",
                "get_installation_order",
                "visit"
            ],
            "classes": {
                "Resolver": [
                    "__init__",
                    "resolve",
                    "get_installation_order"
                ]
            },
            "routes": [],
            "complexity": 9
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\requirements.py": {
            "functions": [
                "__init__",
                "__str__",
                "__repr__",
                "__hash__",
                "__eq__",
                "project_name",
                "name",
                "format_for_error",
                "get_candidate_lookup",
                "is_satisfied_by",
                "__init__",
                "_equal",
                "__str__",
                "__repr__",
                "__eq__",
                "__hash__",
                "project_name",
                "name",
                "format_for_error",
                "get_candidate_lookup",
                "is_satisfied_by",
                "__init__",
                "_equal",
                "__eq__",
                "__hash__",
                "__init__",
                "__str__",
                "__repr__",
                "__hash__",
                "__eq__",
                "project_name",
                "name",
                "format_for_error",
                "get_candidate_lookup",
                "is_satisfied_by",
                "__init__",
                "__str__",
                "__repr__",
                "__eq__",
                "__hash__",
                "project_name",
                "name",
                "format_for_error",
                "get_candidate_lookup",
                "is_satisfied_by"
            ],
            "classes": {
                "ExplicitRequirement": [
                    "__init__",
                    "__str__",
                    "__repr__",
                    "__hash__",
                    "__eq__",
                    "project_name",
                    "name",
                    "format_for_error",
                    "get_candidate_lookup",
                    "is_satisfied_by"
                ],
                "SpecifierRequirement": [
                    "__init__",
                    "_equal",
                    "__str__",
                    "__repr__",
                    "__eq__",
                    "__hash__",
                    "project_name",
                    "name",
                    "format_for_error",
                    "get_candidate_lookup",
                    "is_satisfied_by"
                ],
                "SpecifierWithoutExtrasRequirement": [
                    "__init__",
                    "_equal",
                    "__eq__",
                    "__hash__"
                ],
                "RequiresPythonRequirement": [
                    "__init__",
                    "__str__",
                    "__repr__",
                    "__hash__",
                    "__eq__",
                    "project_name",
                    "name",
                    "format_for_error",
                    "get_candidate_lookup",
                    "is_satisfied_by"
                ],
                "UnsatisfiableRequirement": [
                    "__init__",
                    "__str__",
                    "__repr__",
                    "__eq__",
                    "__hash__",
                    "project_name",
                    "name",
                    "format_for_error",
                    "get_candidate_lookup",
                    "is_satisfied_by"
                ]
            },
            "routes": [],
            "complexity": 90
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\resolution\\resolvelib\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\utils\\appdirs.py": {
            "functions": [
                "user_cache_dir",
                "_macos_user_config_dir",
                "user_config_dir",
                "site_config_dirs"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\utils\\compatibility_tags.py": {
            "functions": [
                "version_info_to_nodot",
                "_mac_platforms",
                "_custom_manylinux_platforms",
                "_get_custom_platforms",
                "_expand_allowed_platforms",
                "_get_python_version",
                "_get_custom_interpreter",
                "get_supported"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\utils\\compat.py": {
            "functions": [
                "has_tls",
                "get_path_uid",
                "open_text_resource"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\utils\\datetime.py": {
            "functions": [
                "today_is_later_than"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\utils\\deprecation.py": {
            "functions": [
                "_showwarning",
                "install_warning_logger",
                "deprecated"
            ],
            "classes": {
                "PipDeprecationWarning": []
            },
            "routes": [],
            "complexity": 3
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\utils\\egg_link.py": {
            "functions": [
                "_egg_link_names",
                "egg_link_path_from_sys_path",
                "egg_link_path_from_location"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\utils\\encoding.py": {
            "functions": [
                "auto_decode"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\utils\\entrypoints.py": {
            "functions": [
                "_wrapper",
                "get_best_invocation_for_this_pip",
                "get_best_invocation_for_this_python"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\utils\\filetypes.py": {
            "functions": [
                "is_archive_file"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\utils\\glibc.py": {
            "functions": [
                "glibc_version_string",
                "glibc_version_string_confstr",
                "glibc_version_string_ctypes",
                "libc_ver"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\utils\\direct_url_helpers.py": {
            "functions": [
                "direct_url_as_pep440_direct_reference",
                "direct_url_for_editable",
                "direct_url_from_link"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\utils\\filesystem.py": {
            "functions": [
                "check_path_owner",
                "adjacent_tmp_file",
                "test_writable_dir",
                "_test_writable_dir_win",
                "find_files",
                "file_size",
                "format_file_size",
                "directory_size",
                "format_directory_size"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\utils\\logging.py": {
            "functions": [
                "_is_broken_pipe_error",
                "indent_log",
                "get_indentation",
                "setup_logging",
                "__init__",
                "get_message_start",
                "format",
                "__rich_console__",
                "__init__",
                "emit",
                "handleError",
                "_open",
                "__init__",
                "filter",
                "filter"
            ],
            "classes": {
                "BrokenStdoutLoggingError": [],
                "IndentingFormatter": [
                    "__init__",
                    "get_message_start",
                    "format"
                ],
                "IndentedRenderable": [
                    "__rich_console__"
                ],
                "RichPipStreamHandler": [
                    "__init__",
                    "emit",
                    "handleError"
                ],
                "BetterRotatingFileHandler": [
                    "_open"
                ],
                "MaxLevelFilter": [
                    "__init__",
                    "filter"
                ],
                "ExcludeLoggerFilter": [
                    "filter"
                ]
            },
            "routes": [],
            "complexity": 26
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\utils\\packaging.py": {
            "functions": [
                "check_requires_python",
                "get_requirement",
                "safe_extra"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\utils\\hashes.py": {
            "functions": [
                "__init__",
                "__and__",
                "digest_count",
                "is_hash_allowed",
                "check_against_chunks",
                "_raise",
                "check_against_file",
                "check_against_path",
                "has_one_of",
                "__bool__",
                "__eq__",
                "__hash__",
                "__init__",
                "_raise"
            ],
            "classes": {
                "Hashes": [
                    "__init__",
                    "__and__",
                    "digest_count",
                    "is_hash_allowed",
                    "check_against_chunks",
                    "_raise",
                    "check_against_file",
                    "check_against_path",
                    "has_one_of",
                    "__bool__",
                    "__eq__",
                    "__hash__"
                ],
                "MissingHashes": [
                    "__init__",
                    "_raise"
                ]
            },
            "routes": [],
            "complexity": 28
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\utils\\misc.py": {
            "functions": [
                "get_pip_version",
                "normalize_version_info",
                "ensure_dir",
                "get_prog",
                "rmtree",
                "_onerror_ignore",
                "_onerror_reraise",
                "rmtree_errorhandler",
                "display_path",
                "backup_dir",
                "ask_path_exists",
                "_check_no_input",
                "ask",
                "ask_input",
                "ask_password",
                "strtobool",
                "format_size",
                "tabulate",
                "is_installable_dir",
                "read_chunks",
                "normalize_path",
                "splitext",
                "renames",
                "is_local",
                "write_output",
                "enum",
                "build_netloc",
                "build_url_from_netloc",
                "parse_netloc",
                "split_auth_from_netloc",
                "redact_netloc",
                "_transform_url",
                "_get_netloc",
                "_redact_netloc",
                "split_auth_netloc_from_url",
                "remove_auth_from_url",
                "redact_auth_from_url",
                "redact_auth_from_requirement",
                "hide_value",
                "hide_url",
                "protect_pip_from_modification_on_windows",
                "check_externally_managed",
                "is_console_interactive",
                "hash_file",
                "pairwise",
                "partition",
                "warn_if_run_as_root",
                "from_stream",
                "encoding",
                "__repr__",
                "__str__",
                "__eq__",
                "__init__",
                "build_wheel",
                "build_sdist",
                "build_editable",
                "get_requires_for_build_wheel",
                "get_requires_for_build_sdist",
                "get_requires_for_build_editable",
                "prepare_metadata_for_build_wheel",
                "prepare_metadata_for_build_editable"
            ],
            "classes": {
                "StreamWrapper": [
                    "from_stream",
                    "encoding"
                ],
                "HiddenText": [
                    "__repr__",
                    "__str__",
                    "__eq__"
                ],
                "ConfiguredBuildBackendHookCaller": [
                    "__init__",
                    "build_wheel",
                    "build_sdist",
                    "build_editable",
                    "get_requires_for_build_wheel",
                    "get_requires_for_build_sdist",
                    "get_requires_for_build_editable",
                    "prepare_metadata_for_build_wheel",
                    "prepare_metadata_for_build_editable"
                ]
            },
            "routes": [],
            "complexity": 75
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\utils\\retry.py": {
            "functions": [
                "retry",
                "wrapper",
                "retry_wrapped"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\utils\\subprocess.py": {
            "functions": [
                "make_command",
                "format_command_args",
                "reveal_command_args",
                "call_subprocess",
                "runner_with_spinner_message",
                "runner"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\utils\\setuptools_build.py": {
            "functions": [
                "make_setuptools_shim_args",
                "make_setuptools_bdist_wheel_args",
                "make_setuptools_clean_args",
                "make_setuptools_develop_args",
                "make_setuptools_egg_info_args"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\utils\\urls.py": {
            "functions": [
                "path_to_url",
                "url_to_path"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\utils\\unpacking.py": {
            "functions": [
                "current_umask",
                "split_leading_dir",
                "has_leading_dir",
                "is_within_directory",
                "_get_default_mode_plus_executable",
                "set_extracted_file_to_default_mode_plus_executable",
                "zip_item_is_executable",
                "unzip_file",
                "untar_file",
                "_untar_without_filter",
                "unpack_file",
                "pip_filter"
            ],
            "classes": {},
            "routes": [],
            "complexity": 12
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\utils\\temp_dir.py": {
            "functions": [
                "global_tempdir_manager",
                "tempdir_registry",
                "__init__",
                "set_delete",
                "get_delete",
                "__init__",
                "path",
                "__repr__",
                "__enter__",
                "__exit__",
                "_create",
                "cleanup",
                "__init__",
                "_generate_names",
                "_create",
                "onerror"
            ],
            "classes": {
                "TempDirectoryTypeRegistry": [
                    "__init__",
                    "set_delete",
                    "get_delete"
                ],
                "_Default": [],
                "TempDirectory": [
                    "__init__",
                    "path",
                    "__repr__",
                    "__enter__",
                    "__exit__",
                    "_create",
                    "cleanup"
                ],
                "AdjacentTempDirectory": [
                    "__init__",
                    "_generate_names",
                    "_create"
                ]
            },
            "routes": [],
            "complexity": 29
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\utils\\wheel.py": {
            "functions": [
                "parse_wheel",
                "wheel_dist_info_dir",
                "read_wheel_metadata_file",
                "wheel_metadata",
                "wheel_version",
                "check_compatibility"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\utils\\_jaraco_text.py": {
            "functions": [
                "_nonblank",
                "yield_lines",
                "_",
                "drop_comment",
                "join_continuation"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\utils\\virtualenv.py": {
            "functions": [
                "_running_under_venv",
                "_running_under_legacy_virtualenv",
                "running_under_virtualenv",
                "_get_pyvenv_cfg_lines",
                "_no_global_under_venv",
                "_no_global_under_legacy_virtualenv",
                "virtualenv_no_global"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\utils\\_log.py": {
            "functions": [
                "getLogger",
                "init_logging",
                "verbose"
            ],
            "classes": {
                "VerboseLogger": [
                    "verbose"
                ]
            },
            "routes": [],
            "complexity": 4
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\vcs\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\vcs\\bazaar.py": {
            "functions": [
                "get_base_rev_args",
                "fetch_new",
                "switch",
                "update",
                "get_url_rev_and_auth",
                "get_remote_url",
                "get_revision",
                "is_commit_id_equal"
            ],
            "classes": {
                "Bazaar": [
                    "get_base_rev_args",
                    "fetch_new",
                    "switch",
                    "update",
                    "get_url_rev_and_auth",
                    "get_remote_url",
                    "get_revision",
                    "is_commit_id_equal"
                ]
            },
            "routes": [],
            "complexity": 16
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\utils\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\vcs\\git.py": {
            "functions": [
                "looks_like_hash",
                "get_base_rev_args",
                "is_immutable_rev_checkout",
                "get_git_version",
                "get_current_branch",
                "get_revision_sha",
                "_should_fetch",
                "resolve_revision",
                "is_commit_id_equal",
                "fetch_new",
                "switch",
                "update",
                "get_remote_url",
                "_git_remote_to_pip_url",
                "has_commit",
                "get_revision",
                "get_subdirectory",
                "get_url_rev_and_auth",
                "update_submodules",
                "get_repository_root",
                "should_add_vcs_url_prefix"
            ],
            "classes": {
                "Git": [
                    "get_base_rev_args",
                    "is_immutable_rev_checkout",
                    "get_git_version",
                    "get_current_branch",
                    "get_revision_sha",
                    "_should_fetch",
                    "resolve_revision",
                    "is_commit_id_equal",
                    "fetch_new",
                    "switch",
                    "update",
                    "get_remote_url",
                    "_git_remote_to_pip_url",
                    "has_commit",
                    "get_revision",
                    "get_subdirectory",
                    "get_url_rev_and_auth",
                    "update_submodules",
                    "get_repository_root",
                    "should_add_vcs_url_prefix"
                ]
            },
            "routes": [],
            "complexity": 41
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\vcs\\subversion.py": {
            "functions": [
                "should_add_vcs_url_prefix",
                "get_base_rev_args",
                "get_revision",
                "get_netloc_and_auth",
                "get_url_rev_and_auth",
                "make_rev_args",
                "get_remote_url",
                "_get_svn_url_rev",
                "is_commit_id_equal",
                "__init__",
                "call_vcs_version",
                "get_vcs_version",
                "get_remote_call_options",
                "fetch_new",
                "switch",
                "update"
            ],
            "classes": {
                "Subversion": [
                    "should_add_vcs_url_prefix",
                    "get_base_rev_args",
                    "get_revision",
                    "get_netloc_and_auth",
                    "get_url_rev_and_auth",
                    "make_rev_args",
                    "get_remote_url",
                    "_get_svn_url_rev",
                    "is_commit_id_equal",
                    "__init__",
                    "call_vcs_version",
                    "get_vcs_version",
                    "get_remote_call_options",
                    "fetch_new",
                    "switch",
                    "update"
                ]
            },
            "routes": [],
            "complexity": 32
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\vcs\\mercurial.py": {
            "functions": [
                "get_base_rev_args",
                "fetch_new",
                "switch",
                "update",
                "get_remote_url",
                "get_revision",
                "get_requirement_revision",
                "is_commit_id_equal",
                "get_subdirectory",
                "get_repository_root"
            ],
            "classes": {
                "Mercurial": [
                    "get_base_rev_args",
                    "fetch_new",
                    "switch",
                    "update",
                    "get_remote_url",
                    "get_revision",
                    "get_requirement_revision",
                    "is_commit_id_equal",
                    "get_subdirectory",
                    "get_repository_root"
                ]
            },
            "routes": [],
            "complexity": 20
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\typing_extensions.py": {
            "functions": [
                "IntVar",
                "_get_protocol_attrs",
                "_caller",
                "_ensure_subclassable",
                "_set_default",
                "_set_module",
                "_concatenate_getitem",
                "_has_generic_or_protocol_as_origin",
                "_is_unpacked_typevartuple",
                "__repr__",
                "_should_collect_from_parameters",
                "__repr__",
                "final",
                "_flatten_literal_params",
                "_value_and_type_iter",
                "overload",
                "get_overloads",
                "clear_overloads",
                "_is_dunder",
                "_allow_reckless_class_checks",
                "_no_init",
                "_type_check_issubclass_arg_1",
                "_proto_hook",
                "runtime_checkable",
                "inner",
                "_get_typeddict_qualifiers",
                "TypedDict",
                "is_typeddict",
                "assert_type",
                "_strip_extras",
                "get_type_hints",
                "get_origin",
                "get_args",
                "__instancecheck__",
                "__init__",
                "__getattr__",
                "__mro_entries__",
                "__repr__",
                "__reduce__",
                "__call__",
                "__or__",
                "__ror__",
                "__instancecheck__",
                "__subclasscheck__",
                "__getitem__",
                "LiteralString",
                "Self",
                "Never",
                "_is_unpack",
                "reveal_type",
                "assert_never",
                "dataclass_transform",
                "override",
                "_check_generic",
                "_check_generic",
                "_collect_type_vars",
                "_collect_parameters",
                "_make_nmtuple",
                "_namedtuple_mro_entries",
                "NamedTuple",
                "get_original_bases",
                "_is_unionable",
                "is_protocol",
                "get_protocol_members",
                "_should_collect_from_parameters",
                "_should_collect_from_parameters",
                "__instancecheck__",
                "__repr__",
                "__new__",
                "__eq__",
                "__hash__",
                "__init__",
                "__getitem__",
                "__init__",
                "__setattr__",
                "__getitem__",
                "__new__",
                "__init__",
                "__subclasscheck__",
                "__instancecheck__",
                "__eq__",
                "__hash__",
                "__init_subclass__",
                "__int__",
                "__float__",
                "__complex__",
                "__bytes__",
                "__index__",
                "__abs__",
                "__round__",
                "__new__",
                "__subclasscheck__",
                "__init__",
                "copy_with",
                "__repr__",
                "__reduce__",
                "__eq__",
                "__hash__",
                "__new__",
                "__class_getitem__",
                "__init_subclass__",
                "TypeAlias",
                "__setattr__",
                "__new__",
                "__repr__",
                "__reduce__",
                "__new__",
                "__init_subclass__",
                "__copy__",
                "__deepcopy__",
                "__init__",
                "__repr__",
                "__eq__",
                "__init__",
                "__repr__",
                "__eq__",
                "__init__",
                "__repr__",
                "__hash__",
                "__call__",
                "__parameters__",
                "Concatenate",
                "TypeGuard",
                "TypeIs",
                "Required",
                "NotRequired",
                "ReadOnly",
                "Unpack",
                "_is_unpack",
                "_is_unpack",
                "_unpack_args",
                "decorator",
                "__init__",
                "__call__",
                "__new__",
                "__call__",
                "__init__",
                "__mro_entries__",
                "__repr__",
                "__reduce__",
                "__init__",
                "__setattr__",
                "__delattr__",
                "_raise_attribute_error",
                "__repr__",
                "__getitem__",
                "__reduce__",
                "__init_subclass__",
                "__call__",
                "__init__",
                "__repr__",
                "__hash__",
                "__eq__",
                "_tvar_prepare_subst",
                "__new__",
                "__init_subclass__",
                "args",
                "kwargs",
                "__init__",
                "__repr__",
                "__hash__",
                "__eq__",
                "__reduce__",
                "__call__",
                "__getitem__",
                "__getitem__",
                "__getitem__",
                "__getitem__",
                "__getitem__",
                "__init__",
                "__typing_unpacked_tuple_args__",
                "__getitem__",
                "__new__",
                "__init_subclass__",
                "__iter__",
                "__init__",
                "__repr__",
                "__hash__",
                "__eq__",
                "__reduce__",
                "__init_subclass__",
                "__or__",
                "__ror__",
                "__or__",
                "__ror__",
                "_paramspec_prepare_subst",
                "_typevartuple_prepare_subst",
                "__init_subclass__",
                "__new__",
                "__init_subclass__",
                "__init_subclass__",
                "wrapper"
            ],
            "classes": {
                "_Sentinel": [
                    "__repr__"
                ],
                "_ExtensionsSpecialForm": [
                    "__repr__"
                ],
                "_DefaultMixin": [],
                "_TypeVarLikeMeta": [
                    "__instancecheck__"
                ],
                "_SpecialForm": [
                    "__init__",
                    "__getattr__",
                    "__mro_entries__",
                    "__repr__",
                    "__reduce__",
                    "__call__",
                    "__or__",
                    "__ror__",
                    "__instancecheck__",
                    "__subclasscheck__",
                    "__getitem__"
                ],
                "_AnyMeta": [
                    "__instancecheck__",
                    "__repr__"
                ],
                "Any": [
                    "__new__"
                ],
                "_LiteralGenericAlias": [
                    "__eq__",
                    "__hash__"
                ],
                "_LiteralForm": [
                    "__init__",
                    "__getitem__"
                ],
                "_SpecialGenericAlias": [
                    "__init__",
                    "__setattr__",
                    "__getitem__"
                ],
                "_ProtocolMeta": [
                    "__new__",
                    "__init__",
                    "__subclasscheck__",
                    "__instancecheck__",
                    "__eq__",
                    "__hash__"
                ],
                "Protocol": [
                    "__init_subclass__"
                ],
                "SupportsInt": [
                    "__int__"
                ],
                "SupportsFloat": [
                    "__float__"
                ],
                "SupportsComplex": [
                    "__complex__"
                ],
                "SupportsBytes": [
                    "__bytes__"
                ],
                "SupportsIndex": [
                    "__index__"
                ],
                "SupportsAbs": [
                    "__abs__"
                ],
                "SupportsRound": [
                    "__round__"
                ],
                "_TypedDictMeta": [
                    "__new__",
                    "__subclasscheck__"
                ],
                "_AnnotatedAlias": [
                    "__init__",
                    "copy_with",
                    "__repr__",
                    "__reduce__",
                    "__eq__",
                    "__hash__"
                ],
                "Annotated": [
                    "__new__",
                    "__class_getitem__",
                    "__init_subclass__"
                ],
                "NoDefaultTypeMeta": [
                    "__setattr__"
                ],
                "NoDefaultType": [
                    "__new__",
                    "__repr__",
                    "__reduce__"
                ],
                "TypeVar": [
                    "__new__",
                    "__init_subclass__"
                ],
                "_Immutable": [
                    "__copy__",
                    "__deepcopy__"
                ],
                "ParamSpecArgs": [
                    "__init__",
                    "__repr__",
                    "__eq__"
                ],
                "ParamSpecKwargs": [
                    "__init__",
                    "__repr__",
                    "__eq__"
                ],
                "_ConcatenateGenericAlias": [
                    "__init__",
                    "__repr__",
                    "__hash__",
                    "__call__",
                    "__parameters__"
                ],
                "deprecated": [
                    "__init__",
                    "__call__"
                ],
                "_NamedTupleMeta": [
                    "__new__"
                ],
                "Buffer": [],
                "NewType": [
                    "__call__",
                    "__init__",
                    "__mro_entries__",
                    "__repr__",
                    "__reduce__"
                ],
                "TypeAliasType": [
                    "__init__",
                    "__setattr__",
                    "__delattr__",
                    "_raise_attribute_error",
                    "__repr__",
                    "__getitem__",
                    "__reduce__",
                    "__init_subclass__",
                    "__call__"
                ],
                "Doc": [
                    "__init__",
                    "__repr__",
                    "__hash__",
                    "__eq__"
                ],
                "ParamSpec": [
                    "args",
                    "kwargs",
                    "__init__",
                    "__repr__",
                    "__hash__",
                    "__eq__",
                    "__reduce__",
                    "__call__"
                ],
                "_ConcatenateForm": [
                    "__getitem__"
                ],
                "_TypeGuardForm": [
                    "__getitem__"
                ],
                "_TypeIsForm": [
                    "__getitem__"
                ],
                "_RequiredForm": [
                    "__getitem__"
                ],
                "_ReadOnlyForm": [
                    "__getitem__"
                ],
                "_UnpackSpecialForm": [
                    "__init__"
                ],
                "_UnpackAlias": [],
                "_UnpackForm": [
                    "__getitem__"
                ],
                "TypeVarTuple": [
                    "__iter__",
                    "__init__",
                    "__repr__",
                    "__hash__",
                    "__eq__",
                    "__reduce__",
                    "__init_subclass__"
                ],
                "Dummy": [
                    "__init_subclass__"
                ]
            },
            "routes": [],
            "complexity": 304
        },
        "clean_venv\\Lib\\site-packages\\pip\\_internal\\vcs\\versioncontrol.py": {
            "functions": [
                "is_url",
                "make_vcs_requirement_url",
                "find_path_to_project_root_from_repo_root",
                "__init__",
                "__repr__",
                "arg_rev",
                "to_args",
                "to_display",
                "make_new",
                "__init__",
                "__iter__",
                "backends",
                "dirnames",
                "all_schemes",
                "register",
                "unregister",
                "get_backend_for_dir",
                "get_backend_for_scheme",
                "get_backend",
                "should_add_vcs_url_prefix",
                "get_subdirectory",
                "get_requirement_revision",
                "get_src_requirement",
                "get_base_rev_args",
                "is_immutable_rev_checkout",
                "make_rev_options",
                "_is_local_repository",
                "get_netloc_and_auth",
                "get_url_rev_and_auth",
                "make_rev_args",
                "get_url_rev_options",
                "normalize_url",
                "compare_urls",
                "fetch_new",
                "switch",
                "update",
                "is_commit_id_equal",
                "obtain",
                "unpack",
                "get_remote_url",
                "get_revision",
                "run_command",
                "is_repository_directory",
                "get_repository_root"
            ],
            "classes": {
                "RemoteNotFoundError": [],
                "RemoteNotValidError": [
                    "__init__"
                ],
                "RevOptions": [
                    "__repr__",
                    "arg_rev",
                    "to_args",
                    "to_display",
                    "make_new"
                ],
                "VcsSupport": [
                    "__init__",
                    "__iter__",
                    "backends",
                    "dirnames",
                    "all_schemes",
                    "register",
                    "unregister",
                    "get_backend_for_dir",
                    "get_backend_for_scheme",
                    "get_backend"
                ],
                "VersionControl": [
                    "should_add_vcs_url_prefix",
                    "get_subdirectory",
                    "get_requirement_revision",
                    "get_src_requirement",
                    "get_base_rev_args",
                    "is_immutable_rev_checkout",
                    "make_rev_options",
                    "_is_local_repository",
                    "get_netloc_and_auth",
                    "get_url_rev_and_auth",
                    "make_rev_args",
                    "get_url_rev_options",
                    "normalize_url",
                    "compare_urls",
                    "fetch_new",
                    "switch",
                    "update",
                    "is_commit_id_equal",
                    "obtain",
                    "unpack",
                    "get_remote_url",
                    "get_revision",
                    "run_command",
                    "is_repository_directory",
                    "get_repository_root"
                ]
            },
            "routes": [],
            "complexity": 85
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\adapter.py": {
            "functions": [
                "__init__",
                "send",
                "build_response",
                "close",
                "_update_chunk_length"
            ],
            "classes": {
                "CacheControlAdapter": [
                    "__init__",
                    "send",
                    "build_response",
                    "close"
                ]
            },
            "routes": [],
            "complexity": 9
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\cache.py": {
            "functions": [
                "get",
                "set",
                "delete",
                "close",
                "__init__",
                "get",
                "set",
                "delete",
                "set_body",
                "get_body"
            ],
            "classes": {
                "BaseCache": [
                    "get",
                    "set",
                    "delete",
                    "close"
                ],
                "DictCache": [
                    "__init__",
                    "get",
                    "set",
                    "delete"
                ],
                "SeparateBodyBaseCache": [
                    "set_body",
                    "get_body"
                ]
            },
            "routes": [],
            "complexity": 20
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\serialize.py": {
            "functions": [
                "dumps",
                "serialize",
                "loads",
                "prepare_response",
                "_loads_v4"
            ],
            "classes": {
                "Serializer": [
                    "dumps",
                    "serialize",
                    "loads",
                    "prepare_response",
                    "_loads_v4"
                ]
            },
            "routes": [],
            "complexity": 10
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\heuristics.py": {
            "functions": [
                "expire_after",
                "datetime_to_header",
                "warning",
                "update_headers",
                "apply",
                "update_headers",
                "__init__",
                "update_headers",
                "warning",
                "update_headers",
                "warning"
            ],
            "classes": {
                "BaseHeuristic": [
                    "warning",
                    "update_headers",
                    "apply"
                ],
                "OneDayCache": [
                    "update_headers"
                ],
                "ExpiresAfter": [
                    "__init__",
                    "update_headers",
                    "warning"
                ],
                "LastModified": [
                    "update_headers",
                    "warning"
                ]
            },
            "routes": [],
            "complexity": 20
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\_cmd.py": {
            "functions": [
                "setup_logging",
                "get_session",
                "get_args",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\wrapper.py": {
            "functions": [
                "CacheControl"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\filewrapper.py": {
            "functions": [
                "__init__",
                "__getattr__",
                "__is_fp_closed",
                "_close",
                "read",
                "_safe_read"
            ],
            "classes": {
                "CallbackFileWrapper": [
                    "__init__",
                    "__getattr__",
                    "__is_fp_closed",
                    "_close",
                    "read",
                    "_safe_read"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\caches\\redis_cache.py": {
            "functions": [
                "__init__",
                "get",
                "set",
                "delete",
                "clear",
                "close"
            ],
            "classes": {
                "RedisCache": [
                    "__init__",
                    "get",
                    "set",
                    "delete",
                    "clear",
                    "close"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\controller.py": {
            "functions": [
                "parse_uri",
                "__init__",
                "_urlnorm",
                "cache_url",
                "parse_cache_control",
                "_load_from_cache",
                "cached_request",
                "conditional_headers",
                "_cache_set",
                "cache_response",
                "update_cached_response"
            ],
            "classes": {
                "CacheController": [
                    "__init__",
                    "_urlnorm",
                    "cache_url",
                    "parse_cache_control",
                    "_load_from_cache",
                    "cached_request",
                    "conditional_headers",
                    "_cache_set",
                    "cache_response",
                    "update_cached_response"
                ]
            },
            "routes": [],
            "complexity": 21
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\caches\\file_cache.py": {
            "functions": [
                "_secure_open_write",
                "url_to_file_path",
                "__init__",
                "encode",
                "_fn",
                "get",
                "set",
                "_write",
                "_delete",
                "delete",
                "get_body",
                "set_body",
                "delete"
            ],
            "classes": {
                "_FileCacheMixin": [
                    "__init__",
                    "encode",
                    "_fn",
                    "get",
                    "set",
                    "_write",
                    "_delete"
                ],
                "FileCache": [
                    "delete"
                ],
                "SeparateBodyFileCache": [
                    "get_body",
                    "set_body",
                    "delete"
                ]
            },
            "routes": [],
            "complexity": 24
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\certifi\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\certifi\\__main__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\certifi\\core.py": {
            "functions": [
                "exit_cacert_ctx",
                "where",
                "contents",
                "where",
                "contents",
                "read_text",
                "where",
                "contents"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\cachecontrol\\caches\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\database.py": {
            "functions": [
                "make_graph",
                "get_dependent_dists",
                "get_required_dists",
                "make_dist",
                "__init__",
                "clear",
                "add",
                "__init__",
                "_get_cache_enabled",
                "_set_cache_enabled",
                "clear_cache",
                "_yield_distributions",
                "_generate_cache",
                "distinfo_dirname",
                "get_distributions",
                "get_distribution",
                "provides_distribution",
                "get_file_path",
                "get_exported_entries",
                "__init__",
                "source_url",
                "name_and_version",
                "provides",
                "_get_requirements",
                "run_requires",
                "meta_requires",
                "build_requires",
                "test_requires",
                "dev_requires",
                "matches_requirement",
                "__repr__",
                "__eq__",
                "__hash__",
                "__init__",
                "get_hash",
                "__init__",
                "__repr__",
                "__str__",
                "_get_records",
                "exports",
                "read_exports",
                "write_exports",
                "get_resource_path",
                "list_installed_files",
                "write_installed_files",
                "check_installed_files",
                "shared_locations",
                "write_shared_locations",
                "get_distinfo_resource",
                "get_distinfo_file",
                "list_distinfo_files",
                "__eq__",
                "__init__",
                "_get_metadata",
                "__repr__",
                "__str__",
                "check_installed_files",
                "list_installed_files",
                "list_distinfo_files",
                "__eq__",
                "__init__",
                "add_distribution",
                "add_edge",
                "add_missing",
                "_repr_dist",
                "repr_node",
                "to_dot",
                "topological_sort",
                "__repr__",
                "set_name_and_version",
                "parse_requires_data",
                "parse_requires_path",
                "_md5",
                "_size"
            ],
            "classes": {
                "_Cache": [
                    "__init__",
                    "clear",
                    "add"
                ],
                "DistributionPath": [
                    "__init__",
                    "_get_cache_enabled",
                    "_set_cache_enabled",
                    "clear_cache",
                    "_yield_distributions",
                    "_generate_cache",
                    "distinfo_dirname",
                    "get_distributions",
                    "get_distribution",
                    "provides_distribution",
                    "get_file_path",
                    "get_exported_entries"
                ],
                "Distribution": [
                    "__init__",
                    "source_url",
                    "name_and_version",
                    "provides",
                    "_get_requirements",
                    "run_requires",
                    "meta_requires",
                    "build_requires",
                    "test_requires",
                    "dev_requires",
                    "matches_requirement",
                    "__repr__",
                    "__eq__",
                    "__hash__"
                ],
                "BaseInstalledDistribution": [
                    "__init__",
                    "get_hash"
                ],
                "InstalledDistribution": [
                    "__init__",
                    "__repr__",
                    "__str__",
                    "_get_records",
                    "exports",
                    "read_exports",
                    "write_exports",
                    "get_resource_path",
                    "list_installed_files",
                    "write_installed_files",
                    "check_installed_files",
                    "shared_locations",
                    "write_shared_locations",
                    "get_distinfo_resource",
                    "get_distinfo_file",
                    "list_distinfo_files",
                    "__eq__"
                ],
                "EggInfoDistribution": [
                    "__init__",
                    "_get_metadata",
                    "__repr__",
                    "__str__",
                    "check_installed_files",
                    "list_installed_files",
                    "list_distinfo_files",
                    "__eq__"
                ],
                "DependencyGraph": [
                    "__init__",
                    "add_distribution",
                    "add_edge",
                    "add_missing",
                    "_repr_dist",
                    "repr_node",
                    "to_dot",
                    "topological_sort",
                    "__repr__"
                ]
            },
            "routes": [],
            "complexity": 139
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\index.py": {
            "functions": [
                "__init__",
                "_get_pypirc_command",
                "read_configuration",
                "save_configuration",
                "check_credentials",
                "register",
                "_reader",
                "get_sign_command",
                "run_command",
                "sign_file",
                "upload_file",
                "upload_documentation",
                "get_verify_command",
                "verify_signature",
                "download_file",
                "send_request",
                "encode_request",
                "search"
            ],
            "classes": {
                "PackageIndex": [
                    "__init__",
                    "_get_pypirc_command",
                    "read_configuration",
                    "save_configuration",
                    "check_credentials",
                    "register",
                    "_reader",
                    "get_sign_command",
                    "run_command",
                    "sign_file",
                    "upload_file",
                    "upload_documentation",
                    "get_verify_command",
                    "verify_signature",
                    "download_file",
                    "send_request",
                    "encode_request",
                    "search"
                ]
            },
            "routes": [],
            "complexity": 36
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\compat.py": {
            "functions": [
                "quote",
                "_dnsname_match",
                "match_hostname",
                "which",
                "__init__",
                "__enter__",
                "__exit__",
                "__enter__",
                "__exit__",
                "open",
                "python_implementation",
                "callable",
                "fsencode",
                "fsdecode",
                "_get_normal_name",
                "detect_encoding",
                "cache_from_source",
                "valid_ident",
                "pop",
                "__init__",
                "_access_check",
                "read_or_stop",
                "find_cookie",
                "__init__",
                "__missing__",
                "__getitem__",
                "get",
                "__len__",
                "__iter__",
                "__contains__",
                "__bool__",
                "__repr__",
                "fromkeys",
                "copy",
                "new_child",
                "parents",
                "__setitem__",
                "__delitem__",
                "popitem",
                "pop",
                "clear",
                "__init__",
                "__setitem__",
                "__delitem__",
                "__iter__",
                "__reversed__",
                "clear",
                "popitem",
                "keys",
                "values",
                "items",
                "iterkeys",
                "itervalues",
                "iteritems",
                "update",
                "pop",
                "setdefault",
                "__repr__",
                "__reduce__",
                "copy",
                "fromkeys",
                "__eq__",
                "__ne__",
                "viewkeys",
                "viewvalues",
                "viewitems",
                "__getitem__",
                "get",
                "__getitem__",
                "pop",
                "__getitem__",
                "__init__",
                "resolve",
                "ext_convert",
                "cfg_convert",
                "convert",
                "configure_custom",
                "as_tuple",
                "_recursive_repr",
                "decorating_function",
                "wrapper"
            ],
            "classes": {
                "ZipExtFile": [
                    "__init__",
                    "__enter__",
                    "__exit__"
                ],
                "ZipFile": [
                    "__enter__",
                    "__exit__",
                    "open"
                ],
                "CertificateError": [],
                "Container": [
                    "__init__"
                ],
                "ChainMap": [
                    "__init__",
                    "__missing__",
                    "__getitem__",
                    "get",
                    "__len__",
                    "__iter__",
                    "__contains__",
                    "__bool__",
                    "__repr__",
                    "fromkeys",
                    "copy",
                    "new_child",
                    "parents",
                    "__setitem__",
                    "__delitem__",
                    "popitem",
                    "pop",
                    "clear"
                ],
                "OrderedDict": [
                    "__init__",
                    "__setitem__",
                    "__delitem__",
                    "__iter__",
                    "__reversed__",
                    "clear",
                    "popitem",
                    "keys",
                    "values",
                    "items",
                    "iterkeys",
                    "itervalues",
                    "iteritems",
                    "update",
                    "pop",
                    "setdefault",
                    "__repr__",
                    "__reduce__",
                    "copy",
                    "fromkeys",
                    "__eq__",
                    "__ne__",
                    "viewkeys",
                    "viewvalues",
                    "viewitems"
                ],
                "ConvertingDict": [
                    "__getitem__",
                    "get"
                ],
                "ConvertingList": [
                    "__getitem__",
                    "pop"
                ],
                "ConvertingTuple": [
                    "__getitem__"
                ],
                "BaseConfigurator": [
                    "__init__",
                    "resolve",
                    "ext_convert",
                    "cfg_convert",
                    "convert",
                    "configure_custom",
                    "as_tuple"
                ]
            },
            "routes": [],
            "complexity": 143
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\markers.py": {
            "functions": [
                "_is_version_marker",
                "_is_literal",
                "_get_versions",
                "default_context",
                "interpret",
                "evaluate",
                "format_full_version"
            ],
            "classes": {
                "Evaluator": [
                    "evaluate"
                ]
            },
            "routes": [],
            "complexity": 8
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\manifest.py": {
            "functions": [
                "__init__",
                "findall",
                "add",
                "add_many",
                "sorted",
                "clear",
                "process_directive",
                "_parse_directive",
                "_include_pattern",
                "_exclude_pattern",
                "_translate_pattern",
                "_glob_to_re",
                "add_dir"
            ],
            "classes": {
                "Manifest": [
                    "__init__",
                    "findall",
                    "add",
                    "add_many",
                    "sorted",
                    "clear",
                    "process_directive",
                    "_parse_directive",
                    "_include_pattern",
                    "_exclude_pattern",
                    "_translate_pattern",
                    "_glob_to_re"
                ]
            },
            "routes": [],
            "complexity": 25
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\locators.py": {
            "functions": [
                "get_all_distribution_names",
                "http_error_302",
                "__init__",
                "get_errors",
                "clear_errors",
                "clear_cache",
                "_get_scheme",
                "_set_scheme",
                "_get_project",
                "get_distribution_names",
                "get_project",
                "score_url",
                "prefer_url",
                "split_filename",
                "convert_url_to_download_info",
                "_get_digest",
                "_update_version_data",
                "locate",
                "__init__",
                "get_distribution_names",
                "_get_project",
                "__init__",
                "get_distribution_names",
                "_get_project",
                "__init__",
                "links",
                "__init__",
                "_prepare_threads",
                "_wait_threads",
                "_get_project",
                "_is_platform_dependent",
                "_process_download",
                "_should_queue",
                "_fetch",
                "get_page",
                "get_distribution_names",
                "__init__",
                "should_include",
                "_get_project",
                "get_distribution_names",
                "get_distribution_names",
                "_get_project",
                "__init__",
                "_get_project",
                "__init__",
                "clear_cache",
                "_set_scheme",
                "_get_project",
                "get_distribution_names",
                "__init__",
                "add_distribution",
                "remove_distribution",
                "get_matcher",
                "find_providers",
                "try_to_replace",
                "find",
                "same_project",
                "clean"
            ],
            "classes": {
                "RedirectHandler": [
                    "http_error_302"
                ],
                "Locator": [
                    "__init__",
                    "get_errors",
                    "clear_errors",
                    "clear_cache",
                    "_get_scheme",
                    "_set_scheme",
                    "_get_project",
                    "get_distribution_names",
                    "get_project",
                    "score_url",
                    "prefer_url",
                    "split_filename",
                    "convert_url_to_download_info",
                    "_get_digest",
                    "_update_version_data",
                    "locate"
                ],
                "PyPIRPCLocator": [
                    "__init__",
                    "get_distribution_names",
                    "_get_project"
                ],
                "PyPIJSONLocator": [
                    "__init__",
                    "get_distribution_names",
                    "_get_project"
                ],
                "Page": [
                    "__init__",
                    "links"
                ],
                "SimpleScrapingLocator": [
                    "__init__",
                    "_prepare_threads",
                    "_wait_threads",
                    "_get_project",
                    "_is_platform_dependent",
                    "_process_download",
                    "_should_queue",
                    "_fetch",
                    "get_page",
                    "get_distribution_names"
                ],
                "DirectoryLocator": [
                    "__init__",
                    "should_include",
                    "_get_project",
                    "get_distribution_names"
                ],
                "JSONLocator": [
                    "get_distribution_names",
                    "_get_project"
                ],
                "DistPathLocator": [
                    "__init__",
                    "_get_project"
                ],
                "AggregatingLocator": [
                    "__init__",
                    "clear_cache",
                    "_set_scheme",
                    "_get_project",
                    "get_distribution_names"
                ],
                "DependencyFinder": [
                    "__init__",
                    "add_distribution",
                    "remove_distribution",
                    "get_matcher",
                    "find_providers",
                    "try_to_replace",
                    "find"
                ]
            },
            "routes": [],
            "complexity": 113
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\resources.py": {
            "functions": [
                "register_finder",
                "finder",
                "finder_for_path",
                "__init__",
                "is_stale",
                "get",
                "__init__",
                "as_stream",
                "file_path",
                "bytes",
                "size",
                "resources",
                "__init__",
                "_adjust_path",
                "_make_path",
                "_find",
                "get_cache_info",
                "find",
                "get_stream",
                "get_bytes",
                "get_size",
                "get_resources",
                "is_container",
                "iterator",
                "__init__",
                "_adjust_path",
                "_find",
                "get_cache_info",
                "get_bytes",
                "get_stream",
                "get_size",
                "get_resources",
                "_is_directory",
                "allowed"
            ],
            "classes": {
                "ResourceCache": [
                    "__init__",
                    "is_stale",
                    "get"
                ],
                "ResourceBase": [
                    "__init__"
                ],
                "Resource": [
                    "as_stream",
                    "file_path",
                    "bytes",
                    "size"
                ],
                "ResourceContainer": [
                    "resources"
                ],
                "ResourceFinder": [
                    "__init__",
                    "_adjust_path",
                    "_make_path",
                    "_find",
                    "get_cache_info",
                    "find",
                    "get_stream",
                    "get_bytes",
                    "get_size",
                    "get_resources",
                    "is_container",
                    "iterator"
                ],
                "ZipResourceFinder": [
                    "__init__",
                    "_adjust_path",
                    "_find",
                    "get_cache_info",
                    "get_bytes",
                    "get_stream",
                    "get_size",
                    "get_resources",
                    "_is_directory"
                ]
            },
            "routes": [],
            "complexity": 64
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\metadata.py": {
            "functions": [
                "_version2fieldlist",
                "_best_version",
                "_get_name_and_version",
                "_has_marker",
                "__init__",
                "set_metadata_version",
                "_write_field",
                "__getitem__",
                "__setitem__",
                "__delitem__",
                "__contains__",
                "_convert_name",
                "_default_value",
                "_remove_line_prefix",
                "__getattr__",
                "get_fullname",
                "is_field",
                "is_multi_field",
                "read",
                "read_file",
                "write",
                "write_file",
                "update",
                "set",
                "get",
                "check",
                "todict",
                "add_requirements",
                "keys",
                "__iter__",
                "values",
                "items",
                "__repr__",
                "__init__",
                "__getattribute__",
                "_validate_value",
                "__setattr__",
                "name_and_version",
                "provides",
                "provides",
                "get_requirements",
                "dictionary",
                "dependencies",
                "dependencies",
                "_validate_mapping",
                "validate",
                "todict",
                "_from_legacy",
                "_to_legacy",
                "write",
                "add_requirements",
                "__repr__",
                "_set",
                "are_valid_constraints",
                "process_entries"
            ],
            "classes": {
                "MetadataMissingError": [],
                "MetadataConflictError": [],
                "MetadataUnrecognizedVersionError": [],
                "MetadataInvalidError": [],
                "LegacyMetadata": [
                    "__init__",
                    "set_metadata_version",
                    "_write_field",
                    "__getitem__",
                    "__setitem__",
                    "__delitem__",
                    "__contains__",
                    "_convert_name",
                    "_default_value",
                    "_remove_line_prefix",
                    "__getattr__",
                    "get_fullname",
                    "is_field",
                    "is_multi_field",
                    "read",
                    "read_file",
                    "write",
                    "write_file",
                    "update",
                    "set",
                    "get",
                    "check",
                    "todict",
                    "add_requirements",
                    "keys",
                    "__iter__",
                    "values",
                    "items",
                    "__repr__"
                ],
                "Metadata": [
                    "__init__",
                    "__getattribute__",
                    "_validate_value",
                    "__setattr__",
                    "name_and_version",
                    "provides",
                    "provides",
                    "get_requirements",
                    "dictionary",
                    "dependencies",
                    "dependencies",
                    "_validate_mapping",
                    "validate",
                    "todict",
                    "_from_legacy",
                    "_to_legacy",
                    "write",
                    "add_requirements",
                    "__repr__"
                ]
            },
            "routes": [],
            "complexity": 103
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\scripts.py": {
            "functions": [
                "enquote_executable",
                "__init__",
                "_get_alternate_executable",
                "_build_shebang",
                "_get_shebang",
                "_get_script_text",
                "get_manifest",
                "_write_script",
                "get_script_filenames",
                "_make_script",
                "_copy_script",
                "dry_run",
                "dry_run",
                "make",
                "make_multiple",
                "_is_shell",
                "_fix_jython_executable",
                "_get_launcher"
            ],
            "classes": {
                "ScriptMaker": [
                    "__init__",
                    "_get_alternate_executable",
                    "_build_shebang",
                    "_get_shebang",
                    "_get_script_text",
                    "get_manifest",
                    "_write_script",
                    "get_script_filenames",
                    "_make_script",
                    "_copy_script",
                    "dry_run",
                    "dry_run",
                    "make",
                    "make_multiple"
                ]
            },
            "routes": [],
            "complexity": 32
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\util.py": {
            "functions": [
                "parse_marker",
                "parse_requirement",
                "get_resources_dests",
                "in_venv",
                "get_executable",
                "proceed",
                "extract_by_key",
                "read_exports",
                "write_exports",
                "tempdir",
                "chdir",
                "socket_timeout",
                "convert_path",
                "resolve",
                "get_export_entry",
                "get_cache_base",
                "path_to_cache_dir",
                "ensure_slash",
                "parse_credentials",
                "get_process_umask",
                "is_string_sequence",
                "split_filename",
                "parse_name_and_version",
                "get_extras",
                "_get_external_data",
                "get_project_data",
                "get_package_data",
                "unarchive",
                "zip_dir",
                "iglob",
                "_iglob",
                "_csv_open",
                "normalize_name",
                "_load_pypirc",
                "_store_pypirc",
                "get_host_platform",
                "get_platform",
                "marker_var",
                "marker_expr",
                "marker_and",
                "marker",
                "get_rel_path",
                "read_stream",
                "__init__",
                "__get__",
                "__init__",
                "_init_record",
                "record_as_written",
                "newer",
                "copy_file",
                "copy_stream",
                "write_binary_file",
                "write_text_file",
                "set_mode",
                "ensure_dir",
                "byte_compile",
                "ensure_removed",
                "is_writable",
                "commit",
                "rollback",
                "__init__",
                "value",
                "__repr__",
                "__eq__",
                "__init__",
                "prefix_to_dir",
                "clear",
                "__init__",
                "add",
                "remove",
                "get_subscribers",
                "publish",
                "__init__",
                "add_node",
                "remove_node",
                "add",
                "remove",
                "is_step",
                "get_steps",
                "strong_connections",
                "dot",
                "check_path",
                "__init__",
                "update",
                "increment",
                "start",
                "stop",
                "maximum",
                "percentage",
                "format_duration",
                "ETA",
                "speed",
                "__init__",
                "make_connection",
                "__init__",
                "__enter__",
                "__exit__",
                "__init__",
                "__iter__",
                "next",
                "__init__",
                "writerow",
                "__init__",
                "configure_custom",
                "__getitem__",
                "inc_convert",
                "__init__",
                "reader",
                "run_command",
                "__init__",
                "read",
                "update",
                "strongconnect",
                "extraction_filter",
                "connect",
                "__init__",
                "_conn_maker",
                "https_open",
                "http_open",
                "__init__",
                "make_connection",
                "convert",
                "get_versions"
            ],
            "classes": {
                "cached_property": [
                    "__init__",
                    "__get__"
                ],
                "FileOperator": [
                    "__init__",
                    "_init_record",
                    "record_as_written",
                    "newer",
                    "copy_file",
                    "copy_stream",
                    "write_binary_file",
                    "write_text_file",
                    "set_mode",
                    "ensure_dir",
                    "byte_compile",
                    "ensure_removed",
                    "is_writable",
                    "commit",
                    "rollback"
                ],
                "ExportEntry": [
                    "__init__",
                    "value",
                    "__repr__",
                    "__eq__"
                ],
                "Cache": [
                    "__init__",
                    "prefix_to_dir",
                    "clear"
                ],
                "EventMixin": [
                    "__init__",
                    "add",
                    "remove",
                    "get_subscribers",
                    "publish"
                ],
                "Sequencer": [
                    "__init__",
                    "add_node",
                    "remove_node",
                    "add",
                    "remove",
                    "is_step",
                    "get_steps",
                    "strong_connections",
                    "dot"
                ],
                "Progress": [
                    "__init__",
                    "update",
                    "increment",
                    "start",
                    "stop",
                    "maximum",
                    "percentage",
                    "format_duration",
                    "ETA",
                    "speed"
                ],
                "Transport": [
                    "__init__",
                    "make_connection"
                ],
                "ServerProxy": [
                    "__init__"
                ],
                "CSVBase": [
                    "__enter__",
                    "__exit__"
                ],
                "CSVReader": [
                    "__init__",
                    "__iter__",
                    "next"
                ],
                "CSVWriter": [
                    "__init__",
                    "writerow"
                ],
                "Configurator": [
                    "__init__",
                    "configure_custom",
                    "__getitem__",
                    "inc_convert"
                ],
                "SubprocessMixin": [
                    "__init__",
                    "reader",
                    "run_command"
                ],
                "PyPIRCFile": [
                    "__init__",
                    "read",
                    "update"
                ],
                "HTTPSConnection": [
                    "connect"
                ],
                "HTTPSHandler": [
                    "__init__",
                    "_conn_maker",
                    "https_open"
                ],
                "HTTPSOnlyHandler": [
                    "http_open"
                ],
                "SafeTransport": [
                    "__init__",
                    "make_connection"
                ]
            },
            "routes": [],
            "complexity": 198
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\idna\\codec.py": {
            "functions": [
                "search_function",
                "encode",
                "decode",
                "_buffer_encode",
                "_buffer_decode"
            ],
            "classes": {
                "Codec": [
                    "encode",
                    "decode"
                ],
                "IncrementalEncoder": [
                    "_buffer_encode"
                ],
                "IncrementalDecoder": [
                    "_buffer_decode"
                ],
                "StreamWriter": [],
                "StreamReader": []
            },
            "routes": [],
            "complexity": 9
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\version.py": {
            "functions": [
                "_pep_440_key",
                "_match_prefix",
                "_suggest_semantic_version",
                "_suggest_normalized_version",
                "_legacy_key",
                "is_semver",
                "_semantic_key",
                "get_scheme",
                "__init__",
                "parse",
                "_check_compatible",
                "__eq__",
                "__ne__",
                "__lt__",
                "__gt__",
                "__le__",
                "__ge__",
                "__hash__",
                "__repr__",
                "__str__",
                "is_prerelease",
                "parse_requirement",
                "__init__",
                "match",
                "exact_version",
                "_check_compatible",
                "__eq__",
                "__ne__",
                "__hash__",
                "__repr__",
                "__str__",
                "parse",
                "is_prerelease",
                "_adjust_local",
                "_match_lt",
                "_match_gt",
                "_match_le",
                "_match_ge",
                "_match_eq",
                "_match_arbitrary",
                "_match_ne",
                "_match_compatible",
                "get_parts",
                "parse",
                "is_prerelease",
                "_match_compatible",
                "make_tuple",
                "parse",
                "is_prerelease",
                "__init__",
                "is_valid_version",
                "is_valid_matcher",
                "is_valid_constraint_list",
                "suggest"
            ],
            "classes": {
                "UnsupportedVersionError": [],
                "Version": [
                    "__init__",
                    "parse",
                    "_check_compatible",
                    "__eq__",
                    "__ne__",
                    "__lt__",
                    "__gt__",
                    "__le__",
                    "__ge__",
                    "__hash__",
                    "__repr__",
                    "__str__",
                    "is_prerelease"
                ],
                "Matcher": [
                    "parse_requirement",
                    "__init__",
                    "match",
                    "exact_version",
                    "_check_compatible",
                    "__eq__",
                    "__ne__",
                    "__hash__",
                    "__repr__",
                    "__str__"
                ],
                "NormalizedVersion": [
                    "parse",
                    "is_prerelease"
                ],
                "NormalizedMatcher": [
                    "_adjust_local",
                    "_match_lt",
                    "_match_gt",
                    "_match_le",
                    "_match_ge",
                    "_match_eq",
                    "_match_arbitrary",
                    "_match_ne",
                    "_match_compatible"
                ],
                "LegacyVersion": [
                    "parse",
                    "is_prerelease"
                ],
                "LegacyMatcher": [
                    "_match_compatible"
                ],
                "SemanticVersion": [
                    "parse",
                    "is_prerelease"
                ],
                "SemanticMatcher": [],
                "VersionScheme": [
                    "__init__",
                    "is_valid_version",
                    "is_valid_matcher",
                    "is_valid_constraint_list",
                    "suggest"
                ]
            },
            "routes": [],
            "complexity": 98
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\wheel.py": {
            "functions": [
                "_get_suffixes",
                "_load_dynamic",
                "_get_glibc_version",
                "compatible_tags",
                "is_compatible",
                "_derive_abi",
                "__init__",
                "add",
                "remove",
                "find_module",
                "load_module",
                "__init__",
                "filename",
                "exists",
                "tags",
                "metadata",
                "get_wheel_metadata",
                "info",
                "process_shebang",
                "get_hash",
                "write_record",
                "write_records",
                "build_zip",
                "build",
                "skip_entry",
                "install",
                "_get_dylib_cache",
                "_get_extensions",
                "is_compatible",
                "is_mountable",
                "mount",
                "unmount",
                "verify",
                "update",
                "sorter",
                "get_version",
                "update_version"
            ],
            "classes": {
                "Mounter": [
                    "__init__",
                    "add",
                    "remove",
                    "find_module",
                    "load_module"
                ],
                "Wheel": [
                    "__init__",
                    "filename",
                    "exists",
                    "tags",
                    "metadata",
                    "get_wheel_metadata",
                    "info",
                    "process_shebang",
                    "get_hash",
                    "write_record",
                    "write_records",
                    "build_zip",
                    "build",
                    "skip_entry",
                    "install",
                    "_get_dylib_cache",
                    "_get_extensions",
                    "is_compatible",
                    "is_mountable",
                    "mount",
                    "unmount",
                    "verify",
                    "update"
                ]
            },
            "routes": [],
            "complexity": 65
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\distro\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\idna\\compat.py": {
            "functions": [
                "ToASCII",
                "ToUnicode",
                "nameprep"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\distlib\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\distro\\distro.py": {
            "functions": [
                "linux_distribution",
                "id",
                "name",
                "version",
                "version_parts",
                "major_version",
                "minor_version",
                "build_number",
                "like",
                "codename",
                "info",
                "os_release_info",
                "lsb_release_info",
                "distro_release_info",
                "uname_info",
                "os_release_attr",
                "lsb_release_attr",
                "distro_release_attr",
                "uname_attr",
                "main",
                "__init__",
                "__repr__",
                "linux_distribution",
                "id",
                "name",
                "version",
                "version_parts",
                "major_version",
                "minor_version",
                "build_number",
                "like",
                "codename",
                "info",
                "os_release_info",
                "lsb_release_info",
                "distro_release_info",
                "uname_info",
                "oslevel_info",
                "os_release_attr",
                "lsb_release_attr",
                "distro_release_attr",
                "uname_attr",
                "_os_release_info",
                "_parse_os_release_content",
                "_lsb_release_info",
                "_parse_lsb_release_content",
                "_uname_info",
                "_oslevel_info",
                "_debian_version",
                "_parse_uname_content",
                "_to_str",
                "_distro_release_info",
                "_parse_distro_release_file",
                "_parse_distro_release_content",
                "normalize",
                "__init__",
                "__get__"
            ],
            "classes": {
                "VersionDict": [],
                "InfoDict": [],
                "LinuxDistribution": [
                    "__init__",
                    "__repr__",
                    "linux_distribution",
                    "id",
                    "name",
                    "version",
                    "version_parts",
                    "major_version",
                    "minor_version",
                    "build_number",
                    "like",
                    "codename",
                    "info",
                    "os_release_info",
                    "lsb_release_info",
                    "distro_release_info",
                    "uname_info",
                    "oslevel_info",
                    "os_release_attr",
                    "lsb_release_attr",
                    "distro_release_attr",
                    "uname_attr",
                    "_os_release_info",
                    "_parse_os_release_content",
                    "_lsb_release_info",
                    "_parse_lsb_release_content",
                    "_uname_info",
                    "_oslevel_info",
                    "_debian_version",
                    "_parse_uname_content",
                    "_to_str",
                    "_distro_release_info",
                    "_parse_distro_release_file",
                    "_parse_distro_release_content"
                ],
                "cached_property": [
                    "__init__",
                    "__get__"
                ]
            },
            "routes": [],
            "complexity": 93
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\idna\\core.py": {
            "functions": [
                "_combining_class",
                "_is_script",
                "_punycode",
                "_unot",
                "valid_label_length",
                "valid_string_length",
                "check_bidi",
                "check_initial_combiner",
                "check_hyphen_ok",
                "check_nfc",
                "valid_contextj",
                "valid_contexto",
                "check_label",
                "alabel",
                "ulabel",
                "uts46_remap",
                "encode",
                "decode"
            ],
            "classes": {
                "IDNAError": [],
                "IDNABidiError": [],
                "InvalidCodepoint": [],
                "InvalidCodepointContext": []
            },
            "routes": [],
            "complexity": 18
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\distro\\__main__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\idna\\package_data.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\idna\\intranges.py": {
            "functions": [
                "intranges_from_list",
                "_encode_range",
                "_decode_range",
                "intranges_contain"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\idna\\idnadata.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\msgpack\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\idna\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\msgpack\\exceptions.py": {
            "functions": [
                "__init__",
                "__str__"
            ],
            "classes": {
                "UnpackException": [],
                "BufferFull": [],
                "OutOfData": [],
                "FormatError": [],
                "StackError": [],
                "ExtraData": [
                    "__init__",
                    "__str__"
                ]
            },
            "routes": [],
            "complexity": 4
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\msgpack\\ext.py": {
            "functions": [
                "__new__",
                "__init__",
                "__repr__",
                "__eq__",
                "__ne__",
                "__hash__",
                "from_bytes",
                "to_bytes",
                "from_unix",
                "to_unix",
                "from_unix_nano",
                "to_unix_nano",
                "to_datetime",
                "from_datetime"
            ],
            "classes": {
                "ExtType": [
                    "__new__"
                ],
                "Timestamp": [
                    "__init__",
                    "__repr__",
                    "__eq__",
                    "__ne__",
                    "__hash__",
                    "from_bytes",
                    "to_bytes",
                    "from_unix",
                    "to_unix",
                    "from_unix_nano",
                    "to_unix_nano",
                    "to_datetime",
                    "from_datetime"
                ]
            },
            "routes": [],
            "complexity": 28
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\msgpack\\fallback.py": {
            "functions": [
                "_check_type_strict",
                "_get_data_from_buffer",
                "unpackb",
                "__init__",
                "feed",
                "_consume",
                "_got_extradata",
                "_get_extradata",
                "read_bytes",
                "_read",
                "_reserve",
                "_read_header",
                "_unpack",
                "__iter__",
                "__next__",
                "skip",
                "unpack",
                "read_array_header",
                "read_map_header",
                "tell",
                "__init__",
                "_pack",
                "pack",
                "pack_map_pairs",
                "pack_array_header",
                "pack_map_header",
                "pack_ext_type",
                "_pack_array_header",
                "_pack_map_header",
                "_pack_map_pairs",
                "_pack_raw_header",
                "_pack_bin_header",
                "bytes",
                "reset",
                "getbuffer",
                "__init__",
                "write",
                "getvalue"
            ],
            "classes": {
                "Unpacker": [
                    "__init__",
                    "feed",
                    "_consume",
                    "_got_extradata",
                    "_get_extradata",
                    "read_bytes",
                    "_read",
                    "_reserve",
                    "_read_header",
                    "_unpack",
                    "__iter__",
                    "__next__",
                    "skip",
                    "unpack",
                    "read_array_header",
                    "read_map_header",
                    "tell"
                ],
                "Packer": [
                    "__init__",
                    "_pack",
                    "pack",
                    "pack_map_pairs",
                    "pack_array_header",
                    "pack_map_header",
                    "pack_ext_type",
                    "_pack_array_header",
                    "_pack_map_header",
                    "_pack_map_pairs",
                    "_pack_raw_header",
                    "_pack_bin_header",
                    "bytes",
                    "reset",
                    "getbuffer"
                ],
                "StringIO": [
                    "__init__",
                    "write",
                    "getvalue"
                ]
            },
            "routes": [],
            "complexity": 73
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\metadata.py": {
            "functions": [
                "_parse_keywords",
                "_parse_project_urls",
                "_get_payload",
                "parse_email",
                "__init__",
                "__init__",
                "__set_name__",
                "__get__",
                "_invalid_metadata",
                "_process_metadata_version",
                "_process_name",
                "_process_version",
                "_process_summary",
                "_process_description_content_type",
                "_process_dynamic",
                "_process_provides_extra",
                "_process_requires_python",
                "_process_requires_dist",
                "from_raw",
                "from_email",
                "__init__",
                "__repr__"
            ],
            "classes": {
                "InvalidMetadata": [
                    "__init__"
                ],
                "RawMetadata": [],
                "_Validator": [
                    "__init__",
                    "__set_name__",
                    "__get__",
                    "_invalid_metadata",
                    "_process_metadata_version",
                    "_process_name",
                    "_process_version",
                    "_process_summary",
                    "_process_description_content_type",
                    "_process_dynamic",
                    "_process_provides_extra",
                    "_process_requires_python",
                    "_process_requires_dist"
                ],
                "Metadata": [
                    "from_raw",
                    "from_email"
                ],
                "ExceptionGroup": [
                    "__init__",
                    "__repr__"
                ]
            },
            "routes": [],
            "complexity": 40
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\version.py": {
            "functions": [
                "parse",
                "_parse_letter_version",
                "_parse_local_version",
                "_cmpkey",
                "__hash__",
                "__lt__",
                "__le__",
                "__eq__",
                "__ge__",
                "__gt__",
                "__ne__",
                "__init__",
                "__repr__",
                "__str__",
                "epoch",
                "release",
                "pre",
                "post",
                "dev",
                "local",
                "public",
                "base_version",
                "is_prerelease",
                "is_postrelease",
                "is_devrelease",
                "major",
                "minor",
                "micro"
            ],
            "classes": {
                "_Version": [],
                "InvalidVersion": [],
                "_BaseVersion": [
                    "__hash__",
                    "__lt__",
                    "__le__",
                    "__eq__",
                    "__ge__",
                    "__gt__",
                    "__ne__"
                ],
                "Version": [
                    "__init__",
                    "__repr__",
                    "__str__",
                    "epoch",
                    "release",
                    "pre",
                    "post",
                    "dev",
                    "local",
                    "public",
                    "base_version",
                    "is_prerelease",
                    "is_postrelease",
                    "is_devrelease",
                    "major",
                    "minor",
                    "micro"
                ]
            },
            "routes": [],
            "complexity": 52
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\idna\\uts46data.py": {
            "functions": [
                "_seg_0",
                "_seg_1",
                "_seg_2",
                "_seg_3",
                "_seg_4",
                "_seg_5",
                "_seg_6",
                "_seg_7",
                "_seg_8",
                "_seg_9",
                "_seg_10",
                "_seg_11",
                "_seg_12",
                "_seg_13",
                "_seg_14",
                "_seg_15",
                "_seg_16",
                "_seg_17",
                "_seg_18",
                "_seg_19",
                "_seg_20",
                "_seg_21",
                "_seg_22",
                "_seg_23",
                "_seg_24",
                "_seg_25",
                "_seg_26",
                "_seg_27",
                "_seg_28",
                "_seg_29",
                "_seg_30",
                "_seg_31",
                "_seg_32",
                "_seg_33",
                "_seg_34",
                "_seg_35",
                "_seg_36",
                "_seg_37",
                "_seg_38",
                "_seg_39",
                "_seg_40",
                "_seg_41",
                "_seg_42",
                "_seg_43",
                "_seg_44",
                "_seg_45",
                "_seg_46",
                "_seg_47",
                "_seg_48",
                "_seg_49",
                "_seg_50",
                "_seg_51",
                "_seg_52",
                "_seg_53",
                "_seg_54",
                "_seg_55",
                "_seg_56",
                "_seg_57",
                "_seg_58",
                "_seg_59",
                "_seg_60",
                "_seg_61",
                "_seg_62",
                "_seg_63",
                "_seg_64",
                "_seg_65",
                "_seg_66",
                "_seg_67",
                "_seg_68",
                "_seg_69",
                "_seg_70",
                "_seg_71",
                "_seg_72",
                "_seg_73",
                "_seg_74",
                "_seg_75",
                "_seg_76",
                "_seg_77",
                "_seg_78",
                "_seg_79",
                "_seg_80",
                "_seg_81"
            ],
            "classes": {},
            "routes": [],
            "complexity": 82
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\markers.py": {
            "functions": [
                "_normalize_extra_values",
                "_format_marker",
                "_eval_op",
                "_normalize",
                "_evaluate_markers",
                "format_full_version",
                "default_environment",
                "__init__",
                "__str__",
                "__repr__",
                "__hash__",
                "__eq__",
                "evaluate"
            ],
            "classes": {
                "InvalidMarker": [],
                "UndefinedComparison": [],
                "UndefinedEnvironmentName": [],
                "Environment": [],
                "Marker": [
                    "__init__",
                    "__str__",
                    "__repr__",
                    "__hash__",
                    "__eq__",
                    "evaluate"
                ]
            },
            "routes": [],
            "complexity": 19
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\tags.py": {
            "functions": [
                "parse_tag",
                "_get_config_var",
                "_normalize_string",
                "_is_threaded_cpython",
                "_abi3_applies",
                "_cpython_abis",
                "cpython_tags",
                "_generic_abi",
                "generic_tags",
                "_py_interpreter_range",
                "compatible_tags",
                "_mac_arch",
                "_mac_binary_formats",
                "mac_platforms",
                "_linux_platforms",
                "_generic_platforms",
                "platform_tags",
                "interpreter_name",
                "interpreter_version",
                "_version_nodot",
                "sys_tags",
                "__init__",
                "interpreter",
                "abi",
                "platform",
                "__eq__",
                "__hash__",
                "__str__",
                "__repr__"
            ],
            "classes": {
                "Tag": [
                    "__init__",
                    "interpreter",
                    "abi",
                    "platform",
                    "__eq__",
                    "__hash__",
                    "__str__",
                    "__repr__"
                ]
            },
            "routes": [],
            "complexity": 37
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\requirements.py": {
            "functions": [
                "__init__",
                "_iter_parts",
                "__str__",
                "__repr__",
                "__hash__",
                "__eq__"
            ],
            "classes": {
                "InvalidRequirement": [],
                "Requirement": [
                    "__init__",
                    "_iter_parts",
                    "__str__",
                    "__repr__",
                    "__hash__",
                    "__eq__"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\utils.py": {
            "functions": [
                "canonicalize_name",
                "is_normalized_name",
                "canonicalize_version",
                "parse_wheel_filename",
                "parse_sdist_filename"
            ],
            "classes": {
                "InvalidName": [],
                "InvalidWheelFilename": [],
                "InvalidSdistFilename": []
            },
            "routes": [],
            "complexity": 5
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\specifiers.py": {
            "functions": [
                "_coerce_version",
                "_version_split",
                "_version_join",
                "_is_not_suffix",
                "_pad_version",
                "__str__",
                "__hash__",
                "__eq__",
                "prereleases",
                "prereleases",
                "contains",
                "filter",
                "__init__",
                "prereleases",
                "prereleases",
                "operator",
                "version",
                "__repr__",
                "__str__",
                "_canonical_spec",
                "__hash__",
                "__eq__",
                "_get_operator",
                "_compare_compatible",
                "_compare_equal",
                "_compare_not_equal",
                "_compare_less_than_equal",
                "_compare_greater_than_equal",
                "_compare_less_than",
                "_compare_greater_than",
                "_compare_arbitrary",
                "__contains__",
                "contains",
                "filter",
                "__init__",
                "prereleases",
                "prereleases",
                "__repr__",
                "__str__",
                "__hash__",
                "__and__",
                "__eq__",
                "__len__",
                "__iter__",
                "__contains__",
                "contains",
                "filter"
            ],
            "classes": {
                "InvalidSpecifier": [],
                "BaseSpecifier": [
                    "__str__",
                    "__hash__",
                    "__eq__",
                    "prereleases",
                    "prereleases",
                    "contains",
                    "filter"
                ],
                "Specifier": [
                    "__init__",
                    "prereleases",
                    "prereleases",
                    "operator",
                    "version",
                    "__repr__",
                    "__str__",
                    "_canonical_spec",
                    "__hash__",
                    "__eq__",
                    "_get_operator",
                    "_compare_compatible",
                    "_compare_equal",
                    "_compare_not_equal",
                    "_compare_less_than_equal",
                    "_compare_greater_than_equal",
                    "_compare_less_than",
                    "_compare_greater_than",
                    "_compare_arbitrary",
                    "__contains__",
                    "contains",
                    "filter"
                ],
                "SpecifierSet": [
                    "__init__",
                    "prereleases",
                    "prereleases",
                    "__repr__",
                    "__str__",
                    "__hash__",
                    "__and__",
                    "__eq__",
                    "__len__",
                    "__iter__",
                    "__contains__",
                    "contains",
                    "filter"
                ]
            },
            "routes": [],
            "complexity": 89
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\_elffile.py": {
            "functions": [
                "__init__",
                "_read",
                "interpreter"
            ],
            "classes": {
                "ELFInvalid": [],
                "EIClass": [],
                "EIData": [],
                "EMachine": [],
                "ELFFile": [
                    "__init__",
                    "_read",
                    "interpreter"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\_manylinux.py": {
            "functions": [
                "_parse_elf",
                "_is_linux_armhf",
                "_is_linux_i686",
                "_have_compatible_abi",
                "_glibc_version_string_confstr",
                "_glibc_version_string_ctypes",
                "_glibc_version_string",
                "_parse_glibc_version",
                "_get_glibc_version",
                "_is_compatible",
                "platform_tags"
            ],
            "classes": {
                "_GLibCVersion": []
            },
            "routes": [],
            "complexity": 11
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\_parser.py": {
            "functions": [
                "parse_requirement",
                "_parse_requirement",
                "_parse_requirement_details",
                "_parse_requirement_marker",
                "_parse_extras",
                "_parse_extras_list",
                "_parse_specifier",
                "_parse_version_many",
                "parse_marker",
                "_parse_full_marker",
                "_parse_marker",
                "_parse_marker_atom",
                "_parse_marker_item",
                "_parse_marker_var",
                "process_env_var",
                "process_python_str",
                "_parse_marker_op",
                "__init__",
                "__str__",
                "__repr__",
                "serialize",
                "serialize",
                "serialize",
                "serialize"
            ],
            "classes": {
                "Node": [
                    "__init__",
                    "__str__",
                    "__repr__",
                    "serialize"
                ],
                "Variable": [
                    "serialize"
                ],
                "Value": [
                    "serialize"
                ],
                "Op": [
                    "serialize"
                ],
                "ParsedRequirement": []
            },
            "routes": [],
            "complexity": 31
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\_musllinux.py": {
            "functions": [
                "_parse_musl_version",
                "_get_musl_version",
                "platform_tags"
            ],
            "classes": {
                "_MuslVersion": []
            },
            "routes": [],
            "complexity": 3
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\_structures.py": {
            "functions": [
                "__repr__",
                "__hash__",
                "__lt__",
                "__le__",
                "__eq__",
                "__gt__",
                "__ge__",
                "__neg__",
                "__repr__",
                "__hash__",
                "__lt__",
                "__le__",
                "__eq__",
                "__gt__",
                "__ge__",
                "__neg__"
            ],
            "classes": {
                "InfinityType": [
                    "__repr__",
                    "__hash__",
                    "__lt__",
                    "__le__",
                    "__eq__",
                    "__gt__",
                    "__ge__",
                    "__neg__"
                ],
                "NegativeInfinityType": [
                    "__repr__",
                    "__hash__",
                    "__lt__",
                    "__le__",
                    "__eq__",
                    "__gt__",
                    "__ge__",
                    "__neg__"
                ]
            },
            "routes": [],
            "complexity": 32
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\macos.py": {
            "functions": [
                "user_data_dir",
                "site_data_dir",
                "user_config_dir",
                "site_config_dir",
                "user_cache_dir",
                "site_cache_dir",
                "user_state_dir",
                "user_log_dir",
                "user_documents_dir",
                "user_downloads_dir",
                "user_pictures_dir",
                "user_videos_dir",
                "user_music_dir",
                "user_desktop_dir",
                "user_runtime_dir",
                "site_runtime_dir"
            ],
            "classes": {
                "MacOS": [
                    "user_data_dir",
                    "site_data_dir",
                    "user_config_dir",
                    "site_config_dir",
                    "user_cache_dir",
                    "site_cache_dir",
                    "user_state_dir",
                    "user_log_dir",
                    "user_documents_dir",
                    "user_downloads_dir",
                    "user_pictures_dir",
                    "user_videos_dir",
                    "user_music_dir",
                    "user_desktop_dir",
                    "user_runtime_dir",
                    "site_runtime_dir"
                ]
            },
            "routes": [],
            "complexity": 32
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\unix.py": {
            "functions": [
                "_get_user_media_dir",
                "_get_user_dirs_folder",
                "getuid",
                "user_data_dir",
                "_site_data_dirs",
                "site_data_dir",
                "user_config_dir",
                "_site_config_dirs",
                "site_config_dir",
                "user_cache_dir",
                "site_cache_dir",
                "user_state_dir",
                "user_log_dir",
                "user_documents_dir",
                "user_downloads_dir",
                "user_pictures_dir",
                "user_videos_dir",
                "user_music_dir",
                "user_desktop_dir",
                "user_runtime_dir",
                "site_runtime_dir",
                "site_data_path",
                "site_config_path",
                "site_cache_path",
                "_first_item_as_path_if_multipath",
                "iter_config_dirs",
                "iter_data_dirs"
            ],
            "classes": {
                "Unix": [
                    "user_data_dir",
                    "_site_data_dirs",
                    "site_data_dir",
                    "user_config_dir",
                    "_site_config_dirs",
                    "site_config_dir",
                    "user_cache_dir",
                    "site_cache_dir",
                    "user_state_dir",
                    "user_log_dir",
                    "user_documents_dir",
                    "user_downloads_dir",
                    "user_pictures_dir",
                    "user_videos_dir",
                    "user_music_dir",
                    "user_desktop_dir",
                    "user_runtime_dir",
                    "site_runtime_dir",
                    "site_data_path",
                    "site_config_path",
                    "site_cache_path",
                    "_first_item_as_path_if_multipath",
                    "iter_config_dirs",
                    "iter_data_dirs"
                ]
            },
            "routes": [],
            "complexity": 51
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\_tokenizer.py": {
            "functions": [
                "__init__",
                "__str__",
                "__init__",
                "consume",
                "check",
                "expect",
                "read",
                "raise_syntax_error",
                "enclosing_tokens"
            ],
            "classes": {
                "Token": [],
                "ParserSyntaxError": [
                    "__init__",
                    "__str__"
                ],
                "Tokenizer": [
                    "__init__",
                    "consume",
                    "check",
                    "expect",
                    "read",
                    "raise_syntax_error",
                    "enclosing_tokens"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\api.py": {
            "functions": [
                "__init__",
                "_append_app_name_and_version",
                "_optionally_create_directory",
                "user_data_dir",
                "site_data_dir",
                "user_config_dir",
                "site_config_dir",
                "user_cache_dir",
                "site_cache_dir",
                "user_state_dir",
                "user_log_dir",
                "user_documents_dir",
                "user_downloads_dir",
                "user_pictures_dir",
                "user_videos_dir",
                "user_music_dir",
                "user_desktop_dir",
                "user_runtime_dir",
                "site_runtime_dir",
                "user_data_path",
                "site_data_path",
                "user_config_path",
                "site_config_path",
                "user_cache_path",
                "site_cache_path",
                "user_state_path",
                "user_log_path",
                "user_documents_path",
                "user_downloads_path",
                "user_pictures_path",
                "user_videos_path",
                "user_music_path",
                "user_desktop_path",
                "user_runtime_path",
                "site_runtime_path",
                "iter_config_dirs",
                "iter_data_dirs",
                "iter_cache_dirs",
                "iter_runtime_dirs",
                "iter_config_paths",
                "iter_data_paths",
                "iter_cache_paths",
                "iter_runtime_paths"
            ],
            "classes": {
                "PlatformDirsABC": [
                    "__init__",
                    "_append_app_name_and_version",
                    "_optionally_create_directory",
                    "user_data_dir",
                    "site_data_dir",
                    "user_config_dir",
                    "site_config_dir",
                    "user_cache_dir",
                    "site_cache_dir",
                    "user_state_dir",
                    "user_log_dir",
                    "user_documents_dir",
                    "user_downloads_dir",
                    "user_pictures_dir",
                    "user_videos_dir",
                    "user_music_dir",
                    "user_desktop_dir",
                    "user_runtime_dir",
                    "site_runtime_dir",
                    "user_data_path",
                    "site_data_path",
                    "user_config_path",
                    "site_config_path",
                    "user_cache_path",
                    "site_cache_path",
                    "user_state_path",
                    "user_log_path",
                    "user_documents_path",
                    "user_downloads_path",
                    "user_pictures_path",
                    "user_videos_path",
                    "user_music_path",
                    "user_desktop_path",
                    "user_runtime_path",
                    "site_runtime_path",
                    "iter_config_dirs",
                    "iter_data_dirs",
                    "iter_cache_dirs",
                    "iter_runtime_dirs",
                    "iter_config_paths",
                    "iter_data_paths",
                    "iter_cache_paths",
                    "iter_runtime_paths"
                ]
            },
            "routes": [],
            "complexity": 86
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\android.py": {
            "functions": [
                "_android_folder",
                "_android_documents_folder",
                "_android_downloads_folder",
                "_android_pictures_folder",
                "_android_videos_folder",
                "_android_music_folder",
                "user_data_dir",
                "site_data_dir",
                "user_config_dir",
                "site_config_dir",
                "user_cache_dir",
                "site_cache_dir",
                "user_state_dir",
                "user_log_dir",
                "user_documents_dir",
                "user_downloads_dir",
                "user_pictures_dir",
                "user_videos_dir",
                "user_music_dir",
                "user_desktop_dir",
                "user_runtime_dir",
                "site_runtime_dir"
            ],
            "classes": {
                "Android": [
                    "user_data_dir",
                    "site_data_dir",
                    "user_config_dir",
                    "site_config_dir",
                    "user_cache_dir",
                    "site_cache_dir",
                    "user_state_dir",
                    "user_log_dir",
                    "user_documents_dir",
                    "user_downloads_dir",
                    "user_pictures_dir",
                    "user_videos_dir",
                    "user_music_dir",
                    "user_desktop_dir",
                    "user_runtime_dir",
                    "site_runtime_dir"
                ]
            },
            "routes": [],
            "complexity": 38
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\version.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\__main__.py": {
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\windows.py": {
            "functions": [
                "get_win_folder_from_env_vars",
                "get_win_folder_if_csidl_name_not_env_var",
                "get_win_folder_from_registry",
                "get_win_folder_via_ctypes",
                "_pick_get_win_folder",
                "user_data_dir",
                "_append_parts",
                "site_data_dir",
                "user_config_dir",
                "site_config_dir",
                "user_cache_dir",
                "site_cache_dir",
                "user_state_dir",
                "user_log_dir",
                "user_documents_dir",
                "user_downloads_dir",
                "user_pictures_dir",
                "user_videos_dir",
                "user_music_dir",
                "user_desktop_dir",
                "user_runtime_dir",
                "site_runtime_dir"
            ],
            "classes": {
                "Windows": [
                    "user_data_dir",
                    "_append_parts",
                    "site_data_dir",
                    "user_config_dir",
                    "site_config_dir",
                    "user_cache_dir",
                    "site_cache_dir",
                    "user_state_dir",
                    "user_log_dir",
                    "user_documents_dir",
                    "user_downloads_dir",
                    "user_pictures_dir",
                    "user_videos_dir",
                    "user_music_dir",
                    "user_desktop_dir",
                    "user_runtime_dir",
                    "site_runtime_dir"
                ]
            },
            "routes": [],
            "complexity": 39
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pkg_resources\\__init__.py": {
            "functions": [
                "_declare_state",
                "__getstate__",
                "__setstate__",
                "_sget_dict",
                "_sset_dict",
                "_sget_object",
                "_sset_object",
                "get_supported_platform",
                "register_loader_type",
                "get_provider",
                "get_provider",
                "get_provider",
                "_macos_vers",
                "_macos_arch",
                "get_build_platform",
                "compatible_platforms",
                "get_distribution",
                "get_distribution",
                "get_distribution",
                "load_entry_point",
                "get_entry_map",
                "get_entry_map",
                "get_entry_map",
                "get_entry_info",
                "get_default_cache",
                "safe_name",
                "safe_version",
                "_forgiving_version",
                "_safe_segment",
                "safe_extra",
                "to_filename",
                "invalid_marker",
                "evaluate_marker",
                "_parents",
                "register_finder",
                "find_distributions",
                "find_eggs_in_zip",
                "find_nothing",
                "find_on_path",
                "dist_factory",
                "safe_listdir",
                "distributions_from_metadata",
                "non_empty_lines",
                "resolve_egg_link",
                "register_namespace_handler",
                "_handle_ns",
                "_rebuild_mod_path",
                "declare_namespace",
                "fixup_namespace_packages",
                "file_ns_handler",
                "null_ns_handler",
                "normalize_path",
                "normalize_path",
                "normalize_path",
                "_cygwin_patch",
                "_is_egg_path",
                "_is_zip_egg",
                "_is_unpacked_egg",
                "_set_parent_ns",
                "_version_from_file",
                "issue_warning",
                "parse_requirements",
                "_always_object",
                "_find_adapter",
                "ensure_directory",
                "_bypass_ensure_directory",
                "split_sections",
                "_mkstemp",
                "_read_utf8_with_fallback",
                "_call_aside",
                "_initialize",
                "_initialize_master_working_set",
                "load_module",
                "__repr__",
                "dist",
                "req",
                "report",
                "with_context",
                "required_by",
                "req",
                "requirers",
                "requirers_str",
                "report",
                "__str__",
                "has_metadata",
                "get_metadata",
                "get_metadata_lines",
                "metadata_isdir",
                "metadata_listdir",
                "run_script",
                "get_resource_filename",
                "get_resource_stream",
                "get_resource_string",
                "has_resource",
                "resource_isdir",
                "resource_listdir",
                "__init__",
                "_build_master",
                "_build_from_requirements",
                "add_entry",
                "__contains__",
                "find",
                "iter_entry_points",
                "run_script",
                "__iter__",
                "add",
                "resolve",
                "resolve",
                "resolve",
                "resolve",
                "_resolve_dist",
                "find_plugins",
                "find_plugins",
                "find_plugins",
                "find_plugins",
                "require",
                "subscribe",
                "_added_new",
                "__getstate__",
                "__setstate__",
                "markers_pass",
                "__init__",
                "can_add",
                "remove",
                "scan",
                "__getitem__",
                "add",
                "best_match",
                "best_match",
                "best_match",
                "obtain",
                "obtain",
                "obtain",
                "obtain",
                "__iter__",
                "__iadd__",
                "__add__",
                "__init__",
                "resource_exists",
                "resource_isdir",
                "resource_filename",
                "resource_stream",
                "resource_string",
                "resource_listdir",
                "extraction_error",
                "get_cache_path",
                "_warn_unsafe_extraction_path",
                "postprocess",
                "set_extraction_path",
                "cleanup_resources",
                "__init__",
                "get_resource_filename",
                "get_resource_stream",
                "get_resource_string",
                "has_resource",
                "_get_metadata_path",
                "has_metadata",
                "get_metadata",
                "get_metadata_lines",
                "resource_isdir",
                "metadata_isdir",
                "resource_listdir",
                "metadata_listdir",
                "run_script",
                "_has",
                "_isdir",
                "_listdir",
                "_fn",
                "_validate_resource_path",
                "_get",
                "__init__",
                "_setup_prefix",
                "_set_egg",
                "_has",
                "_isdir",
                "_listdir",
                "get_resource_stream",
                "_get",
                "_register",
                "_get",
                "_listdir",
                "__init__",
                "build",
                "load",
                "__init__",
                "_zipinfo_name",
                "_parts",
                "zipinfo",
                "get_resource_filename",
                "_get_date_and_size",
                "_extract_resource",
                "_is_current",
                "_get_eager_resources",
                "_index",
                "_has",
                "_isdir",
                "_listdir",
                "_eager_to_zip",
                "_resource_to_zip",
                "__init__",
                "_get_metadata_path",
                "has_metadata",
                "get_metadata",
                "_warn_on_replacement",
                "get_metadata_lines",
                "__init__",
                "__init__",
                "__bool__",
                "__call__",
                "safe_sys_path_index",
                "position_in_sys_path",
                "_normalize_cached",
                "_normalize_cached",
                "_normalize_cached",
                "_normalize_cached",
                "__init__",
                "__str__",
                "__repr__",
                "load",
                "load",
                "load",
                "resolve",
                "require",
                "parse",
                "_parse_extras",
                "parse_group",
                "parse_map",
                "is_version_line",
                "__init__",
                "from_location",
                "_reload_version",
                "hashcmp",
                "__hash__",
                "__lt__",
                "__le__",
                "__gt__",
                "__ge__",
                "__eq__",
                "__ne__",
                "key",
                "parsed_version",
                "_forgiving_parsed_version",
                "version",
                "_dep_map",
                "_filter_extras",
                "_build_dep_map",
                "requires",
                "_get_metadata_path_for_display",
                "_get_metadata",
                "_get_version",
                "activate",
                "egg_name",
                "__repr__",
                "__str__",
                "__getattr__",
                "__dir__",
                "from_filename",
                "as_requirement",
                "load_entry_point",
                "get_entry_map",
                "get_entry_map",
                "get_entry_map",
                "get_entry_info",
                "insert_on",
                "check_version_conflict",
                "has_version",
                "clone",
                "extras",
                "_reload_version",
                "_parsed_pkg_info",
                "_dep_map",
                "_compute_dependencies",
                "__init__",
                "__eq__",
                "__ne__",
                "__contains__",
                "__hash__",
                "__repr__",
                "parse",
                "reqs_for_extra"
            ],
            "classes": {
                "_LoaderProtocol": [
                    "load_module"
                ],
                "_ZipLoaderModule": [],
                "PEP440Warning": [],
                "ResolutionError": [
                    "__repr__"
                ],
                "VersionConflict": [
                    "dist",
                    "req",
                    "report",
                    "with_context"
                ],
                "ContextualVersionConflict": [
                    "required_by"
                ],
                "DistributionNotFound": [
                    "req",
                    "requirers",
                    "requirers_str",
                    "report",
                    "__str__"
                ],
                "UnknownExtra": [],
                "IMetadataProvider": [
                    "has_metadata",
                    "get_metadata",
                    "get_metadata_lines",
                    "metadata_isdir",
                    "metadata_listdir",
                    "run_script"
                ],
                "IResourceProvider": [
                    "get_resource_filename",
                    "get_resource_stream",
                    "get_resource_string",
                    "has_resource",
                    "resource_isdir",
                    "resource_listdir"
                ],
                "WorkingSet": [
                    "__init__",
                    "_build_master",
                    "_build_from_requirements",
                    "add_entry",
                    "__contains__",
                    "find",
                    "iter_entry_points",
                    "run_script",
                    "__iter__",
                    "add",
                    "resolve",
                    "resolve",
                    "resolve",
                    "resolve",
                    "_resolve_dist",
                    "find_plugins",
                    "find_plugins",
                    "find_plugins",
                    "find_plugins",
                    "require",
                    "subscribe",
                    "_added_new",
                    "__getstate__",
                    "__setstate__"
                ],
                "_ReqExtras": [
                    "markers_pass"
                ],
                "Environment": [
                    "__init__",
                    "can_add",
                    "remove",
                    "scan",
                    "__getitem__",
                    "add",
                    "best_match",
                    "best_match",
                    "best_match",
                    "obtain",
                    "obtain",
                    "obtain",
                    "obtain",
                    "__iter__",
                    "__iadd__",
                    "__add__"
                ],
                "ExtractionError": [],
                "ResourceManager": [
                    "__init__",
                    "resource_exists",
                    "resource_isdir",
                    "resource_filename",
                    "resource_stream",
                    "resource_string",
                    "resource_listdir",
                    "extraction_error",
                    "get_cache_path",
                    "_warn_unsafe_extraction_path",
                    "postprocess",
                    "set_extraction_path",
                    "cleanup_resources"
                ],
                "NullProvider": [
                    "__init__",
                    "get_resource_filename",
                    "get_resource_stream",
                    "get_resource_string",
                    "has_resource",
                    "_get_metadata_path",
                    "has_metadata",
                    "get_metadata",
                    "get_metadata_lines",
                    "resource_isdir",
                    "metadata_isdir",
                    "resource_listdir",
                    "metadata_listdir",
                    "run_script",
                    "_has",
                    "_isdir",
                    "_listdir",
                    "_fn",
                    "_validate_resource_path",
                    "_get"
                ],
                "EggProvider": [
                    "__init__",
                    "_setup_prefix",
                    "_set_egg"
                ],
                "DefaultProvider": [
                    "_has",
                    "_isdir",
                    "_listdir",
                    "get_resource_stream",
                    "_get",
                    "_register"
                ],
                "EmptyProvider": [
                    "_get",
                    "_listdir",
                    "__init__"
                ],
                "ZipManifests": [
                    "build"
                ],
                "MemoizedZipManifests": [
                    "load"
                ],
                "ZipProvider": [
                    "__init__",
                    "_zipinfo_name",
                    "_parts",
                    "zipinfo",
                    "get_resource_filename",
                    "_get_date_and_size",
                    "_extract_resource",
                    "_is_current",
                    "_get_eager_resources",
                    "_index",
                    "_has",
                    "_isdir",
                    "_listdir",
                    "_eager_to_zip",
                    "_resource_to_zip"
                ],
                "FileMetadata": [
                    "__init__",
                    "_get_metadata_path",
                    "has_metadata",
                    "get_metadata",
                    "_warn_on_replacement",
                    "get_metadata_lines"
                ],
                "PathMetadata": [
                    "__init__"
                ],
                "EggMetadata": [
                    "__init__"
                ],
                "NoDists": [
                    "__bool__",
                    "__call__"
                ],
                "EntryPoint": [
                    "__init__",
                    "__str__",
                    "__repr__",
                    "load",
                    "load",
                    "load",
                    "resolve",
                    "require",
                    "parse",
                    "_parse_extras",
                    "parse_group",
                    "parse_map"
                ],
                "Distribution": [
                    "__init__",
                    "from_location",
                    "_reload_version",
                    "hashcmp",
                    "__hash__",
                    "__lt__",
                    "__le__",
                    "__gt__",
                    "__ge__",
                    "__eq__",
                    "__ne__",
                    "key",
                    "parsed_version",
                    "_forgiving_parsed_version",
                    "version",
                    "_dep_map",
                    "_filter_extras",
                    "_build_dep_map",
                    "requires",
                    "_get_metadata_path_for_display",
                    "_get_metadata",
                    "_get_version",
                    "activate",
                    "egg_name",
                    "__repr__",
                    "__str__",
                    "__getattr__",
                    "__dir__",
                    "from_filename",
                    "as_requirement",
                    "load_entry_point",
                    "get_entry_map",
                    "get_entry_map",
                    "get_entry_map",
                    "get_entry_info",
                    "insert_on",
                    "check_version_conflict",
                    "has_version",
                    "clone",
                    "extras"
                ],
                "EggInfoDistribution": [
                    "_reload_version"
                ],
                "DistInfoDistribution": [
                    "_parsed_pkg_info",
                    "_dep_map",
                    "_compute_dependencies"
                ],
                "RequirementParseError": [],
                "Requirement": [
                    "__init__",
                    "__eq__",
                    "__ne__",
                    "__contains__",
                    "__hash__",
                    "__repr__",
                    "parse"
                ],
                "PkgResourcesDeprecationWarning": [],
                "manifest_mod": []
            },
            "routes": [],
            "complexity": 480
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\console.py": {
            "functions": [
                "reset_color",
                "colorize",
                "ansiformat"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\filter.py": {
            "functions": [
                "apply_filters",
                "simplefilter",
                "_apply",
                "__init__",
                "filter",
                "__init__",
                "filter"
            ],
            "classes": {
                "Filter": [
                    "__init__",
                    "filter"
                ],
                "FunctionFilter": [
                    "__init__",
                    "filter"
                ]
            },
            "routes": [],
            "complexity": 11
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\cmdline.py": {
            "functions": [
                "_parse_options",
                "_parse_filters",
                "_print_help",
                "_print_list",
                "_print_list_as_json",
                "main_inner",
                "main",
                "is_only_option",
                "__init__"
            ],
            "classes": {
                "HelpFormatter": [
                    "__init__"
                ]
            },
            "routes": [],
            "complexity": 10
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\formatter.py": {
            "functions": [
                "_lookup_style",
                "__init__",
                "get_style_defs",
                "format",
                "__class_getitem__"
            ],
            "classes": {
                "Formatter": [
                    "__init__",
                    "get_style_defs",
                    "format",
                    "__class_getitem__"
                ]
            },
            "routes": [],
            "complexity": 9
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\lexer.py": {
            "functions": [
                "bygroups",
                "using",
                "do_insertions",
                "__new__",
                "__init__",
                "__repr__",
                "add_filter",
                "analyse_text",
                "_preprocess_lexer_input",
                "get_tokens",
                "get_tokens_unprocessed",
                "__init__",
                "get_tokens_unprocessed",
                "__repr__",
                "__new__",
                "__init__",
                "__init__",
                "start",
                "end",
                "group",
                "groups",
                "groupdict",
                "callback",
                "__init__",
                "__init__",
                "get",
                "_process_regex",
                "_process_token",
                "_process_new_state",
                "_process_state",
                "process_tokendef",
                "get_tokendefs",
                "__call__",
                "get_tokens_unprocessed",
                "__init__",
                "__repr__",
                "get_tokens_unprocessed",
                "_process_regex",
                "get_tokens_unprocessed",
                "streamer",
                "callback",
                "callback",
                "match_func"
            ],
            "classes": {
                "LexerMeta": [
                    "__new__"
                ],
                "Lexer": [
                    "__init__",
                    "__repr__",
                    "add_filter",
                    "analyse_text",
                    "_preprocess_lexer_input",
                    "get_tokens",
                    "get_tokens_unprocessed"
                ],
                "DelegatingLexer": [
                    "__init__",
                    "get_tokens_unprocessed"
                ],
                "include": [],
                "_inherit": [
                    "__repr__"
                ],
                "combined": [
                    "__new__",
                    "__init__"
                ],
                "_PseudoMatch": [
                    "__init__",
                    "start",
                    "end",
                    "group",
                    "groups",
                    "groupdict"
                ],
                "_This": [],
                "default": [
                    "__init__"
                ],
                "words": [
                    "__init__",
                    "get"
                ],
                "RegexLexerMeta": [
                    "_process_regex",
                    "_process_token",
                    "_process_new_state",
                    "_process_state",
                    "process_tokendef",
                    "get_tokendefs",
                    "__call__"
                ],
                "RegexLexer": [
                    "get_tokens_unprocessed"
                ],
                "LexerContext": [
                    "__init__",
                    "__repr__"
                ],
                "ExtendedRegexLexer": [
                    "get_tokens_unprocessed"
                ],
                "ProfilingRegexLexerMeta": [
                    "_process_regex"
                ],
                "ProfilingRegexLexer": [
                    "get_tokens_unprocessed"
                ]
            },
            "routes": [],
            "complexity": 78
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\modeline.py": {
            "functions": [
                "get_filetype_from_line",
                "get_filetype_from_buffer"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\plugin.py": {
            "functions": [
                "iter_entry_points",
                "find_plugin_lexers",
                "find_plugin_formatters",
                "find_plugin_styles",
                "find_plugin_filters"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\style.py": {
            "functions": [
                "__new__",
                "style_for_token",
                "list_styles",
                "styles_token",
                "__iter__",
                "__len__",
                "colorformat"
            ],
            "classes": {
                "StyleMeta": [
                    "__new__",
                    "style_for_token",
                    "list_styles",
                    "styles_token",
                    "__iter__",
                    "__len__"
                ],
                "Style": []
            },
            "routes": [],
            "complexity": 13
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\sphinxext.py": {
            "functions": [
                "setup",
                "run",
                "document_lexers_overview",
                "document_lexers",
                "document_formatters",
                "document_filters",
                "format_link",
                "write_row",
                "write_seperator"
            ],
            "classes": {
                "PygmentsDoc": [
                    "run",
                    "document_lexers_overview",
                    "document_lexers",
                    "document_formatters",
                    "document_filters"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\scanner.py": {
            "functions": [
                "__init__",
                "eos",
                "check",
                "test",
                "scan",
                "get_char",
                "__repr__"
            ],
            "classes": {
                "EndOfText": [],
                "Scanner": [
                    "__init__",
                    "eos",
                    "check",
                    "test",
                    "scan",
                    "get_char",
                    "__repr__"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\regexopt.py": {
            "functions": [
                "make_charset",
                "regex_opt_inner",
                "regex_opt"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\token.py": {
            "functions": [
                "is_token_subtype",
                "string_to_tokentype",
                "split",
                "__init__",
                "__contains__",
                "__getattr__",
                "__repr__",
                "__copy__",
                "__deepcopy__"
            ],
            "classes": {
                "_TokenType": [
                    "split",
                    "__init__",
                    "__contains__",
                    "__getattr__",
                    "__repr__",
                    "__copy__",
                    "__deepcopy__"
                ]
            },
            "routes": [],
            "complexity": 16
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\unistring.py": {
            "functions": [
                "combine",
                "allexcept",
                "_handle_runs"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\__main__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\util.py": {
            "functions": [
                "get_choice_opt",
                "get_bool_opt",
                "get_int_opt",
                "get_list_opt",
                "docstring_headline",
                "make_analysator",
                "shebang_matches",
                "doctype_matches",
                "html_doctype_matches",
                "looks_like_xml",
                "surrogatepair",
                "format_lines",
                "duplicates_removed",
                "guess_decode",
                "guess_decode_from_terminal",
                "terminal_encoding",
                "text_analyse",
                "get",
                "close"
            ],
            "classes": {
                "ClassNotFound": [],
                "OptionError": [],
                "Future": [
                    "get"
                ],
                "UnclosingTextIOWrapper": [
                    "close"
                ]
            },
            "routes": [],
            "complexity": 21
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\formatters\\bbcode.py": {
            "functions": [
                "__init__",
                "_make_styles",
                "format_unencoded"
            ],
            "classes": {
                "BBCodeFormatter": [
                    "__init__",
                    "_make_styles",
                    "format_unencoded"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\formatters\\groff.py": {
            "functions": [
                "__init__",
                "_make_styles",
                "_define_colors",
                "_write_lineno",
                "_wrap_line",
                "_escape_chars",
                "format_unencoded"
            ],
            "classes": {
                "GroffFormatter": [
                    "__init__",
                    "_make_styles",
                    "_define_colors",
                    "_write_lineno",
                    "_wrap_line",
                    "_escape_chars",
                    "format_unencoded"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\filters\\__init__.py": {
            "functions": [
                "find_filter_class",
                "get_filter_by_name",
                "get_all_filters",
                "_replace_special",
                "__init__",
                "filter",
                "__init__",
                "filter",
                "__init__",
                "filter",
                "__init__",
                "filter",
                "__init__",
                "filter",
                "__init__",
                "filter",
                "__init__",
                "gobble",
                "filter",
                "__init__",
                "filter",
                "replacefunc"
            ],
            "classes": {
                "CodeTagFilter": [
                    "__init__",
                    "filter"
                ],
                "SymbolFilter": [
                    "__init__",
                    "filter"
                ],
                "KeywordCaseFilter": [
                    "__init__",
                    "filter"
                ],
                "NameHighlightFilter": [
                    "__init__",
                    "filter"
                ],
                "ErrorToken": [],
                "RaiseOnErrorTokenFilter": [
                    "__init__",
                    "filter"
                ],
                "VisibleWhitespaceFilter": [
                    "__init__",
                    "filter"
                ],
                "GobbleFilter": [
                    "__init__",
                    "gobble",
                    "filter"
                ],
                "TokenMergeFilter": [
                    "__init__",
                    "filter"
                ]
            },
            "routes": [],
            "complexity": 39
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\formatters\\html.py": {
            "functions": [
                "escape_html",
                "webify",
                "_get_ttype_class",
                "__init__",
                "_get_css_class",
                "_get_css_classes",
                "_get_css_inline_styles",
                "_create_stylesheet",
                "get_style_defs",
                "get_token_style_defs",
                "get_background_style_defs",
                "get_linenos_style_defs",
                "get_css_prefix",
                "_pre_style",
                "_linenos_style",
                "_linenos_special_style",
                "_decodeifneeded",
                "_wrap_full",
                "_wrap_tablelinenos",
                "_wrap_inlinelinenos",
                "_wrap_lineanchors",
                "_wrap_linespans",
                "_wrap_div",
                "_wrap_pre",
                "_wrap_code",
                "_translate_parts",
                "_format_lines",
                "_lookup_ctag",
                "_highlight_lines",
                "wrap",
                "format_unencoded",
                "prefix"
            ],
            "classes": {
                "HtmlFormatter": [
                    "__init__",
                    "_get_css_class",
                    "_get_css_classes",
                    "_get_css_inline_styles",
                    "_create_stylesheet",
                    "get_style_defs",
                    "get_token_style_defs",
                    "get_background_style_defs",
                    "get_linenos_style_defs",
                    "get_css_prefix",
                    "_pre_style",
                    "_linenos_style",
                    "_linenos_special_style",
                    "_decodeifneeded",
                    "_wrap_full",
                    "_wrap_tablelinenos",
                    "_wrap_inlinelinenos",
                    "_wrap_lineanchors",
                    "_wrap_linespans",
                    "_wrap_div",
                    "_wrap_pre",
                    "_wrap_code",
                    "_translate_parts",
                    "_format_lines",
                    "_lookup_ctag",
                    "_highlight_lines",
                    "wrap",
                    "format_unencoded"
                ]
            },
            "routes": [],
            "complexity": 60
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\formatters\\img.py": {
            "functions": [
                "__init__",
                "_get_nix_font_path",
                "_create_nix",
                "_get_mac_font_path",
                "_create_mac",
                "_lookup_win",
                "_create_win",
                "get_char_size",
                "get_text_size",
                "get_font",
                "get_style",
                "__init__",
                "get_style_defs",
                "_get_line_height",
                "_get_line_y",
                "_get_char_width",
                "_get_char_x",
                "_get_text_pos",
                "_get_linenumber_pos",
                "_get_text_color",
                "_get_text_bg_color",
                "_get_style_font",
                "_get_image_size",
                "_draw_linenumber",
                "_draw_text",
                "_create_drawables",
                "_draw_line_numbers",
                "_paint_line_number_bg",
                "format"
            ],
            "classes": {
                "PilNotAvailable": [],
                "FontNotFound": [],
                "FontManager": [
                    "__init__",
                    "_get_nix_font_path",
                    "_create_nix",
                    "_get_mac_font_path",
                    "_create_mac",
                    "_lookup_win",
                    "_create_win",
                    "get_char_size",
                    "get_text_size",
                    "get_font",
                    "get_style"
                ],
                "ImageFormatter": [
                    "__init__",
                    "get_style_defs",
                    "_get_line_height",
                    "_get_line_y",
                    "_get_char_width",
                    "_get_char_x",
                    "_get_text_pos",
                    "_get_linenumber_pos",
                    "_get_text_color",
                    "_get_text_bg_color",
                    "_get_style_font",
                    "_get_image_size",
                    "_draw_linenumber",
                    "_draw_text",
                    "_create_drawables",
                    "_draw_line_numbers",
                    "_paint_line_number_bg",
                    "format"
                ],
                "GifImageFormatter": [],
                "JpgImageFormatter": [],
                "BmpImageFormatter": []
            },
            "routes": [],
            "complexity": 58
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\formatters\\other.py": {
            "functions": [
                "format",
                "__init__",
                "format",
                "__init__",
                "format",
                "write",
                "flush"
            ],
            "classes": {
                "NullFormatter": [
                    "format"
                ],
                "RawTokenFormatter": [
                    "__init__",
                    "format"
                ],
                "TestcaseFormatter": [
                    "__init__",
                    "format"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\formatters\\irc.py": {
            "functions": [
                "ircformat",
                "__init__",
                "_write_lineno",
                "format_unencoded"
            ],
            "classes": {
                "IRCFormatter": [
                    "__init__",
                    "_write_lineno",
                    "format_unencoded"
                ]
            },
            "routes": [],
            "complexity": 7
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\formatters\\pangomarkup.py": {
            "functions": [
                "escape_special_chars",
                "__init__",
                "format_unencoded"
            ],
            "classes": {
                "PangoMarkupFormatter": [
                    "__init__",
                    "format_unencoded"
                ]
            },
            "routes": [],
            "complexity": 5
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\formatters\\svg.py": {
            "functions": [
                "escape_html",
                "__init__",
                "format_unencoded",
                "_get_style"
            ],
            "classes": {
                "SvgFormatter": [
                    "__init__",
                    "format_unencoded",
                    "_get_style"
                ]
            },
            "routes": [],
            "complexity": 7
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\formatters\\_mapping.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\formatters\\terminal.py": {
            "functions": [
                "__init__",
                "format",
                "_write_lineno",
                "_get_color",
                "format_unencoded"
            ],
            "classes": {
                "TerminalFormatter": [
                    "__init__",
                    "format",
                    "_write_lineno",
                    "_get_color",
                    "format_unencoded"
                ]
            },
            "routes": [],
            "complexity": 10
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\formatters\\rtf.py": {
            "functions": [
                "__init__",
                "_escape",
                "_escape_text",
                "hex_to_rtf_color",
                "_split_tokens_on_newlines",
                "_create_color_mapping",
                "_lineno_template",
                "_hl_open_str",
                "_rtf_header",
                "format_unencoded"
            ],
            "classes": {
                "RtfFormatter": [
                    "__init__",
                    "_escape",
                    "_escape_text",
                    "hex_to_rtf_color",
                    "_split_tokens_on_newlines",
                    "_create_color_mapping",
                    "_lineno_template",
                    "_hl_open_str",
                    "_rtf_header",
                    "format_unencoded"
                ]
            },
            "routes": [],
            "complexity": 20
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\formatters\\latex.py": {
            "functions": [
                "escape_tex",
                "_get_ttype_name",
                "__init__",
                "_create_stylesheet",
                "get_style_defs",
                "format_unencoded",
                "__init__",
                "get_tokens_unprocessed",
                "_find_safe_escape_tokens",
                "_filter_to",
                "_find_escape_tokens",
                "rgbcolor"
            ],
            "classes": {
                "LatexFormatter": [
                    "__init__",
                    "_create_stylesheet",
                    "get_style_defs",
                    "format_unencoded"
                ],
                "LatexEmbeddedLexer": [
                    "__init__",
                    "get_tokens_unprocessed",
                    "_find_safe_escape_tokens",
                    "_filter_to",
                    "_find_escape_tokens"
                ]
            },
            "routes": [],
            "complexity": 21
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\formatters\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\formatters\\terminal256.py": {
            "functions": [
                "__init__",
                "escape",
                "color_string",
                "true_color_string",
                "reset_string",
                "__init__",
                "_build_color_table",
                "_closest_color",
                "_color_index",
                "_setup_styles",
                "_write_lineno",
                "format",
                "format_unencoded",
                "_build_color_table",
                "_color_tuple",
                "_setup_styles"
            ],
            "classes": {
                "EscapeSequence": [
                    "__init__",
                    "escape",
                    "color_string",
                    "true_color_string",
                    "reset_string"
                ],
                "Terminal256Formatter": [
                    "__init__",
                    "_build_color_table",
                    "_closest_color",
                    "_color_index",
                    "_setup_styles",
                    "_write_lineno",
                    "format",
                    "format_unencoded"
                ],
                "TerminalTrueColorFormatter": [
                    "_build_color_table",
                    "_color_tuple",
                    "_setup_styles"
                ]
            },
            "routes": [],
            "complexity": 32
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\lexers\\python.py": {
            "functions": [
                "innerstring_rules",
                "fstring_rules",
                "analyse_text",
                "innerstring_rules",
                "analyse_text",
                "__init__",
                "get_tokens_unprocessed",
                "analyse_text",
                "__init__"
            ],
            "classes": {
                "PythonLexer": [
                    "innerstring_rules",
                    "fstring_rules",
                    "analyse_text"
                ],
                "Python2Lexer": [
                    "innerstring_rules",
                    "analyse_text"
                ],
                "_PythonConsoleLexerBase": [],
                "PythonConsoleLexer": [
                    "__init__"
                ],
                "PythonTracebackLexer": [],
                "Python2TracebackLexer": [],
                "CythonLexer": [],
                "DgLexer": [],
                "NumPyLexer": [
                    "get_tokens_unprocessed",
                    "analyse_text"
                ],
                "_ReplaceInnerCode": [
                    "__init__"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pyproject_hooks\\_impl.py": {
            "functions": [
                "write_json",
                "read_json",
                "default_subprocess_runner",
                "quiet_subprocess_runner",
                "norm_and_check",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "subprocess_runner",
                "_supported_features",
                "get_requires_for_build_wheel",
                "prepare_metadata_for_build_wheel",
                "build_wheel",
                "get_requires_for_build_editable",
                "prepare_metadata_for_build_editable",
                "build_editable",
                "get_requires_for_build_sdist",
                "build_sdist",
                "_call_hook"
            ],
            "classes": {
                "BackendUnavailable": [
                    "__init__"
                ],
                "BackendInvalid": [
                    "__init__"
                ],
                "HookMissing": [
                    "__init__"
                ],
                "UnsupportedOperation": [
                    "__init__"
                ],
                "BuildBackendHookCaller": [
                    "__init__",
                    "subprocess_runner",
                    "_supported_features",
                    "get_requires_for_build_wheel",
                    "prepare_metadata_for_build_wheel",
                    "build_wheel",
                    "get_requires_for_build_editable",
                    "prepare_metadata_for_build_editable",
                    "build_editable",
                    "get_requires_for_build_sdist",
                    "build_sdist",
                    "_call_hook"
                ]
            },
            "routes": [],
            "complexity": 37
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\styles\\_mapping.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\styles\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\lexers\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pyproject_hooks\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pyproject_hooks\\_in_process\\_in_process.py": {
            "functions": [
                "write_json",
                "read_json",
                "contained_in",
                "_build_backend",
                "_supported_features",
                "get_requires_for_build_wheel",
                "get_requires_for_build_editable",
                "prepare_metadata_for_build_wheel",
                "prepare_metadata_for_build_editable",
                "_dist_info_files",
                "_get_wheel_metadata_from_wheel",
                "_find_already_built_wheel",
                "build_wheel",
                "build_editable",
                "get_requires_for_build_sdist",
                "build_sdist",
                "main",
                "__init__",
                "__init__",
                "__init__",
                "__init__"
            ],
            "classes": {
                "BackendUnavailable": [
                    "__init__"
                ],
                "BackendInvalid": [
                    "__init__"
                ],
                "HookMissing": [
                    "__init__"
                ],
                "_DummyException": [],
                "GotUnsupportedOperation": [
                    "__init__"
                ]
            },
            "routes": [],
            "complexity": 25
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pygments\\lexers\\_mapping.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pyproject_hooks\\_compat.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\pyproject_hooks\\_in_process\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\requests\\api.py": {
            "functions": [
                "request",
                "get",
                "options",
                "head",
                "post",
                "put",
                "patch",
                "delete"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\requests\\adapters.py": {
            "functions": [
                "_urllib3_request_context",
                "__init__",
                "send",
                "close",
                "__init__",
                "__getstate__",
                "__setstate__",
                "init_poolmanager",
                "proxy_manager_for",
                "cert_verify",
                "build_response",
                "build_connection_pool_key_attributes",
                "get_connection_with_tls_context",
                "get_connection",
                "close",
                "request_url",
                "add_headers",
                "proxy_headers",
                "send",
                "SOCKSProxyManager"
            ],
            "classes": {
                "BaseAdapter": [
                    "__init__",
                    "send",
                    "close"
                ],
                "HTTPAdapter": [
                    "__init__",
                    "__getstate__",
                    "__setstate__",
                    "init_poolmanager",
                    "proxy_manager_for",
                    "cert_verify",
                    "build_response",
                    "build_connection_pool_key_attributes",
                    "get_connection_with_tls_context",
                    "get_connection",
                    "close",
                    "request_url",
                    "add_headers",
                    "proxy_headers",
                    "send"
                ]
            },
            "routes": [],
            "complexity": 38
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\requests\\auth.py": {
            "functions": [
                "_basic_auth_str",
                "__call__",
                "__init__",
                "__eq__",
                "__ne__",
                "__call__",
                "__call__",
                "__init__",
                "init_per_thread_state",
                "build_digest_header",
                "handle_redirect",
                "handle_401",
                "__call__",
                "__eq__",
                "__ne__",
                "md5_utf8",
                "sha_utf8",
                "sha256_utf8",
                "sha512_utf8"
            ],
            "classes": {
                "AuthBase": [
                    "__call__"
                ],
                "HTTPBasicAuth": [
                    "__init__",
                    "__eq__",
                    "__ne__",
                    "__call__"
                ],
                "HTTPProxyAuth": [
                    "__call__"
                ],
                "HTTPDigestAuth": [
                    "__init__",
                    "init_per_thread_state",
                    "build_digest_header",
                    "handle_redirect",
                    "handle_401",
                    "__call__",
                    "__eq__",
                    "__ne__"
                ]
            },
            "routes": [],
            "complexity": 33
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\requests\\certs.py": {
            "functions": [
                "where"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\requests\\packages.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\requests\\compat.py": {
            "functions": [
                "_resolve_char_detection"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\requests\\hooks.py": {
            "functions": [
                "default_hooks",
                "dispatch_hook"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\requests\\help.py": {
            "functions": [
                "_implementation",
                "info",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\requests\\cookies.py": {
            "functions": [
                "extract_cookies_to_jar",
                "get_cookie_header",
                "remove_cookie_by_name",
                "_copy_cookie_jar",
                "create_cookie",
                "morsel_to_cookie",
                "cookiejar_from_dict",
                "merge_cookies",
                "__init__",
                "get_type",
                "get_host",
                "get_origin_req_host",
                "get_full_url",
                "is_unverifiable",
                "has_header",
                "get_header",
                "add_header",
                "add_unredirected_header",
                "get_new_headers",
                "unverifiable",
                "origin_req_host",
                "host",
                "__init__",
                "info",
                "getheaders",
                "get",
                "set",
                "iterkeys",
                "keys",
                "itervalues",
                "values",
                "iteritems",
                "items",
                "list_domains",
                "list_paths",
                "multiple_domains",
                "get_dict",
                "__contains__",
                "__getitem__",
                "__setitem__",
                "__delitem__",
                "set_cookie",
                "update",
                "_find",
                "_find_no_duplicates",
                "__getstate__",
                "__setstate__",
                "copy",
                "get_policy"
            ],
            "classes": {
                "MockRequest": [
                    "__init__",
                    "get_type",
                    "get_host",
                    "get_origin_req_host",
                    "get_full_url",
                    "is_unverifiable",
                    "has_header",
                    "get_header",
                    "add_header",
                    "add_unredirected_header",
                    "get_new_headers",
                    "unverifiable",
                    "origin_req_host",
                    "host"
                ],
                "MockResponse": [
                    "__init__",
                    "info",
                    "getheaders"
                ],
                "CookieConflictError": [],
                "RequestsCookieJar": [
                    "get",
                    "set",
                    "iterkeys",
                    "keys",
                    "itervalues",
                    "values",
                    "iteritems",
                    "items",
                    "list_domains",
                    "list_paths",
                    "multiple_domains",
                    "get_dict",
                    "__contains__",
                    "__getitem__",
                    "__setitem__",
                    "__delitem__",
                    "set_cookie",
                    "update",
                    "_find",
                    "_find_no_duplicates",
                    "__getstate__",
                    "__setstate__",
                    "copy",
                    "get_policy"
                ]
            },
            "routes": [],
            "complexity": 90
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\requests\\exceptions.py": {
            "functions": [
                "__init__",
                "__init__",
                "__reduce__"
            ],
            "classes": {
                "RequestException": [
                    "__init__"
                ],
                "InvalidJSONError": [],
                "JSONDecodeError": [
                    "__init__",
                    "__reduce__"
                ],
                "HTTPError": [],
                "ConnectionError": [],
                "ProxyError": [],
                "SSLError": [],
                "Timeout": [],
                "ConnectTimeout": [],
                "ReadTimeout": [],
                "URLRequired": [],
                "TooManyRedirects": [],
                "MissingSchema": [],
                "InvalidSchema": [],
                "InvalidURL": [],
                "InvalidHeader": [],
                "InvalidProxyURL": [],
                "ChunkedEncodingError": [],
                "ContentDecodingError": [],
                "StreamConsumedError": [],
                "RetryError": [],
                "UnrewindableBodyError": [],
                "RequestsWarning": [],
                "FileModeWarning": [],
                "RequestsDependencyWarning": []
            },
            "routes": [],
            "complexity": 6
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\requests\\structures.py": {
            "functions": [
                "__init__",
                "__setitem__",
                "__getitem__",
                "__delitem__",
                "__iter__",
                "__len__",
                "lower_items",
                "__eq__",
                "copy",
                "__repr__",
                "__init__",
                "__repr__",
                "__getitem__",
                "get"
            ],
            "classes": {
                "CaseInsensitiveDict": [
                    "__init__",
                    "__setitem__",
                    "__getitem__",
                    "__delitem__",
                    "__iter__",
                    "__len__",
                    "lower_items",
                    "__eq__",
                    "copy",
                    "__repr__"
                ],
                "LookupDict": [
                    "__init__",
                    "__repr__",
                    "__getitem__",
                    "get"
                ]
            },
            "routes": [],
            "complexity": 28
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\requests\\models.py": {
            "functions": [
                "path_url",
                "_encode_params",
                "_encode_files",
                "register_hook",
                "deregister_hook",
                "__init__",
                "__repr__",
                "prepare",
                "__init__",
                "prepare",
                "__repr__",
                "copy",
                "prepare_method",
                "_get_idna_encoded_host",
                "prepare_url",
                "prepare_headers",
                "prepare_body",
                "prepare_content_length",
                "prepare_auth",
                "prepare_cookies",
                "prepare_hooks",
                "__init__",
                "__enter__",
                "__exit__",
                "__getstate__",
                "__setstate__",
                "__repr__",
                "__bool__",
                "__nonzero__",
                "__iter__",
                "ok",
                "is_redirect",
                "is_permanent_redirect",
                "next",
                "apparent_encoding",
                "iter_content",
                "iter_lines",
                "content",
                "text",
                "json",
                "links",
                "raise_for_status",
                "close",
                "generate"
            ],
            "classes": {
                "RequestEncodingMixin": [
                    "path_url",
                    "_encode_params",
                    "_encode_files"
                ],
                "RequestHooksMixin": [
                    "register_hook",
                    "deregister_hook"
                ],
                "Request": [
                    "__init__",
                    "__repr__",
                    "prepare"
                ],
                "PreparedRequest": [
                    "__init__",
                    "prepare",
                    "__repr__",
                    "copy",
                    "prepare_method",
                    "_get_idna_encoded_host",
                    "prepare_url",
                    "prepare_headers",
                    "prepare_body",
                    "prepare_content_length",
                    "prepare_auth",
                    "prepare_cookies",
                    "prepare_hooks"
                ],
                "Response": [
                    "__init__",
                    "__enter__",
                    "__exit__",
                    "__getstate__",
                    "__setstate__",
                    "__repr__",
                    "__bool__",
                    "__nonzero__",
                    "__iter__",
                    "ok",
                    "is_redirect",
                    "is_permanent_redirect",
                    "next",
                    "apparent_encoding",
                    "iter_content",
                    "iter_lines",
                    "content",
                    "text",
                    "json",
                    "links",
                    "raise_for_status",
                    "close"
                ]
            },
            "routes": [],
            "complexity": 87
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\requests\\status_codes.py": {
            "functions": [
                "_init",
                "doc"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\requests\\sessions.py": {
            "functions": [
                "merge_setting",
                "merge_hooks",
                "session",
                "get_redirect_target",
                "should_strip_auth",
                "resolve_redirects",
                "rebuild_auth",
                "rebuild_proxies",
                "rebuild_method",
                "__init__",
                "__enter__",
                "__exit__",
                "prepare_request",
                "request",
                "get",
                "options",
                "head",
                "post",
                "put",
                "patch",
                "delete",
                "send",
                "merge_environment_settings",
                "get_adapter",
                "close",
                "mount",
                "__getstate__",
                "__setstate__"
            ],
            "classes": {
                "SessionRedirectMixin": [
                    "get_redirect_target",
                    "should_strip_auth",
                    "resolve_redirects",
                    "rebuild_auth",
                    "rebuild_proxies",
                    "rebuild_method"
                ],
                "Session": [
                    "__init__",
                    "__enter__",
                    "__exit__",
                    "prepare_request",
                    "request",
                    "get",
                    "options",
                    "head",
                    "post",
                    "put",
                    "patch",
                    "delete",
                    "send",
                    "merge_environment_settings",
                    "get_adapter",
                    "close",
                    "mount",
                    "__getstate__",
                    "__setstate__"
                ]
            },
            "routes": [],
            "complexity": 53
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\requests\\_internal_utils.py": {
            "functions": [
                "to_native_string",
                "unicode_is_ascii"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\requests\\utils.py": {
            "functions": [
                "dict_to_sequence",
                "super_len",
                "get_netrc_auth",
                "guess_filename",
                "extract_zipped_paths",
                "atomic_open",
                "from_key_val_list",
                "to_key_val_list",
                "parse_list_header",
                "parse_dict_header",
                "unquote_header_value",
                "dict_from_cookiejar",
                "add_dict_to_cookiejar",
                "get_encodings_from_content",
                "_parse_content_type_header",
                "get_encoding_from_headers",
                "stream_decode_response_unicode",
                "iter_slices",
                "get_unicode_from_response",
                "unquote_unreserved",
                "requote_uri",
                "address_in_network",
                "dotted_netmask",
                "is_ipv4_address",
                "is_valid_cidr",
                "set_environ",
                "should_bypass_proxies",
                "get_environ_proxies",
                "select_proxy",
                "resolve_proxies",
                "default_user_agent",
                "default_headers",
                "parse_header_links",
                "guess_json_utf",
                "prepend_scheme_if_needed",
                "get_auth_from_url",
                "check_header_validity",
                "_validate_header_part",
                "urldefragauth",
                "rewind_body",
                "proxy_bypass_registry",
                "proxy_bypass",
                "get_proxy"
            ],
            "classes": {},
            "routes": [],
            "complexity": 43
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\requests\\__version__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\requests\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\resolvelib\\structs.py": {
            "functions": [
                "build_iter_view",
                "__init__",
                "__iter__",
                "__len__",
                "__contains__",
                "copy",
                "add",
                "remove",
                "connected",
                "connect",
                "iter_edges",
                "iter_children",
                "iter_parents",
                "__init__",
                "__repr__",
                "__bool__",
                "__contains__",
                "__getitem__",
                "__iter__",
                "__len__",
                "__init__",
                "__repr__",
                "__bool__",
                "__iter__",
                "__init__",
                "__repr__",
                "__bool__",
                "__iter__"
            ],
            "classes": {
                "DirectedGraph": [
                    "__init__",
                    "__iter__",
                    "__len__",
                    "__contains__",
                    "copy",
                    "add",
                    "remove",
                    "connected",
                    "connect",
                    "iter_edges",
                    "iter_children",
                    "iter_parents"
                ],
                "IteratorMapping": [
                    "__init__",
                    "__repr__",
                    "__bool__",
                    "__contains__",
                    "__getitem__",
                    "__iter__",
                    "__len__"
                ],
                "_FactoryIterableView": [
                    "__init__",
                    "__repr__",
                    "__bool__",
                    "__iter__"
                ],
                "_SequenceIterableView": [
                    "__init__",
                    "__repr__",
                    "__bool__",
                    "__iter__"
                ]
            },
            "routes": [],
            "complexity": 55
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\resolvelib\\reporters.py": {
            "functions": [
                "starting",
                "starting_round",
                "ending_round",
                "ending",
                "adding_requirement",
                "resolving_conflicts",
                "rejecting_candidate",
                "pinning"
            ],
            "classes": {
                "BaseReporter": [
                    "starting",
                    "starting_round",
                    "ending_round",
                    "ending",
                    "adding_requirement",
                    "resolving_conflicts",
                    "rejecting_candidate",
                    "pinning"
                ]
            },
            "routes": [],
            "complexity": 16
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\resolvelib\\resolvers.py": {
            "functions": [
                "_has_route_to_root",
                "_build_result",
                "__init__",
                "__str__",
                "__init__",
                "__str__",
                "__init__",
                "__repr__",
                "iter_requirement",
                "iter_parent",
                "__init__",
                "__init__",
                "__init__",
                "state",
                "_push_new_state",
                "_add_to_criteria",
                "_remove_information_from_criteria",
                "_get_preference",
                "_is_current_pin_satisfying",
                "_get_updated_criteria",
                "_attempt_to_pin_criterion",
                "_backjump",
                "resolve",
                "resolve",
                "_patch_criteria"
            ],
            "classes": {
                "ResolverException": [],
                "RequirementsConflicted": [
                    "__init__",
                    "__str__"
                ],
                "InconsistentCandidate": [
                    "__init__",
                    "__str__"
                ],
                "Criterion": [
                    "__init__",
                    "__repr__",
                    "iter_requirement",
                    "iter_parent"
                ],
                "ResolutionError": [],
                "ResolutionImpossible": [
                    "__init__"
                ],
                "ResolutionTooDeep": [
                    "__init__"
                ],
                "Resolution": [
                    "__init__",
                    "state",
                    "_push_new_state",
                    "_add_to_criteria",
                    "_remove_information_from_criteria",
                    "_get_preference",
                    "_is_current_pin_satisfying",
                    "_get_updated_criteria",
                    "_attempt_to_pin_criterion",
                    "_backjump",
                    "resolve"
                ],
                "Resolver": [
                    "resolve"
                ]
            },
            "routes": [],
            "complexity": 47
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\resolvelib\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\resolvelib\\providers.py": {
            "functions": [
                "identify",
                "get_preference",
                "find_matches",
                "is_satisfied_by",
                "get_dependencies",
                "__init__",
                "resolve"
            ],
            "classes": {
                "AbstractProvider": [
                    "identify",
                    "get_preference",
                    "find_matches",
                    "is_satisfied_by",
                    "get_dependencies"
                ],
                "AbstractResolver": [
                    "__init__",
                    "resolve"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\resolvelib\\compat\\collections_abc.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\abc.py": {
            "functions": [
                "__subclasshook__"
            ],
            "classes": {
                "RichRenderable": [
                    "__subclasshook__"
                ],
                "Foo": []
            },
            "routes": [],
            "complexity": 2
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\align.py": {
            "functions": [
                "__init__",
                "__repr__",
                "left",
                "center",
                "right",
                "__rich_console__",
                "__rich_measure__",
                "__init__",
                "__repr__",
                "__rich_console__",
                "__rich_measure__",
                "generate_segments",
                "blank_lines",
                "blank_lines"
            ],
            "classes": {
                "Align": [
                    "__init__",
                    "__repr__",
                    "left",
                    "center",
                    "right",
                    "__rich_console__",
                    "__rich_measure__"
                ],
                "VerticalCenter": [
                    "__init__",
                    "__repr__",
                    "__rich_console__",
                    "__rich_measure__"
                ]
            },
            "routes": [],
            "complexity": 25
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\box.py": {
            "functions": [
                "__init__",
                "__repr__",
                "__str__",
                "substitute",
                "get_plain_headed_box",
                "get_top",
                "get_row",
                "get_bottom"
            ],
            "classes": {
                "Box": [
                    "__init__",
                    "__repr__",
                    "__str__",
                    "substitute",
                    "get_plain_headed_box",
                    "get_top",
                    "get_row",
                    "get_bottom"
                ]
            },
            "routes": [],
            "complexity": 16
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\bar.py": {
            "functions": [
                "__init__",
                "__repr__",
                "__rich_console__",
                "__rich_measure__"
            ],
            "classes": {
                "Bar": [
                    "__init__",
                    "__repr__",
                    "__rich_console__",
                    "__rich_measure__"
                ]
            },
            "routes": [],
            "complexity": 8
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\resolvelib\\compat\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\color.py": {
            "functions": [
                "parse_rgb_hex",
                "blend_rgb",
                "__repr__",
                "__str__",
                "__repr__",
                "__rich__",
                "__rich_repr__",
                "system",
                "is_system_defined",
                "is_default",
                "get_truecolor",
                "from_ansi",
                "from_triplet",
                "from_rgb",
                "default",
                "parse",
                "get_ansi_codes",
                "downgrade"
            ],
            "classes": {
                "ColorSystem": [
                    "__repr__",
                    "__str__"
                ],
                "ColorType": [
                    "__repr__"
                ],
                "ColorParseError": [],
                "Color": [
                    "__rich__",
                    "__rich_repr__",
                    "system",
                    "is_system_defined",
                    "is_default",
                    "get_truecolor",
                    "from_ansi",
                    "from_triplet",
                    "from_rgb",
                    "default",
                    "parse",
                    "get_ansi_codes",
                    "downgrade"
                ]
            },
            "routes": [],
            "complexity": 34
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\color_triplet.py": {
            "functions": [
                "hex",
                "rgb",
                "normalized"
            ],
            "classes": {
                "ColorTriplet": [
                    "hex",
                    "rgb",
                    "normalized"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\cells.py": {
            "functions": [
                "cached_cell_len",
                "cell_len",
                "get_character_cell_size",
                "_get_codepoint_cell_size",
                "set_cell_size",
                "chop_cells"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\columns.py": {
            "functions": [
                "__init__",
                "add_renderable",
                "__rich_console__",
                "iter_renderables"
            ],
            "classes": {
                "Columns": [
                    "__init__",
                    "add_renderable",
                    "__rich_console__"
                ]
            },
            "routes": [],
            "complexity": 7
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\ansi.py": {
            "functions": [
                "_ansi_tokenize",
                "__init__",
                "decode",
                "decode_line",
                "read"
            ],
            "classes": {
                "_AnsiToken": [],
                "AnsiDecoder": [
                    "__init__",
                    "decode",
                    "decode_line"
                ]
            },
            "routes": [],
            "complexity": 8
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\containers.py": {
            "functions": [
                "__init__",
                "__rich_console__",
                "__rich_measure__",
                "append",
                "__iter__",
                "__init__",
                "__repr__",
                "__iter__",
                "__getitem__",
                "__getitem__",
                "__getitem__",
                "__setitem__",
                "__len__",
                "__rich_console__",
                "append",
                "extend",
                "pop",
                "justify"
            ],
            "classes": {
                "Renderables": [
                    "__init__",
                    "__rich_console__",
                    "__rich_measure__",
                    "append",
                    "__iter__"
                ],
                "Lines": [
                    "__init__",
                    "__repr__",
                    "__iter__",
                    "__getitem__",
                    "__getitem__",
                    "__getitem__",
                    "__setitem__",
                    "__len__",
                    "__rich_console__",
                    "append",
                    "extend",
                    "pop",
                    "justify"
                ]
            },
            "routes": [],
            "complexity": 36
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\constrain.py": {
            "functions": [
                "__init__",
                "__rich_console__",
                "__rich_measure__"
            ],
            "classes": {
                "Constrain": [
                    "__init__",
                    "__rich_console__",
                    "__rich_measure__"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\console.py": {
            "functions": [
                "group",
                "_is_jupyter",
                "get_windows_console_features",
                "detect_legacy_windows",
                "_svg_hash",
                "ascii_only",
                "copy",
                "update",
                "update_width",
                "update_height",
                "reset_height",
                "update_dimensions",
                "__rich__",
                "__rich_console__",
                "__init__",
                "__rich_console__",
                "__init__",
                "__rich_console__",
                "__init__",
                "__enter__",
                "__exit__",
                "get",
                "__init__",
                "__enter__",
                "__exit__",
                "__init__",
                "__enter__",
                "__exit__",
                "__init__",
                "update",
                "__enter__",
                "__exit__",
                "__init__",
                "renderables",
                "__rich_measure__",
                "__rich_console__",
                "decorator",
                "process_renderables",
                "__init__",
                "__repr__",
                "file",
                "file",
                "_buffer",
                "_buffer_index",
                "_buffer_index",
                "_theme_stack",
                "_detect_color_system",
                "_enter_buffer",
                "_exit_buffer",
                "set_live",
                "clear_live",
                "push_render_hook",
                "pop_render_hook",
                "__enter__",
                "__exit__",
                "begin_capture",
                "end_capture",
                "push_theme",
                "pop_theme",
                "use_theme",
                "color_system",
                "encoding",
                "is_terminal",
                "is_dumb_terminal",
                "options",
                "size",
                "size",
                "width",
                "width",
                "height",
                "height",
                "bell",
                "capture",
                "pager",
                "line",
                "clear",
                "status",
                "show_cursor",
                "set_alt_screen",
                "is_alt_screen",
                "set_window_title",
                "screen",
                "measure",
                "render",
                "render_lines",
                "render_str",
                "get_style",
                "_collect_renderables",
                "rule",
                "control",
                "out",
                "print",
                "print_json",
                "update_screen",
                "update_screen_lines",
                "print_exception",
                "_caller_frame_info",
                "log",
                "_check_buffer",
                "_render_buffer",
                "input",
                "export_text",
                "save_text",
                "export_html",
                "save_html",
                "export_svg",
                "save_svg",
                "_replace",
                "check_text",
                "get_svg_style",
                "escape_text",
                "make_tag",
                "align_append",
                "stringify"
            ],
            "classes": {
                "NoChange": [],
                "ConsoleDimensions": [],
                "ConsoleOptions": [
                    "ascii_only",
                    "copy",
                    "update",
                    "update_width",
                    "update_height",
                    "reset_height",
                    "update_dimensions"
                ],
                "RichCast": [
                    "__rich__"
                ],
                "ConsoleRenderable": [
                    "__rich_console__"
                ],
                "CaptureError": [],
                "NewLine": [
                    "__init__",
                    "__rich_console__"
                ],
                "ScreenUpdate": [
                    "__init__",
                    "__rich_console__"
                ],
                "Capture": [
                    "__init__",
                    "__enter__",
                    "__exit__",
                    "get"
                ],
                "ThemeContext": [
                    "__init__",
                    "__enter__",
                    "__exit__"
                ],
                "PagerContext": [
                    "__init__",
                    "__enter__",
                    "__exit__"
                ],
                "ScreenContext": [
                    "__init__",
                    "update",
                    "__enter__",
                    "__exit__"
                ],
                "Group": [
                    "__init__",
                    "renderables",
                    "__rich_measure__",
                    "__rich_console__"
                ],
                "ConsoleThreadLocals": [],
                "RenderHook": [
                    "process_renderables"
                ],
                "Console": [
                    "__init__",
                    "__repr__",
                    "file",
                    "file",
                    "_buffer",
                    "_buffer_index",
                    "_buffer_index",
                    "_theme_stack",
                    "_detect_color_system",
                    "_enter_buffer",
                    "_exit_buffer",
                    "set_live",
                    "clear_live",
                    "push_render_hook",
                    "pop_render_hook",
                    "__enter__",
                    "__exit__",
                    "begin_capture",
                    "end_capture",
                    "push_theme",
                    "pop_theme",
                    "use_theme",
                    "color_system",
                    "encoding",
                    "is_terminal",
                    "is_dumb_terminal",
                    "options",
                    "size",
                    "size",
                    "width",
                    "width",
                    "height",
                    "height",
                    "bell",
                    "capture",
                    "pager",
                    "line",
                    "clear",
                    "status",
                    "show_cursor",
                    "set_alt_screen",
                    "is_alt_screen",
                    "set_window_title",
                    "screen",
                    "measure",
                    "render",
                    "render_lines",
                    "render_str",
                    "get_style",
                    "_collect_renderables",
                    "rule",
                    "control",
                    "out",
                    "print",
                    "print_json",
                    "update_screen",
                    "update_screen_lines",
                    "print_exception",
                    "_caller_frame_info",
                    "log",
                    "_check_buffer",
                    "_render_buffer",
                    "input",
                    "export_text",
                    "save_text",
                    "export_html",
                    "save_html",
                    "export_svg",
                    "save_svg"
                ]
            },
            "routes": [],
            "complexity": 215
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\errors.py": {
            "functions": [],
            "classes": {
                "ConsoleError": [],
                "StyleError": [],
                "StyleSyntaxError": [],
                "MissingStyle": [],
                "StyleStackError": [],
                "NotRenderableError": [],
                "MarkupError": [],
                "LiveError": [],
                "NoAltScreen": []
            },
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\control.py": {
            "functions": [
                "strip_control_codes",
                "escape_control_codes",
                "__init__",
                "bell",
                "home",
                "move",
                "move_to_column",
                "move_to",
                "clear",
                "show_cursor",
                "alt_screen",
                "title",
                "__str__",
                "__rich_console__",
                "get_codes"
            ],
            "classes": {
                "Control": [
                    "__init__",
                    "bell",
                    "home",
                    "move",
                    "move_to_column",
                    "move_to",
                    "clear",
                    "show_cursor",
                    "alt_screen",
                    "title",
                    "__str__",
                    "__rich_console__"
                ]
            },
            "routes": [],
            "complexity": 27
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\diagnose.py": {
            "functions": [
                "report"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\default_styles.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\emoji.py": {
            "functions": [
                "__init__",
                "replace",
                "__repr__",
                "__str__",
                "__rich_console__"
            ],
            "classes": {
                "NoEmoji": [],
                "Emoji": [
                    "__init__",
                    "replace",
                    "__repr__",
                    "__str__",
                    "__rich_console__"
                ]
            },
            "routes": [],
            "complexity": 10
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\file_proxy.py": {
            "functions": [
                "__init__",
                "rich_proxied_file",
                "__getattr__",
                "write",
                "flush",
                "fileno"
            ],
            "classes": {
                "FileProxy": [
                    "__init__",
                    "rich_proxied_file",
                    "__getattr__",
                    "write",
                    "flush",
                    "fileno"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\highlighter.py": {
            "functions": [
                "_combine_regex",
                "__call__",
                "highlight",
                "highlight",
                "highlight",
                "highlight"
            ],
            "classes": {
                "Highlighter": [
                    "__call__",
                    "highlight"
                ],
                "NullHighlighter": [
                    "highlight"
                ],
                "RegexHighlighter": [
                    "highlight"
                ],
                "ReprHighlighter": [],
                "JSONHighlighter": [
                    "highlight"
                ],
                "ISO8601Highlighter": []
            },
            "routes": [],
            "complexity": 11
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\filesize.py": {
            "functions": [
                "_to_str",
                "pick_unit_and_suffix",
                "decimal"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\json.py": {
            "functions": [
                "__init__",
                "from_data",
                "__rich__"
            ],
            "classes": {
                "JSON": [
                    "__init__",
                    "from_data",
                    "__rich__"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\live.py": {
            "functions": [
                "__init__",
                "stop",
                "run",
                "__init__",
                "is_started",
                "get_renderable",
                "start",
                "stop",
                "__enter__",
                "__exit__",
                "_enable_redirect_io",
                "_disable_redirect_io",
                "renderable",
                "update",
                "refresh",
                "process_renderables"
            ],
            "classes": {
                "_RefreshThread": [
                    "__init__",
                    "stop",
                    "run"
                ],
                "Live": [
                    "__init__",
                    "is_started",
                    "get_renderable",
                    "start",
                    "stop",
                    "__enter__",
                    "__exit__",
                    "_enable_redirect_io",
                    "_disable_redirect_io",
                    "renderable",
                    "update",
                    "refresh",
                    "process_renderables"
                ]
            },
            "routes": [],
            "complexity": 32
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\layout.py": {
            "functions": [
                "__init__",
                "__rich_console__",
                "get_tree_icon",
                "divide",
                "get_tree_icon",
                "divide",
                "get_tree_icon",
                "divide",
                "__init__",
                "__rich_repr__",
                "renderable",
                "children",
                "map",
                "get",
                "__getitem__",
                "tree",
                "split",
                "add_split",
                "split_row",
                "split_column",
                "unsplit",
                "update",
                "refresh_screen",
                "_make_region_map",
                "render",
                "__rich_console__",
                "summary",
                "recurse"
            ],
            "classes": {
                "LayoutRender": [],
                "LayoutError": [],
                "NoSplitter": [],
                "_Placeholder": [
                    "__init__",
                    "__rich_console__"
                ],
                "Splitter": [
                    "get_tree_icon",
                    "divide"
                ],
                "RowSplitter": [
                    "get_tree_icon",
                    "divide"
                ],
                "ColumnSplitter": [
                    "get_tree_icon",
                    "divide"
                ],
                "Layout": [
                    "__init__",
                    "__rich_repr__",
                    "renderable",
                    "children",
                    "map",
                    "get",
                    "__getitem__",
                    "tree",
                    "split",
                    "add_split",
                    "split_row",
                    "split_column",
                    "unsplit",
                    "update",
                    "refresh_screen",
                    "_make_region_map",
                    "render",
                    "__rich_console__"
                ]
            },
            "routes": [],
            "complexity": 54
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\logging.py": {
            "functions": [
                "__init__",
                "get_level_text",
                "emit",
                "render_message",
                "render",
                "divide"
            ],
            "classes": {
                "RichHandler": [
                    "__init__",
                    "get_level_text",
                    "emit",
                    "render_message",
                    "render"
                ]
            },
            "routes": [],
            "complexity": 11
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\jupyter.py": {
            "functions": [
                "_render_segments",
                "display",
                "print",
                "__init__",
                "_repr_mimebundle_",
                "_repr_mimebundle_",
                "escape"
            ],
            "classes": {
                "JupyterRenderable": [
                    "__init__",
                    "_repr_mimebundle_"
                ],
                "JupyterMixin": [
                    "_repr_mimebundle_"
                ]
            },
            "routes": [],
            "complexity": 10
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\pager.py": {
            "functions": [
                "show",
                "_pager",
                "show"
            ],
            "classes": {
                "Pager": [
                    "show"
                ],
                "SystemPager": [
                    "_pager",
                    "show"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\markup.py": {
            "functions": [
                "escape",
                "_parse",
                "render",
                "__str__",
                "markup",
                "escape_backslashes",
                "pop_style"
            ],
            "classes": {
                "Tag": [
                    "__str__",
                    "markup"
                ]
            },
            "routes": [],
            "complexity": 9
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\measure.py": {
            "functions": [
                "measure_renderables",
                "span",
                "normalize",
                "with_maximum",
                "with_minimum",
                "clamp",
                "get"
            ],
            "classes": {
                "Measurement": [
                    "span",
                    "normalize",
                    "with_maximum",
                    "with_minimum",
                    "clamp",
                    "get"
                ]
            },
            "routes": [],
            "complexity": 13
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\live_render.py": {
            "functions": [
                "__init__",
                "set_renderable",
                "position_cursor",
                "restore_cursor",
                "__rich_console__"
            ],
            "classes": {
                "LiveRender": [
                    "__init__",
                    "set_renderable",
                    "position_cursor",
                    "restore_cursor",
                    "__rich_console__"
                ]
            },
            "routes": [],
            "complexity": 10
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\palette.py": {
            "functions": [
                "__init__",
                "__getitem__",
                "__rich__",
                "match",
                "get_color_distance",
                "__rich_console__"
            ],
            "classes": {
                "Palette": [
                    "__init__",
                    "__getitem__",
                    "__rich__",
                    "match"
                ],
                "ColorBox": [
                    "__rich_console__"
                ]
            },
            "routes": [],
            "complexity": 11
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\protocol.py": {
            "functions": [
                "is_renderable",
                "rich_cast"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\padding.py": {
            "functions": [
                "__init__",
                "indent",
                "unpack",
                "__repr__",
                "__rich_console__",
                "__rich_measure__"
            ],
            "classes": {
                "Padding": [
                    "__init__",
                    "indent",
                    "unpack",
                    "__repr__",
                    "__rich_console__",
                    "__rich_measure__"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\pretty.py": {
            "functions": [
                "_is_attr_object",
                "_get_attr_fields",
                "_is_dataclass_repr",
                "_has_default_namedtuple_repr",
                "_ipy_display_hook",
                "_safe_isinstance",
                "install",
                "_get_braces_for_defaultdict",
                "_get_braces_for_array",
                "is_expandable",
                "_is_namedtuple",
                "traverse",
                "pretty_repr",
                "pprint",
                "display_hook",
                "__init__",
                "__rich_console__",
                "__rich_measure__",
                "iter_tokens",
                "check_length",
                "__str__",
                "render",
                "expandable",
                "check_length",
                "expand",
                "__str__",
                "to_repr",
                "_traverse",
                "iter_rich_args",
                "__repr__",
                "__repr__",
                "__call__",
                "iter_attrs"
            ],
            "classes": {
                "Pretty": [
                    "__init__",
                    "__rich_console__",
                    "__rich_measure__"
                ],
                "Node": [
                    "iter_tokens",
                    "check_length",
                    "__str__",
                    "render"
                ],
                "_Line": [
                    "expandable",
                    "check_length",
                    "expand",
                    "__str__"
                ],
                "BrokenRepr": [
                    "__repr__"
                ],
                "StockKeepingUnit": [],
                "Thing": [
                    "__repr__"
                ],
                "RichFormatter": [
                    "__call__"
                ]
            },
            "routes": [],
            "complexity": 47
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\repr.py": {
            "functions": [
                "auto",
                "auto",
                "auto",
                "rich_repr",
                "rich_repr",
                "rich_repr",
                "do_replace",
                "auto_repr",
                "auto_rich_repr",
                "__rich_repr__"
            ],
            "classes": {
                "ReprError": [],
                "Foo": [
                    "__rich_repr__"
                ]
            },
            "routes": [],
            "complexity": 11
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\prompt.py": {
            "functions": [
                "__init__",
                "__rich__",
                "__init__",
                "ask",
                "ask",
                "ask",
                "render_default",
                "make_prompt",
                "get_input",
                "check_choice",
                "process_response",
                "on_validate_error",
                "pre_prompt",
                "__call__",
                "__call__",
                "__call__",
                "render_default",
                "process_response"
            ],
            "classes": {
                "PromptError": [],
                "InvalidResponse": [
                    "__init__",
                    "__rich__"
                ],
                "PromptBase": [
                    "__init__",
                    "ask",
                    "ask",
                    "ask",
                    "render_default",
                    "make_prompt",
                    "get_input",
                    "check_choice",
                    "process_response",
                    "on_validate_error",
                    "pre_prompt",
                    "__call__",
                    "__call__",
                    "__call__"
                ],
                "Prompt": [],
                "IntPrompt": [],
                "FloatPrompt": [],
                "Confirm": [
                    "render_default",
                    "process_response"
                ]
            },
            "routes": [],
            "complexity": 36
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\progress_bar.py": {
            "functions": [
                "__init__",
                "__repr__",
                "percentage_completed",
                "_get_pulse_segments",
                "update",
                "_render_pulse",
                "__rich_console__",
                "__rich_measure__"
            ],
            "classes": {
                "ProgressBar": [
                    "__init__",
                    "__repr__",
                    "percentage_completed",
                    "_get_pulse_segments",
                    "update",
                    "_render_pulse",
                    "__rich_console__",
                    "__rich_measure__"
                ]
            },
            "routes": [],
            "complexity": 16
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\panel.py": {
            "functions": [
                "__init__",
                "fit",
                "_title",
                "_subtitle",
                "__rich_console__",
                "__rich_measure__",
                "align_text"
            ],
            "classes": {
                "Panel": [
                    "__init__",
                    "fit",
                    "_title",
                    "_subtitle",
                    "__rich_console__",
                    "__rich_measure__"
                ]
            },
            "routes": [],
            "complexity": 13
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\scope.py": {
            "functions": [
                "render_scope",
                "sort_items",
                "test"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\rule.py": {
            "functions": [
                "__init__",
                "__repr__",
                "__rich_console__",
                "_rule_line",
                "__rich_measure__"
            ],
            "classes": {
                "Rule": [
                    "__init__",
                    "__repr__",
                    "__rich_console__",
                    "_rule_line",
                    "__rich_measure__"
                ]
            },
            "routes": [],
            "complexity": 10
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\progress.py": {
            "functions": [
                "track",
                "wrap_file",
                "open",
                "open",
                "open",
                "__init__",
                "run",
                "__enter__",
                "__exit__",
                "__init__",
                "__enter__",
                "__exit__",
                "__iter__",
                "__next__",
                "closed",
                "fileno",
                "isatty",
                "mode",
                "name",
                "readable",
                "seekable",
                "writable",
                "read",
                "readinto",
                "readline",
                "readlines",
                "close",
                "seek",
                "tell",
                "write",
                "__init__",
                "__enter__",
                "__exit__",
                "__init__",
                "get_table_column",
                "__call__",
                "render",
                "__init__",
                "render",
                "__init__",
                "set_spinner",
                "render",
                "__init__",
                "render",
                "__init__",
                "render",
                "render",
                "__init__",
                "render_speed",
                "render",
                "__init__",
                "render",
                "render",
                "render",
                "__init__",
                "render",
                "__init__",
                "render",
                "render",
                "get_time",
                "started",
                "remaining",
                "elapsed",
                "finished",
                "percentage",
                "speed",
                "time_remaining",
                "_reset",
                "__init__",
                "get_default_columns",
                "console",
                "tasks",
                "task_ids",
                "finished",
                "start",
                "stop",
                "__enter__",
                "__exit__",
                "track",
                "wrap_file",
                "open",
                "open",
                "open",
                "start_task",
                "stop_task",
                "update",
                "reset",
                "advance",
                "refresh",
                "get_renderable",
                "get_renderables",
                "make_tasks_table",
                "__rich__",
                "add_task",
                "remove_task"
            ],
            "classes": {
                "_TrackThread": [
                    "__init__",
                    "run",
                    "__enter__",
                    "__exit__"
                ],
                "_Reader": [
                    "__init__",
                    "__enter__",
                    "__exit__",
                    "__iter__",
                    "__next__",
                    "closed",
                    "fileno",
                    "isatty",
                    "mode",
                    "name",
                    "readable",
                    "seekable",
                    "writable",
                    "read",
                    "readinto",
                    "readline",
                    "readlines",
                    "close",
                    "seek",
                    "tell",
                    "write"
                ],
                "_ReadContext": [
                    "__init__",
                    "__enter__",
                    "__exit__"
                ],
                "ProgressColumn": [
                    "__init__",
                    "get_table_column",
                    "__call__",
                    "render"
                ],
                "RenderableColumn": [
                    "__init__",
                    "render"
                ],
                "SpinnerColumn": [
                    "__init__",
                    "set_spinner",
                    "render"
                ],
                "TextColumn": [
                    "__init__",
                    "render"
                ],
                "BarColumn": [
                    "__init__",
                    "render"
                ],
                "TimeElapsedColumn": [
                    "render"
                ],
                "TaskProgressColumn": [
                    "__init__",
                    "render_speed",
                    "render"
                ],
                "TimeRemainingColumn": [
                    "__init__",
                    "render"
                ],
                "FileSizeColumn": [
                    "render"
                ],
                "TotalFileSizeColumn": [
                    "render"
                ],
                "MofNCompleteColumn": [
                    "__init__",
                    "render"
                ],
                "DownloadColumn": [
                    "__init__",
                    "render"
                ],
                "TransferSpeedColumn": [
                    "render"
                ],
                "ProgressSample": [],
                "Task": [
                    "get_time",
                    "started",
                    "remaining",
                    "elapsed",
                    "finished",
                    "percentage",
                    "speed",
                    "time_remaining",
                    "_reset"
                ],
                "Progress": [
                    "__init__",
                    "get_default_columns",
                    "console",
                    "tasks",
                    "task_ids",
                    "finished",
                    "start",
                    "stop",
                    "__enter__",
                    "__exit__",
                    "track",
                    "wrap_file",
                    "open",
                    "open",
                    "open",
                    "start_task",
                    "stop_task",
                    "update",
                    "reset",
                    "advance",
                    "refresh",
                    "get_renderable",
                    "get_renderables",
                    "make_tasks_table",
                    "__rich__",
                    "add_task",
                    "remove_task"
                ]
            },
            "routes": [],
            "complexity": 185
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\region.py": {
            "functions": [],
            "classes": {
                "Region": []
            },
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\spinner.py": {
            "functions": [
                "__init__",
                "__rich_console__",
                "__rich_measure__",
                "render",
                "update"
            ],
            "classes": {
                "Spinner": [
                    "__init__",
                    "__rich_console__",
                    "__rich_measure__",
                    "render",
                    "update"
                ]
            },
            "routes": [],
            "complexity": 10
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\screen.py": {
            "functions": [
                "__init__",
                "__rich_console__"
            ],
            "classes": {
                "Screen": [
                    "__init__",
                    "__rich_console__"
                ]
            },
            "routes": [],
            "complexity": 4
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\styled.py": {
            "functions": [
                "__init__",
                "__rich_console__",
                "__rich_measure__"
            ],
            "classes": {
                "Styled": [
                    "__init__",
                    "__rich_console__",
                    "__rich_measure__"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\segment.py": {
            "functions": [
                "cell_length",
                "__rich_repr__",
                "__bool__",
                "is_control",
                "_split_cells",
                "split_cells",
                "line",
                "apply_style",
                "filter_control",
                "split_lines",
                "split_and_crop_lines",
                "adjust_line_length",
                "get_line_length",
                "get_shape",
                "set_shape",
                "align_top",
                "align_bottom",
                "align_middle",
                "simplify",
                "strip_links",
                "strip_styles",
                "remove_color",
                "divide",
                "__init__",
                "__rich_console__",
                "__init__",
                "__rich_console__"
            ],
            "classes": {
                "ControlType": [],
                "Segment": [
                    "cell_length",
                    "__rich_repr__",
                    "__bool__",
                    "is_control",
                    "_split_cells",
                    "split_cells",
                    "line",
                    "apply_style",
                    "filter_control",
                    "split_lines",
                    "split_and_crop_lines",
                    "adjust_line_length",
                    "get_line_length",
                    "get_shape",
                    "set_shape",
                    "align_top",
                    "align_bottom",
                    "align_middle",
                    "simplify",
                    "strip_links",
                    "strip_styles",
                    "remove_color",
                    "divide"
                ],
                "Segments": [
                    "__init__",
                    "__rich_console__"
                ],
                "SegmentLines": [
                    "__init__",
                    "__rich_console__"
                ]
            },
            "routes": [],
            "complexity": 54
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\status.py": {
            "functions": [
                "__init__",
                "renderable",
                "console",
                "update",
                "start",
                "stop",
                "__rich__",
                "__enter__",
                "__exit__"
            ],
            "classes": {
                "Status": [
                    "__init__",
                    "renderable",
                    "console",
                    "update",
                    "start",
                    "stop",
                    "__rich__",
                    "__enter__",
                    "__exit__"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\themes.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\terminal_theme.py": {
            "functions": [
                "__init__"
            ],
            "classes": {
                "TerminalTheme": [
                    "__init__"
                ]
            },
            "routes": [],
            "complexity": 2
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\table.py": {
            "functions": [
                "copy",
                "cells",
                "flexible",
                "__init__",
                "grid",
                "expand",
                "expand",
                "_extra_width",
                "row_count",
                "get_row_style",
                "__rich_measure__",
                "padding",
                "padding",
                "add_column",
                "add_row",
                "add_section",
                "__rich_console__",
                "_calculate_column_widths",
                "_collapse_widths",
                "_get_cells",
                "_get_padding_width",
                "_measure_column",
                "_render",
                "add_cell",
                "render_annotation",
                "get_padding",
                "header",
                "align_cell"
            ],
            "classes": {
                "Column": [
                    "copy",
                    "cells",
                    "flexible"
                ],
                "Row": [],
                "_Cell": [],
                "Table": [
                    "__init__",
                    "grid",
                    "expand",
                    "expand",
                    "_extra_width",
                    "row_count",
                    "get_row_style",
                    "__rich_measure__",
                    "padding",
                    "padding",
                    "add_column",
                    "add_row",
                    "add_section",
                    "__rich_console__",
                    "_calculate_column_widths",
                    "_collapse_widths",
                    "_get_cells",
                    "_get_padding_width",
                    "_measure_column",
                    "_render"
                ]
            },
            "routes": [],
            "complexity": 51
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\style.py": {
            "functions": [
                "__init__",
                "__get__",
                "__init__",
                "null",
                "from_color",
                "from_meta",
                "on",
                "link_id",
                "__str__",
                "__bool__",
                "_make_ansi_codes",
                "normalize",
                "pick_first",
                "__rich_repr__",
                "__eq__",
                "__ne__",
                "__hash__",
                "color",
                "bgcolor",
                "link",
                "transparent_background",
                "background_style",
                "meta",
                "without_color",
                "parse",
                "get_html_style",
                "combine",
                "chain",
                "copy",
                "clear_meta_and_links",
                "update_link",
                "render",
                "test",
                "_add",
                "__add__",
                "__init__",
                "__repr__",
                "current",
                "push",
                "pop",
                "_make_color"
            ],
            "classes": {
                "_Bit": [
                    "__init__",
                    "__get__"
                ],
                "Style": [
                    "__init__",
                    "null",
                    "from_color",
                    "from_meta",
                    "on",
                    "link_id",
                    "__str__",
                    "__bool__",
                    "_make_ansi_codes",
                    "normalize",
                    "pick_first",
                    "__rich_repr__",
                    "__eq__",
                    "__ne__",
                    "__hash__",
                    "color",
                    "bgcolor",
                    "link",
                    "transparent_background",
                    "background_style",
                    "meta",
                    "without_color",
                    "parse",
                    "get_html_style",
                    "combine",
                    "chain",
                    "copy",
                    "clear_meta_and_links",
                    "update_link",
                    "render",
                    "test",
                    "_add",
                    "__add__"
                ],
                "StyleStack": [
                    "__init__",
                    "__repr__",
                    "current",
                    "push",
                    "pop"
                ]
            },
            "routes": [],
            "complexity": 81
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\theme.py": {
            "functions": [
                "__init__",
                "config",
                "from_file",
                "read",
                "__init__",
                "push_theme",
                "pop_theme"
            ],
            "classes": {
                "Theme": [
                    "__init__",
                    "config",
                    "from_file",
                    "read"
                ],
                "ThemeStackError": [],
                "ThemeStack": [
                    "__init__",
                    "push_theme",
                    "pop_theme"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\syntax.py": {
            "functions": [
                "_get_code_index_for_syntax_position",
                "get_style_for_token",
                "get_background_style",
                "__init__",
                "get_style_for_token",
                "get_background_style",
                "__init__",
                "get_style_for_token",
                "get_background_style",
                "get_theme",
                "__init__",
                "from_path",
                "guess_lexer",
                "_get_base_style",
                "_get_token_color",
                "lexer",
                "default_lexer",
                "highlight",
                "stylize_range",
                "_get_line_numbers_color",
                "_numbers_column_width",
                "_get_number_styles",
                "__rich_measure__",
                "__rich_console__",
                "_get_syntax",
                "_apply_stylized_ranges",
                "_process_code",
                "line_tokenize",
                "tokens_to_spans"
            ],
            "classes": {
                "SyntaxTheme": [
                    "get_style_for_token",
                    "get_background_style"
                ],
                "PygmentsSyntaxTheme": [
                    "__init__",
                    "get_style_for_token",
                    "get_background_style"
                ],
                "ANSISyntaxTheme": [
                    "__init__",
                    "get_style_for_token",
                    "get_background_style"
                ],
                "_SyntaxHighlightRange": [],
                "Syntax": [
                    "get_theme",
                    "__init__",
                    "from_path",
                    "guess_lexer",
                    "_get_base_style",
                    "_get_token_color",
                    "lexer",
                    "default_lexer",
                    "highlight",
                    "stylize_range",
                    "_get_line_numbers_color",
                    "_numbers_column_width",
                    "_get_number_styles",
                    "__rich_measure__",
                    "__rich_console__",
                    "_get_syntax",
                    "_apply_stylized_ranges",
                    "_process_code"
                ]
            },
            "routes": [],
            "complexity": 55
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\_emoji_replace.py": {
            "functions": [
                "_emoji_replace",
                "do_replace"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\text.py": {
            "functions": [
                "__repr__",
                "__bool__",
                "split",
                "move",
                "right_crop",
                "extend",
                "__init__",
                "__len__",
                "__bool__",
                "__str__",
                "__repr__",
                "__add__",
                "__eq__",
                "__contains__",
                "__getitem__",
                "cell_len",
                "markup",
                "from_markup",
                "from_ansi",
                "styled",
                "assemble",
                "plain",
                "plain",
                "spans",
                "spans",
                "blank_copy",
                "copy",
                "stylize",
                "stylize_before",
                "apply_meta",
                "on",
                "remove_suffix",
                "get_style_at_offset",
                "extend_style",
                "highlight_regex",
                "highlight_words",
                "rstrip",
                "rstrip_end",
                "set_length",
                "__rich_console__",
                "__rich_measure__",
                "render",
                "join",
                "expand_tabs",
                "truncate",
                "_trim_spans",
                "pad",
                "pad_left",
                "pad_right",
                "align",
                "append",
                "append_text",
                "append_tokens",
                "copy_styles",
                "split",
                "divide",
                "right_crop",
                "wrap",
                "fit",
                "detect_indentation",
                "with_indent_guides",
                "get_text_at",
                "get_current_style",
                "iter_text",
                "flatten_spans"
            ],
            "classes": {
                "Span": [
                    "__repr__",
                    "__bool__",
                    "split",
                    "move",
                    "right_crop",
                    "extend"
                ],
                "Text": [
                    "__init__",
                    "__len__",
                    "__bool__",
                    "__str__",
                    "__repr__",
                    "__add__",
                    "__eq__",
                    "__contains__",
                    "__getitem__",
                    "cell_len",
                    "markup",
                    "from_markup",
                    "from_ansi",
                    "styled",
                    "assemble",
                    "plain",
                    "plain",
                    "spans",
                    "spans",
                    "blank_copy",
                    "copy",
                    "stylize",
                    "stylize_before",
                    "apply_meta",
                    "on",
                    "remove_suffix",
                    "get_style_at_offset",
                    "extend_style",
                    "highlight_regex",
                    "highlight_words",
                    "rstrip",
                    "rstrip_end",
                    "set_length",
                    "__rich_console__",
                    "__rich_measure__",
                    "render",
                    "join",
                    "expand_tabs",
                    "truncate",
                    "_trim_spans",
                    "pad",
                    "pad_left",
                    "pad_right",
                    "align",
                    "append",
                    "append_text",
                    "append_tokens",
                    "copy_styles",
                    "split",
                    "divide",
                    "right_crop",
                    "wrap",
                    "fit",
                    "detect_indentation",
                    "with_indent_guides"
                ]
            },
            "routes": [],
            "complexity": 126
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\tree.py": {
            "functions": [
                "__init__",
                "add",
                "__rich_console__",
                "__rich_measure__",
                "make_guide"
            ],
            "classes": {
                "Tree": [
                    "__init__",
                    "add",
                    "__rich_console__",
                    "__rich_measure__"
                ]
            },
            "routes": [],
            "complexity": 9
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\traceback.py": {
            "functions": [
                "install",
                "excepthook",
                "ipy_excepthook_closure",
                "__init__",
                "from_exception",
                "extract",
                "__rich_console__",
                "_render_syntax_error",
                "_guess_lexer",
                "_render_stack",
                "bar",
                "foo",
                "error",
                "ipy_show_traceback",
                "ipy_display_traceback",
                "safe_str",
                "read_code",
                "render_locals",
                "get_locals"
            ],
            "classes": {
                "Frame": [],
                "_SyntaxError": [],
                "Stack": [],
                "Trace": [],
                "PathHighlighter": [],
                "Traceback": [
                    "__init__",
                    "from_exception",
                    "extract",
                    "__rich_console__",
                    "_render_syntax_error",
                    "_guess_lexer",
                    "_render_stack"
                ]
            },
            "routes": [],
            "complexity": 26
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\_cell_widths.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\_fileno.py": {
            "functions": [
                "get_fileno"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\_export_format.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\_loop.py": {
            "functions": [
                "loop_first",
                "loop_last",
                "loop_first_last"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\_emoji_codes.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\_extension.py": {
            "functions": [
                "load_ipython_extension"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\_inspect.py": {
            "functions": [
                "_first_paragraph",
                "get_object_types_mro",
                "get_object_types_mro_as_strings",
                "is_object_one_of_types",
                "__init__",
                "_make_title",
                "__rich__",
                "_get_signature",
                "_render",
                "_get_formatted_doc",
                "sort_items",
                "safe_getattr"
            ],
            "classes": {
                "Inspect": [
                    "__init__",
                    "_make_title",
                    "__rich__",
                    "_get_signature",
                    "_render",
                    "_get_formatted_doc"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\_log_render.py": {
            "functions": [
                "__init__",
                "__call__"
            ],
            "classes": {
                "LogRender": [
                    "__init__",
                    "__call__"
                ]
            },
            "routes": [],
            "complexity": 4
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\_pick.py": {
            "functions": [
                "pick_bool"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\_palettes.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\_null_file.py": {
            "functions": [
                "close",
                "isatty",
                "read",
                "readable",
                "readline",
                "readlines",
                "seek",
                "seekable",
                "tell",
                "truncate",
                "writable",
                "writelines",
                "__next__",
                "__iter__",
                "__enter__",
                "__exit__",
                "write",
                "flush",
                "fileno"
            ],
            "classes": {
                "NullFile": [
                    "close",
                    "isatty",
                    "read",
                    "readable",
                    "readline",
                    "readlines",
                    "seek",
                    "seekable",
                    "tell",
                    "truncate",
                    "writable",
                    "writelines",
                    "__next__",
                    "__iter__",
                    "__enter__",
                    "__exit__",
                    "write",
                    "flush",
                    "fileno"
                ]
            },
            "routes": [],
            "complexity": 38
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\_win32_console.py": {
            "functions": [
                "GetStdHandle",
                "GetConsoleMode",
                "FillConsoleOutputCharacter",
                "FillConsoleOutputAttribute",
                "SetConsoleTextAttribute",
                "GetConsoleScreenBufferInfo",
                "SetConsoleCursorPosition",
                "GetConsoleCursorInfo",
                "SetConsoleCursorInfo",
                "SetConsoleTitle",
                "from_param",
                "__init__",
                "cursor_position",
                "screen_size",
                "write_text",
                "write_styled",
                "move_cursor_to",
                "erase_line",
                "erase_end_of_line",
                "erase_start_of_line",
                "move_cursor_up",
                "move_cursor_down",
                "move_cursor_forward",
                "move_cursor_to_column",
                "move_cursor_backward",
                "hide_cursor",
                "show_cursor",
                "set_title",
                "_get_cursor_size"
            ],
            "classes": {
                "LegacyWindowsError": [],
                "WindowsCoordinates": [
                    "from_param"
                ],
                "CONSOLE_SCREEN_BUFFER_INFO": [],
                "CONSOLE_CURSOR_INFO": [],
                "LegacyWindowsTerm": [
                    "__init__",
                    "cursor_position",
                    "screen_size",
                    "write_text",
                    "write_styled",
                    "move_cursor_to",
                    "erase_line",
                    "erase_end_of_line",
                    "erase_start_of_line",
                    "move_cursor_up",
                    "move_cursor_down",
                    "move_cursor_forward",
                    "move_cursor_to_column",
                    "move_cursor_backward",
                    "hide_cursor",
                    "show_cursor",
                    "set_title",
                    "_get_cursor_size"
                ]
            },
            "routes": [],
            "complexity": 48
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\_wrap.py": {
            "functions": [
                "words",
                "divide_line"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\_timer.py": {
            "functions": [
                "timer"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\_ratio.py": {
            "functions": [
                "ratio_resolve",
                "ratio_reduce",
                "ratio_distribute"
            ],
            "classes": {
                "Edge": [],
                "E": []
            },
            "routes": [],
            "complexity": 3
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\_windows_renderer.py": {
            "functions": [
                "legacy_windows_render"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\_windows.py": {
            "functions": [
                "get_windows_console_features",
                "get_windows_console_features"
            ],
            "classes": {
                "WindowsConsoleFeatures": []
            },
            "routes": [],
            "complexity": 2
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\_stack.py": {
            "functions": [
                "top",
                "push"
            ],
            "classes": {
                "Stack": [
                    "top",
                    "push"
                ]
            },
            "routes": [],
            "complexity": 4
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\_spinners.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_openssl.py": {
            "functions": [
                "_configure_context",
                "_capath_contains_certs",
                "_verify_peercerts_impl"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\tomli\\_re.py": {
            "functions": [
                "match_to_datetime",
                "cached_tz",
                "match_to_localtime",
                "match_to_number"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\rich\\__main__.py": {
            "functions": [
                "make_test_card",
                "__rich_console__",
                "__rich_measure__",
                "comparison"
            ],
            "classes": {
                "ColorBox": [
                    "__rich_console__",
                    "__rich_measure__"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\tomli\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\tomli\\_types.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_api.py": {
            "functions": [
                "inject_into_ssl",
                "extract_from_ssl",
                "_verify_peercerts",
                "__class__",
                "__init__",
                "wrap_socket",
                "wrap_bio",
                "load_verify_locations",
                "load_cert_chain",
                "load_default_certs",
                "set_alpn_protocols",
                "set_npn_protocols",
                "set_ciphers",
                "get_ciphers",
                "session_stats",
                "cert_store_stats",
                "get_ca_certs",
                "get_ca_certs",
                "get_ca_certs",
                "get_ca_certs",
                "check_hostname",
                "check_hostname",
                "hostname_checks_common_name",
                "hostname_checks_common_name",
                "keylog_filename",
                "keylog_filename",
                "maximum_version",
                "maximum_version",
                "minimum_version",
                "minimum_version",
                "options",
                "options",
                "post_handshake_auth",
                "post_handshake_auth",
                "protocol",
                "security_level",
                "verify_flags",
                "verify_flags",
                "verify_mode",
                "verify_mode",
                "_get_unverified_chain_bytes",
                "_get_unverified_chain_bytes",
                "do_handshake"
            ],
            "classes": {
                "SSLContext": [
                    "__class__",
                    "__init__",
                    "wrap_socket",
                    "wrap_bio",
                    "load_verify_locations",
                    "load_cert_chain",
                    "load_default_certs",
                    "set_alpn_protocols",
                    "set_npn_protocols",
                    "set_ciphers",
                    "get_ciphers",
                    "session_stats",
                    "cert_store_stats",
                    "get_ca_certs",
                    "get_ca_certs",
                    "get_ca_certs",
                    "get_ca_certs",
                    "check_hostname",
                    "check_hostname",
                    "hostname_checks_common_name",
                    "hostname_checks_common_name",
                    "keylog_filename",
                    "keylog_filename",
                    "maximum_version",
                    "maximum_version",
                    "minimum_version",
                    "minimum_version",
                    "options",
                    "options",
                    "post_handshake_auth",
                    "post_handshake_auth",
                    "protocol",
                    "security_level",
                    "verify_flags",
                    "verify_flags",
                    "verify_mode",
                    "verify_mode"
                ],
                "TruststoreSSLObject": [
                    "do_handshake"
                ]
            },
            "routes": [],
            "complexity": 81
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\tomli\\_parser.py": {
            "functions": [
                "load",
                "loads",
                "skip_chars",
                "skip_until",
                "skip_comment",
                "skip_comments_and_array_ws",
                "create_dict_rule",
                "create_list_rule",
                "key_value_rule",
                "parse_key_value_pair",
                "parse_key",
                "parse_key_part",
                "parse_one_line_basic_str",
                "parse_array",
                "parse_inline_table",
                "parse_basic_str_escape",
                "parse_basic_str_escape_multiline",
                "parse_hex_char",
                "parse_literal_str",
                "parse_multiline_str",
                "parse_basic_str",
                "parse_value",
                "suffixed_err",
                "is_unicode_scalar_value",
                "make_safe_parse_float",
                "__init__",
                "add_pending",
                "finalize_pending",
                "unset_all",
                "set",
                "is_",
                "__init__",
                "get_or_create_nest",
                "append_nest_to_list",
                "coord_repr",
                "safe_parse_float"
            ],
            "classes": {
                "TOMLDecodeError": [],
                "Flags": [
                    "__init__",
                    "add_pending",
                    "finalize_pending",
                    "unset_all",
                    "set",
                    "is_"
                ],
                "NestedDict": [
                    "__init__",
                    "get_or_create_nest",
                    "append_nest_to_list"
                ],
                "Output": []
            },
            "routes": [],
            "complexity": 45
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_windows.py": {
            "functions": [
                "_handle_win_error",
                "_verify_peercerts_impl",
                "_get_and_verify_cert_chain",
                "_verify_using_custom_ca_certs",
                "_configure_context"
            ],
            "classes": {
                "CERT_CONTEXT": [],
                "CERT_ENHKEY_USAGE": [],
                "CERT_USAGE_MATCH": [],
                "CERT_CHAIN_PARA": [],
                "CERT_TRUST_STATUS": [],
                "CERT_CHAIN_ELEMENT": [],
                "CERT_SIMPLE_CHAIN": [],
                "CERT_CHAIN_CONTEXT": [],
                "SSL_EXTRA_CERT_CHAIN_POLICY_PARA": [],
                "CERT_CHAIN_POLICY_PARA": [],
                "CERT_CHAIN_POLICY_STATUS": [],
                "CERT_CHAIN_ENGINE_CONFIG": []
            },
            "routes": [],
            "complexity": 5
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_ssl_constants.py": {
            "functions": [
                "_set_ssl_context_verify_mode"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\truststore\\_macos.py": {
            "functions": [
                "_load_cdll",
                "_handle_osstatus",
                "_bytes_to_cf_data_ref",
                "_bytes_to_cf_string",
                "_cf_string_ref_to_str",
                "_der_certs_to_cf_cert_array",
                "_configure_context",
                "_verify_peercerts_impl"
            ],
            "classes": {
                "CFConst": []
            },
            "routes": [],
            "complexity": 8
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\connection.py": {
            "functions": [
                "_match_hostname",
                "_get_default_user_agent",
                "__init__",
                "host",
                "host",
                "_new_conn",
                "_is_using_tunnel",
                "_prepare_conn",
                "connect",
                "putrequest",
                "putheader",
                "request",
                "request_chunked",
                "__init__",
                "set_cert",
                "connect",
                "_connect_tls_proxy"
            ],
            "classes": {
                "HTTPConnection": [
                    "__init__",
                    "host",
                    "host",
                    "_new_conn",
                    "_is_using_tunnel",
                    "_prepare_conn",
                    "connect",
                    "putrequest",
                    "putheader",
                    "request",
                    "request_chunked"
                ],
                "HTTPSConnection": [
                    "__init__",
                    "set_cert",
                    "connect",
                    "_connect_tls_proxy"
                ],
                "DummyConnection": [],
                "BaseSSLError": [],
                "ConnectionError": [],
                "BrokenPipeError": []
            },
            "routes": [],
            "complexity": 32
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\filepost.py": {
            "functions": [
                "choose_boundary",
                "iter_field_objects",
                "iter_fields",
                "encode_multipart_formdata"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\_collections.py": {
            "functions": [
                "__init__",
                "__getitem__",
                "__setitem__",
                "__delitem__",
                "__len__",
                "__iter__",
                "clear",
                "keys",
                "__init__",
                "__setitem__",
                "__getitem__",
                "__delitem__",
                "__contains__",
                "__eq__",
                "__ne__",
                "__len__",
                "__iter__",
                "pop",
                "discard",
                "add",
                "extend",
                "getlist",
                "_prepare_for_method_change",
                "__repr__",
                "_copy_from",
                "copy",
                "iteritems",
                "itermerged",
                "items",
                "from_httplib",
                "__enter__",
                "__exit__"
            ],
            "classes": {
                "RecentlyUsedContainer": [
                    "__init__",
                    "__getitem__",
                    "__setitem__",
                    "__delitem__",
                    "__len__",
                    "__iter__",
                    "clear",
                    "keys"
                ],
                "HTTPHeaderDict": [
                    "__init__",
                    "__setitem__",
                    "__getitem__",
                    "__delitem__",
                    "__contains__",
                    "__eq__",
                    "__ne__",
                    "__len__",
                    "__iter__",
                    "pop",
                    "discard",
                    "add",
                    "extend",
                    "getlist",
                    "_prepare_for_method_change",
                    "__repr__",
                    "_copy_from",
                    "copy",
                    "iteritems",
                    "itermerged",
                    "items",
                    "from_httplib"
                ],
                "RLock": [
                    "__enter__",
                    "__exit__"
                ]
            },
            "routes": [],
            "complexity": 64
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\fields.py": {
            "functions": [
                "guess_content_type",
                "format_header_param_rfc2231",
                "_replace_multiple",
                "format_header_param_html5",
                "replacer",
                "__init__",
                "from_tuples",
                "_render_part",
                "_render_parts",
                "render_headers",
                "make_multipart"
            ],
            "classes": {
                "RequestField": [
                    "__init__",
                    "from_tuples",
                    "_render_part",
                    "_render_parts",
                    "render_headers",
                    "make_multipart"
                ]
            },
            "routes": [],
            "complexity": 17
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\exceptions.py": {
            "functions": [
                "__init__",
                "__reduce__",
                "__init__",
                "__reduce__",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__repr__",
                "__init__",
                "__repr__",
                "__init__",
                "__init__"
            ],
            "classes": {
                "HTTPError": [],
                "HTTPWarning": [],
                "PoolError": [
                    "__init__",
                    "__reduce__"
                ],
                "RequestError": [
                    "__init__",
                    "__reduce__"
                ],
                "SSLError": [],
                "ProxyError": [
                    "__init__"
                ],
                "DecodeError": [],
                "ProtocolError": [],
                "MaxRetryError": [
                    "__init__"
                ],
                "HostChangedError": [
                    "__init__"
                ],
                "TimeoutStateError": [],
                "TimeoutError": [],
                "ReadTimeoutError": [],
                "ConnectTimeoutError": [],
                "NewConnectionError": [],
                "EmptyPoolError": [],
                "ClosedPoolError": [],
                "LocationValueError": [],
                "LocationParseError": [
                    "__init__"
                ],
                "URLSchemeUnknown": [
                    "__init__"
                ],
                "ResponseError": [],
                "SecurityWarning": [],
                "SubjectAltNameWarning": [],
                "InsecureRequestWarning": [],
                "SystemTimeWarning": [],
                "InsecurePlatformWarning": [],
                "SNIMissingWarning": [],
                "DependencyWarning": [],
                "ResponseNotChunked": [],
                "BodyNotHttplibCompatible": [],
                "IncompleteRead": [
                    "__init__",
                    "__repr__"
                ],
                "InvalidChunkLength": [
                    "__init__",
                    "__repr__"
                ],
                "InvalidHeader": [],
                "ProxySchemeUnknown": [
                    "__init__"
                ],
                "ProxySchemeUnsupported": [],
                "HeaderParsingError": [
                    "__init__"
                ],
                "UnrewindableBodyError": []
            },
            "routes": [],
            "complexity": 30
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\response.py": {
            "functions": [
                "_get_decoder",
                "__init__",
                "__getattr__",
                "decompress",
                "__init__",
                "__getattr__",
                "decompress",
                "__init__",
                "flush",
                "decompress",
                "__init__",
                "get_redirect_location",
                "release_conn",
                "drain_conn",
                "data",
                "connection",
                "isclosed",
                "tell",
                "_init_length",
                "_init_decoder",
                "_decode",
                "_flush_decoder",
                "_error_catcher",
                "_fp_read",
                "read",
                "stream",
                "from_httplib",
                "getheaders",
                "getheader",
                "info",
                "close",
                "closed",
                "fileno",
                "flush",
                "readable",
                "readinto",
                "supports_chunked_reads",
                "_update_chunk_length",
                "_handle_chunk",
                "read_chunked",
                "geturl",
                "__iter__",
                "__init__",
                "flush"
            ],
            "classes": {
                "DeflateDecoder": [
                    "__init__",
                    "__getattr__",
                    "decompress"
                ],
                "GzipDecoderState": [],
                "GzipDecoder": [
                    "__init__",
                    "__getattr__",
                    "decompress"
                ],
                "MultiDecoder": [
                    "__init__",
                    "flush",
                    "decompress"
                ],
                "HTTPResponse": [
                    "__init__",
                    "get_redirect_location",
                    "release_conn",
                    "drain_conn",
                    "data",
                    "connection",
                    "isclosed",
                    "tell",
                    "_init_length",
                    "_init_decoder",
                    "_decode",
                    "_flush_decoder",
                    "_error_catcher",
                    "_fp_read",
                    "read",
                    "stream",
                    "from_httplib",
                    "getheaders",
                    "getheader",
                    "info",
                    "close",
                    "closed",
                    "fileno",
                    "flush",
                    "readable",
                    "readinto",
                    "supports_chunked_reads",
                    "_update_chunk_length",
                    "_handle_chunk",
                    "read_chunked",
                    "geturl",
                    "__iter__"
                ],
                "BrotliDecoder": [
                    "__init__",
                    "flush"
                ]
            },
            "routes": [],
            "complexity": 87
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\request.py": {
            "functions": [
                "__init__",
                "urlopen",
                "request",
                "request_encode_url",
                "request_encode_body",
                "__call__"
            ],
            "classes": {
                "RequestMethods": [
                    "__init__",
                    "urlopen",
                    "request",
                    "request_encode_url",
                    "request_encode_body"
                ],
                "RequestModule": [
                    "__call__"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\connectionpool.py": {
            "functions": [
                "connection_from_url",
                "_normalize_host",
                "_close_pool_connections",
                "__init__",
                "__str__",
                "__enter__",
                "__exit__",
                "close",
                "__init__",
                "_new_conn",
                "_get_conn",
                "_put_conn",
                "_validate_conn",
                "_prepare_proxy",
                "_get_timeout",
                "_raise_timeout",
                "_make_request",
                "_absolute_url",
                "close",
                "is_same_host",
                "urlopen",
                "__init__",
                "_prepare_conn",
                "_prepare_proxy",
                "_new_conn",
                "_validate_conn",
                "_is_ssl_error_message_from_http_proxy"
            ],
            "classes": {
                "ConnectionPool": [
                    "__init__",
                    "__str__",
                    "__enter__",
                    "__exit__",
                    "close"
                ],
                "HTTPConnectionPool": [
                    "__init__",
                    "_new_conn",
                    "_get_conn",
                    "_put_conn",
                    "_validate_conn",
                    "_prepare_proxy",
                    "_get_timeout",
                    "_raise_timeout",
                    "_make_request",
                    "_absolute_url",
                    "close",
                    "is_same_host",
                    "urlopen"
                ],
                "HTTPSConnectionPool": [
                    "__init__",
                    "_prepare_conn",
                    "_prepare_proxy",
                    "_new_conn",
                    "_validate_conn"
                ]
            },
            "routes": [],
            "complexity": 50
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\poolmanager.py": {
            "functions": [
                "_default_key_normalizer",
                "proxy_from_url",
                "__init__",
                "__enter__",
                "__exit__",
                "_new_pool",
                "clear",
                "connection_from_host",
                "connection_from_context",
                "connection_from_pool_key",
                "connection_from_url",
                "_merge_pool_kwargs",
                "_proxy_requires_url_absolute_form",
                "_validate_proxy_scheme_url_selection",
                "urlopen",
                "__init__",
                "connection_from_host",
                "_set_proxy_headers",
                "urlopen"
            ],
            "classes": {
                "PoolManager": [
                    "__init__",
                    "__enter__",
                    "__exit__",
                    "_new_pool",
                    "clear",
                    "connection_from_host",
                    "connection_from_context",
                    "connection_from_pool_key",
                    "connection_from_url",
                    "_merge_pool_kwargs",
                    "_proxy_requires_url_absolute_form",
                    "_validate_proxy_scheme_url_selection",
                    "urlopen"
                ],
                "ProxyManager": [
                    "__init__",
                    "connection_from_host",
                    "_set_proxy_headers",
                    "urlopen"
                ]
            },
            "routes": [],
            "complexity": 36
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\_version.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\appengine.py": {
            "functions": [
                "__init__",
                "__enter__",
                "__exit__",
                "urlopen",
                "_urlfetch_response_to_http_response",
                "_get_absolute_timeout",
                "_get_retries"
            ],
            "classes": {
                "AppEnginePlatformWarning": [],
                "AppEnginePlatformError": [],
                "AppEngineManager": [
                    "__init__",
                    "__enter__",
                    "__exit__",
                    "urlopen",
                    "_urlfetch_response_to_http_response",
                    "_get_absolute_timeout",
                    "_get_retries"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\_appengine_environ.py": {
            "functions": [
                "is_appengine",
                "is_appengine_sandbox",
                "is_local_appengine",
                "is_prod_appengine",
                "is_prod_appengine_mvms"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\_securetransport\\bindings.py": {
            "functions": [
                "load_cdll"
            ],
            "classes": {
                "CFConst": [],
                "SecurityConst": []
            },
            "routes": [],
            "complexity": 1
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\pyopenssl.py": {
            "functions": [
                "inject_into_urllib3",
                "extract_from_urllib3",
                "_validate_dependencies_met",
                "_dnsname_to_stdlib",
                "get_subj_alt_name",
                "_verify_callback",
                "idna_encode",
                "__init__",
                "fileno",
                "_decref_socketios",
                "recv",
                "recv_into",
                "settimeout",
                "_send_until_done",
                "sendall",
                "shutdown",
                "close",
                "getpeercert",
                "version",
                "_reuse",
                "_drop",
                "makefile",
                "__init__",
                "options",
                "options",
                "verify_mode",
                "verify_mode",
                "set_default_verify_paths",
                "set_ciphers",
                "load_verify_locations",
                "load_cert_chain",
                "set_alpn_protocols",
                "wrap_socket"
            ],
            "classes": {
                "WrappedSocket": [
                    "__init__",
                    "fileno",
                    "_decref_socketios",
                    "recv",
                    "recv_into",
                    "settimeout",
                    "_send_until_done",
                    "sendall",
                    "shutdown",
                    "close",
                    "getpeercert",
                    "version",
                    "_reuse",
                    "_drop"
                ],
                "PyOpenSSLContext": [
                    "__init__",
                    "options",
                    "options",
                    "verify_mode",
                    "verify_mode",
                    "set_default_verify_paths",
                    "set_ciphers",
                    "load_verify_locations",
                    "load_cert_chain",
                    "set_alpn_protocols",
                    "wrap_socket"
                ],
                "UnsupportedExtension": []
            },
            "routes": [],
            "complexity": 58
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\socks.py": {
            "functions": [
                "__init__",
                "_new_conn",
                "__init__"
            ],
            "classes": {
                "SOCKSConnection": [
                    "__init__",
                    "_new_conn"
                ],
                "SOCKSHTTPSConnection": [],
                "SOCKSHTTPConnectionPool": [],
                "SOCKSHTTPSConnectionPool": [],
                "SOCKSProxyManager": [
                    "__init__"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\_securetransport\\low_level.py": {
            "functions": [
                "_cf_data_from_bytes",
                "_cf_dictionary_from_tuples",
                "_cfstr",
                "_create_cfstring_array",
                "_cf_string_to_unicode",
                "_assert_no_error",
                "_cert_array_from_pem",
                "_is_cert",
                "_is_identity",
                "_temporary_keychain",
                "_load_items_from_file",
                "_load_client_cert_chain",
                "_build_tls_unknown_ca_alert"
            ],
            "classes": {},
            "routes": [],
            "complexity": 13
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\ntlmpool.py": {
            "functions": [
                "__init__",
                "_new_conn",
                "urlopen"
            ],
            "classes": {
                "NTLMConnectionPool": [
                    "__init__",
                    "_new_conn",
                    "urlopen"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\packages\\backports\\makefile.py": {
            "functions": [
                "backport_makefile"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\packages\\backports\\weakref_finalize.py": {
            "functions": [
                "__init__",
                "__call__",
                "detach",
                "peek",
                "alive",
                "atexit",
                "atexit",
                "__repr__",
                "_select_for_exit",
                "_exitfunc"
            ],
            "classes": {
                "weakref_finalize": [
                    "__init__",
                    "__call__",
                    "detach",
                    "peek",
                    "alive",
                    "atexit",
                    "atexit",
                    "__repr__",
                    "_select_for_exit",
                    "_exitfunc"
                ],
                "_Info": []
            },
            "routes": [],
            "complexity": 20
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\packages\\six.py": {
            "functions": [
                "_add_doc",
                "_import_module",
                "add_move",
                "remove_move",
                "assertCountEqual",
                "assertRaisesRegex",
                "assertRegex",
                "assertNotRegex",
                "with_metaclass",
                "add_metaclass",
                "ensure_binary",
                "ensure_str",
                "ensure_text",
                "python_2_unicode_compatible",
                "__init__",
                "__get__",
                "__init__",
                "_resolve",
                "__getattr__",
                "__init__",
                "__dir__",
                "__init__",
                "_resolve",
                "__init__",
                "_add_module",
                "_get_module",
                "find_module",
                "find_spec",
                "__get_module",
                "load_module",
                "is_package",
                "get_code",
                "create_module",
                "exec_module",
                "__dir__",
                "get_unbound_function",
                "create_unbound_method",
                "get_unbound_function",
                "create_bound_method",
                "create_unbound_method",
                "iterkeys",
                "itervalues",
                "iteritems",
                "iterlists",
                "iterkeys",
                "itervalues",
                "iteritems",
                "iterlists",
                "b",
                "u",
                "b",
                "u",
                "byte2int",
                "indexbytes",
                "reraise",
                "exec_",
                "raise_from",
                "print_",
                "print_",
                "_update_wrapper",
                "wraps",
                "wrapper",
                "advance_iterator",
                "callable",
                "next",
                "write",
                "__new__",
                "__prepare__",
                "__len__"
            ],
            "classes": {
                "_LazyDescr": [
                    "__init__",
                    "__get__"
                ],
                "MovedModule": [
                    "__init__",
                    "_resolve",
                    "__getattr__"
                ],
                "_LazyModule": [
                    "__init__",
                    "__dir__"
                ],
                "MovedAttribute": [
                    "__init__",
                    "_resolve"
                ],
                "_SixMetaPathImporter": [
                    "__init__",
                    "_add_module",
                    "_get_module",
                    "find_module",
                    "find_spec",
                    "__get_module",
                    "load_module",
                    "is_package",
                    "get_code",
                    "create_module",
                    "exec_module"
                ],
                "_MovedItems": [],
                "Module_six_moves_urllib_parse": [],
                "Module_six_moves_urllib_error": [],
                "Module_six_moves_urllib_request": [],
                "Module_six_moves_urllib_response": [],
                "Module_six_moves_urllib_robotparser": [],
                "Module_six_moves_urllib": [
                    "__dir__"
                ],
                "Iterator": [
                    "next"
                ],
                "metaclass": [
                    "__new__",
                    "__prepare__"
                ],
                "X": [
                    "__len__"
                ]
            },
            "routes": [],
            "complexity": 94
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\_securetransport\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\packages\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\packages\\backports\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\connection.py": {
            "functions": [
                "is_connection_dropped",
                "create_connection",
                "_set_socket_options",
                "allowed_gai_family",
                "_has_ipv6"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\contrib\\securetransport.py": {
            "functions": [
                "inject_into_urllib3",
                "extract_from_urllib3",
                "_read_callback",
                "_write_callback",
                "__init__",
                "_raise_on_error",
                "_set_ciphers",
                "_set_alpn_protocols",
                "_custom_validate",
                "_evaluate_trust",
                "handshake",
                "fileno",
                "_decref_socketios",
                "recv",
                "recv_into",
                "settimeout",
                "gettimeout",
                "send",
                "sendall",
                "shutdown",
                "close",
                "getpeercert",
                "version",
                "_reuse",
                "_drop",
                "makefile",
                "makefile",
                "__init__",
                "check_hostname",
                "check_hostname",
                "options",
                "options",
                "verify_mode",
                "verify_mode",
                "set_default_verify_paths",
                "load_default_certs",
                "set_ciphers",
                "load_verify_locations",
                "load_cert_chain",
                "set_alpn_protocols",
                "wrap_socket"
            ],
            "classes": {
                "WrappedSocket": [
                    "__init__",
                    "_raise_on_error",
                    "_set_ciphers",
                    "_set_alpn_protocols",
                    "_custom_validate",
                    "_evaluate_trust",
                    "handshake",
                    "fileno",
                    "_decref_socketios",
                    "recv",
                    "recv_into",
                    "settimeout",
                    "gettimeout",
                    "send",
                    "sendall",
                    "shutdown",
                    "close",
                    "getpeercert",
                    "version",
                    "_reuse",
                    "_drop"
                ],
                "SecureTransportContext": [
                    "__init__",
                    "check_hostname",
                    "check_hostname",
                    "options",
                    "options",
                    "verify_mode",
                    "verify_mode",
                    "set_default_verify_paths",
                    "load_default_certs",
                    "set_ciphers",
                    "load_verify_locations",
                    "load_cert_chain",
                    "set_alpn_protocols",
                    "wrap_socket"
                ]
            },
            "routes": [],
            "complexity": 76
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\request.py": {
            "functions": [
                "make_headers",
                "set_file_position",
                "rewind_body"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\proxy.py": {
            "functions": [
                "connection_requires_http_tunnel",
                "create_proxy_ssl_context"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\retry.py": {
            "functions": [
                "DEFAULT_METHOD_WHITELIST",
                "DEFAULT_METHOD_WHITELIST",
                "DEFAULT_REDIRECT_HEADERS_BLACKLIST",
                "DEFAULT_REDIRECT_HEADERS_BLACKLIST",
                "BACKOFF_MAX",
                "BACKOFF_MAX",
                "__init__",
                "new",
                "from_int",
                "get_backoff_time",
                "parse_retry_after",
                "get_retry_after",
                "sleep_for_retry",
                "_sleep_backoff",
                "sleep",
                "_is_connection_error",
                "_is_read_error",
                "_is_method_retryable",
                "is_retry",
                "is_exhausted",
                "increment",
                "__repr__",
                "__getattr__"
            ],
            "classes": {
                "_RetryMeta": [
                    "DEFAULT_METHOD_WHITELIST",
                    "DEFAULT_METHOD_WHITELIST",
                    "DEFAULT_REDIRECT_HEADERS_BLACKLIST",
                    "DEFAULT_REDIRECT_HEADERS_BLACKLIST",
                    "BACKOFF_MAX",
                    "BACKOFF_MAX"
                ],
                "Retry": [
                    "__init__",
                    "new",
                    "from_int",
                    "get_backoff_time",
                    "parse_retry_after",
                    "get_retry_after",
                    "sleep_for_retry",
                    "_sleep_backoff",
                    "sleep",
                    "_is_connection_error",
                    "_is_read_error",
                    "_is_method_retryable",
                    "is_retry",
                    "is_exhausted",
                    "increment",
                    "__repr__",
                    "__getattr__"
                ]
            },
            "routes": [],
            "complexity": 46
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\response.py": {
            "functions": [
                "is_fp_closed",
                "assert_header_parsing",
                "is_response_to_head"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\queue.py": {
            "functions": [
                "_init",
                "_qsize",
                "_put",
                "_get"
            ],
            "classes": {
                "LifoQueue": [
                    "_init",
                    "_qsize",
                    "_put",
                    "_get"
                ]
            },
            "routes": [],
            "complexity": 8
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\ssltransport.py": {
            "functions": [
                "_validate_ssl_context_for_tls_in_tls",
                "__init__",
                "__enter__",
                "__exit__",
                "fileno",
                "read",
                "recv",
                "recv_into",
                "sendall",
                "send",
                "makefile",
                "unwrap",
                "close",
                "getpeercert",
                "version",
                "cipher",
                "selected_alpn_protocol",
                "selected_npn_protocol",
                "shared_ciphers",
                "compression",
                "settimeout",
                "gettimeout",
                "_decref_socketios",
                "_wrap_ssl_read",
                "_ssl_io_loop"
            ],
            "classes": {
                "SSLTransport": [
                    "_validate_ssl_context_for_tls_in_tls",
                    "__init__",
                    "__enter__",
                    "__exit__",
                    "fileno",
                    "read",
                    "recv",
                    "recv_into",
                    "sendall",
                    "send",
                    "makefile",
                    "unwrap",
                    "close",
                    "getpeercert",
                    "version",
                    "cipher",
                    "selected_alpn_protocol",
                    "selected_npn_protocol",
                    "shared_ciphers",
                    "compression",
                    "settimeout",
                    "gettimeout",
                    "_decref_socketios",
                    "_wrap_ssl_read",
                    "_ssl_io_loop"
                ]
            },
            "routes": [],
            "complexity": 50
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\timeout.py": {
            "functions": [
                "__init__",
                "__repr__",
                "resolve_default_timeout",
                "_validate_timeout",
                "from_float",
                "clone",
                "start_connect",
                "get_connect_duration",
                "connect_timeout",
                "read_timeout"
            ],
            "classes": {
                "Timeout": [
                    "__init__",
                    "__repr__",
                    "resolve_default_timeout",
                    "_validate_timeout",
                    "from_float",
                    "clone",
                    "start_connect",
                    "get_connect_duration",
                    "connect_timeout",
                    "read_timeout"
                ]
            },
            "routes": [],
            "complexity": 20
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\url.py": {
            "functions": [
                "split_first",
                "_encode_invalid_chars",
                "_remove_path_dot_segments",
                "_normalize_host",
                "_idna_encode",
                "_encode_target",
                "parse_url",
                "get_host",
                "__new__",
                "hostname",
                "request_uri",
                "netloc",
                "url",
                "__str__",
                "ensure_type"
            ],
            "classes": {
                "Url": [
                    "__new__",
                    "hostname",
                    "request_uri",
                    "netloc",
                    "url",
                    "__str__"
                ]
            },
            "routes": [],
            "complexity": 21
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\ssl_.py": {
            "functions": [
                "_const_compare_digest_backport",
                "assert_fingerprint",
                "resolve_cert_reqs",
                "resolve_ssl_version",
                "create_urllib3_context",
                "ssl_wrap_socket",
                "is_ipaddress",
                "_is_key_file_encrypted",
                "_ssl_wrap_socket_impl",
                "disable_check_hostname",
                "__init__",
                "load_cert_chain",
                "load_verify_locations",
                "set_ciphers",
                "wrap_socket"
            ],
            "classes": {
                "SSLContext": [
                    "__init__",
                    "load_cert_chain",
                    "load_verify_locations",
                    "set_ciphers",
                    "wrap_socket"
                ]
            },
            "routes": [],
            "complexity": 20
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\wait.py": {
            "functions": [
                "select_wait_for_socket",
                "poll_wait_for_socket",
                "null_wait_for_socket",
                "_have_working_poll",
                "wait_for_socket",
                "wait_for_read",
                "wait_for_write",
                "_retry_on_intr",
                "_retry_on_intr",
                "do_poll"
            ],
            "classes": {
                "NoWayToWaitForSocketError": []
            },
            "routes": [],
            "complexity": 10
        },
        "content\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "content\\AletheiaContentDispatcher.py": {
            "functions": [
                "__init__",
                "execute_full_dispatch"
            ],
            "classes": {
                "AletheiaContentDispatcher": [
                    "__init__",
                    "execute_full_dispatch"
                ]
            },
            "routes": [],
            "complexity": 4
        },
        "clean_venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\ssl_match_hostname.py": {
            "functions": [
                "_dnsname_match",
                "_to_unicode",
                "_ipaddress_match",
                "match_hostname"
            ],
            "classes": {
                "CertificateError": []
            },
            "routes": [],
            "complexity": 4
        },
        "core\\AgentDispatcher.py": {
            "functions": [
                "__init__",
                "_load_config",
                "add_task",
                "_start_workers",
                "_worker_loop",
                "_get_next_task",
                "_can_execute_task",
                "_execute_task",
                "_dispatch_to_agent",
                "_execute_social_task",
                "_execute_chat_task",
                "_execute_reinforcement_task",
                "_execute_refactor_task",
                "_execute_test_task",
                "_execute_doc_task",
                "_retry_task",
                "_allocate_resources",
                "_release_resources",
                "_update_performance_metrics",
                "get_task_status",
                "cancel_task",
                "get_performance_metrics",
                "shutdown",
                "__enter__",
                "__exit__"
            ],
            "classes": {
                "TaskPriority": [],
                "TaskStatus": [],
                "Task": [],
                "AgentDispatcher": [
                    "__init__",
                    "_load_config",
                    "add_task",
                    "_start_workers",
                    "_worker_loop",
                    "_get_next_task",
                    "_can_execute_task",
                    "_execute_task",
                    "_dispatch_to_agent",
                    "_execute_social_task",
                    "_execute_chat_task",
                    "_execute_reinforcement_task",
                    "_execute_refactor_task",
                    "_execute_test_task",
                    "_execute_doc_task",
                    "_retry_task",
                    "_allocate_resources",
                    "_release_resources",
                    "_update_performance_metrics",
                    "get_task_status",
                    "cancel_task",
                    "get_performance_metrics",
                    "shutdown",
                    "__enter__",
                    "__exit__"
                ]
            },
            "routes": [],
            "complexity": 50
        },
        "core\\AletheiaFeedbackLoopManager.py": {
            "functions": [
                "__init__",
                "generate_feedback_loops",
                "_calculate_success_rate",
                "_get_top_tags",
                "_auto_adjust_rate_limits",
                "export_feedback_report",
                "process_feedback"
            ],
            "classes": {
                "AletheiaFeedbackLoopManager": [
                    "__init__",
                    "generate_feedback_loops",
                    "_calculate_success_rate",
                    "_get_top_tags",
                    "_auto_adjust_rate_limits",
                    "export_feedback_report",
                    "process_feedback"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "core\\AIOutputLogAnalyzer.py": {
            "functions": [
                "__init__",
                "_log",
                "load_context_db",
                "save_context_db",
                "iterate_logs",
                "_validate_log",
                "extract_context_from_logs",
                "get_recent_context",
                "get_user_context",
                "get_platform_context",
                "identify_community_champions",
                "trigger_community_invites",
                "summarize",
                "export_summary_report",
                "send_discord_report_sync",
                "_parse_date"
            ],
            "classes": {
                "AIOutputLogAnalyzer": [
                    "__init__",
                    "_log",
                    "load_context_db",
                    "save_context_db",
                    "iterate_logs",
                    "_validate_log",
                    "extract_context_from_logs",
                    "get_recent_context",
                    "get_user_context",
                    "get_platform_context",
                    "identify_community_champions",
                    "trigger_community_invites",
                    "summarize",
                    "export_summary_report",
                    "send_discord_report_sync",
                    "_parse_date"
                ]
            },
            "routes": [],
            "complexity": 32
        },
        "core\\config.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\ChatManager.py": {
            "functions": [
                "sanitize_filename",
                "__init__",
                "start",
                "send_prompt",
                "get_all_chat_titles",
                "execute_prompts_single_chat",
                "analyze_execution_response",
                "shutdown_driver",
                "send_chat_prompt",
                "switch_execution_mode"
            ],
            "classes": {
                "ChatManager": [
                    "__init__",
                    "start",
                    "send_prompt",
                    "get_all_chat_titles",
                    "execute_prompts_single_chat",
                    "analyze_execution_response",
                    "shutdown_driver",
                    "send_chat_prompt",
                    "switch_execution_mode"
                ]
            },
            "routes": [],
            "complexity": 19
        },
        "core\\AletheiaPromptManager.py": {
            "functions": [
                "__init__",
                "load_all_memory_states",
                "save_all_memory_states",
                "start_conversation_cycle",
                "end_conversation_cycle",
                "record_conversation",
                "get_prompt",
                "load_conversation_memory",
                "save_conversation_memory",
                "load_cycle_memory",
                "save_cycle_memory",
                "_load_json_file",
                "_merge_cycle_memory_updates",
                "list_available_prompts",
                "load_memory_state",
                "save_memory_state",
                "parse_memory_updates",
                "_extract_memory_update_block",
                "_merge_memory_updates",
                "archive_episode",
                "_log_memory_diff",
                "review_memory_log",
                "_async_save",
                "save_task"
            ],
            "classes": {
                "AletheiaPromptManager": [
                    "__init__",
                    "load_all_memory_states",
                    "save_all_memory_states",
                    "start_conversation_cycle",
                    "end_conversation_cycle",
                    "record_conversation",
                    "get_prompt",
                    "load_conversation_memory",
                    "save_conversation_memory",
                    "load_cycle_memory",
                    "save_cycle_memory",
                    "_load_json_file",
                    "_merge_cycle_memory_updates",
                    "list_available_prompts",
                    "load_memory_state",
                    "save_memory_state",
                    "parse_memory_updates",
                    "_extract_memory_update_block",
                    "_merge_memory_updates",
                    "archive_episode",
                    "_log_memory_diff",
                    "review_memory_log",
                    "_async_save"
                ]
            },
            "routes": [],
            "complexity": 47
        },
        "core\\bootstrap.py": {
            "functions": [
                "get_bootstrap_paths",
                "register",
                "get_paths"
            ],
            "classes": {
                "_PathRegistry": [
                    "register",
                    "get_paths"
                ]
            },
            "routes": [],
            "complexity": 5
        },
        "core\\CursorSessionManager.py": {
            "functions": [
                "__init__",
                "focus_cursor_window",
                "generate_prompt",
                "safe_copy_to_clipboard",
                "execute_prompt",
                "switch_mode"
            ],
            "classes": {
                "CursorSessionManager": [
                    "__init__",
                    "focus_cursor_window",
                    "generate_prompt",
                    "safe_copy_to_clipboard",
                    "execute_prompt",
                    "switch_mode"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "core\\chat_engine_simple.py": {
            "functions": [
                "__init__",
                "start_browser",
                "close",
                "__init__",
                "initialize",
                "shutdown",
                "get_driver_manager",
                "is_initialized"
            ],
            "classes": {
                "SimpleDriverManager": [
                    "__init__",
                    "start_browser",
                    "close"
                ],
                "SimpleChatEngineManager": [
                    "__init__",
                    "initialize",
                    "shutdown",
                    "get_driver_manager",
                    "is_initialized"
                ]
            },
            "routes": [],
            "complexity": 16
        },
        "core\\ConsoleLogger.py": {
            "functions": [
                "__init__",
                "log",
                "log_error",
                "log_debug",
                "log_event",
                "log_system_event"
            ],
            "classes": {
                "ConsoleLogger": [
                    "__init__",
                    "log",
                    "log_error",
                    "log_debug",
                    "log_event",
                    "log_system_event"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "core\\config_base.py": {
            "functions": [
                "__init__",
                "_load_env",
                "get_env",
                "_validate_required_keys"
            ],
            "classes": {
                "ConfigBase": [
                    "__init__",
                    "_load_env",
                    "get_env",
                    "_validate_required_keys"
                ]
            },
            "routes": [],
            "complexity": 8
        },
        "core\\CycleExecutionService.py": {
            "functions": [
                "__init__",
                "run_cycle"
            ],
            "classes": {
                "CycleExecutionService": [
                    "__init__",
                    "run_cycle"
                ]
            },
            "routes": [],
            "complexity": 4
        },
        "core\\ConfigManager.py": {
            "functions": [
                "__init__",
                "logger",
                "set_logger",
                "_start_auto_reload",
                "_config_changed",
                "reload",
                "_load_config",
                "_create_default_config",
                "_apply_env_overrides",
                "_validate_config",
                "get",
                "set",
                "_get_nested_value",
                "_set_nested_value",
                "_save_config",
                "get_all",
                "reset",
                "merge",
                "create_driver",
                "_get_cached_driver",
                "__new__",
                "get_instance",
                "get",
                "set",
                "get_all",
                "reload",
                "reset",
                "merge",
                "watch_config",
                "validate_dict",
                "deep_merge"
            ],
            "classes": {
                "ConfigValidationError": [],
                "ConfigManager": [
                    "__init__",
                    "logger",
                    "set_logger",
                    "_start_auto_reload",
                    "_config_changed",
                    "reload",
                    "_load_config",
                    "_create_default_config",
                    "_apply_env_overrides",
                    "_validate_config",
                    "get",
                    "set",
                    "_get_nested_value",
                    "_set_nested_value",
                    "_save_config",
                    "get_all",
                    "reset",
                    "merge",
                    "create_driver",
                    "_get_cached_driver"
                ],
                "ConfigurationSingleton": [
                    "__new__",
                    "get_instance",
                    "get",
                    "set",
                    "get_all",
                    "reload",
                    "reset",
                    "merge"
                ]
            },
            "routes": [],
            "complexity": 59
        },
        "core\\DiscordLogger.py": {
            "functions": [
                "__init__",
                "log",
                "log_error",
                "log_debug",
                "log_event",
                "log_system_event"
            ],
            "classes": {
                "DiscordLogger": [
                    "__init__",
                    "log",
                    "log_error",
                    "log_debug",
                    "log_event",
                    "log_system_event"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "core\\DiscordBatchDispatcher.py": {
            "functions": [
                "__init__",
                "start",
                "stop",
                "queue_message",
                "queue_batch",
                "_dispatch_loop",
                "_process_batch",
                "_send_channel_messages",
                "get_queue_size",
                "clear_queue"
            ],
            "classes": {
                "DiscordBatchDispatcher": [
                    "__init__",
                    "start",
                    "stop",
                    "queue_message",
                    "queue_batch",
                    "_dispatch_loop",
                    "_process_batch",
                    "_send_channel_messages",
                    "get_queue_size",
                    "clear_queue"
                ]
            },
            "routes": [],
            "complexity": 20
        },
        "core\\DiscordQueueProcessor.py": {
            "functions": [
                "__init__",
                "queue_response"
            ],
            "classes": {
                "DiscordQueueProcessor": [
                    "__init__",
                    "queue_response"
                ]
            },
            "routes": [],
            "complexity": 4
        },
        "core\\DiscordTemplateManager.py": {
            "functions": [
                "__init__",
                "_resolve_template_dir",
                "render_message",
                "list_templates"
            ],
            "classes": {
                "DiscordTemplateManager": [
                    "__init__",
                    "_resolve_template_dir",
                    "render_message",
                    "list_templates"
                ]
            },
            "routes": [],
            "complexity": 8
        },
        "core\\DriverSessionManager.py": {
            "functions": [
                "__init__",
                "initialize_driver",
                "get_driver",
                "_is_session_expired",
                "shutdown_driver",
                "refresh_session",
                "execute_with_retry",
                "get_session_info",
                "set_session_timeout",
                "clear_cookies"
            ],
            "classes": {
                "DriverSessionManager": [
                    "__init__",
                    "initialize_driver",
                    "get_driver",
                    "_is_session_expired",
                    "shutdown_driver",
                    "refresh_session",
                    "execute_with_retry",
                    "get_session_info",
                    "set_session_timeout",
                    "clear_cookies"
                ]
            },
            "routes": [],
            "complexity": 20
        },
        "core\\EngagementAgent.py": {
            "functions": [
                "__init__",
                "handle_mentions",
                "proactive_engagement",
                "_process_mention",
                "_process_proactive",
                "_log_interaction"
            ],
            "classes": {
                "EngagementAgent": [
                    "__init__",
                    "handle_mentions",
                    "proactive_engagement",
                    "_process_mention",
                    "_process_proactive",
                    "_log_interaction"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "core\\LoggerFactory.py": {
            "functions": [
                "get_logger"
            ],
            "classes": {
                "LoggerFactory": [
                    "get_logger"
                ]
            },
            "routes": [],
            "complexity": 2
        },
        "core\\EventMessageBuilder.py": {
            "functions": [
                "__init__",
                "on_modified",
                "on_created",
                "on_deleted",
                "__init__",
                "_start_template_watcher",
                "build_message",
                "list_available_templates",
                "clear_cache"
            ],
            "classes": {
                "TemplateChangeHandler": [
                    "__init__",
                    "on_modified",
                    "on_created",
                    "on_deleted"
                ],
                "EventMessageBuilder": [
                    "__init__",
                    "_start_template_watcher",
                    "build_message",
                    "list_available_templates",
                    "clear_cache"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "core\\DriverManager.py": {
            "functions": [
                "setup_logger",
                "main",
                "__new__",
                "__init__",
                "__enter__",
                "__exit__",
                "_get_cached_driver_path",
                "_download_driver_if_needed",
                "_is_session_expired",
                "refresh_session",
                "get_session_info",
                "set_session_timeout",
                "_create_chrome_options",
                "get_driver",
                "quit_driver",
                "save_cookies",
                "load_cookies",
                "clear_cookies",
                "is_logged_in",
                "execute_with_retry",
                "scroll_into_view",
                "manual_scroll",
                "update_options",
                "__del__"
            ],
            "classes": {
                "DriverManager": [
                    "__new__",
                    "__init__",
                    "__enter__",
                    "__exit__",
                    "_get_cached_driver_path",
                    "_download_driver_if_needed",
                    "_is_session_expired",
                    "refresh_session",
                    "get_session_info",
                    "set_session_timeout",
                    "_create_chrome_options",
                    "get_driver",
                    "quit_driver",
                    "save_cookies",
                    "load_cookies",
                    "clear_cookies",
                    "is_logged_in",
                    "execute_with_retry",
                    "scroll_into_view",
                    "manual_scroll",
                    "update_options",
                    "__del__"
                ]
            },
            "routes": [],
            "complexity": 46
        },
        "core\\DiscordManager.py": {
            "functions": [
                "__init__",
                "set_log_callback",
                "_log",
                "load_config",
                "save_config",
                "update_credentials",
                "map_prompt_to_channel",
                "unmap_prompt_channel",
                "get_channel_for_prompt",
                "_register_events",
                "_register_commands",
                "_build_status_message",
                "run_bot",
                "_run_bot_loop",
                "stop_bot",
                "send_message",
                "send_file",
                "send_dreamscape_episode",
                "send_prompt_response",
                "send_event_notification",
                "update_status",
                "test_connection",
                "__init__",
                "initUI",
                "load_prompt_types",
                "update_credentials",
                "map_prompt_to_channel",
                "unmap_selected_prompt",
                "refresh_prompt_channel_list"
            ],
            "classes": {
                "DiscordManager": [
                    "__init__",
                    "set_log_callback",
                    "_log",
                    "load_config",
                    "save_config",
                    "update_credentials",
                    "map_prompt_to_channel",
                    "unmap_prompt_channel",
                    "get_channel_for_prompt",
                    "_register_events",
                    "_register_commands",
                    "_build_status_message",
                    "run_bot",
                    "_run_bot_loop",
                    "stop_bot",
                    "send_message",
                    "send_file",
                    "send_dreamscape_episode",
                    "send_prompt_response",
                    "send_event_notification",
                    "update_status",
                    "test_connection"
                ],
                "DiscordSettingsDialog": [
                    "__init__",
                    "initUI",
                    "load_prompt_types",
                    "update_credentials",
                    "map_prompt_to_channel",
                    "unmap_selected_prompt",
                    "refresh_prompt_channel_list"
                ]
            },
            "routes": [],
            "complexity": 58
        },
        "core\\feedback.py": {
            "functions": [
                "__new__",
                "get_instance",
                "add_feedback",
                "get_feedback",
                "get_context_stats",
                "analyze_feedback"
            ],
            "classes": {
                "FeedbackSingleton": [
                    "__new__",
                    "get_instance",
                    "add_feedback",
                    "get_feedback",
                    "get_context_stats",
                    "analyze_feedback"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "core\\FileManager.py": {
            "functions": [
                "__init__",
                "save_response",
                "save_memory_state",
                "save_log",
                "archive_file",
                "_save_file",
                "load_file",
                "sanitize_filename",
                "list_episode_files",
                "read_file"
            ],
            "classes": {
                "FileManager": [
                    "__init__",
                    "save_response",
                    "save_memory_state",
                    "save_log",
                    "archive_file",
                    "_save_file",
                    "load_file",
                    "sanitize_filename",
                    "list_episode_files",
                    "read_file"
                ]
            },
            "routes": [],
            "complexity": 20
        },
        "core\\FileLogger.py": {
            "functions": [
                "__init__",
                "_get_log_file",
                "_rotate_logs",
                "_write_log",
                "log",
                "log_error",
                "log_debug",
                "log_event",
                "log_system_event"
            ],
            "classes": {
                "FileLogger": [
                    "__init__",
                    "_get_log_file",
                    "_rotate_logs",
                    "_write_log",
                    "log",
                    "log_error",
                    "log_debug",
                    "log_event",
                    "log_system_event"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "core\\OpenAIPromptEngine.py": {
            "functions": [
                "__init__",
                "_is_driver_alive",
                "render_prompt",
                "_retry",
                "send_prompt",
                "_wait_for_response_completion",
                "_scrape_response",
                "log_interaction",
                "execute"
            ],
            "classes": {
                "OpenAIPromptEngine": [
                    "__init__",
                    "_is_driver_alive",
                    "render_prompt",
                    "_retry",
                    "send_prompt",
                    "_wait_for_response_completion",
                    "_scrape_response",
                    "log_interaction",
                    "execute"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "core\\MemoryManager.py": {
            "functions": [
                "__init__",
                "_initialize_db",
                "record_interaction",
                "initialize_conversation",
                "get_conversation",
                "close",
                "__init__",
                "_load_memory",
                "_save_memory",
                "set",
                "get",
                "delete",
                "clear_segment",
                "get_segment_keys",
                "get_segment_size",
                "_save_segment",
                "get_stats",
                "optimize",
                "record_interaction",
                "initialize_conversation",
                "retrieve_conversation",
                "export_conversation_for_finetuning",
                "get_user_history",
                "user_sentiment_summary",
                "clear_user_history",
                "clear_platform_history",
                "generate_narrative",
                "close"
            ],
            "classes": {
                "DatabaseManager": [
                    "__init__",
                    "_initialize_db",
                    "record_interaction",
                    "initialize_conversation",
                    "get_conversation",
                    "close"
                ],
                "MemoryManager": [
                    "__init__",
                    "_load_memory",
                    "_save_memory",
                    "set",
                    "get",
                    "delete",
                    "clear_segment",
                    "get_segment_keys",
                    "get_segment_size",
                    "_save_segment",
                    "get_stats",
                    "optimize",
                    "record_interaction",
                    "initialize_conversation",
                    "retrieve_conversation",
                    "export_conversation_for_finetuning",
                    "get_user_history",
                    "user_sentiment_summary",
                    "clear_user_history",
                    "clear_platform_history",
                    "generate_narrative",
                    "close"
                ]
            },
            "routes": [],
            "complexity": 56
        },
        "core\\OptimizedMemoryManager.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\PromptCycleOrchestrator.py": {
            "functions": [
                "__init__",
                "initialize_chat_manager",
                "execute_single_cycle",
                "execute_multi_cycle",
                "get_available_prompts",
                "get_prompt",
                "save_prompt",
                "reset_prompts",
                "shutdown"
            ],
            "classes": {
                "PromptCycleOrchestrator": [
                    "__init__",
                    "initialize_chat_manager",
                    "execute_single_cycle",
                    "execute_multi_cycle",
                    "get_available_prompts",
                    "get_prompt",
                    "save_prompt",
                    "reset_prompts",
                    "shutdown"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "core\\PromptEngine.py": {
            "functions": [
                "__init__",
                "send_prompt",
                "fetch_response",
                "wait_for_stable_response",
                "log_ai_response",
                "clean_response",
                "__init__",
                "_load_config",
                "execute_prompt",
                "_get_optimized_prompt",
                "_optimize_prompt",
                "_enhance_prompt",
                "_execute_with_retry",
                "_analyze_response",
                "_assess_creativity",
                "_assess_technical_accuracy",
                "_record_feedback",
                "_calculate_feedback_score",
                "_update_stats",
                "get_stats"
            ],
            "classes": {
                "PromptEngine": [
                    "__init__",
                    "_load_config",
                    "execute_prompt",
                    "_get_optimized_prompt",
                    "_optimize_prompt",
                    "_enhance_prompt",
                    "_execute_with_retry",
                    "_analyze_response",
                    "_assess_creativity",
                    "_assess_technical_accuracy",
                    "_record_feedback",
                    "_calculate_feedback_score",
                    "_update_stats",
                    "get_stats"
                ],
                "PromptExecutionError": []
            },
            "routes": [],
            "complexity": 34
        },
        "core\\NarrativeAnalytics.py": {
            "functions": [
                "__init__",
                "analyze",
                "_summarize",
                "_analyze_sentiment",
                "_extract_keywords"
            ],
            "classes": {
                "NarrativeAnalytics": [
                    "__init__",
                    "analyze",
                    "_summarize",
                    "_analyze_sentiment",
                    "_extract_keywords"
                ]
            },
            "routes": [],
            "complexity": 10
        },
        "core\\PathManager.py": {
            "functions": [
                "__new__",
                "_generate_properties",
                "__new__",
                "_ensure_initialized",
                "register_path",
                "get_path",
                "ensure_directories",
                "list_paths",
                "get_relative_path",
                "describe_paths",
                "get_env_path",
                "get_rate_limit_state_path",
                "get_chrome_profile_path",
                "make_getter"
            ],
            "classes": {
                "PathManagerMeta": [
                    "__new__",
                    "_generate_properties"
                ],
                "PathManager": [
                    "__new__",
                    "_ensure_initialized",
                    "register_path",
                    "get_path",
                    "ensure_directories",
                    "list_paths",
                    "get_relative_path",
                    "describe_paths",
                    "get_env_path",
                    "get_rate_limit_state_path",
                    "get_chrome_profile_path"
                ]
            },
            "routes": [],
            "complexity": 27
        },
        "core\\ReinforcementEngine.py": {
            "functions": [
                "__init__",
                "load_memory",
                "save_memory",
                "detect_hallucination",
                "calculate_length_score",
                "detect_clarity_issues",
                "calculate_coherence_score",
                "analyze_response",
                "append_execution_log",
                "auto_tune_prompts",
                "append_tuning_log",
                "__init__",
                "initUI",
                "load_feedback",
                "display_feedback_details",
                "export_feedback",
                "clear_feedback",
                "auto_tune_prompts"
            ],
            "classes": {
                "ReinforcementEngine": [
                    "__init__",
                    "load_memory",
                    "save_memory",
                    "detect_hallucination",
                    "calculate_length_score",
                    "detect_clarity_issues",
                    "calculate_coherence_score",
                    "analyze_response",
                    "append_execution_log",
                    "auto_tune_prompts",
                    "append_tuning_log"
                ],
                "ReinforcementToolsDialog": [
                    "__init__",
                    "initUI",
                    "load_feedback",
                    "display_feedback_details",
                    "export_feedback",
                    "clear_feedback",
                    "auto_tune_prompts"
                ]
            },
            "routes": [],
            "complexity": 36
        },
        "core\\PromptResponseHandler.py": {
            "functions": [
                "__init__",
                "process_response"
            ],
            "classes": {
                "PromptResponseHandler": [
                    "__init__",
                    "process_response"
                ]
            },
            "routes": [],
            "complexity": 4
        },
        "core\\ReportExporter.py": {
            "functions": [
                "__init__",
                "export_markdown",
                "export_html",
                "send_discord_report",
                "send_discord_report_sync"
            ],
            "classes": {
                "ReportExporter": [
                    "__init__",
                    "export_markdown",
                    "export_html",
                    "send_discord_report",
                    "send_discord_report_sync"
                ]
            },
            "routes": [],
            "complexity": 10
        },
        "core\\reinforcement_tools.py": {
            "functions": [
                "__init__",
                "load_feedback",
                "show_feedback_details",
                "export_feedback",
                "clear_feedback",
                "auto_tune_prompts"
            ],
            "classes": {
                "ReinforcementToolsDialog": [
                    "__init__",
                    "load_feedback",
                    "show_feedback_details",
                    "export_feedback",
                    "clear_feedback",
                    "auto_tune_prompts"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "core\\ReinforcementEvaluator.py": {
            "functions": [
                "__init__",
                "_load_memory_data",
                "_create_default_memory",
                "_save_memory_data",
                "evaluate_response",
                "_calculate_score",
                "_generate_feedback",
                "_update_prompt_performance",
                "get_prompt_insights",
                "_calculate_score_trend",
                "get_memory_summary",
                "clear_memory"
            ],
            "classes": {
                "ReinforcementEvaluator": [
                    "__init__",
                    "_load_memory_data",
                    "_create_default_memory",
                    "_save_memory_data",
                    "evaluate_response",
                    "_calculate_score",
                    "_generate_feedback",
                    "_update_prompt_performance",
                    "get_prompt_insights",
                    "_calculate_score_trend",
                    "get_memory_summary",
                    "clear_memory"
                ]
            },
            "routes": [],
            "complexity": 24
        },
        "core\\ResilientPromptExecutor.py": {
            "functions": [
                "__init__",
                "execute_with_retry",
                "_execute_prompt",
                "_categorize_error",
                "_cache_response",
                "_get_cached_response",
                "_get_cache_key",
                "_log_execution_result",
                "get_execution_stats",
                "clear_history"
            ],
            "classes": {
                "ExecutionStatus": [],
                "ResilientPromptExecutor": [
                    "__init__",
                    "execute_with_retry",
                    "_execute_prompt",
                    "_categorize_error",
                    "_cache_response",
                    "_get_cached_response",
                    "_get_cache_key",
                    "_log_execution_result",
                    "get_execution_stats",
                    "clear_history"
                ]
            },
            "routes": [],
            "complexity": 20
        },
        "core\\service_container.py": {
            "functions": [
                "__init__",
                "register",
                "get"
            ],
            "classes": {
                "ServiceContainer": [
                    "__init__",
                    "register",
                    "get"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "core\\template_loader.py": {
            "functions": [
                "get_base_template_dir",
                "discover_templates",
                "load_template",
                "__init__",
                "get_default_prompt_dir",
                "load_templates",
                "get_available_templates",
                "change_template_dir",
                "set_active_template",
                "render_template",
                "save_rendered_output",
                "validate_context",
                "_on_template_modified",
                "visit_node"
            ],
            "classes": {
                "TemplateManager": [
                    "__init__",
                    "get_default_prompt_dir",
                    "load_templates",
                    "get_available_templates",
                    "change_template_dir",
                    "set_active_template",
                    "render_template",
                    "save_rendered_output",
                    "validate_context",
                    "_on_template_modified"
                ]
            },
            "routes": [],
            "complexity": 24
        },
        "core\\ResponseHandler.py": {
            "functions": [
                "setup_logging",
                "parse_hybrid_response",
                "__init__",
                "_init_driver",
                "save_cookies",
                "load_cookies",
                "is_logged_in",
                "send_prompt",
                "fetch_response",
                "wait_for_stable_response",
                "clean_response",
                "handle_hybrid_response",
                "execute_prompt_cycle",
                "execute_prompts_on_all_chats",
                "shutdown"
            ],
            "classes": {
                "HybridResponseHandler": [
                    "parse_hybrid_response"
                ],
                "ResponseHandler": [
                    "__init__",
                    "_init_driver",
                    "save_cookies",
                    "load_cookies",
                    "is_logged_in",
                    "send_prompt",
                    "fetch_response",
                    "wait_for_stable_response",
                    "clean_response",
                    "handle_hybrid_response",
                    "execute_prompt_cycle",
                    "execute_prompts_on_all_chats",
                    "shutdown"
                ]
            },
            "routes": [],
            "complexity": 29
        },
        "core\\TaskOrchestrator.py": {
            "functions": [
                "__init__",
                "set_cycle_service",
                "execute_task"
            ],
            "classes": {
                "TaskOrchestrator": [
                    "__init__",
                    "set_cycle_service",
                    "execute_task"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "core\\SystemHealthMonitor.py": {
            "functions": [
                "__init__",
                "start_monitoring",
                "stop_monitoring",
                "_monitoring_loop",
                "perform_health_checks",
                "_check_driver",
                "_check_memory",
                "_check_thread_pool",
                "_check_system_resources",
                "_store_metrics",
                "_check_alerts",
                "get_system_health",
                "get_historical_metrics"
            ],
            "classes": {
                "HealthStatus": [],
                "HealthMetrics": [],
                "SystemHealthMonitor": [
                    "__init__",
                    "start_monitoring",
                    "stop_monitoring",
                    "_monitoring_loop",
                    "perform_health_checks",
                    "_check_driver",
                    "_check_memory",
                    "_check_thread_pool",
                    "_check_system_resources",
                    "_store_metrics",
                    "_check_alerts",
                    "get_system_health",
                    "get_historical_metrics"
                ]
            },
            "routes": [],
            "complexity": 26
        },
        "core\\UnifiedDiscordService.py": {
            "functions": [
                "__init__",
                "_register_events",
                "load_config",
                "save_config",
                "run",
                "stop",
                "send_message",
                "send_file",
                "send_template",
                "get_status",
                "set_log_callback",
                "_log",
                "run_bot"
            ],
            "classes": {
                "UnifiedDiscordService": [
                    "__init__",
                    "_register_events",
                    "load_config",
                    "save_config",
                    "run",
                    "stop",
                    "send_message",
                    "send_file",
                    "send_template",
                    "get_status",
                    "set_log_callback",
                    "_log"
                ]
            },
            "routes": [],
            "complexity": 25
        },
        "core\\ThreadPoolManager.py": {
            "functions": [
                "__init__",
                "submit_task",
                "_task_scheduler",
                "_execute_task",
                "cancel_task",
                "get_task_status",
                "get_metrics",
                "shutdown",
                "wrapped_func"
            ],
            "classes": {
                "TaskPriority": [],
                "Task": [],
                "ThreadPoolManager": [
                    "__init__",
                    "submit_task",
                    "_task_scheduler",
                    "_execute_task",
                    "cancel_task",
                    "get_task_status",
                    "get_metrics",
                    "shutdown"
                ]
            },
            "routes": [],
            "complexity": 17
        },
        "core\\TaskManager.py": {
            "functions": [
                "__init__",
                "_load",
                "_save",
                "add_task",
                "list_tasks",
                "complete_task",
                "delete_task",
                "clear_completed",
                "get_pending_count"
            ],
            "classes": {
                "TaskManager": [
                    "__init__",
                    "_load",
                    "_save",
                    "add_task",
                    "list_tasks",
                    "complete_task",
                    "delete_task",
                    "clear_completed",
                    "get_pending_count"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "core\\UnifiedPromptEngine.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\UnifiedDriverManager.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\UnifiedLoggingAgent.py": {
            "functions": [
                "__init__",
                "log",
                "_setup_log_directories",
                "_setup_file_handler",
                "log_ai_output",
                "log_social",
                "log_system_event",
                "get_logs",
                "_matches_filters",
                "log_error",
                "log_debug",
                "log_event"
            ],
            "classes": {
                "UnifiedLoggingAgent": [
                    "__init__",
                    "log",
                    "_setup_log_directories",
                    "_setup_file_handler",
                    "log_ai_output",
                    "log_social",
                    "log_system_event",
                    "get_logs",
                    "_matches_filters",
                    "log_error",
                    "log_debug",
                    "log_event"
                ]
            },
            "routes": [],
            "complexity": 24
        },
        "core\\UnifiedFeedbackMemory.py": {
            "functions": [
                "__init__",
                "to_dict",
                "from_dict",
                "__init__",
                "add_feedback",
                "get_feedback",
                "get_context_stats",
                "_update_stats",
                "_prune_memory",
                "load",
                "save",
                "analyze_feedback",
                "_filter_by_timeframe"
            ],
            "classes": {
                "FeedbackEntry": [
                    "__init__",
                    "to_dict",
                    "from_dict"
                ],
                "UnifiedFeedbackMemory": [
                    "__init__",
                    "add_feedback",
                    "get_feedback",
                    "get_context_stats",
                    "_update_stats",
                    "_prune_memory",
                    "load",
                    "save",
                    "analyze_feedback",
                    "_filter_by_timeframe"
                ]
            },
            "routes": [],
            "complexity": 26
        },
        "core\\TemplateManager.py": {
            "functions": [
                "__init__",
                "_init_environment",
                "set_active_template",
                "render",
                "render_discord_template",
                "render_message_template",
                "render_general_template",
                "list_templates",
                "get_available_templates",
                "_log_template_render",
                "render_template"
            ],
            "classes": {
                "TemplateManager": [
                    "__init__",
                    "_init_environment",
                    "set_active_template",
                    "render",
                    "render_discord_template",
                    "render_message_template",
                    "render_general_template",
                    "list_templates",
                    "get_available_templates",
                    "_log_template_render",
                    "render_template"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "core\\Agents\\AgentDispatcher.py": {
            "functions": [
                "__init__",
                "start",
                "stop",
                "event_loop",
                "add_task",
                "_handle_task",
                "_execute_prompts_on_chat",
                "_review_memory"
            ],
            "classes": {
                "AgentDispatcher": [
                    "__init__",
                    "start",
                    "stop",
                    "event_loop",
                    "add_task",
                    "_handle_task",
                    "_execute_prompts_on_chat",
                    "_review_memory"
                ]
            },
            "routes": [],
            "complexity": 16
        },
        "core\\Agents\\chat_scraper_agent.py": {
            "functions": [
                "__init__",
                "handle_task",
                "get_all_chats",
                "filter_chats",
                "validate_login",
                "manual_login_flow"
            ],
            "classes": {
                "ChatScraperAgent": [
                    "__init__",
                    "handle_task",
                    "get_all_chats",
                    "filter_chats",
                    "validate_login",
                    "manual_login_flow"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "core\\Agents\\base_agent.py": {
            "functions": [
                "__init__",
                "receive_task",
                "handle_task",
                "process_tasks",
                "run",
                "stop"
            ],
            "classes": {
                "BaseAgent": [
                    "__init__",
                    "receive_task",
                    "handle_task",
                    "process_tasks",
                    "run",
                    "stop"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "core\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\Agents\\DocAgent.py": {
            "functions": [
                "run_task",
                "generate_docs"
            ],
            "classes": {
                "DocAgent": [
                    "run_task",
                    "generate_docs"
                ]
            },
            "routes": [],
            "complexity": 4
        },
        "core\\Agents\\driver_manager.py": {
            "functions": [
                "__init__",
                "get_driver",
                "_init_driver_lazy",
                "shutdown_driver",
                "is_logged_in"
            ],
            "classes": {
                "DriverManager": [
                    "__init__",
                    "get_driver",
                    "_init_driver_lazy",
                    "shutdown_driver",
                    "is_logged_in"
                ]
            },
            "routes": [],
            "complexity": 10
        },
        "core\\Agents\\refactoring_utils.py": {
            "functions": [
                "read_file",
                "write_file",
                "parse_code",
                "unparse_code",
                "get_function_bounds",
                "get_class_bounds",
                "get_variable_scope",
                "extract_method",
                "rename_variable",
                "inline_function",
                "format_code"
            ],
            "classes": {
                "CodeAnalyzer": [
                    "get_function_bounds",
                    "get_class_bounds",
                    "get_variable_scope"
                ],
                "CodeTransformer": [
                    "extract_method",
                    "rename_variable",
                    "inline_function"
                ],
                "CodeFormatter": [
                    "format_code"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "core\\Agents\\CursorAgentInterface.py": {
            "functions": [
                "__init__",
                "run_task",
                "_format_prompt",
                "_log_task_start",
                "_log_task_complete"
            ],
            "classes": {
                "CursorAgentInterface": [
                    "__init__",
                    "run_task",
                    "_format_prompt",
                    "_log_task_start",
                    "_log_task_complete"
                ]
            },
            "routes": [],
            "complexity": 10
        },
        "core\\Agents\\RefactorAgent.py": {
            "functions": [
                "run_task",
                "run_refactor"
            ],
            "classes": {
                "RefactorAgent": [
                    "run_task",
                    "run_refactor"
                ]
            },
            "routes": [],
            "complexity": 4
        },
        "core\\Agents\\main.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\Agents\\ReinforcementEvaluator.py": {
            "functions": [
                "__init__",
                "evaluate_task",
                "optimize_agent",
                "_calculate_code_quality",
                "_calculate_test_coverage",
                "_calculate_doc_coverage",
                "_calculate_performance",
                "_calculate_maintainability",
                "_generate_optimization_suggestions",
                "_update_agent_config"
            ],
            "classes": {
                "EvaluationMetrics": [],
                "ReinforcementEvaluator": [
                    "__init__",
                    "evaluate_task",
                    "optimize_agent",
                    "_calculate_code_quality",
                    "_calculate_test_coverage",
                    "_calculate_doc_coverage",
                    "_calculate_performance",
                    "_calculate_maintainability",
                    "_generate_optimization_suggestions",
                    "_update_agent_config"
                ]
            },
            "routes": [],
            "complexity": 20
        },
        "core\\Agents\\TestAgent.py": {
            "functions": [
                "run_task",
                "run_tests"
            ],
            "classes": {
                "TestAgent": [
                    "run_task",
                    "run_tests"
                ]
            },
            "routes": [],
            "complexity": 4
        },
        "core\\Agents\\specialized_agents.py": {
            "functions": [
                "__init__",
                "handle_task",
                "__init__",
                "handle_task",
                "__init__",
                "handle_task"
            ],
            "classes": {
                "RefactorAgent": [
                    "__init__",
                    "handle_task"
                ],
                "TestAgent": [
                    "__init__",
                    "handle_task"
                ],
                "DocAgent": [
                    "__init__",
                    "handle_task"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "core\\Agents\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\chatgpt_automation\\bot_worker.py": {
            "functions": [
                "__init__",
                "_login_with_retries",
                "run",
                "process_task",
                "_revalidate_session",
                "shutdown"
            ],
            "classes": {
                "BotWorker": [
                    "__init__",
                    "_login_with_retries",
                    "run",
                    "process_task",
                    "_revalidate_session",
                    "shutdown"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "core\\chatgpt_automation\\automation_engine.py": {
            "functions": [
                "__init__",
                "initialize_components",
                "scan_project_gui",
                "get_chatgpt_response",
                "switch_model",
                "shutdown",
                "process_file",
                "self_heal_file",
                "select_model",
                "run_tests",
                "deploy_file",
                "prioritize_files",
                "process_all_files",
                "export_chatgpt_context",
                "add_manual_model",
                "__init__",
                "run",
                "__init__",
                "add_task",
                "wait_for_completion",
                "stop_workers"
            ],
            "classes": {
                "AutomationEngine": [
                    "__init__",
                    "initialize_components",
                    "scan_project_gui",
                    "get_chatgpt_response",
                    "switch_model",
                    "shutdown",
                    "process_file",
                    "self_heal_file",
                    "select_model",
                    "run_tests",
                    "deploy_file",
                    "prioritize_files",
                    "process_all_files",
                    "export_chatgpt_context",
                    "add_manual_model"
                ],
                "BotWorker": [
                    "__init__",
                    "run"
                ],
                "MultibotManager": [
                    "__init__",
                    "add_task",
                    "wait_for_completion",
                    "stop_workers"
                ]
            },
            "routes": [],
            "complexity": 42
        },
        "core\\chatgpt_automation\\main.py": {
            "functions": [
                "main",
                "__init__",
                "init_ui",
                "load_file_into_preview",
                "process_file",
                "self_heal",
                "run_tests",
                "send_prompt",
                "process_batch_files",
                "closeEvent"
            ],
            "classes": {
                "GUIMain": [
                    "__init__",
                    "init_ui",
                    "load_file_into_preview",
                    "process_file",
                    "self_heal",
                    "run_tests",
                    "send_prompt",
                    "process_batch_files",
                    "closeEvent"
                ]
            },
            "routes": [],
            "complexity": 19
        },
        "core\\chatgpt_automation\\config.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\chatgpt_automation\\driver_factory.py": {
            "functions": [
                "__init__",
                "create_driver"
            ],
            "classes": {
                "DriverFactory": [
                    "__init__",
                    "create_driver"
                ]
            },
            "routes": [],
            "complexity": 4
        },
        "core\\chatgpt_automation\\ModelRegistry.py": {
            "functions": [
                "__init__",
                "find_project_root",
                "load_models",
                "_load_single_model",
                "reload_models",
                "get_registry",
                "__str__"
            ],
            "classes": {
                "ModelRegistry": [
                    "__init__",
                    "find_project_root",
                    "load_models",
                    "_load_single_model",
                    "reload_models",
                    "get_registry",
                    "__str__"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "core\\chatgpt_automation\\setup_chromedriver.py": {
            "functions": [
                "get_chrome_version",
                "download_chromedriver",
                "update_config"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "core\\chatgpt_automation\\local_llm_engine.py": {
            "functions": [
                "__init__",
                "set_model",
                "get_response"
            ],
            "classes": {
                "LocalLLMEngine": [
                    "__init__",
                    "set_model",
                    "get_response"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "core\\chatgpt_automation\\PostProcessValidator.py": {
            "functions": [
                "__init__",
                "run_test_coverage",
                "run_pylint",
                "extract_pylint_score",
                "run_mypy",
                "run_black_check",
                "run_full_validation"
            ],
            "classes": {
                "PostProcessValidator": [
                    "__init__",
                    "run_test_coverage",
                    "run_pylint",
                    "extract_pylint_score",
                    "run_mypy",
                    "run_black_check",
                    "run_full_validation"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "core\\chatgpt_automation\\setup_logging.py": {
            "functions": [
                "setup_logging"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "core\\chatgpt_automation\\OpenAIClient.py": {
            "functions": [
                "__init__",
                "_load_config",
                "get_openai_driver",
                "save_openai_cookies",
                "load_openai_cookies",
                "is_logged_in",
                "login_openai",
                "send_prompt_smoothly",
                "get_chatgpt_response",
                "get_full_response",
                "process_prompt",
                "get_full_response_for_debug",
                "shutdown",
                "_force_kill_chromedriver"
            ],
            "classes": {
                "OpenAIClient": [
                    "__init__",
                    "_load_config",
                    "get_openai_driver",
                    "save_openai_cookies",
                    "load_openai_cookies",
                    "is_logged_in",
                    "login_openai",
                    "send_prompt_smoothly",
                    "get_chatgpt_response",
                    "get_full_response",
                    "process_prompt",
                    "get_full_response_for_debug",
                    "shutdown",
                    "_force_kill_chromedriver"
                ]
            },
            "routes": [],
            "complexity": 28
        },
        "core\\chatgpt_automation\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\chatgpt_automation\\controllers\\assistant_orchestrator.py": {
            "functions": [
                "dispatch_action"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "core\\chatgpt_automation\\controllers\\log_monitor_service.py": {
            "functions": [
                "get_latest_log"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "core\\chatgpt_automation\\controllers\\assistant_mode_controller.py": {
            "functions": [
                "__init__",
                "set_input_source",
                "start",
                "stop",
                "is_active",
                "_run_loop"
            ],
            "classes": {
                "AssistantModeController": [
                    "__init__",
                    "set_input_source",
                    "start",
                    "stop",
                    "is_active",
                    "_run_loop"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "core\\chatgpt_automation\\controllers\\assistant_parser.py": {
            "functions": [
                "_load_command_config",
                "parse_input"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "core\\chatgpt_automation\\controllers\\cursor_dispatcher.py": {
            "functions": [
                "__init__",
                "generate_tests",
                "self_heal",
                "run_feedback_loop"
            ],
            "classes": {
                "CursorDispatcher": [
                    "__init__",
                    "generate_tests",
                    "self_heal",
                    "run_feedback_loop"
                ]
            },
            "routes": [],
            "complexity": 8
        },
        "core\\chatgpt_automation\\controllers\\speech_input_service.py": {
            "functions": [
                "listen_and_transcribe"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "core\\chatgpt_automation\\controllers\\automation_controller.py": {
            "functions": [
                "__init__",
                "update_file",
                "heal_file",
                "run_tests",
                "shutdown"
            ],
            "classes": {
                "AutomationController": [
                    "__init__",
                    "update_file",
                    "heal_file",
                    "run_tests",
                    "shutdown"
                ]
            },
            "routes": [],
            "complexity": 10
        },
        "core\\chatgpt_automation\\controllers\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\chatgpt_automation\\controllers\\prompt_loop_orchestrator.py": {
            "functions": [
                "__init__",
                "_load_context",
                "inject_context",
                "orchestrate_prompt_loop"
            ],
            "classes": {
                "PromptLoopOrchestrator": [
                    "__init__",
                    "_load_context",
                    "inject_context",
                    "orchestrate_prompt_loop"
                ]
            },
            "routes": [],
            "complexity": 8
        },
        "core\\chatgpt_automation\\GUI\\assistant_mode_toggle.py": {
            "functions": [
                "__init__",
                "init_ui",
                "toggle_assistant"
            ],
            "classes": {
                "MainWindow": [
                    "__init__",
                    "init_ui",
                    "toggle_assistant"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "core\\chatgpt_automation\\GUI\\FileTableWidget.py": {
            "functions": [
                "__init__",
                "dragEnterEvent",
                "dropEvent",
                "add_folder_files",
                "add_file",
                "preview_prompt",
                "get_selected_files",
                "get_all_files",
                "start_processing",
                "log"
            ],
            "classes": {
                "FileTableWidget": [
                    "__init__",
                    "dragEnterEvent",
                    "dropEvent",
                    "add_folder_files",
                    "add_file",
                    "preview_prompt",
                    "get_selected_files",
                    "get_all_files",
                    "start_processing",
                    "log"
                ]
            },
            "routes": [],
            "complexity": 20
        },
        "core\\chatgpt_automation\\GUI\\PluginManagerTab.py": {
            "functions": [
                "__init__",
                "init_ui",
                "refresh_table",
                "toggle_plugin",
                "reload_plugin",
                "reload_all_plugins",
                "show_message"
            ],
            "classes": {
                "PluginManagerTab": [
                    "__init__",
                    "init_ui",
                    "refresh_table",
                    "toggle_plugin",
                    "reload_plugin",
                    "reload_all_plugins",
                    "show_message"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "core\\chatgpt_automation\\GUI\\MultibotManager.py": {
            "functions": [
                "__init__",
                "start_workers",
                "add_task",
                "wait_for_completion",
                "get_all_results",
                "shutdown",
                "mark_task_complete",
                "_update_progress",
                "_worker_status_update",
                "__enter__",
                "__exit__"
            ],
            "classes": {
                "MultibotManager": [
                    "__init__",
                    "start_workers",
                    "add_task",
                    "wait_for_completion",
                    "get_all_results",
                    "shutdown",
                    "mark_task_complete",
                    "_update_progress",
                    "_worker_status_update",
                    "__enter__",
                    "__exit__"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "core\\chatgpt_automation\\GUI\\TestAgent.py": {
            "functions": [
                "validate_test_code",
                "__init__",
                "run_full_test_cycle",
                "generate_and_run",
                "create_tests_for_file",
                "validate_test_file",
                "run_tests",
                "repair_tests",
                "get_test_file_path",
                "find_project_root"
            ],
            "classes": {
                "TestAgent": [
                    "__init__",
                    "run_full_test_cycle",
                    "generate_and_run",
                    "create_tests_for_file",
                    "validate_test_file",
                    "run_tests",
                    "repair_tests",
                    "get_test_file_path",
                    "find_project_root"
                ]
            },
            "routes": [],
            "complexity": 19
        },
        "core\\chatgpt_automation\\GUI\\GuiHelpers.py": {
            "functions": [
                "__init__",
                "setup_status_bar",
                "update_status_bar",
                "log_to_output",
                "read_file",
                "save_file",
                "show_info",
                "show_warning",
                "show_error",
                "confirm_action"
            ],
            "classes": {
                "GuiHelpers": [
                    "__init__",
                    "setup_status_bar",
                    "update_status_bar",
                    "log_to_output",
                    "read_file",
                    "save_file",
                    "show_info",
                    "show_warning",
                    "show_error",
                    "confirm_action"
                ]
            },
            "routes": [],
            "complexity": 20
        },
        "core\\chatgpt_automation\\GUI\\SelfHealRunner.py": {
            "functions": [
                "__init__",
                "run_and_validate",
                "read_file",
                "save_file",
                "__init__",
                "init_ui",
                "add_files",
                "start_self_heal",
                "cancel_self_heal",
                "log",
                "update_progress_bar",
                "__init__",
                "run",
                "_update_progress"
            ],
            "classes": {
                "SelfHealController": [
                    "__init__",
                    "run_and_validate",
                    "read_file",
                    "save_file"
                ],
                "SelfHealRunner": [
                    "__init__",
                    "init_ui",
                    "add_files",
                    "start_self_heal",
                    "cancel_self_heal",
                    "log",
                    "update_progress_bar"
                ],
                "SelfHealWorker": [
                    "__init__",
                    "run",
                    "_update_progress"
                ]
            },
            "routes": [],
            "complexity": 28
        },
        "core\\chatgpt_automation\\GUI\\PreviewDialog.py": {
            "functions": [
                "__init__",
                "highlightBlock",
                "__init__",
                "save_override",
                "save_as",
                "backup_file",
                "copy_to_clipboard",
                "toggle_word_wrap",
                "show_message",
                "read_file",
                "show_diff"
            ],
            "classes": {
                "PythonSyntaxHighlighter": [
                    "__init__",
                    "highlightBlock"
                ],
                "PreviewDialog": [
                    "__init__",
                    "save_override",
                    "save_as",
                    "backup_file",
                    "copy_to_clipboard",
                    "toggle_word_wrap",
                    "show_message",
                    "read_file",
                    "show_diff"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "core\\chatgpt_automation\\GUI\\TestAgentWidget.py": {
            "functions": [
                "__init__",
                "init_ui",
                "browse_files",
                "on_files_dropped",
                "add_files",
                "run_tests",
                "log",
                "__init__",
                "dragEnterEvent",
                "dropEvent",
                "_has_valid_files"
            ],
            "classes": {
                "TestAgentWidget": [
                    "__init__",
                    "init_ui",
                    "browse_files",
                    "on_files_dropped",
                    "add_files",
                    "run_tests",
                    "log"
                ],
                "FileDropListWidget": [
                    "__init__",
                    "dragEnterEvent",
                    "dropEvent",
                    "_has_valid_files"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "core\\chatgpt_automation\\GUI\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\chatgpt_automation\\GUI\\Worker.py": {
            "functions": [
                "__init__",
                "run"
            ],
            "classes": {
                "Worker": [
                    "__init__",
                    "run"
                ]
            },
            "routes": [],
            "complexity": 4
        },
        "core\\chatgpt_automation\\models\\model_gpt4.py": {
            "functions": [
                "process_with_gpt4",
                "register"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "core\\chatgpt_automation\\models\\model_gpt4_5.py": {
            "functions": [
                "process_with_gpt4_5",
                "register"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "core\\chatgpt_automation\\models\\model_gpt4o_mini.py": {
            "functions": [
                "process_with_gpt4o_mini",
                "register"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "core\\chatgpt_automation\\models\\model_mistral.py": {
            "functions": [
                "register"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "core\\chatgpt_automation\\models\\model_gpt4o.py": {
            "functions": [
                "process_with_gpt4o",
                "register"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "core\\chatgpt_automation\\models\\model_o1.py": {
            "functions": [
                "process_with_o1",
                "register"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "core\\chatgpt_automation\\models\\model_o3mini.py": {
            "functions": [
                "process_with_o3mini",
                "register"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "core\\chatgpt_automation\\performance\\ModelPerformanceTracker.py": {
            "functions": [
                "__init__",
                "record_execution",
                "get_average_attempts",
                "rank_models",
                "choose_model",
                "print_metrics"
            ],
            "classes": {
                "ModelPerformanceTracker": [
                    "__init__",
                    "record_execution",
                    "get_average_attempts",
                    "rank_models",
                    "choose_model",
                    "print_metrics"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "core\\chatgpt_automation\\models\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\chatgpt_automation\\views\\main_window.py": {
            "functions": [
                "main",
                "__init__",
                "init_ui",
                "load_file_into_preview",
                "closeEvent"
            ],
            "classes": {
                "MainWindow": [
                    "__init__",
                    "init_ui",
                    "load_file_into_preview",
                    "closeEvent"
                ]
            },
            "routes": [],
            "complexity": 9
        },
        "core\\chatgpt_automation\\models\\model_template.py": {
            "functions": [
                "process_with_template",
                "register"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "core\\chatgpt_automation\\watchers\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\chatgpt_automation\\models\\model_o3_mini_high.py": {
            "functions": [
                "process_with_o3_mini_high",
                "register"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "core\\chatgpt_automation\\performance\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\chatgpt_automation\\views\\file_browser_widget.py": {
            "functions": [
                "__init__",
                "startDrag",
                "__init__",
                "init_ui",
                "switch_view_mode",
                "populate_tree",
                "create_tree_item",
                "get_svg_icon_path",
                "get_file_icon_and_type",
                "add_placeholder",
                "on_item_expanded",
                "add_children",
                "on_item_double_clicked",
                "open_context_menu",
                "rename_item",
                "delete_item",
                "show_properties",
                "open_externally",
                "filter_tree",
                "filter_tree_item"
            ],
            "classes": {
                "FileTreeWidget": [
                    "__init__",
                    "startDrag"
                ],
                "FileBrowserWidget": [
                    "__init__",
                    "init_ui",
                    "switch_view_mode",
                    "populate_tree",
                    "create_tree_item",
                    "get_svg_icon_path",
                    "get_file_icon_and_type",
                    "add_placeholder",
                    "on_item_expanded",
                    "add_children",
                    "on_item_double_clicked",
                    "open_context_menu",
                    "rename_item",
                    "delete_item",
                    "show_properties",
                    "open_externally",
                    "filter_tree",
                    "filter_tree_item"
                ]
            },
            "routes": [],
            "complexity": 40
        },
        "core\\chatgpt_automation\\views\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\chatgpt_automation\\views\\preview_panel.py": {
            "functions": [
                "__init__",
                "init_ui",
                "load_file",
                "process_file",
                "self_heal_file",
                "run_tests"
            ],
            "classes": {
                "PreviewPanel": [
                    "__init__",
                    "init_ui",
                    "load_file",
                    "process_file",
                    "self_heal_file",
                    "run_tests"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "core\\chatgpt_automation\\watchers\\ModelFolderWatcher.py": {
            "functions": [
                "__init__",
                "_debounced_reload",
                "_should_handle",
                "on_modified",
                "on_created",
                "on_deleted",
                "start",
                "_watch_loop",
                "stop",
                "reload_wrapper"
            ],
            "classes": {
                "ModelFolderWatcher": [
                    "__init__",
                    "_debounced_reload",
                    "_should_handle",
                    "on_modified",
                    "on_created",
                    "on_deleted",
                    "start",
                    "_watch_loop",
                    "stop"
                ]
            },
            "routes": [],
            "complexity": 19
        },
        "core\\chat_engine\\chat_cycle_controller.py": {
            "functions": [
                "sanitize_filename",
                "__init__",
                "_default_output_callback",
                "append_output",
                "start",
                "process_chat",
                "run_single_chat",
                "_save_prompt_response",
                "_save_run_summary",
                "shutdown"
            ],
            "classes": {
                "ChatCycleController": [
                    "__init__",
                    "_default_output_callback",
                    "append_output",
                    "start",
                    "process_chat",
                    "run_single_chat",
                    "_save_prompt_response",
                    "_save_run_summary",
                    "shutdown"
                ]
            },
            "routes": [],
            "complexity": 19
        },
        "core\\chat_engine\\chat_engine_manager.py": {
            "functions": [
                "__init__",
                "start",
                "shutdown"
            ],
            "classes": {
                "ChatEngineManager": [
                    "__init__",
                    "start",
                    "shutdown"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "core\\chat_engine\\prompt_execution_service.py": {
            "functions": [
                "__init__",
                "get_prompt",
                "execute_prompt_cycle",
                "execute_prompts_single_chat",
                "execute_prompts_concurrently",
                "_execute_single_prompt_thread",
                "_determine_wait_time",
                "_post_process_jawbone_response",
                "send_prompt",
                "_fetch_response",
                "wait_for_stable_response"
            ],
            "classes": {
                "PromptExecutionService": [
                    "__init__",
                    "get_prompt",
                    "execute_prompt_cycle",
                    "execute_prompts_single_chat",
                    "execute_prompts_concurrently",
                    "_execute_single_prompt_thread",
                    "_determine_wait_time",
                    "_post_process_jawbone_response",
                    "send_prompt",
                    "_fetch_response",
                    "wait_for_stable_response"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "core\\chat_engine\\chat_scraper_service.py": {
            "functions": [
                "__init__",
                "get_driver",
                "get_all_chats",
                "get_filtered_chats",
                "validate_login",
                "manual_login_flow"
            ],
            "classes": {
                "ChatScraperService": [
                    "__init__",
                    "get_driver",
                    "get_all_chats",
                    "get_filtered_chats",
                    "validate_login",
                    "manual_login_flow"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "core\\chat_engine\\gui_event_handler.py": {
            "functions": [
                "run_gui",
                "__init__",
                "init_ui",
                "toggle_headless",
                "toggle_reverse",
                "toggle_archive",
                "start_dispatcher",
                "stop_dispatcher",
                "log"
            ],
            "classes": {
                "GUIEventHandler": [
                    "__init__",
                    "init_ui",
                    "toggle_headless",
                    "toggle_reverse",
                    "toggle_archive",
                    "start_dispatcher",
                    "stop_dispatcher",
                    "log"
                ]
            },
            "routes": [],
            "complexity": 17
        },
        "core\\chat_engine\\discord_dispatcher.py": {
            "functions": [
                "__init__",
                "_setup_events",
                "send_message",
                "dispatch_memory_update",
                "dispatch_dreamscape_episode",
                "dispatch_feedback_loop",
                "run_bot",
                "shutdown"
            ],
            "classes": {
                "DiscordDispatcher": [
                    "__init__",
                    "_setup_events",
                    "send_message",
                    "dispatch_memory_update",
                    "dispatch_dreamscape_episode",
                    "dispatch_feedback_loop",
                    "run_bot",
                    "shutdown"
                ]
            },
            "routes": [],
            "complexity": 16
        },
        "core\\chat_engine\\driver_manager.py": {
            "functions": [
                "__new__",
                "__init__",
                "get_driver",
                "_init_driver",
                "_create_chrome_options",
                "shutdown_driver",
                "quit_driver",
                "is_logged_in",
                "save_cookies",
                "load_cookies",
                "wait_and_find_element",
                "wait_for_url_change"
            ],
            "classes": {
                "DriverManager": [
                    "__new__",
                    "__init__",
                    "get_driver",
                    "_init_driver",
                    "_create_chrome_options",
                    "shutdown_driver",
                    "quit_driver",
                    "is_logged_in",
                    "save_cookies",
                    "load_cookies",
                    "wait_and_find_element",
                    "wait_for_url_change"
                ]
            },
            "routes": [],
            "complexity": 24
        },
        "core\\dreamscape\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\dreamscape\\TemplateRenderer.py": {
            "functions": [
                "__init__",
                "_setup_jinja_env",
                "load_template",
                "render_template",
                "render_string_template",
                "validate_template_context"
            ],
            "classes": {
                "TemplateRenderer": [
                    "__init__",
                    "_setup_jinja_env",
                    "load_template",
                    "render_template",
                    "render_string_template",
                    "validate_template_context"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "core\\chat_engine\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\interfaces\\ILoggingAgent.py": {
            "functions": [
                "log",
                "log_error",
                "log_debug",
                "log_event"
            ],
            "classes": {
                "ILoggingAgent": [
                    "log",
                    "log_error",
                    "log_debug",
                    "log_event"
                ]
            },
            "routes": [],
            "complexity": 8
        },
        "core\\chat_engine\\feedback_engine.py": {
            "functions": [
                "__init__",
                "_load_memory",
                "_save_memory",
                "save_memory_async",
                "parse_and_update_memory",
                "apply_memory_updates",
                "log_feedback",
                "export_feedback_log",
                "analyze_feedback",
                "review_memory",
                "feedback_loop",
                "save_context_memory_async",
                "save_context_db",
                "review_context_memory"
            ],
            "classes": {
                "FeedbackEngine": [
                    "__init__",
                    "_load_memory",
                    "_save_memory",
                    "save_memory_async",
                    "parse_and_update_memory",
                    "apply_memory_updates",
                    "log_feedback",
                    "export_feedback_log",
                    "analyze_feedback",
                    "review_memory",
                    "feedback_loop",
                    "save_context_memory_async",
                    "save_context_db",
                    "review_context_memory"
                ]
            },
            "routes": [],
            "complexity": 28
        },
        "core\\interfaces\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\logging\\CompositeLogger.py": {
            "functions": [
                "__init__",
                "_safe_log",
                "log",
                "log_error",
                "log_debug",
                "log_event",
                "log_system_event",
                "add_logger",
                "remove_logger",
                "shutdown"
            ],
            "classes": {
                "CompositeLogger": [
                    "__init__",
                    "_safe_log",
                    "log",
                    "log_error",
                    "log_debug",
                    "log_event",
                    "log_system_event",
                    "add_logger",
                    "remove_logger",
                    "shutdown"
                ]
            },
            "routes": [],
            "complexity": 20
        },
        "core\\dreamscape\\ContextMemoryManager.py": {
            "functions": [
                "__init__",
                "load_context",
                "save_context",
                "_initialize_new_context",
                "update_with_episode",
                "_extract_themes",
                "_update_skills",
                "_update_protocols",
                "_update_domains",
                "_update_architect_tier",
                "_update_quests",
                "get_context_summary"
            ],
            "classes": {
                "ContextMemoryManager": [
                    "__init__",
                    "load_context",
                    "save_context",
                    "_initialize_new_context",
                    "update_with_episode",
                    "_extract_themes",
                    "_update_skills",
                    "_update_protocols",
                    "_update_domains",
                    "_update_architect_tier",
                    "_update_quests",
                    "get_context_summary"
                ]
            },
            "routes": [],
            "complexity": 24
        },
        "core\\llm_backends\\ollama_backend.py": {
            "functions": [
                "__init__",
                "generate"
            ],
            "classes": {
                "OllamaBackend": [
                    "__init__",
                    "generate"
                ]
            },
            "routes": [],
            "complexity": 4
        },
        "core\\llm_backends\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\llm_backends\\huggingface_backend.py": {
            "functions": [
                "__init__",
                "load_model",
                "generate"
            ],
            "classes": {
                "HuggingFaceBackend": [
                    "__init__",
                    "load_model",
                    "generate"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "core\\logging\\factories\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\logging\\factories\\LoggerFactory.py": {
            "functions": [
                "create_standard_logger",
                "create_module_logger",
                "create_agent_logger",
                "get_logger"
            ],
            "classes": {
                "LoggerFactory": [
                    "create_standard_logger",
                    "create_module_logger",
                    "create_agent_logger",
                    "get_logger"
                ]
            },
            "routes": [],
            "complexity": 8
        },
        "core\\logging\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\logging\\ConsoleLogger.py": {
            "functions": [
                "__init__",
                "_format_message",
                "debug",
                "info",
                "warning",
                "error",
                "critical",
                "log"
            ],
            "classes": {
                "ConsoleLogger": [
                    "__init__",
                    "_format_message",
                    "debug",
                    "info",
                    "warning",
                    "error",
                    "critical",
                    "log"
                ]
            },
            "routes": [],
            "complexity": 16
        },
        "core\\logging\\services\\ai_output_service.py": {
            "functions": [
                "log_ai_output",
                "sanitize_filename"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "core\\logging\\services\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\logging\\LoggingService.py": {
            "functions": [
                "__init__",
                "_add_console_handler",
                "_add_file_handler",
                "add_custom_handler",
                "debug",
                "info",
                "warning",
                "error",
                "critical",
                "exception",
                "log_system_event",
                "set_level"
            ],
            "classes": {
                "LoggingService": [
                    "__init__",
                    "_add_console_handler",
                    "_add_file_handler",
                    "add_custom_handler",
                    "debug",
                    "info",
                    "warning",
                    "error",
                    "critical",
                    "exception",
                    "log_system_event",
                    "set_level"
                ]
            },
            "routes": [],
            "complexity": 24
        },
        "core\\logging\\utils\\setup.py": {
            "functions": [
                "setup_logging"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "core\\logging\\utils\\AsyncDispatcher.py": {
            "functions": [
                "__init__",
                "_start_worker",
                "_process_queue",
                "dispatch",
                "get_metrics",
                "shutdown"
            ],
            "classes": {
                "DispatcherMetrics": [],
                "AsyncDispatcher": [
                    "__init__",
                    "_start_worker",
                    "_process_queue",
                    "dispatch",
                    "get_metrics",
                    "shutdown"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "core\\prompt_cycle\\audit.py": {
            "functions": [
                "__init__",
                "perform_audit",
                "_generate_audit_prompt",
                "_process_audit_response",
                "_generate_audit_report",
                "get_audit_history",
                "get_latest_audit"
            ],
            "classes": {
                "AuditManager": [
                    "__init__",
                    "perform_audit",
                    "_generate_audit_prompt",
                    "_process_audit_response",
                    "_generate_audit_report",
                    "get_audit_history",
                    "get_latest_audit"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "core\\logging\\utils\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\logging\\handlers\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\prompt_cycle\\dialog.py": {
            "functions": [
                "__init__",
                "initUI",
                "start_cycle"
            ],
            "classes": {
                "PromptCycleDialog": [
                    "__init__",
                    "initUI",
                    "start_cycle"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "core\\prompt_cycle\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\prompt_cycle\\memory.py": {
            "functions": [
                "__init__",
                "_load_memory",
                "_save_memory",
                "store_insights",
                "get_insights",
                "update",
                "search_memory",
                "generate_memory_report"
            ],
            "classes": {
                "MemoryManager": [
                    "__init__",
                    "_load_memory",
                    "_save_memory",
                    "store_insights",
                    "get_insights",
                    "update",
                    "search_memory",
                    "generate_memory_report"
                ]
            },
            "routes": [],
            "complexity": 16
        },
        "core\\prompt_cycle\\narrative.py": {
            "functions": [
                "__init__",
                "_setup_template_env",
                "extract_narrative_elements",
                "process_response",
                "broadcast_update",
                "_format_narrative_message",
                "generate_narrative_report",
                "add_event"
            ],
            "classes": {
                "NarrativeManager": [
                    "__init__",
                    "_setup_template_env",
                    "extract_narrative_elements",
                    "process_response",
                    "broadcast_update",
                    "_format_narrative_message",
                    "generate_narrative_report",
                    "add_event"
                ]
            },
            "routes": [],
            "complexity": 16
        },
        "core\\prompt_cycle\\scraping.py": {
            "functions": [
                "__init__",
                "scrape_conversations",
                "_scrape_thread",
                "_get_contextual_prompt",
                "_manual_login",
                "_wait_for_page_load",
                "_handle_rate_limiting"
            ],
            "classes": {
                "ConversationScraper": [
                    "__init__",
                    "scrape_conversations",
                    "_scrape_thread",
                    "_get_contextual_prompt",
                    "_manual_login",
                    "_wait_for_page_load",
                    "_handle_rate_limiting"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "core\\prompt_cycle\\state.py": {
            "functions": [
                "__init__",
                "_load_state",
                "_save_state",
                "get_state",
                "update_state",
                "_deep_merge",
                "increment_metric",
                "add_event",
                "update_configuration",
                "get_metrics",
                "get_events",
                "get_configuration",
                "reset_state",
                "generate_system_report"
            ],
            "classes": {
                "SystemState": [
                    "__init__",
                    "_load_state",
                    "_save_state",
                    "get_state",
                    "update_state",
                    "_deep_merge",
                    "increment_metric",
                    "add_event",
                    "update_configuration",
                    "get_metrics",
                    "get_events",
                    "get_configuration",
                    "reset_state",
                    "generate_system_report"
                ]
            },
            "routes": [],
            "complexity": 28
        },
        "core\\services\\fix_service.py": {
            "functions": [
                "__init__",
                "apply_fix",
                "fix_issue",
                "_log_fix",
                "_get_current_timestamp"
            ],
            "classes": {
                "FixService": [
                    "__init__",
                    "apply_fix",
                    "fix_issue",
                    "_log_fix",
                    "_get_current_timestamp"
                ]
            },
            "routes": [],
            "complexity": 10
        },
        "core\\services\\debug_service.py": {
            "functions": [
                "__init__",
                "start_debug_session",
                "get_debug_info",
                "_save_debug_info",
                "_get_current_timestamp"
            ],
            "classes": {
                "DebugService": [
                    "__init__",
                    "start_debug_session",
                    "get_debug_info",
                    "_save_debug_info",
                    "_get_current_timestamp"
                ]
            },
            "routes": [],
            "complexity": 10
        },
        "core\\prompt_cycle\\utils.py": {
            "functions": [
                "sanitize",
                "get_timestamp",
                "ensure_directory"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "core\\services\\config_service.py": {
            "functions": [
                "__init__",
                "_load_config",
                "_create_default_config",
                "_save_config",
                "get",
                "set",
                "reset_to_defaults"
            ],
            "classes": {
                "ConfigService": [
                    "__init__",
                    "_load_config",
                    "_create_default_config",
                    "_save_config",
                    "get",
                    "set",
                    "reset_to_defaults"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "core\\services\\discord_service.py": {
            "functions": [
                "__init__",
                "launch_bot",
                "stop_bot",
                "send_message",
                "send_file",
                "send_template",
                "get_status",
                "is_running"
            ],
            "classes": {
                "DiscordService": [
                    "__init__",
                    "launch_bot",
                    "stop_bot",
                    "send_message",
                    "send_file",
                    "send_template",
                    "get_status",
                    "is_running"
                ]
            },
            "routes": [],
            "complexity": 16
        },
        "core\\services\\dreamscape_services.py": {
            "functions": [
                "__init__",
                "create_chat_manager",
                "shutdown",
                "is_running",
                "get_chat_manager",
                "get_chat_history",
                "send_message",
                "get_response",
                "get_model",
                "get_config",
                "get_driver_options",
                "_get_driver_options",
                "get_driver",
                "_get_driver_service",
                "get_excluded_chats",
                "get_timeout",
                "get_stable_period",
                "get_poll_interval",
                "get_headless"
            ],
            "classes": {
                "DreamscapeService": [
                    "__init__",
                    "create_chat_manager",
                    "shutdown",
                    "is_running",
                    "get_chat_manager",
                    "get_chat_history",
                    "send_message",
                    "get_response",
                    "get_model",
                    "get_config",
                    "get_driver_options",
                    "_get_driver_options",
                    "get_driver",
                    "_get_driver_service",
                    "get_excluded_chats",
                    "get_timeout",
                    "get_stable_period",
                    "get_poll_interval",
                    "get_headless"
                ],
                "DummyConfig": []
            },
            "routes": [],
            "complexity": 38
        },
        "core\\services\\prompt_service.py": {
            "functions": [
                "__init__",
                "initialize_chat_manager",
                "get_prompt_insights",
                "get_memory_summary",
                "save_prompt",
                "reset_prompts",
                "get_available_prompts",
                "get_prompt",
                "shutdown"
            ],
            "classes": {
                "PromptService": [
                    "__init__",
                    "initialize_chat_manager",
                    "get_prompt_insights",
                    "get_memory_summary",
                    "save_prompt",
                    "reset_prompts",
                    "get_available_prompts",
                    "get_prompt",
                    "shutdown"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "core\\services\\rollback_service.py": {
            "functions": [
                "__init__",
                "rollback",
                "create_backup",
                "_find_backup"
            ],
            "classes": {
                "RollbackService": [
                    "__init__",
                    "rollback",
                    "create_backup",
                    "_find_backup"
                ]
            },
            "routes": [],
            "complexity": 8
        },
        "core\\social\\community_integration.py": {
            "functions": [
                "__init__",
                "_initialize_strategies",
                "_initialize_dashboard",
                "_initialize_post_manager",
                "analyze_community_health",
                "generate_insights_and_recommendations",
                "create_community_building_plan",
                "identify_advocates",
                "post_across_platforms",
                "track_member_interaction",
                "optimize_platform_strategies",
                "generate_visualizations",
                "run_daily_community_management"
            ],
            "classes": {
                "CommunityIntegrationManager": [
                    "__init__",
                    "_initialize_strategies",
                    "_initialize_dashboard",
                    "_initialize_post_manager",
                    "analyze_community_health",
                    "generate_insights_and_recommendations",
                    "create_community_building_plan",
                    "identify_advocates",
                    "post_across_platforms",
                    "track_member_interaction",
                    "optimize_platform_strategies",
                    "generate_visualizations",
                    "run_daily_community_management"
                ]
            },
            "routes": [],
            "complexity": 26
        },
        "core\\services\\service_registry.py": {
            "functions": [
                "create_config_service",
                "create_logging_service",
                "create_prompt_service",
                "create_chat_service",
                "create_discord_service",
                "create_cursor_service",
                "create_reinforcement_service",
                "create_cycle_service",
                "create_response_handler",
                "create_task_orchestrator",
                "create_dreamscape_generator",
                "register_all_services",
                "info",
                "warning",
                "error",
                "debug",
                "get",
                "set",
                "load",
                "save",
                "get_prompt",
                "save_prompt",
                "get_model",
                "reset_to_defaults",
                "load",
                "save",
                "get",
                "set",
                "clear",
                "execute_prompts_single_chat",
                "get_all_chat_titles",
                "shutdown_driver",
                "run",
                "stop",
                "send_message",
                "send_file",
                "send_template",
                "get_status",
                "auto_tune_prompts",
                "apply_fix",
                "rollback_changes",
                "execute_prompt",
                "debug_code",
                "shutdown_all"
            ],
            "classes": {
                "LoggingService": [
                    "info",
                    "warning",
                    "error",
                    "debug"
                ],
                "ConfigService": [
                    "get",
                    "set",
                    "load",
                    "save"
                ],
                "PromptService": [
                    "get_prompt",
                    "save_prompt",
                    "get_model",
                    "reset_to_defaults"
                ],
                "MemoryService": [
                    "load",
                    "save",
                    "get",
                    "set",
                    "clear"
                ],
                "ChatService": [
                    "execute_prompts_single_chat",
                    "get_all_chat_titles",
                    "shutdown_driver"
                ],
                "DiscordService": [
                    "run",
                    "stop",
                    "send_message",
                    "send_file",
                    "send_template",
                    "get_status"
                ],
                "ReinforcementService": [
                    "auto_tune_prompts",
                    "apply_fix",
                    "rollback_changes"
                ],
                "CursorService": [
                    "execute_prompt",
                    "debug_code",
                    "shutdown_all"
                ]
            },
            "routes": [],
            "complexity": 76
        },
        "core\\services\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\social\\log_writer.py": {
            "functions": [
                "write_json_log",
                "log_login",
                "log_post",
                "log_error"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "core\\social\\AIChatAgent.py": {
            "functions": [
                "__init__",
                "ask",
                "_ask_openai",
                "_ask_ollama",
                "_build_prompt",
                "_initialize_chat_thread",
                "append_to_chat_thread",
                "_log_interaction"
            ],
            "classes": {
                "AIChatAgent": [
                    "__init__",
                    "ask",
                    "_ask_openai",
                    "_ask_ollama",
                    "_build_prompt",
                    "_initialize_chat_thread",
                    "append_to_chat_thread",
                    "_log_interaction"
                ]
            },
            "routes": [],
            "complexity": 16
        },
        "core\\social\\platform_login_manager.py": {
            "functions": [
                "load_cookies",
                "save_cookies",
                "wait_for_manual_login",
                "__init__",
                "login",
                "post",
                "__init__",
                "dispatch_all",
                "_process_platform",
                "_generate_content",
                "_shutdown_all_drivers"
            ],
            "classes": {
                "PlatformStrategy": [
                    "__init__",
                    "login",
                    "post"
                ],
                "SocialPlatformDispatcher": [
                    "__init__",
                    "dispatch_all",
                    "_process_platform",
                    "_generate_content",
                    "_shutdown_all_drivers"
                ]
            },
            "routes": [],
            "complexity": 19
        },
        "core\\social\\driver_manager.py": {
            "functions": [
                "get_multi_driver_sessions",
                "__init__",
                "initialize_driver",
                "_build_chrome_options",
                "_apply_stealth_settings",
                "shutdown_driver",
                "cleanup_profile",
                "restart_driver",
                "_get_profile_dir"
            ],
            "classes": {
                "DriverSession": [
                    "__init__",
                    "initialize_driver",
                    "_build_chrome_options",
                    "_apply_stealth_settings",
                    "shutdown_driver",
                    "cleanup_profile",
                    "restart_driver",
                    "_get_profile_dir"
                ]
            },
            "routes": [],
            "complexity": 17
        },
        "core\\social\\social_config.py": {
            "functions": [
                "__init__",
                "get_env",
                "_validate_required_keys",
                "_default_platform_urls",
                "get_platform_url",
                "chrome_profile_path",
                "_default_rate_limits",
                "within_rate_limit",
                "register_action",
                "_check_daily_reset",
                "_save_rate_limit_state",
                "_load_rate_limit_state",
                "register_rate_limit"
            ],
            "classes": {
                "SocialConfig": [
                    "__init__",
                    "get_env",
                    "_validate_required_keys",
                    "_default_platform_urls",
                    "get_platform_url",
                    "chrome_profile_path",
                    "_default_rate_limits",
                    "within_rate_limit",
                    "register_action",
                    "_check_daily_reset",
                    "_save_rate_limit_state",
                    "_load_rate_limit_state",
                    "register_rate_limit"
                ]
            },
            "routes": [],
            "complexity": 26
        },
        "core\\social\\social_config_wrapper.py": {
            "functions": [
                "get_social_config"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "core\\social\\CommunityIntegrationManager.py": {
            "functions": [
                "__init__",
                "_check_platform_credentials",
                "_initialize_platforms",
                "_load_strategies",
                "_load_platform_status",
                "_save_platform_status",
                "get_available_platforms",
                "get_platform",
                "get_all_platforms",
                "enable_platform",
                "disable_platform",
                "connect_platform",
                "disconnect_platform",
                "run_daily_community_management",
                "_connect_enabled_platforms",
                "_collect_metrics",
                "analyze_community_health",
                "generate_insights_and_recommendations",
                "create_community_building_plan",
                "post_content",
                "identify_advocates",
                "track_member_interactions"
            ],
            "classes": {
                "CommunityIntegrationManager": [
                    "__init__",
                    "_check_platform_credentials",
                    "_initialize_platforms",
                    "_load_strategies",
                    "_load_platform_status",
                    "_save_platform_status",
                    "get_available_platforms",
                    "get_platform",
                    "get_all_platforms",
                    "enable_platform",
                    "disable_platform",
                    "connect_platform",
                    "disconnect_platform",
                    "run_daily_community_management",
                    "_connect_enabled_platforms",
                    "_collect_metrics",
                    "analyze_community_health",
                    "generate_insights_and_recommendations",
                    "create_community_building_plan",
                    "post_content",
                    "identify_advocates",
                    "track_member_interactions"
                ]
            },
            "routes": [],
            "complexity": 44
        },
        "core\\social\\social_post_db.py": {
            "functions": [
                "__init__",
                "_load",
                "_save",
                "_load_memory",
                "_save_memory",
                "update_memory",
                "get_memory",
                "add_to_queue",
                "mark_posted",
                "mark_failed",
                "get_next_post",
                "get_queue_length"
            ],
            "classes": {
                "SocialPostDatabase": [
                    "__init__",
                    "_load",
                    "_save",
                    "_load_memory",
                    "_save_memory",
                    "update_memory",
                    "get_memory",
                    "add_to_queue",
                    "mark_posted",
                    "mark_failed",
                    "get_next_post",
                    "get_queue_length"
                ]
            },
            "routes": [],
            "complexity": 24
        },
        "core\\social\\StrategyLoader.py": {
            "functions": [
                "__init__",
                "load_strategy",
                "_validate_strategy",
                "get_available_strategies",
                "reload_strategy",
                "register_strategy"
            ],
            "classes": {
                "StrategyLoader": [
                    "__init__",
                    "load_strategy",
                    "_validate_strategy",
                    "get_available_strategies",
                    "reload_strategy",
                    "register_strategy"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "core\\social\\social_post_manager.py": {
            "functions": [
                "__init__",
                "post_next",
                "post_all",
                "enqueue_post",
                "shutdown",
                "post_to_platform"
            ],
            "classes": {
                "SocialPostManager": [
                    "__init__",
                    "post_next",
                    "post_all",
                    "enqueue_post",
                    "shutdown"
                ]
            },
            "routes": [],
            "complexity": 11
        },
        "core\\social\\TaskQueueManager.py": {
            "functions": [
                "__init__",
                "start",
                "stop",
                "add_task",
                "_worker",
                "queue_size",
                "status",
                "sample_task"
            ],
            "classes": {
                "TaskQueueManager": [
                    "__init__",
                    "start",
                    "stop",
                    "add_task",
                    "_worker",
                    "queue_size",
                    "status"
                ]
            },
            "routes": [],
            "complexity": 15
        },
        "core\\social\\UnifiedCommunityDashboard.py": {
            "functions": [
                "to_dict",
                "__init__",
                "_initialize_strategies",
                "_load_saved_data",
                "save_data",
                "update_metrics",
                "update_top_members",
                "generate_insights",
                "_calculate_trends",
                "_generate_platform_insights",
                "_generate_overall_insights",
                "get_metrics_history",
                "get_latest_metrics",
                "generate_metrics_chart",
                "get_platform_status",
                "get_community_building_plan",
                "_get_recommended_platforms_for_day"
            ],
            "classes": {
                "CommunityMetrics": [
                    "to_dict"
                ],
                "CommunityDashboard": [
                    "__init__",
                    "_initialize_strategies",
                    "_load_saved_data",
                    "save_data",
                    "update_metrics",
                    "update_top_members",
                    "generate_insights",
                    "_calculate_trends",
                    "_generate_platform_insights",
                    "_generate_overall_insights",
                    "get_metrics_history",
                    "get_latest_metrics",
                    "generate_metrics_chart",
                    "get_platform_status",
                    "get_community_building_plan",
                    "_get_recommended_platforms_for_day"
                ]
            },
            "routes": [],
            "complexity": 34
        },
        "core\\social\\data\\post_history.py": {
            "functions": [
                "__init__",
                "_load_history",
                "_save_history",
                "add_post",
                "get_posts",
                "clear_history"
            ],
            "classes": {
                "PostHistory": [
                    "__init__",
                    "_load_history",
                    "_save_history",
                    "add_post",
                    "get_posts",
                    "clear_history"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "core\\social\\ai\\chat_agent.py": {
            "functions": [
                "__init__"
            ],
            "classes": {
                "AIChatAgent": [
                    "__init__"
                ]
            },
            "routes": [],
            "complexity": 2
        },
        "core\\social\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\social\\data\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\social\\ai\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\social\\strategies\\ai_strategy.py": {
            "functions": [
                "__init__",
                "analyze_sentiment",
                "_build_response_prompt",
                "_get_response_template",
                "_get_fallback_response",
                "_summarize_recent_content",
                "_get_sentiment_label",
                "_load_templates",
                "_load_history",
                "_track_response",
                "get_response_analytics"
            ],
            "classes": {
                "AIStrategy": [
                    "__init__",
                    "analyze_sentiment",
                    "_build_response_prompt",
                    "_get_response_template",
                    "_get_fallback_response",
                    "_summarize_recent_content",
                    "_get_sentiment_label",
                    "_load_templates",
                    "_load_history",
                    "_track_response",
                    "get_response_analytics"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "core\\social\\UnifiedPostManager.py": {
            "functions": [
                "__init__",
                "_load_post_history",
                "_save_post_history",
                "post_to_platform",
                "_adapt_content_for_platform",
                "schedule_post",
                "get_scheduled_posts",
                "cancel_scheduled_post",
                "get_post_analytics",
                "_get_current_metrics",
                "generate_content_ideas"
            ],
            "classes": {
                "UnifiedPostManager": [
                    "__init__",
                    "_load_post_history",
                    "_save_post_history",
                    "post_to_platform",
                    "_adapt_content_for_platform",
                    "schedule_post",
                    "get_scheduled_posts",
                    "cancel_scheduled_post",
                    "get_post_analytics",
                    "_get_current_metrics",
                    "generate_content_ideas"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "core\\social\\strategies\\BaseEngagementBot.py": {
            "functions": [
                "retry_on_failure",
                "decorator_retry",
                "__init__",
                "get_driver",
                "get_random_user_agent",
                "_wait",
                "login",
                "is_logged_in",
                "_login_with_credentials",
                "post",
                "like_posts",
                "comment_on_posts",
                "follow_users",
                "unfollow_non_returners",
                "go_viral",
                "_log_followed_users",
                "_find_posts",
                "_find_like_button",
                "_find_comment_box",
                "_find_profile_url",
                "_find_follow_button",
                "_find_unfollow_button",
                "run_daily_session",
                "wrapper_retry"
            ],
            "classes": {
                "BaseEngagementBot": [
                    "__init__",
                    "get_driver",
                    "get_random_user_agent",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "_login_with_credentials",
                    "post",
                    "like_posts",
                    "comment_on_posts",
                    "follow_users",
                    "unfollow_non_returners",
                    "go_viral",
                    "_log_followed_users",
                    "_find_posts",
                    "_find_like_button",
                    "_find_comment_box",
                    "_find_profile_url",
                    "_find_follow_button",
                    "_find_unfollow_button",
                    "run_daily_session"
                ]
            },
            "routes": [],
            "complexity": 45
        },
        "core\\social\\strategies\\base_platform_strategy.py": {
            "functions": [
                "__init__",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "analyze_comment_sentiment",
                "reinforce_engagement",
                "reward_top_engagers",
                "cross_platform_feedback_loop",
                "run_feedback_loop",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction"
            ],
            "classes": {
                "BasePlatformStrategy": [
                    "__init__",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "analyze_comment_sentiment",
                    "reinforce_engagement",
                    "reward_top_engagers",
                    "cross_platform_feedback_loop",
                    "run_feedback_loop",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction"
                ]
            },
            "routes": [],
            "complexity": 28
        },
        "core\\social\\strategies\\context_db.py": {
            "functions": [
                "__init__",
                "create_tables",
                "log_post",
                "fetch_recent_posts",
                "fetch_last_post_content",
                "log_engagement",
                "fetch_engagements_for_post",
                "get_rate_limit",
                "update_rate_limit",
                "update_sentiment",
                "close"
            ],
            "classes": {
                "UnifiedContextEngine": [
                    "__init__",
                    "create_tables",
                    "log_post",
                    "fetch_recent_posts",
                    "fetch_last_post_content",
                    "log_engagement",
                    "fetch_engagements_for_post",
                    "get_rate_limit",
                    "update_rate_limit",
                    "update_sentiment",
                    "close"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "core\\social\\strategies\\reddit_strategy.py": {
            "functions": [
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "run_feedback_loop",
                "adaptive_posting_strategy"
            ],
            "classes": {
                "RedditStrategy": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "run_feedback_loop",
                    "adaptive_posting_strategy"
                ]
            },
            "routes": [],
            "complexity": 34
        },
        "core\\social\\strategies\\config_loader.py": {
            "functions": [
                "load_yaml_config",
                "load_json_config",
                "load_configs",
                "get_nested",
                "get_env_or_config",
                "reload_configs"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "core\\social\\strategies\\linkedin_strategy.py": {
            "functions": [
                "retry_on_failure",
                "decorator_retry",
                "__init__",
                "_get_driver",
                "get_random_user_agent",
                "_wait",
                "login",
                "is_logged_in",
                "_login_with_credentials",
                "post",
                "like_posts",
                "comment_on_posts",
                "follow_users",
                "unfollow_non_returners",
                "go_viral",
                "_log_followed_users",
                "_find_posts",
                "_find_like_button",
                "_find_comment_box",
                "_find_profile_url",
                "_find_follow_button",
                "_find_unfollow_button",
                "run_daily_session",
                "__init__",
                "is_logged_in",
                "_login_with_credentials",
                "post",
                "_find_posts",
                "_find_like_button",
                "_find_comment_box",
                "_find_profile_url",
                "_find_follow_button",
                "_find_unfollow_button",
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "get_random_user_agent",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "wrapper_retry"
            ],
            "classes": {
                "BaseEngagementBot": [
                    "__init__",
                    "_get_driver",
                    "get_random_user_agent",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "_login_with_credentials",
                    "post",
                    "like_posts",
                    "comment_on_posts",
                    "follow_users",
                    "unfollow_non_returners",
                    "go_viral",
                    "_log_followed_users",
                    "_find_posts",
                    "_find_like_button",
                    "_find_comment_box",
                    "_find_profile_url",
                    "_find_follow_button",
                    "_find_unfollow_button",
                    "run_daily_session"
                ],
                "LinkedInEngagementBot": [
                    "__init__",
                    "is_logged_in",
                    "_login_with_credentials",
                    "post",
                    "_find_posts",
                    "_find_like_button",
                    "_find_comment_box",
                    "_find_profile_url",
                    "_find_follow_button",
                    "_find_unfollow_button"
                ],
                "LinkedinStrategy": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "get_random_user_agent",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session"
                ]
            },
            "routes": [],
            "complexity": 91
        },
        "core\\social\\strategies\\community_scheduler.py": {
            "functions": [
                "__init__",
                "schedule_task",
                "schedule_engagement_check",
                "schedule_ai_responses",
                "schedule_daily_report",
                "_check_engagement",
                "_load_schedules",
                "_save_schedules",
                "_is_comment_processed",
                "_mark_comment_processed",
                "start",
                "stop"
            ],
            "classes": {
                "CommunityScheduler": [
                    "__init__",
                    "schedule_task",
                    "schedule_engagement_check",
                    "schedule_ai_responses",
                    "schedule_daily_report",
                    "_check_engagement",
                    "_load_schedules",
                    "_save_schedules",
                    "_is_comment_processed",
                    "_mark_comment_processed",
                    "start",
                    "stop"
                ]
            },
            "routes": [],
            "complexity": 24
        },
        "core\\social\\strategies\\facebook_strategy.py": {
            "functions": [
                "retry_on_failure",
                "get_random_user_agent",
                "start_scheduler",
                "post_to_facebook",
                "decorator_retry",
                "__init__",
                "_wait",
                "get_driver",
                "is_logged_in",
                "login",
                "post",
                "like_posts",
                "comment_on_posts",
                "follow_users",
                "unfollow_non_returners",
                "_log_followed_users",
                "go_viral",
                "run_daily_session",
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "get_random_user_agent",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "adaptive_posting_strategy",
                "analyze_comment_sentiment",
                "reinforce_engagement",
                "reward_top_followers",
                "cross_platform_feedback_loop",
                "run_feedback_loop",
                "wrapper_retry"
            ],
            "classes": {
                "FacebookBot": [
                    "__init__",
                    "_wait",
                    "get_driver",
                    "is_logged_in",
                    "login",
                    "post"
                ],
                "FacebookEngagementBot": [
                    "like_posts",
                    "comment_on_posts",
                    "follow_users",
                    "unfollow_non_returners",
                    "_log_followed_users",
                    "go_viral",
                    "run_daily_session"
                ],
                "FacebookStrategy": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "get_random_user_agent",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "adaptive_posting_strategy",
                    "analyze_comment_sentiment",
                    "reinforce_engagement",
                    "reward_top_followers",
                    "cross_platform_feedback_loop",
                    "run_feedback_loop"
                ]
            },
            "routes": [],
            "complexity": 76
        },
        "core\\social\\strategies\\instagram_strategy.py": {
            "functions": [
                "retry_on_failure",
                "get_random_mobile_user_agent",
                "start_scheduler",
                "post_to_instagram",
                "decorator_retry",
                "__init__",
                "get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "create_post",
                "like_posts",
                "comment_on_posts",
                "_gather_post_links",
                "follow_users",
                "unfollow_user",
                "__init__",
                "run_daily_session",
                "generate_ai_comments",
                "like_posts",
                "comment_on_posts",
                "follow_users",
                "unfollow_non_returners",
                "_log_followed_users",
                "go_viral",
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "analyze_comment_sentiment",
                "reinforce_engagement",
                "reward_top_engagers",
                "cross_platform_feedback_loop",
                "run_feedback_loop",
                "wrapper_retry"
            ],
            "classes": {
                "InstagramBot": [
                    "__init__",
                    "get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "create_post",
                    "like_posts",
                    "comment_on_posts",
                    "_gather_post_links",
                    "follow_users",
                    "unfollow_user"
                ],
                "InstagramEngagementBot": [
                    "__init__",
                    "run_daily_session",
                    "generate_ai_comments",
                    "like_posts",
                    "comment_on_posts",
                    "follow_users",
                    "unfollow_non_returners",
                    "_log_followed_users",
                    "go_viral"
                ],
                "InstagramStrategy": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "analyze_comment_sentiment",
                    "reinforce_engagement",
                    "reward_top_engagers",
                    "cross_platform_feedback_loop",
                    "run_feedback_loop"
                ]
            },
            "routes": [],
            "complexity": 86
        },
        "core\\social\\strategies\\tiktok_strategy.py": {
            "functions": [
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_video",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "run_feedback_loop",
                "adaptive_posting_strategy",
                "update_trending_hashtags",
                "reward_top_creators",
                "cross_platform_feedback_loop"
            ],
            "classes": {
                "TikTokStrategy": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_video",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "run_feedback_loop",
                    "adaptive_posting_strategy",
                    "update_trending_hashtags",
                    "reward_top_creators",
                    "cross_platform_feedback_loop"
                ]
            },
            "routes": [],
            "complexity": 40
        },
        "core\\social\\strategies\\stocktwits_strategy.py": {
            "functions": [
                "__init__",
                "login",
                "is_logged_in",
                "post",
                "engage_community",
                "_log_follow",
                "unfollow_non_returners",
                "run_daily_session",
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "run_feedback_loop",
                "adaptive_posting_strategy",
                "reinforce_engagement",
                "reward_top_engagers",
                "cross_platform_feedback_loop"
            ],
            "classes": {
                "StocktwitsCommunityArchitect": [
                    "__init__",
                    "login",
                    "is_logged_in",
                    "post",
                    "engage_community",
                    "_log_follow",
                    "unfollow_non_returners",
                    "run_daily_session"
                ],
                "StocktwitsStrategy": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "run_feedback_loop",
                    "adaptive_posting_strategy",
                    "reinforce_engagement",
                    "reward_top_engagers",
                    "cross_platform_feedback_loop"
                ]
            },
            "routes": [],
            "complexity": 56
        },
        "core\\social\\strategies\\twitter_strategy.py": {
            "functions": [
                "__init__",
                "login",
                "is_logged_in",
                "post_tweet",
                "post_thread",
                "_extract_tweet_id",
                "engage_community",
                "_follow_author",
                "_log_follow",
                "unfollow_non_returners",
                "run_daily_session",
                "post_thread",
                "__init__",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "adaptive_posting_strategy",
                "analyze_comment_sentiment",
                "reinforce_engagement",
                "reward_top_engagers",
                "cross_platform_feedback_loop",
                "run_feedback_loop",
                "run_daily_strategy_session"
            ],
            "classes": {
                "TwitterCommunityArchitect": [
                    "__init__",
                    "login",
                    "is_logged_in",
                    "post_tweet",
                    "post_thread",
                    "_extract_tweet_id",
                    "engage_community",
                    "_follow_author",
                    "_log_follow",
                    "unfollow_non_returners",
                    "run_daily_session",
                    "post_thread"
                ],
                "TwitterStrategy": [
                    "__init__",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "adaptive_posting_strategy",
                    "analyze_comment_sentiment",
                    "reinforce_engagement",
                    "reward_top_engagers",
                    "cross_platform_feedback_loop",
                    "run_feedback_loop",
                    "run_daily_strategy_session"
                ]
            },
            "routes": [],
            "complexity": 46
        },
        "interfaces\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\social\\strategies\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\social\\strategies\\wordpress_strategy.py": {
            "functions": [
                "__init__",
                "initialize",
                "cleanup",
                "sync_youtube_video",
                "moderate_comment",
                "get_community_metrics",
                "get_top_members",
                "_load_community_data",
                "_save_community_data",
                "generate_engagement_report",
                "track_member_interaction"
            ],
            "classes": {
                "WordPressCommunityStrategy": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "sync_youtube_video",
                    "moderate_comment",
                    "get_community_metrics",
                    "get_top_members",
                    "_load_community_data",
                    "_save_community_data",
                    "generate_engagement_report",
                    "track_member_interaction"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "interfaces\\pyqt\\dreamscape_ui_logic.py": {
            "functions": [
                "__init__",
                "set_output_signal",
                "set_discord_log_signal",
                "set_status_update_signal",
                "_output",
                "_discord_log",
                "_update_status",
                "get_service",
                "is_service_available",
                "execute_prompt",
                "save_prompts",
                "reset_prompts",
                "execute_single_prompt",
                "run_single_chat_mode",
                "run_multi_chat_mode",
                "start_prompt_cycle",
                "load_prompt",
                "save_prompt",
                "launch_discord_bot",
                "stop_discord_bot",
                "run_prompt_tuning",
                "analyze_execution_response",
                "shutdown",
                "worker",
                "worker"
            ],
            "classes": {
                "DreamscapeUILogic": [
                    "__init__",
                    "set_output_signal",
                    "set_discord_log_signal",
                    "set_status_update_signal",
                    "_output",
                    "_discord_log",
                    "_update_status",
                    "get_service",
                    "is_service_available",
                    "execute_prompt",
                    "save_prompts",
                    "reset_prompts",
                    "execute_single_prompt",
                    "run_single_chat_mode",
                    "run_multi_chat_mode",
                    "start_prompt_cycle",
                    "load_prompt",
                    "save_prompt",
                    "launch_discord_bot",
                    "stop_discord_bot",
                    "run_prompt_tuning",
                    "analyze_execution_response",
                    "shutdown"
                ]
            },
            "routes": [],
            "complexity": 48
        },
        "interfaces\\pyqt\\dreamscape_gui.py": {
            "functions": [
                "initialize_services",
                "initialize_community_manager",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "interfaces\\pyqt\\bootstrap.py": {
            "functions": [
                "__init__",
                "initUI",
                "closeEvent"
            ],
            "classes": {
                "DreamscapeGUI": [
                    "__init__",
                    "initUI",
                    "closeEvent"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "interfaces\\pyqt\\DreamOsMainWindow.py": {
            "functions": [
                "main",
                "_ensure_service",
                "_create_empty_service",
                "__init__",
                "verify_services",
                "setup_ui",
                "setup_signals",
                "on_append_output",
                "on_status_update",
                "on_discord_log",
                "on_task_started",
                "on_task_progress",
                "on_task_completed",
                "on_task_failed",
                "handle_scan",
                "start_assistant",
                "stop_assistant",
                "send_message",
                "closeEvent",
                "__init__",
                "__getattr__",
                "method"
            ],
            "classes": {
                "DreamscapeMainWindow": [
                    "__init__",
                    "verify_services",
                    "setup_ui",
                    "setup_signals",
                    "on_append_output",
                    "on_status_update",
                    "on_discord_log",
                    "on_task_started",
                    "on_task_progress",
                    "on_task_completed",
                    "on_task_failed",
                    "handle_scan",
                    "start_assistant",
                    "stop_assistant",
                    "send_message",
                    "closeEvent"
                ],
                "EmptyService": [
                    "__init__",
                    "__getattr__"
                ]
            },
            "routes": [],
            "complexity": 40
        },
        "interfaces\\pyqt\\dreamscape_services.py": {
            "functions": [
                "find_project_root",
                "__init__",
                "_init_service",
                "_init_discord_service",
                "_init_task_orchestrator",
                "_create_empty_service",
                "_map_service_dependencies",
                "get_service",
                "set_service",
                "_log_initialization_status",
                "service_health_check",
                "shutdown",
                "create_chat_manager",
                "execute_prompt",
                "start_prompt_cycle",
                "load_prompt",
                "save_prompt",
                "reset_prompts",
                "launch_discord_bot",
                "stop_discord_bot",
                "send_discord_message",
                "send_discord_file",
                "send_discord_template",
                "get_discord_status",
                "run_prompt_tuning",
                "generate_dreamscape_content",
                "get_dreamscape_context",
                "send_context_to_chatgpt",
                "schedule_context_updates",
                "analyze_execution_response",
                "discord",
                "discord",
                "bootstrap_services",
                "shutdown_all",
                "__init__",
                "__getattr__",
                "is_empty_service",
                "method"
            ],
            "classes": {
                "DreamscapeService": [
                    "__init__",
                    "_init_service",
                    "_init_discord_service",
                    "_init_task_orchestrator",
                    "_create_empty_service",
                    "_map_service_dependencies",
                    "get_service",
                    "set_service",
                    "_log_initialization_status",
                    "service_health_check",
                    "shutdown",
                    "create_chat_manager",
                    "execute_prompt",
                    "start_prompt_cycle",
                    "load_prompt",
                    "save_prompt",
                    "reset_prompts",
                    "launch_discord_bot",
                    "stop_discord_bot",
                    "send_discord_message",
                    "send_discord_file",
                    "send_discord_template",
                    "get_discord_status",
                    "run_prompt_tuning",
                    "generate_dreamscape_content",
                    "get_dreamscape_context",
                    "send_context_to_chatgpt",
                    "schedule_context_updates",
                    "analyze_execution_response",
                    "discord",
                    "discord",
                    "bootstrap_services",
                    "shutdown_all"
                ],
                "EmptyService": [
                    "__init__",
                    "__getattr__",
                    "is_empty_service"
                ]
            },
            "routes": [],
            "complexity": 74
        },
        "core\\social\\strategies\\youtube_strategy.py": {
            "functions": [
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_video",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "run_feedback_loop",
                "adaptive_posting_strategy",
                "reward_top_creators",
                "cross_platform_feedback_loop"
            ],
            "classes": {
                "YouTubeStrategy": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_video",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "run_feedback_loop",
                    "adaptive_posting_strategy",
                    "reward_top_creators",
                    "cross_platform_feedback_loop"
                ]
            },
            "routes": [],
            "complexity": 38
        },
        "interfaces\\pyqt\\feedback_dashboard.py": {
            "functions": [
                "__init__",
                "initUI",
                "refresh_dashboard",
                "update_display"
            ],
            "classes": {
                "FeedbackDashboard": [
                    "__init__",
                    "initUI",
                    "refresh_dashboard",
                    "update_display"
                ]
            },
            "routes": [],
            "complexity": 8
        },
        "interfaces\\pyqt\\IntegratedMainWindow.py": {
            "functions": [
                "__init__",
                "_wire_ui_actions",
                "on_execute_prompt",
                "on_save_prompt",
                "on_reset_prompts",
                "on_launch_discord_bot",
                "on_stop_discord_bot",
                "on_launch_dashboard",
                "append_output",
                "append_discord_log",
                "update_discord_status",
                "task"
            ],
            "classes": {
                "IntegratedMainWindow": [
                    "__init__",
                    "_wire_ui_actions",
                    "on_execute_prompt",
                    "on_save_prompt",
                    "on_reset_prompts",
                    "on_launch_discord_bot",
                    "on_stop_discord_bot",
                    "on_launch_dashboard",
                    "append_output",
                    "append_discord_log",
                    "update_discord_status"
                ]
            },
            "routes": [],
            "complexity": 23
        },
        "interfaces\\pyqt\\sip_patcher.py": {
            "functions": [
                "patch_sip_imports",
                "patched_import"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "interfaces\\pyqt\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "interfaces\\pyqt\\__main__.py": {
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "interfaces\\pyqt\\components\\prompt_execution_tab.py": {
            "functions": [
                "__init__",
                "initUI",
                "_create_exclusion_group",
                "_create_prompt_controls_group",
                "add_exclusion",
                "remove_exclusion",
                "get_excluded_chats",
                "update_execution_mode",
                "load_prompt"
            ],
            "classes": {
                "PromptExecutionTab": [
                    "__init__",
                    "initUI",
                    "_create_exclusion_group",
                    "_create_prompt_controls_group",
                    "add_exclusion",
                    "remove_exclusion",
                    "get_excluded_chats",
                    "update_execution_mode",
                    "load_prompt"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "interfaces\\pyqt\\components\\logs_tab.py": {
            "functions": [
                "__init__",
                "initUI",
                "append_log",
                "clear_logs",
                "get_logs"
            ],
            "classes": {
                "LogsTab": [
                    "__init__",
                    "initUI",
                    "append_log",
                    "clear_logs",
                    "get_logs"
                ]
            },
            "routes": [],
            "complexity": 10
        },
        "interfaces\\pyqt\\components\\logs_panel.py": {
            "functions": [
                "__init__",
                "initUI",
                "append_log",
                "clear_logs",
                "export_logs",
                "get_logs"
            ],
            "classes": {
                "LogsPanel": [
                    "__init__",
                    "initUI",
                    "append_log",
                    "clear_logs",
                    "export_logs",
                    "get_logs"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "interfaces\\pyqt\\components\\discord_tab.py": {
            "functions": [
                "__init__",
                "_connect_signals",
                "initUI",
                "_create_discord_group",
                "update_status",
                "append_log",
                "get_bot_config",
                "_on_task_done",
                "handle_discord_event",
                "handle_dreamscape_generated",
                "handle_prompt_executed"
            ],
            "classes": {
                "DiscordTab": [
                    "__init__",
                    "_connect_signals",
                    "initUI",
                    "_create_discord_group",
                    "update_status",
                    "append_log",
                    "get_bot_config",
                    "_on_task_done",
                    "handle_discord_event",
                    "handle_dreamscape_generated",
                    "handle_prompt_executed"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "interfaces\\pyqt\\components\\prompt_panel.py": {
            "functions": [
                "__init__",
                "setup_ui",
                "load_sample_prompts",
                "_add_prompt_to_list",
                "on_prompt_selected",
                "save_prompt",
                "use_prompt",
                "add_custom_prompt",
                "remove_custom_prompt",
                "get_prompt_text",
                "set_prompt_text"
            ],
            "classes": {
                "PromptPanel": [
                    "__init__",
                    "setup_ui",
                    "load_sample_prompts",
                    "_add_prompt_to_list",
                    "on_prompt_selected",
                    "save_prompt",
                    "use_prompt",
                    "add_custom_prompt",
                    "remove_custom_prompt",
                    "get_prompt_text",
                    "set_prompt_text"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "interfaces\\pyqt\\components\\community_dashboard_tab.py": {
            "functions": [
                "__init__",
                "setup_ui",
                "setup_overview_tab",
                "setup_insights_tab",
                "setup_community_tab",
                "setup_planning_tab",
                "refresh_data",
                "generate_insights",
                "generate_plan",
                "on_platform_changed",
                "on_focus_changed",
                "update_metrics_view",
                "update_insights_view",
                "update_members_view",
                "update_platform_status",
                "update_plan_view",
                "generate_content_strategy",
                "add_activity_log"
            ],
            "classes": {
                "CommunityDashboardTab": [
                    "__init__",
                    "setup_ui",
                    "setup_overview_tab",
                    "setup_insights_tab",
                    "setup_community_tab",
                    "setup_planning_tab",
                    "refresh_data",
                    "generate_insights",
                    "generate_plan",
                    "on_platform_changed",
                    "on_focus_changed",
                    "update_metrics_view",
                    "update_insights_view",
                    "update_members_view",
                    "update_platform_status",
                    "update_plan_view",
                    "generate_content_strategy",
                    "add_activity_log"
                ]
            },
            "routes": [],
            "complexity": 36
        },
        "interfaces\\pyqt\\components\\dialogs\\exclusions_dialog.py": {
            "functions": [
                "__init__",
                "initUI",
                "refresh_list",
                "add_exclusion",
                "remove_selected",
                "get_exclusions"
            ],
            "classes": {
                "ExclusionsDialog": [
                    "__init__",
                    "initUI",
                    "refresh_list",
                    "add_exclusion",
                    "remove_selected",
                    "get_exclusions"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "interfaces\\pyqt\\components\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "interfaces\\pyqt\\components\\dialogs\\discord_settings.py": {
            "functions": [
                "__init__",
                "initUI",
                "save_credentials",
                "map_prompt_to_channel",
                "unmap_selected_prompt",
                "refresh_prompt_channel_list"
            ],
            "classes": {
                "DiscordSettingsDialog": [
                    "__init__",
                    "initUI",
                    "save_credentials",
                    "map_prompt_to_channel",
                    "unmap_selected_prompt",
                    "refresh_prompt_channel_list"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "interfaces\\pyqt\\components\\dialogs\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "interfaces\\pyqt\\tabs\\DreamscapeGenerationTab.py": {
            "functions": [
                "__init__",
                "_store_service_references",
                "init_ui",
                "_setup_title",
                "_setup_left_panel",
                "_setup_episode_list_group",
                "_setup_controls_group",
                "_setup_context_controls",
                "_setup_right_panel",
                "_setup_content_tab",
                "_setup_context_tab",
                "_setup_log_tab",
                "_setup_template_tab",
                "on_episode_selected",
                "share_to_discord",
                "_on_template_selected",
                "_validate_template_context",
                "_save_rendered_output",
                "refresh_episode_list",
                "refresh_context_memory",
                "log_output",
                "render_dreamscape_template",
                "_setup_timers",
                "_load_initial_data",
                "send_context_to_chatgpt",
                "save_context_schedule",
                "populate_chat_list"
            ],
            "classes": {
                "DreamscapeGenerationTab": [
                    "__init__",
                    "_store_service_references",
                    "init_ui",
                    "_setup_title",
                    "_setup_left_panel",
                    "_setup_episode_list_group",
                    "_setup_controls_group",
                    "_setup_context_controls",
                    "_setup_right_panel",
                    "_setup_content_tab",
                    "_setup_context_tab",
                    "_setup_log_tab",
                    "_setup_template_tab",
                    "on_episode_selected",
                    "share_to_discord",
                    "_on_template_selected",
                    "_validate_template_context",
                    "_save_rendered_output",
                    "refresh_episode_list",
                    "refresh_context_memory",
                    "log_output",
                    "render_dreamscape_template",
                    "_setup_timers",
                    "_load_initial_data",
                    "send_context_to_chatgpt",
                    "save_context_schedule",
                    "populate_chat_list"
                ]
            },
            "routes": [],
            "complexity": 54
        },
        "interfaces\\pyqt\\components\\digital_dreamscape\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "interfaces\\pyqt\\tabs\\MainTabs.py": {
            "functions": [
                "__init__",
                "_init_tabs",
                "_connect_signals",
                "_on_prompt_executed",
                "_on_dreamscape_generated",
                "_on_discord_event",
                "_on_debug_completed",
                "_on_cursor_code_generated",
                "_on_automation_result",
                "append_output",
                "broadcast_message"
            ],
            "classes": {
                "MainTabs": [
                    "__init__",
                    "_init_tabs",
                    "_connect_signals",
                    "_on_prompt_executed",
                    "_on_dreamscape_generated",
                    "_on_discord_event",
                    "_on_debug_completed",
                    "_on_cursor_code_generated",
                    "_on_automation_result",
                    "append_output",
                    "broadcast_message"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "interfaces\\pyqt\\tabs\\ConfigurationTab.py": {
            "functions": [
                "__init__",
                "initUI",
                "open_exclusions_dialog",
                "open_discord_settings_dialog",
                "open_reinforcement_tools_dialog",
                "log_action"
            ],
            "classes": {
                "ConfigurationTab": [
                    "__init__",
                    "initUI",
                    "open_exclusions_dialog",
                    "open_discord_settings_dialog",
                    "open_reinforcement_tools_dialog",
                    "log_action"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "interfaces\\pyqt\\tabs\\SyncOpsTab.py": {
            "functions": [
                "__init__",
                "_init_ui",
                "toggle_clock",
                "toggle_pomodoro",
                "update_pomodoro_timer",
                "_log_event",
                "save_session"
            ],
            "classes": {
                "SyncOpsTab": [
                    "__init__",
                    "_init_ui",
                    "toggle_clock",
                    "toggle_pomodoro",
                    "update_pomodoro_timer",
                    "_log_event",
                    "save_session"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "interfaces\\pyqt\\tabs\\AIDE.py": {
            "functions": [
                "__init__",
                "_init_ui",
                "_connect_signals",
                "load_file_into_preview",
                "process_file",
                "self_heal",
                "run_tests",
                "send_prompt",
                "process_batch_files",
                "on_run_debug",
                "on_apply_fix",
                "on_rollback_fix",
                "on_cursor_execute",
                "on_automation_result",
                "on_cursor_code_generated",
                "append_output"
            ],
            "classes": {
                "AIDE": [
                    "__init__",
                    "_init_ui",
                    "_connect_signals",
                    "load_file_into_preview",
                    "process_file",
                    "self_heal",
                    "run_tests",
                    "send_prompt",
                    "process_batch_files",
                    "on_run_debug",
                    "on_apply_fix",
                    "on_rollback_fix",
                    "on_cursor_execute",
                    "on_automation_result",
                    "on_cursor_code_generated",
                    "append_output"
                ]
            },
            "routes": [],
            "complexity": 32
        },
        "interfaces\\pyqt\\tabs\\LogsTab.py": {
            "functions": [
                "__init__",
                "initUI",
                "append_log",
                "append_output",
                "clear_logs"
            ],
            "classes": {
                "LogsTab": [
                    "__init__",
                    "initUI",
                    "append_log",
                    "append_output",
                    "clear_logs"
                ]
            },
            "routes": [],
            "complexity": 10
        },
        "interfaces\\pyqt\\components\\dialogs\\reinforcement_dialog.py": {
            "functions": [
                "__init__",
                "initUI",
                "load_feedback",
                "display_feedback_details",
                "export_feedback",
                "clear_feedback",
                "auto_tune_prompts"
            ],
            "classes": {
                "ReinforcementToolsDialog": [
                    "__init__",
                    "initUI",
                    "load_feedback",
                    "display_feedback_details",
                    "export_feedback",
                    "clear_feedback",
                    "auto_tune_prompts"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "interfaces\\pyqt\\tabs\\SocialDashboardTab.py": {
            "functions": [
                "__init__",
                "_load_defaults_from_env",
                "_load_defaults_from_config",
                "init_ui",
                "_create_platform_group",
                "test_platform_connection",
                "save_platform_credentials",
                "save_all_credentials",
                "_save_credentials_to_storage",
                "refresh_from_config",
                "_log_output"
            ],
            "classes": {
                "SocialDashboardTab": [
                    "__init__",
                    "_load_defaults_from_env",
                    "_load_defaults_from_config",
                    "init_ui",
                    "_create_platform_group",
                    "test_platform_connection",
                    "save_platform_credentials",
                    "save_all_credentials",
                    "_save_credentials_to_storage",
                    "refresh_from_config",
                    "_log_output"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "interfaces\\pyqt\\tabs\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "interfaces\\pyqt\\tabs\\PromptExecutionTab.py": {
            "functions": [
                "__init__",
                "generate",
                "__init__",
                "_init_ui",
                "_connect_signals",
                "ensure_local_llm_loaded",
                "on_prompt_loaded",
                "_on_task_done",
                "log_output",
                "handle_discord_event"
            ],
            "classes": {
                "LocalLLMWrapper": [
                    "__init__",
                    "generate"
                ],
                "PromptExecutionTab": [
                    "__init__",
                    "_init_ui",
                    "_connect_signals",
                    "ensure_local_llm_loaded",
                    "on_prompt_loaded",
                    "_on_task_done",
                    "log_output",
                    "handle_discord_event"
                ]
            },
            "routes": [],
            "complexity": 20
        },
        "interfaces\\pyqt\\tabs\\dreamscape_generation\\DreamscapeEpisodeGenerator.py": {
            "functions": [
                "__init__",
                "_load_context_memory",
                "_save_context_memory",
                "_extract_themes",
                "_update_context_with_episode",
                "get_context_summary",
                "get_episode_number",
                "shutdown",
                "get_chatgpt_context_prompt",
                "_generate_dreamscape_entry",
                "ensure_model_in_url",
                "_send_prompt_to_chat",
                "_get_latest_response",
                "_save_dreamscape_entry",
                "_extract_protocols",
                "get_status",
                "cancel_generation",
                "_extract_episode_title"
            ],
            "classes": {
                "DreamscapeEpisodeGenerator": [
                    "__init__",
                    "_load_context_memory",
                    "_save_context_memory",
                    "_extract_themes",
                    "_update_context_with_episode",
                    "get_context_summary",
                    "get_episode_number",
                    "shutdown",
                    "get_chatgpt_context_prompt",
                    "_generate_dreamscape_entry",
                    "ensure_model_in_url",
                    "_send_prompt_to_chat",
                    "_get_latest_response",
                    "_save_dreamscape_entry",
                    "_extract_protocols",
                    "get_status",
                    "cancel_generation",
                    "_extract_episode_title"
                ]
            },
            "routes": [],
            "complexity": 36
        },
        "interfaces\\pyqt\\tabs\\dreamscape_generation\\EpisodeGenerator.py": {
            "functions": [
                "__init__",
                "get_generation_status",
                "cancel_generation"
            ],
            "classes": {
                "EpisodeGenerator": [
                    "__init__",
                    "get_generation_status",
                    "cancel_generation"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "interfaces\\pyqt\\tabs\\dreamscape_generation\\ServiceInitializer.py": {
            "functions": [
                "__init__",
                "initialize_services",
                "_inject_services",
                "_initialize_core_services",
                "_initialize_component_managers",
                "_get_output_directory",
                "_get_initialized_services"
            ],
            "classes": {
                "ServiceInitializer": [
                    "__init__",
                    "initialize_services",
                    "_inject_services",
                    "_initialize_core_services",
                    "_initialize_component_managers",
                    "_get_output_directory",
                    "_get_initialized_services"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "interfaces\\pyqt\\tabs\\dreamscape_generation\\ContextManager.py": {
            "functions": [
                "__init__",
                "_get_output_directory",
                "get_context_summary",
                "refresh_context_display",
                "send_context_to_chat",
                "get_preview_context",
                "save_context_schedule"
            ],
            "classes": {
                "ContextManager": [
                    "__init__",
                    "_get_output_directory",
                    "get_context_summary",
                    "refresh_context_display",
                    "send_context_to_chat",
                    "get_preview_context",
                    "save_context_schedule"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "interfaces\\pyqt\\tabs\\dreamscape_generation\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "interfaces\\pyqt\\tabs\\dreamscape_generation\\UIManager.py": {
            "functions": [
                "__init__",
                "refresh_episode_list",
                "update_episode_content",
                "load_templates",
                "render_template_preview",
                "save_rendered_output",
                "setup_auto_update_timer",
                "_on_auto_update_timer",
                "log_output"
            ],
            "classes": {
                "UIManager": [
                    "__init__",
                    "refresh_episode_list",
                    "update_episode_content",
                    "load_templates",
                    "render_template_preview",
                    "save_rendered_output",
                    "setup_auto_update_timer",
                    "_on_auto_update_timer",
                    "log_output"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "interfaces\\web\\app.py": {
            "functions": [
                "create_app"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "interfaces\\web\\routes\\chat_routes.py": {
            "functions": [],
            "classes": {
                "ChatProcessingResponse": [],
                "ChatProcessingRequest": []
            },
            "routes": [],
            "complexity": 0
        },
        "interfaces\\web\\routes\\memory_routes.py": {
            "functions": [],
            "classes": {
                "MemoryStats": [],
                "MemoryStatsResponse": [],
                "Episode": [],
                "RecentEpisodesResponse": []
            },
            "routes": [],
            "complexity": 0
        },
        "interfaces\\web\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "interfaces\\web\\routes\\system_routes.py": {
            "functions": [],
            "classes": {
                "HealthResponse": []
            },
            "routes": [],
            "complexity": 0
        },
        "interfaces\\web\\dependencies.py": {
            "functions": [
                "get_chat_agent",
                "get_memory_manager"
            ],
            "classes": {
                "Dependencies": [
                    "get_chat_agent",
                    "get_memory_manager"
                ]
            },
            "routes": [],
            "complexity": 4
        },
        "interfaces\\web\\routes\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "scripts\\run_with_enhanced_driver.py": {
            "functions": [
                "main",
                "__init__",
                "get"
            ],
            "classes": {
                "Config": [
                    "__init__",
                    "get"
                ]
            },
            "routes": [],
            "complexity": 5
        },
        "scripts\\run_dreamscape.py": {
            "functions": [
                "setup_logging",
                "parse_args",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "scripts\\update_dreamscape_imports.py": {
            "functions": [
                "find_files_with_old_import",
                "backup_file",
                "update_imports",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "scripts\\migrate_config.py": {
            "functions": [
                "backup_old_config",
                "convert_old_config",
                "save_new_config",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "scripts\\check_context_updates.py": {
            "functions": [
                "setup_logging",
                "parse_args",
                "is_update_due",
                "update_schedule_after_run",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "scripts\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "scripts\\cleanup_dreamscape_migration.py": {
            "functions": [
                "run_tests",
                "archive_old_implementation",
                "cleanup_old_backups",
                "generate_report",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "social\\community_integration.py": {
            "functions": [
                "__init__",
                "_initialize_strategies",
                "_initialize_dashboard",
                "_initialize_post_manager",
                "analyze_community_health",
                "generate_insights_and_recommendations",
                "create_community_building_plan",
                "identify_advocates",
                "post_across_platforms",
                "track_member_interaction",
                "optimize_platform_strategies",
                "generate_visualizations",
                "run_daily_community_management"
            ],
            "classes": {
                "CommunityIntegrationManager": [
                    "__init__",
                    "_initialize_strategies",
                    "_initialize_dashboard",
                    "_initialize_post_manager",
                    "analyze_community_health",
                    "generate_insights_and_recommendations",
                    "create_community_building_plan",
                    "identify_advocates",
                    "post_across_platforms",
                    "track_member_interaction",
                    "optimize_platform_strategies",
                    "generate_visualizations",
                    "run_daily_community_management"
                ]
            },
            "routes": [],
            "complexity": 26
        },
        "social\\AIChatAgent.py": {
            "functions": [
                "__init__",
                "ask",
                "_ask_openai",
                "_ask_ollama",
                "_build_prompt",
                "_initialize_chat_thread",
                "append_to_chat_thread",
                "_log_interaction"
            ],
            "classes": {
                "AIChatAgent": [
                    "__init__",
                    "ask",
                    "_ask_openai",
                    "_ask_ollama",
                    "_build_prompt",
                    "_initialize_chat_thread",
                    "append_to_chat_thread",
                    "_log_interaction"
                ]
            },
            "routes": [],
            "complexity": 16
        },
        "social\\social_config.py": {
            "functions": [
                "__init__",
                "_default_platform_urls",
                "get_platform_url",
                "chrome_profile_path",
                "within_rate_limit",
                "register_action",
                "_check_daily_reset",
                "_save_rate_limit_state",
                "_load_rate_limit_state"
            ],
            "classes": {
                "SocialConfig": [
                    "__init__",
                    "_default_platform_urls",
                    "get_platform_url",
                    "chrome_profile_path",
                    "within_rate_limit",
                    "register_action",
                    "_check_daily_reset",
                    "_save_rate_limit_state",
                    "_load_rate_limit_state"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "social\\log_writer.py": {
            "functions": [
                "write_json_log",
                "log_login",
                "log_post",
                "log_error"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "social\\CommunityIntegrationManager.py": {
            "functions": [
                "__init__",
                "_check_platform_credentials",
                "_initialize_platforms",
                "_load_strategies",
                "_load_platform_status",
                "_save_platform_status",
                "get_available_platforms",
                "get_platform",
                "get_all_platforms",
                "enable_platform",
                "disable_platform",
                "connect_platform",
                "disconnect_platform",
                "run_daily_community_management",
                "_connect_enabled_platforms",
                "_collect_metrics",
                "analyze_community_health",
                "generate_insights_and_recommendations",
                "create_community_building_plan",
                "post_content",
                "identify_advocates",
                "track_member_interactions"
            ],
            "classes": {
                "CommunityIntegrationManager": [
                    "__init__",
                    "_check_platform_credentials",
                    "_initialize_platforms",
                    "_load_strategies",
                    "_load_platform_status",
                    "_save_platform_status",
                    "get_available_platforms",
                    "get_platform",
                    "get_all_platforms",
                    "enable_platform",
                    "disable_platform",
                    "connect_platform",
                    "disconnect_platform",
                    "run_daily_community_management",
                    "_connect_enabled_platforms",
                    "_collect_metrics",
                    "analyze_community_health",
                    "generate_insights_and_recommendations",
                    "create_community_building_plan",
                    "post_content",
                    "identify_advocates",
                    "track_member_interactions"
                ]
            },
            "routes": [],
            "complexity": 44
        },
        "social\\driver_manager.py": {
            "functions": [
                "get_multi_driver_sessions",
                "__init__",
                "initialize_driver",
                "_build_chrome_options",
                "_apply_stealth_settings",
                "shutdown_driver",
                "cleanup_profile",
                "restart_driver",
                "_get_profile_dir"
            ],
            "classes": {
                "DriverSession": [
                    "__init__",
                    "initialize_driver",
                    "_build_chrome_options",
                    "_apply_stealth_settings",
                    "shutdown_driver",
                    "cleanup_profile",
                    "restart_driver",
                    "_get_profile_dir"
                ]
            },
            "routes": [],
            "complexity": 17
        },
        "social\\StrategyLoader.py": {
            "functions": [
                "__init__",
                "load_strategy",
                "_validate_strategy",
                "get_available_strategies",
                "reload_strategy",
                "register_strategy"
            ],
            "classes": {
                "StrategyLoader": [
                    "__init__",
                    "load_strategy",
                    "_validate_strategy",
                    "get_available_strategies",
                    "reload_strategy",
                    "register_strategy"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "social\\social_config_wrapper.py": {
            "functions": [
                "get_social_config"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "social\\platform_login_manager.py": {
            "functions": [
                "load_cookies",
                "save_cookies",
                "wait_for_manual_login",
                "__init__",
                "login",
                "post",
                "__init__",
                "dispatch_all",
                "_process_platform",
                "_generate_content",
                "_shutdown_all_drivers"
            ],
            "classes": {
                "PlatformStrategy": [
                    "__init__",
                    "login",
                    "post"
                ],
                "SocialPlatformDispatcher": [
                    "__init__",
                    "dispatch_all",
                    "_process_platform",
                    "_generate_content",
                    "_shutdown_all_drivers"
                ]
            },
            "routes": [],
            "complexity": 19
        },
        "social\\TaskQueueManager.py": {
            "functions": [
                "__init__",
                "start",
                "stop",
                "add_task",
                "_worker",
                "queue_size",
                "status",
                "sample_task"
            ],
            "classes": {
                "TaskQueueManager": [
                    "__init__",
                    "start",
                    "stop",
                    "add_task",
                    "_worker",
                    "queue_size",
                    "status"
                ]
            },
            "routes": [],
            "complexity": 15
        },
        "social\\social_post_manager.py": {
            "functions": [
                "__init__",
                "post_next",
                "post_all",
                "enqueue_post",
                "shutdown",
                "post_to_platform"
            ],
            "classes": {
                "SocialPostManager": [
                    "__init__",
                    "post_next",
                    "post_all",
                    "enqueue_post",
                    "shutdown"
                ]
            },
            "routes": [],
            "complexity": 11
        },
        "social\\social_post_db.py": {
            "functions": [
                "__init__",
                "_load",
                "_save",
                "_load_memory",
                "_save_memory",
                "update_memory",
                "get_memory",
                "add_to_queue",
                "mark_posted",
                "mark_failed",
                "get_next_post",
                "get_queue_length"
            ],
            "classes": {
                "SocialPostDatabase": [
                    "__init__",
                    "_load",
                    "_save",
                    "_load_memory",
                    "_save_memory",
                    "update_memory",
                    "get_memory",
                    "add_to_queue",
                    "mark_posted",
                    "mark_failed",
                    "get_next_post",
                    "get_queue_length"
                ]
            },
            "routes": [],
            "complexity": 24
        },
        "social\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "social\\ai\\chat_agent.py": {
            "functions": [
                "__init__"
            ],
            "classes": {
                "AIChatAgent": [
                    "__init__"
                ]
            },
            "routes": [],
            "complexity": 2
        },
        "social\\UnifiedCommunityDashboard.py": {
            "functions": [
                "to_dict",
                "__init__",
                "_initialize_strategies",
                "_load_saved_data",
                "save_data",
                "update_metrics",
                "update_top_members",
                "generate_insights",
                "_calculate_trends",
                "_generate_platform_insights",
                "_generate_overall_insights",
                "get_metrics_history",
                "get_latest_metrics",
                "generate_metrics_chart",
                "get_platform_status",
                "get_community_building_plan",
                "_get_recommended_platforms_for_day"
            ],
            "classes": {
                "CommunityMetrics": [
                    "to_dict"
                ],
                "UnifiedCommunityDashboard": [
                    "__init__",
                    "_initialize_strategies",
                    "_load_saved_data",
                    "save_data",
                    "update_metrics",
                    "update_top_members",
                    "generate_insights",
                    "_calculate_trends",
                    "_generate_platform_insights",
                    "_generate_overall_insights",
                    "get_metrics_history",
                    "get_latest_metrics",
                    "generate_metrics_chart",
                    "get_platform_status",
                    "get_community_building_plan",
                    "_get_recommended_platforms_for_day"
                ]
            },
            "routes": [],
            "complexity": 34
        },
        "social\\UnifiedPostManager.py": {
            "functions": [
                "__init__",
                "_load_post_history",
                "_save_post_history",
                "post_to_platform",
                "_adapt_content_for_platform",
                "schedule_post",
                "get_scheduled_posts",
                "cancel_scheduled_post",
                "get_post_analytics",
                "_get_current_metrics",
                "generate_content_ideas"
            ],
            "classes": {
                "UnifiedPostManager": [
                    "__init__",
                    "_load_post_history",
                    "_save_post_history",
                    "post_to_platform",
                    "_adapt_content_for_platform",
                    "schedule_post",
                    "get_scheduled_posts",
                    "cancel_scheduled_post",
                    "get_post_analytics",
                    "_get_current_metrics",
                    "generate_content_ideas"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "social\\data\\post_history.py": {
            "functions": [
                "__init__",
                "_load_history",
                "_save_history",
                "add_post",
                "get_posts",
                "clear_history"
            ],
            "classes": {
                "PostHistory": [
                    "__init__",
                    "_load_history",
                    "_save_history",
                    "add_post",
                    "get_posts",
                    "clear_history"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "social\\data\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "social\\ai\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "social\\strategies\\BaseEngagementBot.py": {
            "functions": [
                "retry_on_failure",
                "decorator_retry",
                "__init__",
                "get_driver",
                "get_random_user_agent",
                "_wait",
                "login",
                "is_logged_in",
                "_login_with_credentials",
                "post",
                "like_posts",
                "comment_on_posts",
                "follow_users",
                "unfollow_non_returners",
                "go_viral",
                "_log_followed_users",
                "_find_posts",
                "_find_like_button",
                "_find_comment_box",
                "_find_profile_url",
                "_find_follow_button",
                "_find_unfollow_button",
                "run_daily_session",
                "wrapper_retry"
            ],
            "classes": {
                "BaseEngagementBot": [
                    "__init__",
                    "get_driver",
                    "get_random_user_agent",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "_login_with_credentials",
                    "post",
                    "like_posts",
                    "comment_on_posts",
                    "follow_users",
                    "unfollow_non_returners",
                    "go_viral",
                    "_log_followed_users",
                    "_find_posts",
                    "_find_like_button",
                    "_find_comment_box",
                    "_find_profile_url",
                    "_find_follow_button",
                    "_find_unfollow_button",
                    "run_daily_session"
                ]
            },
            "routes": [],
            "complexity": 45
        },
        "social\\strategies\\base_platform_strategy.py": {
            "functions": [
                "__init__",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "analyze_comment_sentiment",
                "reinforce_engagement",
                "reward_top_engagers",
                "cross_platform_feedback_loop",
                "run_feedback_loop",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction"
            ],
            "classes": {
                "BasePlatformStrategy": [
                    "__init__",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "analyze_comment_sentiment",
                    "reinforce_engagement",
                    "reward_top_engagers",
                    "cross_platform_feedback_loop",
                    "run_feedback_loop",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction"
                ]
            },
            "routes": [],
            "complexity": 28
        },
        "social\\strategies\\community_scheduler.py": {
            "functions": [
                "__init__",
                "schedule_task",
                "schedule_engagement_check",
                "schedule_ai_responses",
                "schedule_daily_report",
                "_check_engagement",
                "_load_schedules",
                "_save_schedules",
                "_is_comment_processed",
                "_mark_comment_processed",
                "start",
                "stop"
            ],
            "classes": {
                "CommunityScheduler": [
                    "__init__",
                    "schedule_task",
                    "schedule_engagement_check",
                    "schedule_ai_responses",
                    "schedule_daily_report",
                    "_check_engagement",
                    "_load_schedules",
                    "_save_schedules",
                    "_is_comment_processed",
                    "_mark_comment_processed",
                    "start",
                    "stop"
                ]
            },
            "routes": [],
            "complexity": 24
        },
        "social\\strategies\\ai_strategy.py": {
            "functions": [
                "__init__",
                "analyze_sentiment",
                "_build_response_prompt",
                "_get_response_template",
                "_get_fallback_response",
                "_summarize_recent_content",
                "_get_sentiment_label",
                "_load_templates",
                "_load_history",
                "_track_response",
                "get_response_analytics"
            ],
            "classes": {
                "AIStrategy": [
                    "__init__",
                    "analyze_sentiment",
                    "_build_response_prompt",
                    "_get_response_template",
                    "_get_fallback_response",
                    "_summarize_recent_content",
                    "_get_sentiment_label",
                    "_load_templates",
                    "_load_history",
                    "_track_response",
                    "get_response_analytics"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "social\\strategies\\context_db.py": {
            "functions": [
                "__init__",
                "create_tables",
                "log_post",
                "fetch_recent_posts",
                "fetch_last_post_content",
                "log_engagement",
                "fetch_engagements_for_post",
                "get_rate_limit",
                "update_rate_limit",
                "update_sentiment",
                "close"
            ],
            "classes": {
                "UnifiedContextEngine": [
                    "__init__",
                    "create_tables",
                    "log_post",
                    "fetch_recent_posts",
                    "fetch_last_post_content",
                    "log_engagement",
                    "fetch_engagements_for_post",
                    "get_rate_limit",
                    "update_rate_limit",
                    "update_sentiment",
                    "close"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "social\\strategies\\config_loader.py": {
            "functions": [
                "load_yaml_config",
                "load_json_config",
                "load_configs",
                "get_nested",
                "get_env_or_config",
                "reload_configs"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "social\\strategies\\instagram_strategy.py": {
            "functions": [
                "retry_on_failure",
                "get_random_mobile_user_agent",
                "start_scheduler",
                "post_to_instagram",
                "decorator_retry",
                "__init__",
                "get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "create_post",
                "like_posts",
                "comment_on_posts",
                "_gather_post_links",
                "follow_users",
                "unfollow_user",
                "__init__",
                "run_daily_session",
                "generate_ai_comments",
                "like_posts",
                "comment_on_posts",
                "follow_users",
                "unfollow_non_returners",
                "_log_followed_users",
                "go_viral",
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "analyze_comment_sentiment",
                "reinforce_engagement",
                "reward_top_engagers",
                "cross_platform_feedback_loop",
                "run_feedback_loop",
                "wrapper_retry"
            ],
            "classes": {
                "InstagramBot": [
                    "__init__",
                    "get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "create_post",
                    "like_posts",
                    "comment_on_posts",
                    "_gather_post_links",
                    "follow_users",
                    "unfollow_user"
                ],
                "InstagramEngagementBot": [
                    "__init__",
                    "run_daily_session",
                    "generate_ai_comments",
                    "like_posts",
                    "comment_on_posts",
                    "follow_users",
                    "unfollow_non_returners",
                    "_log_followed_users",
                    "go_viral"
                ],
                "InstagramStrategy": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "analyze_comment_sentiment",
                    "reinforce_engagement",
                    "reward_top_engagers",
                    "cross_platform_feedback_loop",
                    "run_feedback_loop"
                ]
            },
            "routes": [],
            "complexity": 86
        },
        "social\\strategies\\stocktwits_strategy.py": {
            "functions": [
                "__init__",
                "login",
                "is_logged_in",
                "post",
                "engage_community",
                "_log_follow",
                "unfollow_non_returners",
                "run_daily_session",
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "run_feedback_loop",
                "adaptive_posting_strategy",
                "reinforce_engagement",
                "reward_top_engagers",
                "cross_platform_feedback_loop"
            ],
            "classes": {
                "StocktwitsCommunityArchitect": [
                    "__init__",
                    "login",
                    "is_logged_in",
                    "post",
                    "engage_community",
                    "_log_follow",
                    "unfollow_non_returners",
                    "run_daily_session"
                ],
                "StocktwitsStrategy": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "run_feedback_loop",
                    "adaptive_posting_strategy",
                    "reinforce_engagement",
                    "reward_top_engagers",
                    "cross_platform_feedback_loop"
                ]
            },
            "routes": [],
            "complexity": 56
        },
        "social\\strategies\\facebook_strategy.py": {
            "functions": [
                "retry_on_failure",
                "get_random_user_agent",
                "start_scheduler",
                "post_to_facebook",
                "decorator_retry",
                "__init__",
                "_wait",
                "get_driver",
                "is_logged_in",
                "login",
                "post",
                "like_posts",
                "comment_on_posts",
                "follow_users",
                "unfollow_non_returners",
                "_log_followed_users",
                "go_viral",
                "run_daily_session",
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "get_random_user_agent",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "adaptive_posting_strategy",
                "analyze_comment_sentiment",
                "reinforce_engagement",
                "reward_top_followers",
                "cross_platform_feedback_loop",
                "run_feedback_loop",
                "wrapper_retry"
            ],
            "classes": {
                "FacebookBot": [
                    "__init__",
                    "_wait",
                    "get_driver",
                    "is_logged_in",
                    "login",
                    "post"
                ],
                "FacebookEngagementBot": [
                    "like_posts",
                    "comment_on_posts",
                    "follow_users",
                    "unfollow_non_returners",
                    "_log_followed_users",
                    "go_viral",
                    "run_daily_session"
                ],
                "FacebookStrategy": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "get_random_user_agent",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "adaptive_posting_strategy",
                    "analyze_comment_sentiment",
                    "reinforce_engagement",
                    "reward_top_followers",
                    "cross_platform_feedback_loop",
                    "run_feedback_loop"
                ]
            },
            "routes": [],
            "complexity": 76
        },
        "social\\strategies\\tiktok_strategy.py": {
            "functions": [
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_video",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "run_feedback_loop",
                "adaptive_posting_strategy",
                "update_trending_hashtags",
                "reward_top_creators",
                "cross_platform_feedback_loop"
            ],
            "classes": {
                "TikTokStrategy": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_video",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "run_feedback_loop",
                    "adaptive_posting_strategy",
                    "update_trending_hashtags",
                    "reward_top_creators",
                    "cross_platform_feedback_loop"
                ]
            },
            "routes": [],
            "complexity": 40
        },
        "social\\strategies\\reddit_strategy.py": {
            "functions": [
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "run_feedback_loop",
                "adaptive_posting_strategy"
            ],
            "classes": {
                "RedditStrategy": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "run_feedback_loop",
                    "adaptive_posting_strategy"
                ]
            },
            "routes": [],
            "complexity": 34
        },
        "social\\strategies\\linkedin_strategy.py": {
            "functions": [
                "retry_on_failure",
                "decorator_retry",
                "__init__",
                "_get_driver",
                "get_random_user_agent",
                "_wait",
                "login",
                "is_logged_in",
                "_login_with_credentials",
                "post",
                "like_posts",
                "comment_on_posts",
                "follow_users",
                "unfollow_non_returners",
                "go_viral",
                "_log_followed_users",
                "_find_posts",
                "_find_like_button",
                "_find_comment_box",
                "_find_profile_url",
                "_find_follow_button",
                "_find_unfollow_button",
                "run_daily_session",
                "__init__",
                "is_logged_in",
                "_login_with_credentials",
                "post",
                "_find_posts",
                "_find_like_button",
                "_find_comment_box",
                "_find_profile_url",
                "_find_follow_button",
                "_find_unfollow_button",
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "get_random_user_agent",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "wrapper_retry"
            ],
            "classes": {
                "BaseEngagementBot": [
                    "__init__",
                    "_get_driver",
                    "get_random_user_agent",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "_login_with_credentials",
                    "post",
                    "like_posts",
                    "comment_on_posts",
                    "follow_users",
                    "unfollow_non_returners",
                    "go_viral",
                    "_log_followed_users",
                    "_find_posts",
                    "_find_like_button",
                    "_find_comment_box",
                    "_find_profile_url",
                    "_find_follow_button",
                    "_find_unfollow_button",
                    "run_daily_session"
                ],
                "LinkedInEngagementBot": [
                    "__init__",
                    "is_logged_in",
                    "_login_with_credentials",
                    "post",
                    "_find_posts",
                    "_find_like_button",
                    "_find_comment_box",
                    "_find_profile_url",
                    "_find_follow_button",
                    "_find_unfollow_button"
                ],
                "LinkedinStrategy": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "get_random_user_agent",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session"
                ]
            },
            "routes": [],
            "complexity": 91
        },
        "tests\\discordintegration.py": {
            "functions": [
                "__init__",
                "_register_events",
                "load_config",
                "save_config",
                "run",
                "stop",
                "send_message",
                "send_file",
                "send_template",
                "get_status",
                "set_log_callback",
                "_log",
                "__init__",
                "launch_bot",
                "stop_bot",
                "send_message",
                "send_file",
                "send_template",
                "get_status",
                "is_running",
                "run_bot"
            ],
            "classes": {
                "UnifiedDiscordService": [
                    "__init__",
                    "_register_events",
                    "load_config",
                    "save_config",
                    "run",
                    "stop",
                    "send_message",
                    "send_file",
                    "send_template",
                    "get_status",
                    "set_log_callback",
                    "_log"
                ],
                "DiscordService": [
                    "__init__",
                    "launch_bot",
                    "stop_bot",
                    "send_message",
                    "send_file",
                    "send_template",
                    "get_status",
                    "is_running"
                ]
            },
            "routes": [],
            "complexity": 41
        },
        "social\\strategies\\youtube_strategy.py": {
            "functions": [
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_video",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "run_feedback_loop",
                "adaptive_posting_strategy",
                "reward_top_creators",
                "cross_platform_feedback_loop"
            ],
            "classes": {
                "YouTubeStrategy": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_video",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "run_feedback_loop",
                    "adaptive_posting_strategy",
                    "reward_top_creators",
                    "cross_platform_feedback_loop"
                ]
            },
            "routes": [],
            "complexity": 38
        },
        "social\\strategies\\wordpress_strategy.py": {
            "functions": [
                "__init__",
                "initialize",
                "cleanup",
                "sync_youtube_video",
                "moderate_comment",
                "get_community_metrics",
                "get_top_members",
                "_load_community_data",
                "_save_community_data",
                "generate_engagement_report",
                "track_member_interaction"
            ],
            "classes": {
                "WordPressCommunityStrategy": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "sync_youtube_video",
                    "moderate_comment",
                    "get_community_metrics",
                    "get_top_members",
                    "_load_community_data",
                    "_save_community_data",
                    "generate_engagement_report",
                    "track_member_interaction"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "social\\strategies\\twitter_strategy.py": {
            "functions": [
                "__init__",
                "login",
                "is_logged_in",
                "post_tweet",
                "post_thread",
                "_extract_tweet_id",
                "engage_community",
                "_follow_author",
                "_log_follow",
                "unfollow_non_returners",
                "run_daily_session",
                "post_thread",
                "__init__",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "adaptive_posting_strategy",
                "analyze_comment_sentiment",
                "reinforce_engagement",
                "reward_top_engagers",
                "cross_platform_feedback_loop",
                "run_feedback_loop",
                "run_daily_strategy_session"
            ],
            "classes": {
                "TwitterCommunityArchitect": [
                    "__init__",
                    "login",
                    "is_logged_in",
                    "post_tweet",
                    "post_thread",
                    "_extract_tweet_id",
                    "engage_community",
                    "_follow_author",
                    "_log_follow",
                    "unfollow_non_returners",
                    "run_daily_session",
                    "post_thread"
                ],
                "TwitterStrategy": [
                    "__init__",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "adaptive_posting_strategy",
                    "analyze_comment_sentiment",
                    "reinforce_engagement",
                    "reward_top_engagers",
                    "cross_platform_feedback_loop",
                    "run_feedback_loop",
                    "run_daily_strategy_session"
                ]
            },
            "routes": [],
            "complexity": 46
        },
        "social\\strategies\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\conftest.py": {
            "functions": [
                "test_client",
                "mock_prompt_service",
                "mock_discord_service",
                "sample_prompt_request",
                "sample_cycle_request",
                "sample_bot_config",
                "setup_test_environment",
                "mock_openai",
                "test_video_data",
                "test_comment_data",
                "test_context_data",
                "qapp",
                "mock_services",
                "test_env",
                "event_loop",
                "mock_chat_manager",
                "mock_response_handler",
                "mock_discord_manager",
                "__init__",
                "connect",
                "disconnect",
                "send_message"
            ],
            "classes": {
                "MockCursorDispatcher": [
                    "__init__",
                    "connect",
                    "disconnect",
                    "send_message"
                ]
            },
            "routes": [],
            "complexity": 26
        },
        "tests\\run_coverage.py": {
            "functions": [
                "parse_args",
                "run_coverage",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\run_tests.py": {
            "functions": [
                "run_async_tests",
                "main",
                "wrapper",
                "run_async"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\test_agent_dispatcher_integration.py": {
            "functions": [
                "dispatcher",
                "test_add_and_execute_tasks",
                "test_task_dependencies",
                "test_scheduled_task",
                "test_task_retry_mechanism",
                "test_concurrent_task_execution",
                "test_shutdown_during_execution",
                "test_performance_metrics",
                "mock_task_execution",
                "failing_task",
                "mock_parallel_execution",
                "long_running_task"
            ],
            "classes": {},
            "routes": [],
            "complexity": 12
        },
        "tests\\test_agent_dispatcher.py": {
            "functions": [
                "dispatcher",
                "dummy_task",
                "test_dispatcher_initialization",
                "test_add_task_to_queue",
                "test_get_next_task_ready",
                "test_get_next_task_blocked_dependency",
                "test_can_execute_task_dependency_check",
                "test_can_execute_task_scheduled_time",
                "test_execute_task_success",
                "test_execute_task_retry",
                "test_retry_task",
                "test_allocate_and_release_resources",
                "test_cancel_task",
                "test_cancel_task_failure",
                "test_get_task_status",
                "test_update_performance_metrics",
                "test_shutdown",
                "test_context_manager"
            ],
            "classes": {},
            "routes": [],
            "complexity": 18
        },
        "tests\\test_ai_chat_agent.py": {
            "functions": [
                "setUp",
                "tearDown",
                "test_02_conversation_history_should_maintain_correct_order",
                "test_03_context_management_should_update_and_retrieve_correctly",
                "test_04_response_cache_should_store_and_retrieve_correctly",
                "test_05_conversation_analytics_should_track_correctly",
                "test_06_prompt_templates_should_manage_correctly",
                "test_07_error_handling_should_handle_invalid_inputs",
                "test_08_persistence_should_save_and_load_state"
            ],
            "classes": {
                "TestAIChatAgent": [
                    "setUp",
                    "tearDown",
                    "test_02_conversation_history_should_maintain_correct_order",
                    "test_03_context_management_should_update_and_retrieve_correctly",
                    "test_04_response_cache_should_store_and_retrieve_correctly",
                    "test_05_conversation_analytics_should_track_correctly",
                    "test_06_prompt_templates_should_manage_correctly",
                    "test_07_error_handling_should_handle_invalid_inputs",
                    "test_08_persistence_should_save_and_load_state"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "tests\\test_ai_strategy.py": {
            "functions": [
                "setUp",
                "tearDown",
                "test_analyze_sentiment",
                "test_response_templates",
                "test_fallback_responses",
                "test_response_tracking",
                "test_error_handling"
            ],
            "classes": {
                "TestAIStrategy": [
                    "setUp",
                    "tearDown",
                    "test_analyze_sentiment",
                    "test_response_templates",
                    "test_fallback_responses",
                    "test_response_tracking",
                    "test_error_handling"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "tests\\test_ai_output_log_analyzer.py": {
            "functions": [
                "mock_unified_logger",
                "mock_file_manager",
                "mock_discord_manager",
                "analyzer",
                "test_init",
                "test_validate_log_valid_entry",
                "test_validate_log_invalid_entry",
                "test_iterate_logs",
                "test_extract_context_from_logs",
                "test_get_recent_context",
                "test_get_user_context",
                "test_summarize",
                "test_export_summary_report",
                "test_send_discord_report_sync"
            ],
            "classes": {},
            "routes": [],
            "complexity": 14
        },
        "tests\\test_aletheia_feedback_loop_manager.py": {
            "functions": [
                "setUp",
                "test_initialization",
                "test_store_feedback",
                "test_get_feedback",
                "test_update_feedback",
                "test_delete_feedback",
                "test_list_feedback",
                "test_filter_feedback",
                "test_analyze_feedback",
                "test_generate_feedback_report",
                "test_cleanup_old_feedback",
                "test_feedback_aggregation",
                "test_feedback_export",
                "test_feedback_import",
                "tearDown"
            ],
            "classes": {
                "TestAletheiaFeedbackLoopManager": [
                    "setUp",
                    "test_initialization",
                    "test_store_feedback",
                    "test_get_feedback",
                    "test_update_feedback",
                    "test_delete_feedback",
                    "test_list_feedback",
                    "test_filter_feedback",
                    "test_analyze_feedback",
                    "test_generate_feedback_report",
                    "test_cleanup_old_feedback",
                    "test_feedback_aggregation",
                    "test_feedback_export",
                    "test_feedback_import",
                    "tearDown"
                ]
            },
            "routes": [],
            "complexity": 30
        },
        "tests\\test_async_event_flow.py": {
            "functions": [
                "dispatcher",
                "dreamscape_tab",
                "discord_tab",
                "__init__",
                "log_output",
                "handle_discord_event",
                "__init__",
                "log_output",
                "handle_dreamscape_generated",
                "on_task_failed"
            ],
            "classes": {
                "MockDreamscapeTab": [
                    "__init__",
                    "log_output",
                    "handle_discord_event"
                ],
                "MockDiscordTab": [
                    "__init__",
                    "log_output",
                    "handle_dreamscape_generated"
                ]
            },
            "routes": [],
            "complexity": 16
        },
        "tests\\test_battle_flow.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\test_aletheia_prompt_manager.py": {
            "functions": [
                "send_message",
                "setUp",
                "tearDown",
                "test_start_conversation_cycle",
                "test_end_conversation_cycle",
                "test_record_conversation",
                "test_get_prompt",
                "test_list_available_prompts",
                "test_load_and_save_memory_state",
                "test_parse_memory_updates_and_archive_episode",
                "test_extract_memory_update_block_valid",
                "test_extract_memory_update_block_invalid",
                "test_merge_memory_updates",
                "test_archive_episode",
                "sync_save"
            ],
            "classes": {
                "DummyDiscordManager": [
                    "send_message"
                ],
                "TestAletheiaPromptManager": [
                    "setUp",
                    "tearDown",
                    "test_start_conversation_cycle",
                    "test_end_conversation_cycle",
                    "test_record_conversation",
                    "test_get_prompt",
                    "test_list_available_prompts",
                    "test_load_and_save_memory_state",
                    "test_parse_memory_updates_and_archive_episode",
                    "test_extract_memory_update_block_valid",
                    "test_extract_memory_update_block_invalid",
                    "test_merge_memory_updates",
                    "test_archive_episode"
                ]
            },
            "routes": [],
            "complexity": 29
        },
        "tests\\test_app_buttons.py": {
            "functions": [
                "execution_tab",
                "test_run_prompt_button",
                "test_generate_tests_button",
                "test_git_commit_button",
                "config_tab",
                "test_exclusions_manager_button",
                "test_discord_settings_button",
                "test_reinforcement_tools_button",
                "logs_tab",
                "test_clear_logs_button",
                "prompt_panel",
                "test_add_custom_prompt_button",
                "test_remove_custom_prompt_button",
                "dashboard_tab",
                "test_refresh_data_button",
                "test_generate_insights_button",
                "test_platform_selector_change"
            ],
            "classes": {
                "TestCursorExecutionTab": [
                    "execution_tab",
                    "test_run_prompt_button",
                    "test_generate_tests_button",
                    "test_git_commit_button"
                ],
                "TestConfigurationTab": [
                    "config_tab",
                    "test_exclusions_manager_button",
                    "test_discord_settings_button",
                    "test_reinforcement_tools_button"
                ],
                "TestLogsTab": [
                    "logs_tab",
                    "test_clear_logs_button"
                ],
                "TestPromptPanel": [
                    "prompt_panel",
                    "test_add_custom_prompt_button",
                    "test_remove_custom_prompt_button"
                ],
                "TestCommunityDashboardTab": [
                    "dashboard_tab",
                    "test_refresh_data_button",
                    "test_generate_insights_button",
                    "test_platform_selector_change"
                ]
            },
            "routes": [],
            "complexity": 34
        },
        "tests\\test_ChatManager.py": {
            "functions": [
                "test_is_logged_in_true",
                "test_is_logged_in_false",
                "test_ensure_model_in_url_appends_correctly",
                "test_ensure_model_in_url_with_existing_params",
                "test_ensure_model_in_url_with_model_already_present",
                "test_get_all_chat_titles_scrolls_and_filters",
                "create_mock_chat"
            ],
            "classes": {
                "TestChatManager": [
                    "test_is_logged_in_true",
                    "test_is_logged_in_false",
                    "test_ensure_model_in_url_appends_correctly",
                    "test_ensure_model_in_url_with_existing_params",
                    "test_ensure_model_in_url_with_model_already_present",
                    "test_get_all_chat_titles_scrolls_and_filters",
                    "create_mock_chat"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "tests\\test_chat_manager.py": {
            "functions": [
                "setUp",
                "tearDown",
                "test_invalid_model_raises_value_error",
                "test_set_model_valid",
                "test_set_model_invalid",
                "test_ensure_model_in_url_adds_model",
                "test_is_logged_in_success",
                "test_is_logged_in_failure",
                "test_get_all_chat_titles_no_chats",
                "test_execute_prompts_single_chat_login_required",
                "test_execute_prompts_single_chat_success",
                "test_execute_prompt_cycle_login_required",
                "test_execute_prompt_cycle_success",
                "test_execute_prompt_to_chat_no_link",
                "test_execute_prompt_to_chat_success",
                "test_execute_prompts_on_all_chats",
                "test_cycle_prompts_through_all_chats",
                "test_generate_dreamscape_episodes",
                "test_analyze_execution_response",
                "test_sanitize_filename"
            ],
            "classes": {
                "TestChatManager": [
                    "setUp",
                    "tearDown",
                    "test_invalid_model_raises_value_error",
                    "test_set_model_valid",
                    "test_set_model_invalid",
                    "test_ensure_model_in_url_adds_model",
                    "test_is_logged_in_success",
                    "test_is_logged_in_failure",
                    "test_get_all_chat_titles_no_chats",
                    "test_execute_prompts_single_chat_login_required",
                    "test_execute_prompts_single_chat_success",
                    "test_execute_prompt_cycle_login_required",
                    "test_execute_prompt_cycle_success",
                    "test_execute_prompt_to_chat_no_link",
                    "test_execute_prompt_to_chat_success",
                    "test_execute_prompts_on_all_chats",
                    "test_cycle_prompts_through_all_chats",
                    "test_generate_dreamscape_episodes",
                    "test_analyze_execution_response",
                    "test_sanitize_filename"
                ]
            },
            "routes": [],
            "complexity": 40
        },
        "tests\\test_chat_cycle_controller.py": {
            "functions": [
                "setUp",
                "test_start_cycle",
                "test_shutdown_cycle"
            ],
            "classes": {
                "TestChatCycleController": [
                    "setUp",
                    "test_start_cycle",
                    "test_shutdown_cycle"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "tests\\test_community_scheduler.py": {
            "functions": [
                "setUp",
                "tearDown",
                "test_schedule_task",
                "test_cancel_task",
                "test_schedule_engagement_check",
                "test_schedule_daily_report",
                "test_error_handling",
                "test_persistence",
                "test_scheduler_lifecycle"
            ],
            "classes": {
                "TestCommunityScheduler": [
                    "setUp",
                    "tearDown",
                    "test_schedule_task",
                    "test_cancel_task",
                    "test_schedule_engagement_check",
                    "test_schedule_daily_report",
                    "test_error_handling",
                    "test_persistence",
                    "test_scheduler_lifecycle"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "tests\\test_cursor_session_manager.py": {
            "functions": [
                "__init__",
                "clear",
                "send_keys",
                "setUp",
                "test_switch_mode_valid",
                "test_switch_mode_invalid",
                "test_generate_prompt_full_sync",
                "test_generate_prompt_tdd",
                "test_execute_prompt_success",
                "test_execute_prompt_failure"
            ],
            "classes": {
                "DummyElement": [
                    "__init__",
                    "clear",
                    "send_keys"
                ],
                "TestCursorSessionManager": [
                    "setUp",
                    "test_switch_mode_valid",
                    "test_switch_mode_invalid",
                    "test_generate_prompt_full_sync",
                    "test_generate_prompt_tdd",
                    "test_execute_prompt_success",
                    "test_execute_prompt_failure"
                ]
            },
            "routes": [],
            "complexity": 20
        },
        "tests\\test_community_integration_manager.py": {
            "functions": [
                "setUp",
                "tearDown",
                "test_01_sync_content_should_distribute_across_platforms",
                "test_02_process_interactions_should_handle_all_platforms",
                "test_03_get_analytics_should_combine_platform_metrics",
                "test_04_engagement_tracking_should_track_across_platforms",
                "test_05_member_management_should_track_across_platforms",
                "test_06_content_optimization_should_apply_to_all_platforms",
                "test_07_error_handling_should_manage_platform_failures",
                "test_08_persistence_should_maintain_cross_platform_state",
                "test_09_scheduling_should_coordinate_across_platforms"
            ],
            "classes": {
                "TestCommunityIntegrationManager": [
                    "setUp",
                    "tearDown",
                    "test_01_sync_content_should_distribute_across_platforms",
                    "test_02_process_interactions_should_handle_all_platforms",
                    "test_03_get_analytics_should_combine_platform_metrics",
                    "test_04_engagement_tracking_should_track_across_platforms",
                    "test_05_member_management_should_track_across_platforms",
                    "test_06_content_optimization_should_apply_to_all_platforms",
                    "test_07_error_handling_should_manage_platform_failures",
                    "test_08_persistence_should_maintain_cross_platform_state",
                    "test_09_scheduling_should_coordinate_across_platforms"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "tests\\test_discord_manager.py": {
            "functions": [
                "setUp",
                "tearDown",
                "test_load_config_file_not_exists",
                "test_save_and_load_config_success",
                "test_update_credentials",
                "test_map_prompt_to_channel",
                "test_unmap_prompt_channel",
                "test_get_channel_for_prompt",
                "test_run_bot_without_credentials",
                "test_run_bot_with_valid_credentials",
                "test_stop_bot",
                "test_send_message_when_bot_not_running",
                "test_send_file_when_bot_not_running",
                "test_send_dreamscape_episode_as_message",
                "test_send_dreamscape_episode_as_file",
                "test_send_prompt_response_text",
                "test_send_prompt_response_file",
                "test_send_event_notification",
                "test_update_status",
                "setUp",
                "test_update_credentials_success",
                "test_map_prompt_to_channel_success",
                "test_unmap_selected_prompt_success",
                "test_refresh_prompt_channel_list_with_mappings",
                "test_load_prompt_types_file_not_found"
            ],
            "classes": {
                "TestDiscordManager": [
                    "setUp",
                    "tearDown",
                    "test_load_config_file_not_exists",
                    "test_save_and_load_config_success",
                    "test_update_credentials",
                    "test_map_prompt_to_channel",
                    "test_unmap_prompt_channel",
                    "test_get_channel_for_prompt",
                    "test_run_bot_without_credentials",
                    "test_run_bot_with_valid_credentials",
                    "test_stop_bot",
                    "test_send_message_when_bot_not_running",
                    "test_send_file_when_bot_not_running",
                    "test_send_dreamscape_episode_as_message",
                    "test_send_dreamscape_episode_as_file",
                    "test_send_prompt_response_text",
                    "test_send_prompt_response_file",
                    "test_send_event_notification",
                    "test_update_status"
                ],
                "TestDiscordSettingsDialog": [
                    "setUp",
                    "test_update_credentials_success",
                    "test_map_prompt_to_channel_success",
                    "test_unmap_selected_prompt_success",
                    "test_refresh_prompt_channel_list_with_mappings",
                    "test_load_prompt_types_file_not_found"
                ]
            },
            "routes": [],
            "complexity": 50
        },
        "tests\\test_discord_template_manager.py": {
            "functions": [
                "setUp",
                "test_resolve_template_dir_env",
                "test_resolve_template_dir_json",
                "test_resolve_template_dir_fallback",
                "test_init_creates_directory_if_not_exist",
                "test_init_does_not_create_directory_if_exists",
                "test_render_message_successful",
                "test_render_message_template_not_found",
                "test_render_message_general_exception",
                "test_list_templates_success",
                "test_list_templates_error"
            ],
            "classes": {
                "TestDiscordTemplateManager": [
                    "setUp",
                    "test_resolve_template_dir_env",
                    "test_resolve_template_dir_json",
                    "test_resolve_template_dir_fallback",
                    "test_init_creates_directory_if_not_exist",
                    "test_init_does_not_create_directory_if_exists",
                    "test_render_message_successful",
                    "test_render_message_template_not_found",
                    "test_render_message_general_exception",
                    "test_list_templates_success",
                    "test_list_templates_error"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "tests\\test_dreamscape_workflow.py": {
            "functions": [
                "mock_chat_manager",
                "mock_response_handler",
                "mock_discord_manager",
                "dreamscape_generator",
                "test_model_availability",
                "test_model_append_to_url",
                "test_model_no_duplicate_param",
                "test_default_template_dir",
                "test_custom_template_dir",
                "test_chat_titles_population",
                "test_excluded_chat_filtering",
                "test_no_chats_available",
                "test_context_memory_updates",
                "test_toggle_combinations"
            ],
            "classes": {
                "TestModelSelection": [
                    "test_model_availability",
                    "test_model_append_to_url",
                    "test_model_no_duplicate_param"
                ],
                "TestTemplateDirectory": [
                    "test_default_template_dir",
                    "test_custom_template_dir"
                ],
                "TestTargetChatSelection": [
                    "test_chat_titles_population",
                    "test_excluded_chat_filtering"
                ],
                "TestGenerateEpisodesLogic": [
                    "test_no_chats_available",
                    "test_context_memory_updates",
                    "test_toggle_combinations"
                ]
            },
            "routes": [],
            "complexity": 24
        },
        "tests\\test_dreamscape_tab_migration.py": {
            "functions": [
                "setUpClass",
                "setUp",
                "test_core_attributes",
                "test_core_methods",
                "test_ui_components",
                "test_service_initialization",
                "test_enhanced_features",
                "test_async_support",
                "test_backwards_compatibility"
            ],
            "classes": {
                "TestDreamscapeTabMigration": [
                    "setUpClass",
                    "setUp",
                    "test_core_attributes",
                    "test_core_methods",
                    "test_ui_components",
                    "test_service_initialization",
                    "test_enhanced_features",
                    "test_async_support",
                    "test_backwards_compatibility"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "tests\\test_dreamscape_service.py": {
            "functions": [
                "mock_logger",
                "mock_config",
                "service_patches",
                "test_service_initialization",
                "test_service_initialization_with_failures",
                "test_service_health_check",
                "test_chat_manager_creation",
                "test_service_shutdown",
                "test_dependencies_tracked_correctly",
                "test_specific_service_failure",
                "__init__",
                "get"
            ],
            "classes": {
                "MockConfig": [
                    "__init__",
                    "get"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "tests\\test_dreamscape_generation_tab.py": {
            "functions": [
                "qapp",
                "mock_services",
                "dreamscape_tab",
                "test_init",
                "test_refresh_episode_list",
                "test_share_to_discord",
                "test_context_memory_refresh",
                "test_load_schedule_settings",
                "test_validate_schedule_settings"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "tests\\test_DriverManager.py": {
            "functions": [
                "test_driver_initialization_with_cache",
                "test_driver_download_when_cache_missing",
                "test_quit_driver"
            ],
            "classes": {
                "TestDriverManager": [
                    "test_driver_initialization_with_cache",
                    "test_driver_download_when_cache_missing",
                    "test_quit_driver"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "tests\\test_enhanced_driver_manager.py": {
            "functions": [
                "run_tests",
                "setUp",
                "tearDown",
                "test_singleton_pattern",
                "test_driver_initialization",
                "test_driver_navigation",
                "test_cookie_save_load",
                "test_wait_functions"
            ],
            "classes": {
                "TestEnhancedDriverManager": [
                    "setUp",
                    "tearDown",
                    "test_singleton_pattern",
                    "test_driver_initialization",
                    "test_driver_navigation",
                    "test_cookie_save_load",
                    "test_wait_functions"
                ]
            },
            "routes": [],
            "complexity": 15
        },
        "tests\\test_driver_manager.py": {
            "functions": [
                "setUp",
                "test_init_sets_directories",
                "test_download_driver_if_needed_downloads_when_missing",
                "test_download_driver_if_needed_uses_cache",
                "test_get_driver_initializes_driver",
                "test_get_driver_returns_existing",
                "test_quit_driver_with_temp_profile",
                "test_quit_driver_without_driver",
                "test_save_cookies_success",
                "test_save_cookies_no_driver",
                "test_load_cookies_success",
                "test_load_cookies_no_driver",
                "test_load_cookies_no_file",
                "test_is_logged_in_success",
                "test_is_logged_in_failure",
                "test_is_logged_in_no_driver",
                "test_scroll_into_view_success",
                "test_scroll_into_view_no_driver",
                "test_manual_scroll_success",
                "test_manual_scroll_no_driver"
            ],
            "classes": {
                "TestDriverManager": [
                    "setUp",
                    "test_init_sets_directories",
                    "test_download_driver_if_needed_downloads_when_missing",
                    "test_download_driver_if_needed_uses_cache",
                    "test_get_driver_initializes_driver",
                    "test_get_driver_returns_existing",
                    "test_quit_driver_with_temp_profile",
                    "test_quit_driver_without_driver",
                    "test_save_cookies_success",
                    "test_save_cookies_no_driver",
                    "test_load_cookies_success",
                    "test_load_cookies_no_driver",
                    "test_load_cookies_no_file",
                    "test_is_logged_in_success",
                    "test_is_logged_in_failure",
                    "test_is_logged_in_no_driver",
                    "test_scroll_into_view_success",
                    "test_scroll_into_view_no_driver",
                    "test_manual_scroll_success",
                    "test_manual_scroll_no_driver"
                ]
            },
            "routes": [],
            "complexity": 40
        },
        "tests\\test_FileManager.py": {
            "functions": [
                "setUp",
                "tearDown",
                "test_save_and_load_json",
                "test_save_and_load_yaml",
                "test_fail_on_invalid_load",
                "test_save_entry_invalid_json",
                "test_load_entry_invalid_json_content",
                "test_load_entry_invalid_yaml_content",
                "dummy_function"
            ],
            "classes": {
                "TestFileManager": [
                    "setUp",
                    "tearDown",
                    "test_save_and_load_json",
                    "test_save_and_load_yaml",
                    "test_fail_on_invalid_load",
                    "test_save_entry_invalid_json",
                    "test_load_entry_invalid_json_content",
                    "test_load_entry_invalid_yaml_content"
                ]
            },
            "routes": [],
            "complexity": 17
        },
        "tests\\test_engagement_agent.py": {
            "functions": [
                "setUp",
                "test_initialization",
                "test_handle_mentions_no_strategy",
                "test_handle_mentions_with_task_queue",
                "test_handle_mentions_direct_processing",
                "test_proactive_engagement_no_strategy",
                "test_proactive_engagement_with_task_queue",
                "test_proactive_engagement_direct_processing",
                "test_proactive_engagement_skips_already_engaged",
                "test_process_mention",
                "test_process_proactive",
                "test_log_interaction_successful"
            ],
            "classes": {
                "TestEngagementAgent": [
                    "setUp",
                    "test_initialization",
                    "test_handle_mentions_no_strategy",
                    "test_handle_mentions_with_task_queue",
                    "test_handle_mentions_direct_processing",
                    "test_proactive_engagement_no_strategy",
                    "test_proactive_engagement_with_task_queue",
                    "test_proactive_engagement_direct_processing",
                    "test_proactive_engagement_skips_already_engaged",
                    "test_process_mention",
                    "test_process_proactive",
                    "test_log_interaction_successful"
                ]
            },
            "routes": [],
            "complexity": 24
        },
        "tests\\test_narrative_analytics.py": {
            "functions": [
                "setUp",
                "test_initialization",
                "test_update_analytics",
                "test_generate_visualizations",
                "test_generate_analytics_report",
                "tearDown"
            ],
            "classes": {
                "TestNarrativeAnalytics": [
                    "setUp",
                    "test_initialization",
                    "test_update_analytics",
                    "test_generate_visualizations",
                    "test_generate_analytics_report",
                    "tearDown"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "tests\\test_load_post_history_file_exists.py": {
            "functions": [
                "test_load_post_history_file_exists"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "tests\\test_event_message_builder.py": {
            "functions": [
                "setUp",
                "test_initialization",
                "test_build_message",
                "test_build_message_with_template",
                "test_build_message_with_custom_format",
                "test_build_message_with_attachments",
                "test_build_message_with_embeds",
                "test_build_message_with_actions",
                "test_build_message_with_metadata",
                "test_build_message_with_validation",
                "test_build_message_with_localization",
                "test_build_message_with_compression",
                "test_save_message",
                "test_load_message",
                "tearDown"
            ],
            "classes": {
                "TestEventMessageBuilder": [
                    "setUp",
                    "test_initialization",
                    "test_build_message",
                    "test_build_message_with_template",
                    "test_build_message_with_custom_format",
                    "test_build_message_with_attachments",
                    "test_build_message_with_embeds",
                    "test_build_message_with_actions",
                    "test_build_message_with_metadata",
                    "test_build_message_with_validation",
                    "test_build_message_with_localization",
                    "test_build_message_with_compression",
                    "test_save_message",
                    "test_load_message",
                    "tearDown"
                ]
            },
            "routes": [],
            "complexity": 30
        },
        "tests\\test_file_manager.py": {
            "functions": [
                "setUp",
                "tearDown",
                "test_save_response_creates_file",
                "test_save_response_creates_correct_path",
                "test_save_memory_state_creates_json_file",
                "test_save_log_creates_log_file",
                "test_archive_file_moves_file",
                "test_save_file_json_and_yaml",
                "test_save_file_handles_exceptions",
                "test_load_file_json_and_yaml",
                "test_load_file_handles_exceptions",
                "test_sanitize_filename_strips_and_replaces"
            ],
            "classes": {
                "TestFileManager": [
                    "setUp",
                    "tearDown",
                    "test_save_response_creates_file",
                    "test_save_response_creates_correct_path",
                    "test_save_memory_state_creates_json_file",
                    "test_save_log_creates_log_file",
                    "test_archive_file_moves_file",
                    "test_save_file_json_and_yaml",
                    "test_save_file_handles_exceptions",
                    "test_load_file_json_and_yaml",
                    "test_load_file_handles_exceptions",
                    "test_sanitize_filename_strips_and_replaces"
                ]
            },
            "routes": [],
            "complexity": 24
        },
        "tests\\test_memory_cycle.py": {
            "functions": [
                "setUp",
                "tearDown",
                "test_conversation_cycle",
                "test_multiple_cycles",
                "test_template_rendering"
            ],
            "classes": {
                "TestMemoryCycle": [
                    "setUp",
                    "tearDown",
                    "test_conversation_cycle",
                    "test_multiple_cycles",
                    "test_template_rendering"
                ]
            },
            "routes": [],
            "complexity": 10
        },
        "tests\\test_MemoryManager.py": {
            "functions": [
                "setUp",
                "tearDown",
                "test_initialization",
                "test_record_interaction",
                "test_initialize_conversation",
                "test_retrieve_conversation",
                "test_get_user_history",
                "test_user_sentiment_summary",
                "test_clear_user_history",
                "test_clear_platform_history"
            ],
            "classes": {
                "TestMemoryManager": [
                    "setUp",
                    "tearDown",
                    "test_initialization",
                    "test_record_interaction",
                    "test_initialize_conversation",
                    "test_retrieve_conversation",
                    "test_get_user_history",
                    "test_user_sentiment_summary",
                    "test_clear_user_history",
                    "test_clear_platform_history"
                ]
            },
            "routes": [],
            "complexity": 20
        },
        "tests\\test_feedback_loop_manager.py": {
            "functions": [
                "dummy_write_json_log",
                "__init__",
                "setUp",
                "test_calculate_success_rate",
                "test_get_top_tags",
                "test_auto_adjust_rate_limits",
                "test_generate_feedback_loops",
                "test_export_feedback_report"
            ],
            "classes": {
                "DummySocialConfig": [
                    "__init__"
                ],
                "TestAletheiaFeedbackLoopManager": [
                    "setUp",
                    "test_calculate_success_rate",
                    "test_get_top_tags",
                    "test_auto_adjust_rate_limits",
                    "test_generate_feedback_loops",
                    "test_export_feedback_report"
                ]
            },
            "routes": [],
            "complexity": 15
        },
        "tests\\test_openai_client.py": {
            "functions": [
                "temp_profile_dir",
                "mock_config",
                "test_init_paths",
                "test_config_loading",
                "test_driver_initialization",
                "test_fallback_paths",
                "test_platform_specific_paths"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\test_openai_prompt_engine.py": {
            "functions": [
                "dummy_wait",
                "__init__",
                "clear",
                "send_keys",
                "setUp",
                "tearDown",
                "test_render_prompt",
                "test_driver_health_check",
                "test_send_prompt_and_scrape_response",
                "test_retry_backoff_logic",
                "test_log_interaction",
                "flaky_function"
            ],
            "classes": {
                "DummyElement": [
                    "__init__",
                    "clear",
                    "send_keys"
                ],
                "OpenAIPromptEngineTest": [
                    "setUp",
                    "tearDown",
                    "test_render_prompt",
                    "test_driver_health_check",
                    "test_send_prompt_and_scrape_response",
                    "test_retry_backoff_logic",
                    "test_log_interaction"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "tests\\test_PathManager.py": {
            "functions": [
                "setUp",
                "tearDown",
                "test_ensure_directories",
                "test_get_path",
                "test_register_path",
                "test_list_paths",
                "test_path_consistency"
            ],
            "classes": {
                "TestPathManager": [
                    "setUp",
                    "tearDown",
                    "test_ensure_directories",
                    "test_get_path",
                    "test_register_path",
                    "test_list_paths",
                    "test_path_consistency"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "tests\\test_post_history.py": {
            "functions": [
                "setUp",
                "tearDown",
                "test_01_add_post_should_store_correctly",
                "test_02_get_post_by_id_should_return_correct_post",
                "test_03_update_post_should_modify_correctly",
                "test_04_get_posts_by_platform_should_filter_correctly",
                "test_05_get_recent_posts_should_return_correct_timeframe",
                "test_06_get_engagement_metrics_should_calculate_correctly",
                "test_07_persistence_should_save_and_load_correctly",
                "test_08_error_handling_should_handle_invalid_inputs",
                "test_09_delete_post_should_remove_correctly"
            ],
            "classes": {
                "TestPostHistory": [
                    "setUp",
                    "tearDown",
                    "test_01_add_post_should_store_correctly",
                    "test_02_get_post_by_id_should_return_correct_post",
                    "test_03_update_post_should_modify_correctly",
                    "test_04_get_posts_by_platform_should_filter_correctly",
                    "test_05_get_recent_posts_should_return_correct_timeframe",
                    "test_06_get_engagement_metrics_should_calculate_correctly",
                    "test_07_persistence_should_save_and_load_correctly",
                    "test_08_error_handling_should_handle_invalid_inputs",
                    "test_09_delete_post_should_remove_correctly"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "tests\\test_prompt_endpoints.py": {
            "functions": [
                "test_execute_prompt",
                "test_execute_prompt_invalid_request",
                "test_start_cycle",
                "test_start_cycle_invalid_request"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\test_report_exporter.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\test_prompt_cycle_manager.py": {
            "functions": [
                "setUp",
                "test_initialization",
                "test_get_contextual_prompt",
                "test_extract_narrative_elements",
                "test_update_system_state",
                "test_update_memory",
                "test_generate_narrative_report",
                "test_perform_ai_audit",
                "test_broadcast_narrative_update",
                "tearDown",
                "setUp",
                "test_cycle_service_initialization",
                "test_prompt_handler_initialization",
                "test_discord_processor_initialization",
                "test_task_orchestrator_initialization"
            ],
            "classes": {
                "TestPromptCycleOrchestrator": [
                    "setUp",
                    "test_initialization",
                    "test_get_contextual_prompt",
                    "test_extract_narrative_elements",
                    "test_update_system_state",
                    "test_update_memory",
                    "test_generate_narrative_report",
                    "test_perform_ai_audit",
                    "test_broadcast_narrative_update",
                    "tearDown"
                ],
                "TestCycleServices": [
                    "setUp",
                    "test_cycle_service_initialization",
                    "test_prompt_handler_initialization",
                    "test_discord_processor_initialization",
                    "test_task_orchestrator_initialization"
                ]
            },
            "routes": [],
            "complexity": 30
        },
        "tests\\test_PromptManager.py": {
            "functions": [
                "setUp",
                "test_get_prompt_devlog",
                "test_get_prompt_content_ideas",
                "test_get_prompt_dreamscape",
                "test_get_prompt_invalid_type",
                "test_list_available_prompts",
                "test_add_prompt",
                "test_remove_prompt",
                "test_remove_nonexistent_prompt"
            ],
            "classes": {
                "TestPromptManager": [
                    "setUp",
                    "test_get_prompt_devlog",
                    "test_get_prompt_content_ideas",
                    "test_get_prompt_dreamscape",
                    "test_get_prompt_invalid_type",
                    "test_list_available_prompts",
                    "test_add_prompt",
                    "test_remove_prompt",
                    "test_remove_nonexistent_prompt"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "tests\\test_project_scanner.py": {
            "functions": [
                "temp_project",
                "mock_cache",
                "test_language_analyzer_analyze_python",
                "test_language_analyzer_analyze_rust",
                "test_language_analyzer_analyze_javascript",
                "test_file_processor_hash_file",
                "test_file_processor_should_exclude",
                "test_report_generator_save_report",
                "test_report_generator_generate_init_files",
                "test_project_scanner_scan_project",
                "test_bot_worker",
                "test_multibot_manager"
            ],
            "classes": {},
            "routes": [],
            "complexity": 12
        },
        "tests\\test_ResponseHandler.py": {
            "functions": [
                "setUp",
                "test_fetch_response_returns_latest_text",
                "test_fetch_response_returns_empty_on_exception",
                "test_clean_response_trims_whitespace",
                "test_wait_for_stable_response_returns_stable_text",
                "side_effect"
            ],
            "classes": {
                "TestResponseHandler": [
                    "setUp",
                    "test_fetch_response_returns_latest_text",
                    "test_fetch_response_returns_empty_on_exception",
                    "test_clean_response_trims_whitespace",
                    "test_wait_for_stable_response_returns_stable_text"
                ]
            },
            "routes": [],
            "complexity": 11
        },
        "tests\\test_prompt_execution_tab.py": {
            "functions": [
                "app",
                "prompt_manager_mock",
                "chat_manager_mock",
                "response_handler_mock",
                "prompt_execution_tab",
                "test_init_creates_ui_components",
                "test_update_managers_sets_managers",
                "test_load_prompt_sets_text",
                "test_load_prompt_handles_missing_manager",
                "test_update_execution_mode_updates_ui",
                "test_load_prompt_data",
                "test_exclusion_list_management",
                "test_execute_prompt_direct_mode",
                "test_execute_prompt_cycle_mode"
            ],
            "classes": {},
            "routes": [],
            "complexity": 14
        },
        "tests\\test_simple.py": {
            "functions": [
                "event_loop"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "tests\\test_resilient_prompt_executor.py": {
            "functions": [
                "setUp",
                "test_initialization",
                "test_execute_prompt",
                "test_execute_prompt_with_retry",
                "test_execute_prompt_timeout",
                "test_execute_prompt_validation",
                "test_save_response",
                "test_load_response",
                "test_handle_error",
                "test_cleanup_old_responses",
                "test_get_execution_metrics",
                "test_validate_response",
                "test_preprocess_prompt",
                "test_postprocess_response",
                "tearDown",
                "slow_api_call"
            ],
            "classes": {
                "TestResilientPromptExecutor": [
                    "setUp",
                    "test_initialization",
                    "test_execute_prompt",
                    "test_execute_prompt_with_retry",
                    "test_execute_prompt_timeout",
                    "test_execute_prompt_validation",
                    "test_save_response",
                    "test_load_response",
                    "test_handle_error",
                    "test_cleanup_old_responses",
                    "test_get_execution_metrics",
                    "test_validate_response",
                    "test_preprocess_prompt",
                    "test_postprocess_response",
                    "tearDown"
                ]
            },
            "routes": [],
            "complexity": 31
        },
        "tests\\test_system_health_monitor.py": {
            "functions": [
                "setUp",
                "test_initialization",
                "test_collect_system_metrics",
                "test_check_system_health",
                "test_generate_health_report",
                "test_monitor_system",
                "test_alert_handling",
                "test_cleanup_old_reports",
                "tearDown"
            ],
            "classes": {
                "TestSystemHealthMonitor": [
                    "setUp",
                    "test_initialization",
                    "test_collect_system_metrics",
                    "test_check_system_health",
                    "test_generate_health_report",
                    "test_monitor_system",
                    "test_alert_handling",
                    "test_cleanup_old_reports",
                    "tearDown"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "tests\\test_task_manager.py": {
            "functions": [
                "setUp",
                "test_initialization",
                "test_add_task",
                "test_get_task",
                "test_update_task",
                "test_delete_task",
                "test_list_tasks",
                "test_schedule_task",
                "test_task_priority_queue",
                "test_task_timeout",
                "test_task_retry",
                "test_task_dependencies",
                "test_task_metrics",
                "test_task_persistence",
                "tearDown"
            ],
            "classes": {
                "TestTaskManager": [
                    "setUp",
                    "test_initialization",
                    "test_add_task",
                    "test_get_task",
                    "test_update_task",
                    "test_delete_task",
                    "test_list_tasks",
                    "test_schedule_task",
                    "test_task_priority_queue",
                    "test_task_timeout",
                    "test_task_retry",
                    "test_task_dependencies",
                    "test_task_metrics",
                    "test_task_persistence",
                    "tearDown"
                ]
            },
            "routes": [],
            "complexity": 30
        },
        "tests\\test_TemplateManager.py": {
            "functions": [
                "setUpClass",
                "tearDownClass",
                "_create_test_templates",
                "setUp",
                "tearDown",
                "test_initialization",
                "test_render_discord_template",
                "test_render_message_template",
                "test_render_general_template",
                "test_invalid_category",
                "test_invalid_template_data",
                "test_list_templates",
                "test_template_not_found"
            ],
            "classes": {
                "TestTemplateManager": [
                    "setUpClass",
                    "tearDownClass",
                    "_create_test_templates",
                    "setUp",
                    "tearDown",
                    "test_initialization",
                    "test_render_discord_template",
                    "test_render_message_template",
                    "test_render_general_template",
                    "test_invalid_category",
                    "test_invalid_template_data",
                    "test_list_templates",
                    "test_template_not_found"
                ]
            },
            "routes": [],
            "complexity": 26
        },
        "tests\\test_signal_dispatcher.py": {
            "functions": [
                "dispatcher",
                "recorder",
                "test_log_output_signal",
                "test_prompt_executed_signal",
                "test_dreamscape_generated_signal",
                "test_discord_event_signal",
                "test_task_signals",
                "test_listener_registration",
                "__init__",
                "on_log_output",
                "on_prompt_executed",
                "on_dreamscape_generated",
                "on_discord_event",
                "on_task_started",
                "on_task_progress",
                "on_task_completed",
                "on_task_failed",
                "on_status_update"
            ],
            "classes": {
                "SignalRecorder": [
                    "__init__",
                    "on_log_output",
                    "on_prompt_executed",
                    "on_dreamscape_generated",
                    "on_discord_event",
                    "on_task_started",
                    "on_task_progress",
                    "on_task_completed",
                    "on_task_failed",
                    "on_status_update"
                ]
            },
            "routes": [],
            "complexity": 28
        },
        "tests\\test_thread_pool_manager.py": {
            "functions": [
                "setUp",
                "test_initialization",
                "test_submit_task",
                "test_submit_multiple_tasks",
                "test_task_priority",
                "test_task_cancellation",
                "test_task_timeout",
                "test_task_error_handling",
                "test_pool_shutdown",
                "test_task_metrics",
                "test_task_logging",
                "tearDown",
                "test_function",
                "test_function",
                "test_function",
                "long_running_function",
                "timeout_function",
                "error_function",
                "test_function",
                "test_function",
                "test_function"
            ],
            "classes": {
                "TestThreadPoolManager": [
                    "setUp",
                    "test_initialization",
                    "test_submit_task",
                    "test_submit_multiple_tasks",
                    "test_task_priority",
                    "test_task_cancellation",
                    "test_task_timeout",
                    "test_task_error_handling",
                    "test_pool_shutdown",
                    "test_task_metrics",
                    "test_task_logging",
                    "tearDown"
                ]
            },
            "routes": [],
            "complexity": 33
        },
        "tests\\test_unified_dreamscape_generator.py": {
            "functions": [
                "setUp",
                "test_initialization",
                "test_generate_dreamscape",
                "test_generate_dreamscape_with_elements",
                "test_generate_dreamscape_with_style",
                "test_generate_dreamscape_with_constraints",
                "test_save_dreamscape",
                "test_load_dreamscape",
                "test_list_dreamscapes",
                "test_search_dreamscapes",
                "test_cleanup_old_dreamscapes",
                "test_validate_dreamscape",
                "test_preprocess_dreamscape",
                "test_postprocess_dreamscape",
                "tearDown"
            ],
            "classes": {
                "TestUnifiedDreamscapeGenerator": [
                    "setUp",
                    "test_initialization",
                    "test_generate_dreamscape",
                    "test_generate_dreamscape_with_elements",
                    "test_generate_dreamscape_with_style",
                    "test_generate_dreamscape_with_constraints",
                    "test_save_dreamscape",
                    "test_load_dreamscape",
                    "test_list_dreamscapes",
                    "test_search_dreamscapes",
                    "test_cleanup_old_dreamscapes",
                    "test_validate_dreamscape",
                    "test_preprocess_dreamscape",
                    "test_postprocess_dreamscape",
                    "tearDown"
                ]
            },
            "routes": [],
            "complexity": 30
        },
        "tests\\test_specialized_agents.py": {
            "functions": [
                "refactor_agent",
                "test_agent",
                "doc_agent",
                "sample_python_file",
                "test_refactor_agent_initialization",
                "test_refactor_agent_extract_method",
                "test_refactor_agent_rename_variable",
                "test_refactor_agent_inline_function",
                "test_refactor_agent_invalid_task",
                "test_refactor_agent_invalid_file",
                "test_refactor_agent_invalid_method_params",
                "test_refactor_agent_invalid_rename_params",
                "test_refactor_agent_unsupported_type",
                "test_test_agent_initialization",
                "test_test_agent_handle_task",
                "test_test_agent_invalid_task",
                "test_doc_agent_initialization",
                "test_doc_agent_handle_task",
                "test_doc_agent_handle_task_no_examples",
                "test_doc_agent_invalid_task"
            ],
            "classes": {},
            "routes": [],
            "complexity": 20
        },
        "tests\\test_unified_config_manager.py": {
            "functions": [
                "setUp",
                "test_initialization",
                "test_load_config",
                "test_get_config",
                "test_update_config",
                "test_save_config",
                "test_validate_config",
                "test_get_environment_config",
                "test_merge_configs",
                "test_handle_config_error",
                "tearDown"
            ],
            "classes": {
                "TestConfigManager": [
                    "setUp",
                    "test_initialization",
                    "test_load_config",
                    "test_get_config",
                    "test_update_config",
                    "test_save_config",
                    "test_validate_config",
                    "test_get_environment_config",
                    "test_merge_configs",
                    "test_handle_config_error",
                    "tearDown"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "tests\\test_unified_logging_agent.py": {
            "functions": [
                "setUp",
                "test_initialization",
                "test_log_message",
                "test_log_with_context",
                "test_log_rotation",
                "test_log_analysis",
                "test_log_filtering",
                "test_log_export",
                "test_log_cleanup",
                "test_log_metrics",
                "tearDown"
            ],
            "classes": {
                "TestUnifiedLoggingAgent": [
                    "setUp",
                    "test_initialization",
                    "test_log_message",
                    "test_log_with_context",
                    "test_log_rotation",
                    "test_log_analysis",
                    "test_log_filtering",
                    "test_log_export",
                    "test_log_cleanup",
                    "test_log_metrics",
                    "tearDown"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "tests\\test_unified_discord_service.py": {
            "functions": [
                "setUp",
                "test_initialization",
                "test_get_channel",
                "test_send_message",
                "test_send_embed",
                "test_send_file",
                "test_create_channel",
                "test_delete_channel",
                "test_get_channel_history",
                "test_add_reaction",
                "test_handle_error",
                "tearDown"
            ],
            "classes": {
                "TestUnifiedDiscordService": [
                    "setUp",
                    "test_initialization",
                    "test_get_channel",
                    "test_send_message",
                    "test_send_embed",
                    "test_send_file",
                    "test_create_channel",
                    "test_delete_channel",
                    "test_get_channel_history",
                    "test_add_reaction",
                    "test_handle_error",
                    "tearDown"
                ]
            },
            "routes": [],
            "complexity": 24
        },
        "tests\\test_wordpress_strategy.py": {
            "functions": [
                "setUp",
                "tearDown",
                "test_track_member_interaction",
                "test_get_community_metrics",
                "test_member_history",
                "test_error_handling",
                "test_data_persistence"
            ],
            "classes": {
                "TestWordPressCommunityStrategy": [
                    "setUp",
                    "tearDown",
                    "test_track_member_interaction",
                    "test_get_community_metrics",
                    "test_member_history",
                    "test_error_handling",
                    "test_data_persistence"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "tests\\test_youtube_strategy.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\e2e\\test_dreamscape_generation_tab_e2e.py": {
            "functions": [
                "__init__",
                "init_ui",
                "refresh_episode_list",
                "load_episode_content",
                "_update_ui_for_generation",
                "share_to_discord",
                "save_context_schedule",
                "load_context_schedule",
                "refresh_context_memory",
                "test_episode_interaction_workflow",
                "test_filter_context_memory"
            ],
            "classes": {
                "TestDreamscapeGenerationTab": [
                    "__init__",
                    "init_ui",
                    "refresh_episode_list",
                    "load_episode_content",
                    "_update_ui_for_generation",
                    "share_to_discord",
                    "save_context_schedule",
                    "load_context_schedule",
                    "refresh_context_memory"
                ],
                "TestDreamscapeGenerationTabE2E": [
                    "test_episode_interaction_workflow",
                    "test_filter_context_memory"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "tests\\test_unified_feedback_memory.py": {
            "functions": [
                "setUp",
                "test_initialization",
                "test_store_memory",
                "test_get_memory",
                "test_update_memory",
                "test_delete_memory",
                "test_list_memories",
                "test_search_memories",
                "test_retrieve_memories",
                "test_cleanup_old_memories",
                "test_memory_compression",
                "test_memory_validation",
                "test_memory_aggregation",
                "test_memory_export",
                "test_memory_import",
                "tearDown"
            ],
            "classes": {
                "TestUnifiedFeedbackMemory": [
                    "setUp",
                    "test_initialization",
                    "test_store_memory",
                    "test_get_memory",
                    "test_update_memory",
                    "test_delete_memory",
                    "test_list_memories",
                    "test_search_memories",
                    "test_retrieve_memories",
                    "test_cleanup_old_memories",
                    "test_memory_compression",
                    "test_memory_validation",
                    "test_memory_aggregation",
                    "test_memory_export",
                    "test_memory_import",
                    "tearDown"
                ]
            },
            "routes": [],
            "complexity": 32
        },
        "tests\\e2e\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\gui\\conftest.py": {
            "functions": [
                "qapp",
                "qtbot",
                "mock_config_manager",
                "mock_analytics_manager",
                "mock_community_manager",
                "mock_chat_manager",
                "mock_template_manager",
                "mock_chat_engine",
                "mock_driver_manager",
                "format",
                "__init__",
                "get_credentials",
                "get_settings",
                "update_credentials",
                "update_settings",
                "__init__",
                "get_metrics",
                "refresh_data",
                "__init__",
                "get_platforms",
                "post_content",
                "get_members",
                "__init__",
                "send_message",
                "get_history",
                "__init__",
                "get_templates",
                "add_template",
                "update_template",
                "delete_template",
                "__init__",
                "execute_prompt",
                "get_response_history",
                "__init__",
                "start",
                "stop",
                "quit",
                "execute_command",
                "__init__",
                "addWidget",
                "waitExposed",
                "wait",
                "waitUntil",
                "mouseClick",
                "keyClick"
            ],
            "classes": {
                "SafeFormatter": [
                    "format"
                ],
                "MockConfigManager": [
                    "__init__",
                    "get_credentials",
                    "get_settings",
                    "update_credentials",
                    "update_settings"
                ],
                "MockAnalyticsManager": [
                    "__init__",
                    "get_metrics",
                    "refresh_data"
                ],
                "MockCommunityManager": [
                    "__init__",
                    "get_platforms",
                    "post_content",
                    "get_members"
                ],
                "MockChatManager": [
                    "__init__",
                    "send_message",
                    "get_history"
                ],
                "MockTemplateManager": [
                    "__init__",
                    "get_templates",
                    "add_template",
                    "update_template",
                    "delete_template"
                ],
                "MockChatEngine": [
                    "__init__",
                    "execute_prompt",
                    "get_response_history"
                ],
                "MockDriverManager": [
                    "__init__",
                    "start",
                    "stop",
                    "quit",
                    "execute_command"
                ],
                "MockQtBot": [
                    "__init__",
                    "addWidget",
                    "waitExposed",
                    "wait",
                    "waitUntil",
                    "mouseClick",
                    "keyClick"
                ]
            },
            "routes": [],
            "complexity": 81
        },
        "tests\\gui\\run_gui_tests.py": {
            "functions": [
                "parse_args",
                "run_gui_tests"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "tests\\gui\\test_community_management_tab.py": {
            "functions": [
                "test_community_tab_init",
                "test_platform_combo_initialization",
                "test_metrics_table_initialization",
                "test_refresh_metrics_empty_manager",
                "test_refresh_metrics_with_manager",
                "test_update_managers",
                "test_execute_action",
                "mock_refresh",
                "mock_refresh"
            ],
            "classes": {
                "TestCommunityManagementTab": [
                    "test_community_tab_init",
                    "test_platform_combo_initialization",
                    "test_metrics_table_initialization",
                    "test_refresh_metrics_empty_manager",
                    "test_refresh_metrics_with_manager",
                    "test_update_managers",
                    "test_execute_action"
                ]
            },
            "routes": [],
            "complexity": 16
        },
        "tests\\gui\\test_digital_dreamscape_tab.py": {
            "functions": [
                "app",
                "template_manager",
                "chat_engine",
                "tab",
                "test_tab_initialization",
                "test_view_mode_changes",
                "test_theme_toggle",
                "test_template_control_panel",
                "test_prompt_debug_panel",
                "test_cycle_feedback_panel",
                "test_metrics_dashboard_update",
                "test_episode_publishing",
                "test_cleanup",
                "test_ui_density_changes"
            ],
            "classes": {
                "TestDigitalDreamscapeTab": [
                    "app",
                    "template_manager",
                    "chat_engine",
                    "tab",
                    "test_tab_initialization",
                    "test_view_mode_changes",
                    "test_theme_toggle",
                    "test_template_control_panel",
                    "test_prompt_debug_panel",
                    "test_cycle_feedback_panel",
                    "test_metrics_dashboard_update",
                    "test_episode_publishing",
                    "test_cleanup",
                    "test_ui_density_changes"
                ]
            },
            "routes": [],
            "complexity": 28
        },
        "tests\\gui\\test_analytics_tab.py": {
            "functions": [
                "test_analytics_tab_init",
                "test_platform_combo_initialization",
                "test_date_range_combo_initialization",
                "test_custom_date_range_visibility",
                "test_results_table_initialization",
                "test_refresh_analytics_empty_manager",
                "test_refresh_analytics_with_manager",
                "test_export_data",
                "test_update_managers",
                "mock_refresh"
            ],
            "classes": {
                "TestAnalyticsTab": [
                    "test_analytics_tab_init",
                    "test_platform_combo_initialization",
                    "test_date_range_combo_initialization",
                    "test_custom_date_range_visibility",
                    "test_results_table_initialization",
                    "test_refresh_analytics_empty_manager",
                    "test_refresh_analytics_with_manager",
                    "test_export_data",
                    "test_update_managers"
                ]
            },
            "routes": [],
            "complexity": 19
        },
        "tests\\gui\\test_configuration_tab.py": {
            "functions": [
                "config_manager_mock",
                "configuration_tab",
                "test_init_creates_ui_components",
                "test_load_config",
                "test_save_config",
                "test_reset_config",
                "test_browse_database_path",
                "test_validate_config_valid",
                "test_validate_config_invalid",
                "test_temperature_slider_changes_label",
                "test_model_selector_changes_max_tokens"
            ],
            "classes": {},
            "routes": [],
            "complexity": 11
        },
        "tests\\gui\\test_historical_chats_tab.py": {
            "functions": [
                "chat_history_mock",
                "historical_chats_tab",
                "test_init_creates_ui_components",
                "test_history_tree_has_columns",
                "test_load_chat_history",
                "test_display_chat_session",
                "test_export_chat_history",
                "test_search_chat_history",
                "test_clear_search",
                "test_delete_chat_session",
                "test_refresh_history"
            ],
            "classes": {},
            "routes": [],
            "complexity": 11
        },
        "tests\\gui\\test_prompt_execution_tab.py": {
            "functions": [
                "prompt_manager_mock",
                "chat_manager_mock",
                "response_handler_mock",
                "prompt_execution_tab",
                "test_init_creates_ui_components",
                "test_update_managers_sets_managers",
                "test_load_prompt_sets_text",
                "test_load_prompt_handles_missing_manager",
                "test_update_execution_mode_updates_ui",
                "test_load_prompt_data",
                "test_exclusion_list_management",
                "test_execute_prompt_direct_mode",
                "test_execute_prompt_cycle_mode",
                "test_save_prompt_with_valid_manager",
                "test_save_prompt_with_missing_manager",
                "test_reset_prompts_with_valid_manager",
                "test_reset_prompts_with_missing_manager"
            ],
            "classes": {},
            "routes": [],
            "complexity": 17
        },
        "tests\\integration\\test_community_integration.py": {
            "functions": [
                "setUpClass",
                "test_error_handling",
                "tearDownClass"
            ],
            "classes": {
                "TestCommunityIntegration": [
                    "setUpClass",
                    "test_error_handling",
                    "tearDownClass"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "tests\\gui\\test_main_tabs.py": {
            "functions": [
                "test_main_tabs_init",
                "test_tab_properties",
                "test_tab_bar_properties",
                "test_tab_tooltips",
                "test_tab_dimensions",
                "test_set_managers",
                "test_tab_switching",
                "mock_dreamscape_update",
                "mock_community_update",
                "mock_analytics_update",
                "mock_settings_update"
            ],
            "classes": {
                "TestMainTabs": [
                    "test_main_tabs_init",
                    "test_tab_properties",
                    "test_tab_bar_properties",
                    "test_tab_tooltips",
                    "test_tab_dimensions",
                    "test_set_managers",
                    "test_tab_switching"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "tests\\gui\\test_settings_tab.py": {
            "functions": [
                "test_settings_tab_init",
                "test_password_fields_masked",
                "test_placeholder_text",
                "test_general_settings_init",
                "test_automation_settings_init",
                "test_validate_credentials_missing",
                "test_validate_credentials_complete",
                "test_save_settings_validates_first",
                "test_save_settings_success",
                "test_load_settings",
                "test_update_managers",
                "mock_load_settings"
            ],
            "classes": {
                "TestSettingsTab": [
                    "test_settings_tab_init",
                    "test_password_fields_masked",
                    "test_placeholder_text",
                    "test_general_settings_init",
                    "test_automation_settings_init",
                    "test_validate_credentials_missing",
                    "test_validate_credentials_complete",
                    "test_save_settings_validates_first",
                    "test_save_settings_success",
                    "test_load_settings",
                    "test_update_managers"
                ]
            },
            "routes": [],
            "complexity": 23
        },
        "tests\\gui\\test_dreamscape_generation_tab.py": {
            "functions": [
                "prompt_manager_mock",
                "chat_engine_mock",
                "response_handler_mock",
                "memory_manager_mock",
                "discord_manager_mock",
                "dreamscape_generation_tab",
                "test_init_creates_ui_components",
                "test_update_managers_sets_managers",
                "test_load_prompt_template",
                "test_validate_inputs_valid",
                "test_validate_inputs_invalid",
                "test_add_character",
                "test_remove_character",
                "test_generate_dreamscape",
                "test_preview_dreamscape",
                "test_get_character_list",
                "test_reset_form"
            ],
            "classes": {},
            "routes": [],
            "complexity": 17
        },
        "tests\\gui\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\integration\\test_platform_integration.py": {
            "functions": [
                "setup"
            ],
            "classes": {
                "TestPlatformIntegration": [
                    "setup"
                ]
            },
            "routes": [],
            "complexity": 2
        },
        "tests\\isolated\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\integration\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\gui\\test_logs_tab.py": {
            "functions": [
                "logs_tab",
                "test_init_creates_ui_components",
                "test_clear_logs",
                "test_append_log",
                "test_multiple_log_entries",
                "test_log_text_is_read_only",
                "test_filter_logs"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\isolated\\test_dreamscape_generation_tab.py": {
            "functions": [
                "mock_services",
                "test_env",
                "__init__",
                "init_ui",
                "refresh_episode_list",
                "load_episode_content",
                "_update_ui_for_generation",
                "share_to_discord",
                "save_context_schedule",
                "load_context_schedule",
                "refresh_context_memory",
                "setup",
                "test_episode_interaction_workflow",
                "test_filter_context_memory"
            ],
            "classes": {
                "TestDreamscapeGenerationTab": [
                    "setup",
                    "test_episode_interaction_workflow",
                    "test_filter_context_memory"
                ]
            },
            "routes": [],
            "complexity": 17
        },
        "tests\\isolated\\conftest.py": {
            "functions": [
                "qapp"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "tests\\mocks\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\mocks\\cursor_dispatcher.py": {
            "functions": [
                "__init__",
                "connect",
                "disconnect",
                "send_message"
            ],
            "classes": {
                "CursorDispatcher": [
                    "__init__",
                    "connect",
                    "disconnect",
                    "send_message"
                ]
            },
            "routes": [],
            "complexity": 8
        },
        "tests\\mocks\\chatgpt_automation\\views\\file_browser_widget.py": {
            "functions": [
                "__init__",
                "get_path",
                "set_path"
            ],
            "classes": {
                "FileBrowserWidget": [
                    "__init__",
                    "get_path",
                    "set_path"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "tests\\mocks\\chatgpt_automation\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\mocks\\chatgpt_automation\\views\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\performance\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\test_logging\\test_composite_logger.py": {
            "functions": [
                "__init__",
                "log",
                "log_error",
                "log_debug",
                "log_event",
                "log_system_event",
                "setUp",
                "tearDown",
                "test_log_distribution",
                "test_error_handling",
                "test_logger_management",
                "test_all_log_types",
                "test_shutdown",
                "failing_logger"
            ],
            "classes": {
                "MockLogger": [
                    "__init__",
                    "log",
                    "log_error",
                    "log_debug",
                    "log_event",
                    "log_system_event"
                ],
                "TestCompositeLogger": [
                    "setUp",
                    "tearDown",
                    "test_log_distribution",
                    "test_error_handling",
                    "test_logger_management",
                    "test_all_log_types",
                    "test_shutdown"
                ]
            },
            "routes": [],
            "complexity": 27
        },
        "tests\\mocks\\GUI\\GuiHelpers.py": {
            "functions": [
                "create_button",
                "create_label",
                "create_text_edit",
                "create_line_edit",
                "create_combo_box",
                "create_checkbox",
                "create_list_widget"
            ],
            "classes": {
                "GuiHelpers": [
                    "create_button",
                    "create_label",
                    "create_text_edit",
                    "create_line_edit",
                    "create_combo_box",
                    "create_checkbox",
                    "create_list_widget"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "tests\\mocks\\GUI\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\test_logging\\test_async_dispatcher.py": {
            "functions": [
                "setUp",
                "tearDown",
                "test_dispatch_success",
                "test_dispatch_queue_full",
                "test_shutdown",
                "test_error_handling",
                "test_multiple_dispatches",
                "failing_callback"
            ],
            "classes": {
                "TestAsyncDispatcher": [
                    "setUp",
                    "tearDown",
                    "test_dispatch_success",
                    "test_dispatch_queue_full",
                    "test_shutdown",
                    "test_error_handling",
                    "test_multiple_dispatches"
                ]
            },
            "routes": [],
            "complexity": 15
        },
        "tests\\test_logging\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\performance\\test_performance.py": {
            "functions": [
                "setup",
                "measure_execution_time",
                "test_04_memory_usage_performance",
                "test_09_cache_performance"
            ],
            "classes": {
                "TestPerformance": [
                    "setup",
                    "measure_execution_time",
                    "test_04_memory_usage_performance",
                    "test_09_cache_performance"
                ]
            },
            "routes": [],
            "complexity": 8
        },
        "utils\\driver_factory.py": {
            "functions": [
                "create_driver"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "tests\\unit\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\test_logging\\test_logger_factory.py": {
            "functions": [
                "setUp",
                "test_create_console_logger",
                "test_create_file_logger",
                "test_create_discord_logger",
                "test_create_composite_logger",
                "test_fallback_to_console",
                "test_invalid_logger_type",
                "test_logger_initialization_error",
                "test_empty_logger_list"
            ],
            "classes": {
                "TestLoggerFactory": [
                    "setUp",
                    "test_create_console_logger",
                    "test_create_file_logger",
                    "test_create_discord_logger",
                    "test_create_composite_logger",
                    "test_fallback_to_console",
                    "test_invalid_logger_type",
                    "test_logger_initialization_error",
                    "test_empty_logger_list"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "utils\\cookie_manager.py": {
            "functions": [
                "__init__",
                "_get_cookie_path",
                "load_cookies",
                "save_cookies",
                "wait_for_manual_login"
            ],
            "classes": {
                "CookieManager": [
                    "__init__",
                    "_get_cookie_path",
                    "load_cookies",
                    "save_cookies",
                    "wait_for_manual_login"
                ]
            },
            "routes": [],
            "complexity": 10
        },
        "utils\\ai_output_logger.py": {
            "functions": [
                "log_ai_output"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "utils\\filesystem.py": {
            "functions": [
                "sanitize_filename",
                "get_project_root",
                "ensure_directory_exists"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "utils\\emoji_cleaner.py": {
            "functions": [
                "remove_emojis",
                "clean_file",
                "clean_directory"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "utils\\helpers.py": {
            "functions": [
                "sanitize_filename"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "utils\\io.py": {
            "functions": [
                "read_file",
                "write_file",
                "read_json",
                "write_json"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "utils\\json_paths.py": {
            "functions": [
                "get_path"
            ],
            "classes": {
                "JsonPaths": [
                    "get_path"
                ]
            },
            "routes": [],
            "complexity": 2
        },
        "utils\\logging_utils.py": {
            "functions": [
                "write_json_log",
                "log_success",
                "log_error",
                "setup_basic_logging"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "utils\\proxy_utils.py": {
            "functions": [
                "get_random_proxy"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "tests\\unit\\test_dreamscape_generation_tab.py": {
            "functions": [
                "setUpClass",
                "setUp",
                "tearDown",
                "test_init_services",
                "test_ui_initialization",
                "test_log_output",
                "test_refresh_episode_list",
                "test_share_to_discord",
                "test_generate_dreamscape_episodes",
                "test_validate_required_services",
                "test_confirm_generation",
                "test_update_ui_for_generation",
                "test_get_schedule_interval",
                "test_auto_select_dreamscape_chat",
                "test_load_schedule_settings",
                "tearDownClass"
            ],
            "classes": {
                "TestDreamscapeGenerationTab": [
                    "setUpClass",
                    "setUp",
                    "tearDown",
                    "test_init_services",
                    "test_ui_initialization",
                    "test_log_output",
                    "test_refresh_episode_list",
                    "test_share_to_discord",
                    "test_generate_dreamscape_episodes",
                    "test_validate_required_services",
                    "test_confirm_generation",
                    "test_update_ui_for_generation",
                    "test_get_schedule_interval",
                    "test_auto_select_dreamscape_chat",
                    "test_load_schedule_settings",
                    "tearDownClass"
                ]
            },
            "routes": [
                {
                    "function": "test_refresh_episode_list",
                    "method": "PATCH",
                    "path": "os.path.exists"
                },
                {
                    "function": "test_refresh_episode_list",
                    "method": "PATCH",
                    "path": "os.listdir"
                },
                {
                    "function": "test_generate_dreamscape_episodes",
                    "method": "PATCH",
                    "path": "asyncio.create_task"
                }
            ],
            "complexity": 32
        },
        "utils\\nltk_init.py": {
            "functions": [
                "ensure_nltk_data"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "utils\\reinforcement_trainer.py": {
            "functions": [
                "process_feedback"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "utils\\rate_limit_manager.py": {
            "functions": [
                "__init__",
                "_initialize_default_limits",
                "get_rate_limits",
                "adjust_rate_limit",
                "adjust_from_failures"
            ],
            "classes": {
                "RateLimitManager": [
                    "__init__",
                    "_initialize_default_limits",
                    "get_rate_limits",
                    "adjust_rate_limit",
                    "adjust_from_failures"
                ]
            },
            "routes": [],
            "complexity": 10
        },
        "utils\\qasync_event_loop_manager.py": {
            "functions": [
                "__init__",
                "start",
                "schedule_task",
                "_shutdown_handler",
                "shutdown"
            ],
            "classes": {
                "QAsyncEventLoopManager": [
                    "__init__",
                    "start",
                    "schedule_task",
                    "_shutdown_handler",
                    "shutdown"
                ]
            },
            "routes": [],
            "complexity": 10
        },
        "utils\\run_summary.py": {
            "functions": [
                "generate_full_run_json",
                "sanitize_filename"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "utils\\prompt_tuner.py": {
            "functions": [
                "__init__",
                "load_reinforcement_feedback",
                "analyze_feedback",
                "tune_prompt"
            ],
            "classes": {
                "PromptTuner": [
                    "__init__",
                    "load_reinforcement_feedback",
                    "analyze_feedback",
                    "tune_prompt"
                ]
            },
            "routes": [],
            "complexity": 8
        },
        "web\\app.py": {
            "functions": [
                "create_app",
                "start_flask_app",
                "index",
                "status"
            ],
            "classes": {},
            "routes": [
                {
                    "function": "index",
                    "method": "ROUTE",
                    "path": "/"
                },
                {
                    "function": "status",
                    "method": "ROUTE",
                    "path": "/api/status"
                }
            ],
            "complexity": 4
        },
        "utils\\SentimentAnalyzer.py": {
            "functions": [
                "__init__",
                "load_lexicon",
                "analyze",
                "analyze_batch",
                "analyze_with_context",
                "analyze_trend",
                "get_keyword_sentiment",
                "analyze_feedback_trends",
                "_generate_trend_visualization",
                "extract_topics",
                "add_custom_keywords",
                "load_custom_lexicon"
            ],
            "classes": {
                "SentimentAnalyzer": [
                    "__init__",
                    "load_lexicon",
                    "analyze",
                    "analyze_batch",
                    "analyze_with_context",
                    "analyze_trend",
                    "get_keyword_sentiment",
                    "analyze_feedback_trends",
                    "_generate_trend_visualization",
                    "extract_topics",
                    "add_custom_keywords",
                    "load_custom_lexicon"
                ]
            },
            "routes": [],
            "complexity": 24
        },
        "utils\\signal_dispatcher.py": {
            "functions": [
                "__init__",
                "emit_log_output",
                "emit_prompt_executed",
                "emit_dreamscape_generated",
                "emit_discord_event",
                "emit_task_started",
                "emit_task_progress",
                "emit_task_completed",
                "emit_task_failed",
                "emit_status_update",
                "emit_append_output",
                "emit_discord_log",
                "emit_automation_result",
                "register_listener",
                "unregister_listener"
            ],
            "classes": {
                "SignalDispatcher": [
                    "__init__",
                    "emit_log_output",
                    "emit_prompt_executed",
                    "emit_dreamscape_generated",
                    "emit_discord_event",
                    "emit_task_started",
                    "emit_task_progress",
                    "emit_task_completed",
                    "emit_task_failed",
                    "emit_status_update",
                    "emit_append_output",
                    "emit_discord_log",
                    "emit_automation_result",
                    "register_listener",
                    "unregister_listener"
                ]
            },
            "routes": [],
            "complexity": 30
        },
        "utils\\ua_utils.py": {
            "functions": [
                "get_random_user_agent"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "utils\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "utils\\ai\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "utils\\web\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "web\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        }
    }
}