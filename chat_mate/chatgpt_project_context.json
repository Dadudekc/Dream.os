{
    "project_root": "D:\\overnight_scripts\\chat_mate",
    "num_files_analyzed": 513,
    "analysis_details": {
        "social_main.py": {
            "functions": [
                "get_driver",
                "load_platforms_config",
                "run_social_engagement"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "generate_dependency_graph.py": {
            "functions": [
                "extract_imports"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "install_dev.py": {
            "functions": [
                "install_package",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "test_pyqt.py": {
            "functions": [
                "find_and_move_backup_files"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "chat_mate_config.py": {
            "functions": [
                "get_logger",
                "__init__",
                "load_from_file",
                "_ensure_directories",
                "create_driver",
                "_get_cached_driver",
                "_setup_logger",
                "sanitize_filename",
                "get",
                "to_dict",
                "ensure_directories"
            ],
            "classes": {
                "Config": [
                    "__init__",
                    "load_from_file",
                    "_ensure_directories",
                    "create_driver",
                    "_get_cached_driver",
                    "_setup_logger",
                    "sanitize_filename",
                    "get",
                    "to_dict"
                ],
                "PathManager": [
                    "ensure_directories"
                ]
            },
            "routes": [],
            "complexity": 21
        },
        "CursorExecutionTab.py": {
            "functions": [
                "__init__",
                "run",
                "__init__",
                "init_ui",
                "load_templates",
                "load_sequences",
                "load_sequence_info",
                "execute_prompt",
                "run_sequence",
                "browse_test_file",
                "generate_tests",
                "run_tests",
                "install_git_hooks",
                "commit_changes",
                "log_message",
                "log_sequence_message",
                "log_test_message",
                "log_git_message",
                "update_progress",
                "execution_finished",
                "sequence_finished",
                "tests_generated",
                "tests_run",
                "git_operation_finished",
                "__init__",
                "closeEvent",
                "execute_task",
                "execute_sequence_task",
                "generate_tests_task",
                "run_tests_task",
                "install_hooks_task",
                "commit_task"
            ],
            "classes": {
                "WorkerThread": [
                    "__init__",
                    "run"
                ],
                "CursorExecutionTab": [
                    "__init__",
                    "init_ui",
                    "load_templates",
                    "load_sequences",
                    "load_sequence_info",
                    "execute_prompt",
                    "run_sequence",
                    "browse_test_file",
                    "generate_tests",
                    "run_tests",
                    "install_git_hooks",
                    "commit_changes",
                    "log_message",
                    "log_sequence_message",
                    "log_test_message",
                    "log_git_message",
                    "update_progress",
                    "execution_finished",
                    "sequence_finished",
                    "tests_generated",
                    "tests_run",
                    "git_operation_finished"
                ],
                "CursorExecutionWindow": [
                    "__init__",
                    "closeEvent"
                ]
            },
            "routes": [],
            "complexity": 58
        },
        "chat_mate.py": {
            "functions": [
                "setup_logging",
                "get_driver",
                "save_cookies",
                "load_cookies",
                "is_logged_in",
                "force_model_in_url",
                "get_chat_titles",
                "send_prompt_to_chat",
                "get_latest_response",
                "generate_devlog",
                "save_rough_draft",
                "archive_chat",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 13
        },
        "setup.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "test_tabs.py": {
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "main.py": {
            "functions": [
                "setup_logging",
                "initialize_services",
                "show_error_dialog",
                "run_agent_dispatcher",
                "run_pyqt_gui",
                "run_flask_app",
                "execute_mode",
                "main",
                "flask_thread"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "cursor_dispatcher.py": {
            "functions": [
                "__init__",
                "_create_timestamp",
                "load_and_render",
                "run_prompt",
                "send_to_cursor",
                "wait_for_cursor_edit",
                "send_and_wait",
                "run_tests",
                "_create_test_file",
                "_append_to_json",
                "execute_prompt_sequence",
                "git_commit_changes",
                "install_git_hook"
            ],
            "classes": {
                "CursorDispatcher": [
                    "__init__",
                    "_create_timestamp",
                    "load_and_render",
                    "run_prompt",
                    "send_to_cursor",
                    "wait_for_cursor_edit",
                    "send_and_wait",
                    "run_tests",
                    "_create_test_file",
                    "_append_to_json",
                    "execute_prompt_sequence",
                    "git_commit_changes",
                    "install_git_hook"
                ]
            },
            "routes": [],
            "complexity": 26
        },
        "ProjectScanner.py": {
            "functions": [
                "__init__",
                "_init_tree_sitter_language",
                "analyze_file",
                "_analyze_python",
                "_analyze_rust",
                "_analyze_javascript",
                "__init__",
                "hash_file",
                "should_exclude",
                "process_file",
                "__init__",
                "save_report",
                "generate_init_files",
                "__init__",
                "load_cache",
                "save_cache",
                "scan_project",
                "_process_file",
                "generate_init_files",
                "export_chatgpt_context",
                "__init__",
                "run",
                "__init__",
                "add_task",
                "wait_for_completion",
                "stop_workers",
                "_traverse",
                "get_node_text",
                "_traverse"
            ],
            "classes": {
                "LanguageAnalyzer": [
                    "__init__",
                    "_init_tree_sitter_language",
                    "analyze_file",
                    "_analyze_python",
                    "_analyze_rust",
                    "_analyze_javascript"
                ],
                "FileProcessor": [
                    "__init__",
                    "hash_file",
                    "should_exclude",
                    "process_file"
                ],
                "ReportGenerator": [
                    "__init__",
                    "save_report",
                    "generate_init_files"
                ],
                "ProjectScanner": [
                    "__init__",
                    "load_cache",
                    "save_cache",
                    "scan_project",
                    "_process_file",
                    "generate_init_files",
                    "export_chatgpt_context"
                ],
                "BotWorker": [
                    "__init__",
                    "run"
                ],
                "MultibotManager": [
                    "__init__",
                    "add_task",
                    "wait_for_completion",
                    "stop_workers"
                ]
            },
            "routes": [],
            "complexity": 55
        },
        "archive\\run_community_builder.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\app\\main.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\app\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\scalability_analysis.py": {
            "functions": [
                "analyze_file_complexity",
                "scan_project_for_complexity",
                "main",
                "__init__",
                "scan",
                "_is_valid_file",
                "__init__",
                "run_analysis",
                "_analyze_file",
                "__init__",
                "generate_markdown",
                "generate_json"
            ],
            "classes": {
                "CodeScanner": [
                    "__init__",
                    "scan",
                    "_is_valid_file"
                ],
                "ScalabilityAnalyzer": [
                    "__init__",
                    "run_analysis",
                    "_analyze_file"
                ],
                "ReportGenerator": [
                    "__init__",
                    "generate_markdown",
                    "generate_json"
                ]
            },
            "routes": [],
            "complexity": 21
        },
        "archive\\service_container.py": {
            "functions": [
                "get_service",
                "__init__",
                "register",
                "get",
                "_initialize_service",
                "_create_empty_service",
                "has",
                "shutdown",
                "replace_for_testing",
                "reset",
                "__init__",
                "__getattr__",
                "method"
            ],
            "classes": {
                "ServiceContainer": [
                    "__init__",
                    "register",
                    "get",
                    "_initialize_service",
                    "_create_empty_service",
                    "has",
                    "shutdown",
                    "replace_for_testing",
                    "reset"
                ],
                "EmptyService": [
                    "__init__",
                    "__getattr__"
                ]
            },
            "routes": [],
            "complexity": 24
        },
        "archive\\app\\api\\v1\\endpoints\\health.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\splash_screen.py": {
            "functions": [
                "show_splash_screen",
                "__init__",
                "initUI"
            ],
            "classes": {
                "SplashScreen": [
                    "__init__",
                    "initUI"
                ]
            },
            "routes": [],
            "complexity": 5
        },
        "__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\app\\api\\v1\\endpoints\\discord.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\app\\api\\v1\\endpoints\\prompts.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\app\\api\\v1\\endpoints\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\app\\core\\logger.py": {
            "functions": [
                "setup_logger"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "archive\\app\\api\\v1\\endpoints\\users.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\app\\core\\discord_bot.py": {
            "functions": [
                "__init__"
            ],
            "classes": {
                "DreamscapeBot": [
                    "__init__"
                ]
            },
            "routes": [],
            "complexity": 2
        },
        "archive\\app\\core\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\app\\core\\config.py": {
            "functions": [],
            "classes": {
                "Settings": [],
                "Config": []
            },
            "routes": [],
            "complexity": 0
        },
        "archive\\app\\core\\dreamscape.py": {
            "functions": [
                "__init__",
                "start",
                "stop",
                "get_status"
            ],
            "classes": {
                "DreamscapeService": [
                    "__init__",
                    "start",
                    "stop",
                    "get_status"
                ]
            },
            "routes": [],
            "complexity": 8
        },
        "archive\\app\\db\\session.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\app\\db\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\app\\schemas\\discord_schema.py": {
            "functions": [],
            "classes": {
                "BotConfig": [],
                "BotStatus": []
            },
            "routes": [],
            "complexity": 0
        },
        "archive\\app\\models\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\app\\models\\user.py": {
            "functions": [],
            "classes": {
                "UserInDB": []
            },
            "routes": [],
            "complexity": 0
        },
        "archive\\app\\schemas\\health_schema.py": {
            "functions": [],
            "classes": {
                "HealthCheck": []
            },
            "routes": [],
            "complexity": 0
        },
        "archive\\app\\schemas\\user_schema.py": {
            "functions": [],
            "classes": {
                "UserResponse": []
            },
            "routes": [],
            "complexity": 0
        },
        "archive\\app\\schemas\\prompt_schema.py": {
            "functions": [],
            "classes": {
                "PromptRequest": [],
                "PromptResponse": [],
                "CycleRequest": []
            },
            "routes": [],
            "complexity": 0
        },
        "archive\\app\\services\\discord_service.py": {
            "functions": [
                "__init__"
            ],
            "classes": {
                "DiscordService": [
                    "__init__"
                ]
            },
            "routes": [],
            "complexity": 2
        },
        "archive\\app\\services\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\app\\services\\prompt_service.py": {
            "functions": [
                "__init__"
            ],
            "classes": {
                "PromptService": [
                    "__init__"
                ]
            },
            "routes": [],
            "complexity": 2
        },
        "archive\\app\\services\\discord\\bot_manager.py": {
            "functions": [
                "__init__",
                "is_running",
                "uptime"
            ],
            "classes": {
                "BotManager": [
                    "__init__",
                    "is_running",
                    "uptime"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "archive\\app\\schemas\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\app\\services\\user_service.py": {
            "functions": [
                "get_all_users"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "archive\\app\\services\\discord\\status_monitor.py": {
            "functions": [
                "__init__"
            ],
            "classes": {
                "StatusMonitor": [
                    "__init__"
                ]
            },
            "routes": [],
            "complexity": 2
        },
        "archive\\app\\services\\prompt\\prompt_executor.py": {
            "functions": [
                "__init__"
            ],
            "classes": {
                "PromptExecutor": [
                    "__init__"
                ]
            },
            "routes": [],
            "complexity": 2
        },
        "archive\\app\\services\\prompt\\cycle_manager.py": {
            "functions": [
                "__init__"
            ],
            "classes": {
                "CycleManager": [
                    "__init__"
                ]
            },
            "routes": [],
            "complexity": 2
        },
        "archive\\app\\services\\discord\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\app\\services\\prompt\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\backend\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\backend\\chat_handler.py": {
            "functions": [
                "__init__",
                "start_new_conversation",
                "continue_conversation",
                "send_to_chatgpt",
                "update_system_state",
                "set_active_template"
            ],
            "classes": {
                "ChatHandler": [
                    "__init__",
                    "start_new_conversation",
                    "continue_conversation",
                    "send_to_chatgpt",
                    "update_system_state",
                    "set_active_template"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "archive\\backend\\prompt_generator.py": {
            "functions": [
                "generate_initial_prompt",
                "generate_prompt"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "archive\\gui_old\\bootstrap.py": {
            "functions": [
                "__init__",
                "initUI",
                "closeEvent"
            ],
            "classes": {
                "DreamscapeGUI": [
                    "__init__",
                    "initUI",
                    "closeEvent"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "archive\\examples\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\gui_old\\dreamscape_services.py": {
            "functions": [
                "__init__",
                "create_chat_manager",
                "execute_prompt",
                "start_prompt_cycle",
                "load_prompt",
                "save_prompt",
                "reset_prompts",
                "launch_discord_bot",
                "stop_discord_bot",
                "send_discord_message",
                "send_discord_file",
                "send_discord_template",
                "get_discord_status",
                "run_prompt_tuning",
                "analyze_execution_response"
            ],
            "classes": {
                "DreamscapeService": [
                    "__init__",
                    "create_chat_manager",
                    "execute_prompt",
                    "start_prompt_cycle",
                    "load_prompt",
                    "save_prompt",
                    "reset_prompts",
                    "launch_discord_bot",
                    "stop_discord_bot",
                    "send_discord_message",
                    "send_discord_file",
                    "send_discord_template",
                    "get_discord_status",
                    "run_prompt_tuning",
                    "analyze_execution_response"
                ]
            },
            "routes": [],
            "complexity": 30
        },
        "archive\\examples\\driver_manager_example.py": {
            "functions": [
                "example_1_basic_usage",
                "example_2_context_manager",
                "example_3_retry_mechanism",
                "example_4_session_management",
                "example_5_cookie_management",
                "example_6_mobile_emulation",
                "main",
                "find_element_with_possible_failure"
            ],
            "classes": {},
            "routes": [],
            "complexity": 8
        },
        "archive\\gui_old\\dreamscape_ui_logic.py": {
            "functions": [
                "__init__",
                "set_output_signal",
                "set_discord_log_signal",
                "set_status_update_signal",
                "_output",
                "_discord_log",
                "_update_status",
                "get_service",
                "is_service_available",
                "execute_prompt",
                "save_prompts",
                "reset_prompts",
                "execute_single_prompt",
                "run_single_chat_mode",
                "run_multi_chat_mode",
                "start_prompt_cycle",
                "load_prompt",
                "save_prompt",
                "launch_discord_bot",
                "stop_discord_bot",
                "run_prompt_tuning",
                "analyze_execution_response",
                "shutdown",
                "worker",
                "worker"
            ],
            "classes": {
                "DreamscapeUILogic": [
                    "__init__",
                    "set_output_signal",
                    "set_discord_log_signal",
                    "set_status_update_signal",
                    "_output",
                    "_discord_log",
                    "_update_status",
                    "get_service",
                    "is_service_available",
                    "execute_prompt",
                    "save_prompts",
                    "reset_prompts",
                    "execute_single_prompt",
                    "run_single_chat_mode",
                    "run_multi_chat_mode",
                    "start_prompt_cycle",
                    "load_prompt",
                    "save_prompt",
                    "launch_discord_bot",
                    "stop_discord_bot",
                    "run_prompt_tuning",
                    "analyze_execution_response",
                    "shutdown"
                ]
            },
            "routes": [],
            "complexity": 48
        },
        "archive\\gui_old\\DreamscapeMainWindow.py": {
            "functions": [
                "__init__",
                "setup_ui",
                "setup_connections",
                "append_output",
                "update_status",
                "append_discord_log",
                "closeEvent",
                "ui_output"
            ],
            "classes": {
                "DreamscapeMainWindow": [
                    "__init__",
                    "setup_ui",
                    "setup_connections",
                    "append_output",
                    "update_status",
                    "append_discord_log",
                    "closeEvent"
                ]
            },
            "routes": [],
            "complexity": 15
        },
        "archive\\gui_old\\dreamscape_gui.py": {
            "functions": [
                "initialize_services",
                "initialize_community_manager",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "archive\\gui_old\\feedback_dashboard.py": {
            "functions": [
                "__init__",
                "initUI",
                "refresh_dashboard",
                "update_display"
            ],
            "classes": {
                "FeedbackDashboard": [
                    "__init__",
                    "initUI",
                    "refresh_dashboard",
                    "update_display"
                ]
            },
            "routes": [],
            "complexity": 8
        },
        "archive\\gui_old\\splash_screen.py": {
            "functions": [
                "show_splash_screen",
                "__init__",
                "initUI"
            ],
            "classes": {
                "SplashScreen": [
                    "__init__",
                    "initUI"
                ]
            },
            "routes": [],
            "complexity": 5
        },
        "archive\\gui_old\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\gui_old\\components\\discord_tab.py": {
            "functions": [
                "__init__",
                "initUI",
                "_create_discord_group",
                "update_status",
                "append_log",
                "get_bot_config"
            ],
            "classes": {
                "DiscordTab": [
                    "__init__",
                    "initUI",
                    "_create_discord_group",
                    "update_status",
                    "append_log",
                    "get_bot_config"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "archive\\gui_old\\components\\logs_tab.py": {
            "functions": [
                "__init__",
                "initUI",
                "append_log",
                "clear_logs",
                "get_logs"
            ],
            "classes": {
                "LogsTab": [
                    "__init__",
                    "initUI",
                    "append_log",
                    "clear_logs",
                    "get_logs"
                ]
            },
            "routes": [],
            "complexity": 10
        },
        "archive\\backend\\api.py": {
            "functions": [
                "api_load_template",
                "api_list_templates"
            ],
            "classes": {},
            "routes": [
                {
                    "function": "api_load_template",
                    "method": "GET",
                    "path": "/api/templates/load"
                },
                {
                    "function": "api_list_templates",
                    "method": "GET",
                    "path": "/api/templates/list"
                }
            ],
            "complexity": 2
        },
        "archive\\gui_old\\components\\logs_panel.py": {
            "functions": [
                "__init__",
                "initUI",
                "append_log",
                "clear_logs",
                "export_logs",
                "get_logs"
            ],
            "classes": {
                "LogsPanel": [
                    "__init__",
                    "initUI",
                    "append_log",
                    "clear_logs",
                    "export_logs",
                    "get_logs"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "archive\\gui_old\\components\\community_dashboard_tab.py": {
            "functions": [
                "__init__",
                "setup_ui",
                "setup_overview_tab",
                "setup_insights_tab",
                "setup_community_tab",
                "setup_planning_tab",
                "refresh_data",
                "generate_insights",
                "generate_plan",
                "on_platform_changed",
                "on_focus_changed",
                "update_metrics_view",
                "update_insights_view",
                "update_members_view",
                "update_platform_status",
                "update_plan_view",
                "generate_content_strategy",
                "add_activity_log"
            ],
            "classes": {
                "CommunityDashboardTab": [
                    "__init__",
                    "setup_ui",
                    "setup_overview_tab",
                    "setup_insights_tab",
                    "setup_community_tab",
                    "setup_planning_tab",
                    "refresh_data",
                    "generate_insights",
                    "generate_plan",
                    "on_platform_changed",
                    "on_focus_changed",
                    "update_metrics_view",
                    "update_insights_view",
                    "update_members_view",
                    "update_platform_status",
                    "update_plan_view",
                    "generate_content_strategy",
                    "add_activity_log"
                ]
            },
            "routes": [],
            "complexity": 36
        },
        "archive\\gui_old\\IntegratedMainWindow.py": {
            "functions": [
                "__init__",
                "_wire_ui_actions",
                "on_execute_prompt",
                "on_save_prompt",
                "on_reset_prompts",
                "on_launch_discord_bot",
                "on_stop_discord_bot",
                "on_launch_dashboard",
                "append_output",
                "append_discord_log",
                "update_discord_status",
                "task"
            ],
            "classes": {
                "IntegratedMainWindow": [
                    "__init__",
                    "_wire_ui_actions",
                    "on_execute_prompt",
                    "on_save_prompt",
                    "on_reset_prompts",
                    "on_launch_discord_bot",
                    "on_stop_discord_bot",
                    "on_launch_dashboard",
                    "append_output",
                    "append_discord_log",
                    "update_discord_status"
                ]
            },
            "routes": [],
            "complexity": 23
        },
        "archive\\gui_old\\components\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\gui_old\\components\\prompt_panel.py": {
            "functions": [
                "__init__",
                "setup_ui",
                "load_sample_prompts",
                "_add_prompt_to_list",
                "on_prompt_selected",
                "save_prompt",
                "use_prompt",
                "add_custom_prompt",
                "remove_custom_prompt",
                "get_prompt_text",
                "set_prompt_text"
            ],
            "classes": {
                "PromptPanel": [
                    "__init__",
                    "setup_ui",
                    "load_sample_prompts",
                    "_add_prompt_to_list",
                    "on_prompt_selected",
                    "save_prompt",
                    "use_prompt",
                    "add_custom_prompt",
                    "remove_custom_prompt",
                    "get_prompt_text",
                    "set_prompt_text"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "archive\\gui_old\\components\\prompt_execution_tab.py": {
            "functions": [
                "__init__",
                "initUI",
                "_create_exclusion_group",
                "_create_prompt_controls_group",
                "add_exclusion",
                "remove_exclusion",
                "get_excluded_chats",
                "update_execution_mode",
                "load_prompt"
            ],
            "classes": {
                "PromptExecutionTab": [
                    "__init__",
                    "initUI",
                    "_create_exclusion_group",
                    "_create_prompt_controls_group",
                    "add_exclusion",
                    "remove_exclusion",
                    "get_excluded_chats",
                    "update_execution_mode",
                    "load_prompt"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "archive\\gui_old\\components\\dialogs\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\gui_old\\tabs\\ConfigurationTab.py": {
            "functions": [
                "__init__",
                "initUI",
                "open_exclusions_dialog",
                "open_discord_settings_dialog",
                "open_reinforcement_tools_dialog",
                "log_action"
            ],
            "classes": {
                "ConfigurationTab": [
                    "__init__",
                    "initUI",
                    "open_exclusions_dialog",
                    "open_discord_settings_dialog",
                    "open_reinforcement_tools_dialog",
                    "log_action"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "archive\\gui_old\\components\\dialogs\\exclusions_dialog.py": {
            "functions": [
                "__init__",
                "initUI",
                "refresh_list",
                "add_exclusion",
                "remove_selected",
                "get_exclusions"
            ],
            "classes": {
                "ExclusionsDialog": [
                    "__init__",
                    "initUI",
                    "refresh_list",
                    "add_exclusion",
                    "remove_selected",
                    "get_exclusions"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "archive\\gui_old\\components\\dialogs\\reinforcement_dialog.py": {
            "functions": [
                "__init__",
                "initUI",
                "load_feedback",
                "display_feedback_details",
                "export_feedback",
                "clear_feedback",
                "auto_tune_prompts"
            ],
            "classes": {
                "ReinforcementToolsDialog": [
                    "__init__",
                    "initUI",
                    "load_feedback",
                    "display_feedback_details",
                    "export_feedback",
                    "clear_feedback",
                    "auto_tune_prompts"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "archive\\gui_old\\tabs\\LogsTab.py": {
            "functions": [
                "__init__",
                "initUI",
                "append_log",
                "append_output",
                "clear_logs"
            ],
            "classes": {
                "LogsTab": [
                    "__init__",
                    "initUI",
                    "append_log",
                    "append_output",
                    "clear_logs"
                ]
            },
            "routes": [],
            "complexity": 10
        },
        "archive\\gui_old\\components\\dialogs\\discord_settings.py": {
            "functions": [
                "__init__",
                "initUI",
                "save_credentials",
                "map_prompt_to_channel",
                "unmap_selected_prompt",
                "refresh_prompt_channel_list"
            ],
            "classes": {
                "DiscordSettingsDialog": [
                    "__init__",
                    "initUI",
                    "save_credentials",
                    "map_prompt_to_channel",
                    "unmap_selected_prompt",
                    "refresh_prompt_channel_list"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "archive\\gui_old\\tabs\\MainTabs.py": {
            "functions": [
                "__init__",
                "_init_ui",
                "_register_tab",
                "append_output"
            ],
            "classes": {
                "MainTabs": [
                    "__init__",
                    "_init_ui",
                    "_register_tab",
                    "append_output"
                ]
            },
            "routes": [],
            "complexity": 8
        },
        "archive\\gui_old\\tabs\\DreamscapeGenerationTab.py": {
            "functions": [
                "__init__",
                "initUI",
                "log_output",
                "generate_dreamscape_episodes",
                "thread_func"
            ],
            "classes": {
                "DreamscapeGenerationTab": [
                    "__init__",
                    "initUI",
                    "log_output",
                    "generate_dreamscape_episodes"
                ]
            },
            "routes": [],
            "complexity": 9
        },
        "archive\\gui_old\\tabs\\PromptExecutionTab.py": {
            "functions": [
                "__init__",
                "initUI",
                "load_prompt",
                "execute_prompt",
                "log_output"
            ],
            "classes": {
                "PromptExecutionTab": [
                    "__init__",
                    "initUI",
                    "load_prompt",
                    "execute_prompt",
                    "log_output"
                ]
            },
            "routes": [],
            "complexity": 10
        },
        "archive\\pof\\devlog_automation.py": {
            "functions": [
                "setup_logging",
                "get_driver",
                "save_cookies",
                "load_cookies",
                "is_logged_in",
                "force_model_in_url",
                "get_chat_titles",
                "send_prompt_to_chat",
                "get_latest_response",
                "generate_devlog",
                "save_rough_draft",
                "archive_chat",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 13
        },
        "archive\\pof\\content_ideas.py": {
            "functions": [
                "setup_logging",
                "get_driver",
                "save_cookies",
                "load_cookies",
                "is_logged_in",
                "ensure_model_in_url",
                "get_chat_titles",
                "send_prompt_to_chat",
                "get_latest_response",
                "save_content_ideas",
                "archive_chat",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 12
        },
        "archive\\gui_old\\tabs\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\pof\\digitalDreamscape.py": {
            "functions": [
                "setup_logging",
                "get_driver",
                "save_cookies",
                "load_cookies",
                "is_logged_in",
                "ensure_model_in_url",
                "get_chat_titles",
                "send_prompt_to_chat",
                "get_latest_response",
                "generate_dreamscape_entry",
                "save_dreamscape_entry",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 12
        },
        "archive\\project_root\\core\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\project_root\\run.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\project_root\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\pof\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\project_root\\main.py": {
            "functions": [
                "process_chats",
                "display_memory",
                "chat_interface",
                "parse_args",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "archive\\project_root\\core\\agents\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\project_root\\core\\logging\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\project_root\\core\\agents\\chat_agent.py": {
            "functions": [
                "main",
                "__init__",
                "get_driver",
                "save_cookies",
                "load_cookies",
                "is_logged_in",
                "login",
                "get_chat_history",
                "force_model",
                "process_chat",
                "wait_for_stable_response",
                "archive_chat",
                "process_all_chats",
                "cleanup",
                "sanitize_filename"
            ],
            "classes": {
                "ChatAgent": [
                    "__init__",
                    "get_driver",
                    "save_cookies",
                    "load_cookies",
                    "is_logged_in",
                    "login",
                    "get_chat_history",
                    "force_model",
                    "process_chat",
                    "wait_for_stable_response",
                    "archive_chat",
                    "process_all_chats",
                    "cleanup",
                    "sanitize_filename"
                ]
            },
            "routes": [],
            "complexity": 29
        },
        "archive\\project_root\\core\\pipelines\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\project_root\\core\\pipelines\\main_pipeline.py": {
            "functions": [
                "run",
                "initialize_components",
                "setup_agents",
                "execute_workflow",
                "shutdown"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "archive\\project_root\\core\\utils\\config_manager.py": {
            "functions": [
                "get_config",
                "main",
                "__init__",
                "_load_base_config",
                "_create_default_base_config",
                "_apply_env_overrides",
                "_deep_merge",
                "get",
                "set",
                "save",
                "save_env_config",
                "reset",
                "get_section",
                "list_sections",
                "to_dict",
                "to_json",
                "from_dict",
                "from_json"
            ],
            "classes": {
                "ConfigManager": [
                    "__init__",
                    "_load_base_config",
                    "_create_default_base_config",
                    "_apply_env_overrides",
                    "_deep_merge",
                    "get",
                    "set",
                    "save",
                    "save_env_config",
                    "reset",
                    "get_section",
                    "list_sections",
                    "to_dict",
                    "to_json",
                    "from_dict",
                    "from_json"
                ]
            },
            "routes": [],
            "complexity": 34
        },
        "archive\\project_root\\core\\memory\\memory_manager.py": {
            "functions": [
                "main",
                "__init__",
                "_load_episodes",
                "_save_episodes",
                "add_episode",
                "get_episode",
                "get_recent_episodes",
                "search_episodes",
                "delete_episode",
                "clear_episodes",
                "get_stats"
            ],
            "classes": {
                "MemoryManager": [
                    "__init__",
                    "_load_episodes",
                    "_save_episodes",
                    "add_episode",
                    "get_episode",
                    "get_recent_episodes",
                    "search_episodes",
                    "delete_episode",
                    "clear_episodes",
                    "get_stats"
                ]
            },
            "routes": [],
            "complexity": 21
        },
        "archive\\project_root\\interfaces\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\project_root\\core\\memory\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\project_root\\core\\scanner\\project_scanner.py": {
            "functions": [
                "__init__",
                "_init_tree_sitter_language",
                "analyze_file",
                "_analyze_python",
                "_analyze_rust",
                "_analyze_javascript",
                "__init__",
                "should_ignore_path",
                "compute_file_hash",
                "file_changed",
                "read_file",
                "__init__",
                "start_workers",
                "stop_workers",
                "_worker_thread",
                "_process_file",
                "scan",
                "get_total_complexity",
                "get_most_complex_files",
                "_traverse",
                "get_node_text",
                "_traverse"
            ],
            "classes": {
                "LanguageAnalyzer": [
                    "__init__",
                    "_init_tree_sitter_language",
                    "analyze_file",
                    "_analyze_python",
                    "_analyze_rust",
                    "_analyze_javascript"
                ],
                "FileProcessor": [
                    "__init__",
                    "should_ignore_path",
                    "compute_file_hash",
                    "file_changed",
                    "read_file"
                ],
                "ProjectScanner": [
                    "__init__",
                    "start_workers",
                    "stop_workers",
                    "_worker_thread",
                    "_process_file",
                    "scan",
                    "get_total_complexity",
                    "get_most_complex_files"
                ]
            },
            "routes": [],
            "complexity": 41
        },
        "archive\\project_root\\core\\utils\\setup_environment.py": {
            "functions": [
                "setup_environment",
                "setup_logging",
                "ensure_directories",
                "load_config",
                "setup_paths",
                "setup_environment",
                "is_dev_environment",
                "is_test_environment",
                "is_prod_environment"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "archive\\project_root\\interfaces\\cli\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\project_root\\interfaces\\pyqt\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\project_root\\core\\scanner\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\project_root\\core\\utils\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\project_root\\interfaces\\pyqt\\components\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\project_root\\interfaces\\web\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\project_root\\scripts\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\project_root\\scripts\\run_web_server.py": {
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "archive\\project_root\\interfaces\\web\\app.py": {
            "functions": [
                "index",
                "status",
                "get_memory",
                "get_episodes",
                "create_app"
            ],
            "classes": {},
            "routes": [
                {
                    "function": "index",
                    "method": "ROUTE",
                    "path": "/"
                },
                {
                    "function": "status",
                    "method": "ROUTE",
                    "path": "/api/status"
                },
                {
                    "function": "get_memory",
                    "method": "ROUTE",
                    "path": "/api/memory"
                },
                {
                    "function": "get_episodes",
                    "method": "ROUTE",
                    "path": "/api/episodes"
                }
            ],
            "complexity": 5
        },
        "archive\\scripts\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\project_root\\tests\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "chat_mate\\tests\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\scripts\\clean_emojis.py": {
            "functions": [
                "remove_emojis",
                "clean_file",
                "clean_directory",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "archive\\project_root\\shared\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "archive\\scripts\\migrate_configs.py": {
            "functions": [
                "load_json_file",
                "load_yaml_file",
                "backup_config_files",
                "migrate_configs"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "content\\AletheiaContentDispatcher.py": {
            "functions": [
                "__init__",
                "execute_full_dispatch"
            ],
            "classes": {
                "AletheiaContentDispatcher": [
                    "__init__",
                    "execute_full_dispatch"
                ]
            },
            "routes": [],
            "complexity": 4
        },
        "chat_mate\\tests\\test_simple.py": {
            "functions": [
                "test_simple",
                "test_addition"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "core\\AgentDispatcher.py": {
            "functions": [
                "__init__",
                "_load_config",
                "add_task",
                "_start_workers",
                "_worker_loop",
                "_get_next_task",
                "_can_execute_task",
                "_execute_task",
                "_dispatch_to_agent",
                "_execute_social_task",
                "_execute_chat_task",
                "_execute_reinforcement_task",
                "_execute_refactor_task",
                "_execute_test_task",
                "_execute_doc_task",
                "_retry_task",
                "_allocate_resources",
                "_release_resources",
                "_update_performance_metrics",
                "get_task_status",
                "cancel_task",
                "get_performance_metrics",
                "shutdown",
                "__enter__",
                "__exit__"
            ],
            "classes": {
                "TaskPriority": [],
                "TaskStatus": [],
                "Task": [],
                "AgentDispatcher": [
                    "__init__",
                    "_load_config",
                    "add_task",
                    "_start_workers",
                    "_worker_loop",
                    "_get_next_task",
                    "_can_execute_task",
                    "_execute_task",
                    "_dispatch_to_agent",
                    "_execute_social_task",
                    "_execute_chat_task",
                    "_execute_reinforcement_task",
                    "_execute_refactor_task",
                    "_execute_test_task",
                    "_execute_doc_task",
                    "_retry_task",
                    "_allocate_resources",
                    "_release_resources",
                    "_update_performance_metrics",
                    "get_task_status",
                    "cancel_task",
                    "get_performance_metrics",
                    "shutdown",
                    "__enter__",
                    "__exit__"
                ]
            },
            "routes": [],
            "complexity": 50
        },
        "content\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\AletheiaFeedbackLoopManager.py": {
            "functions": [
                "__init__",
                "generate_feedback_loops",
                "_calculate_success_rate",
                "_get_top_tags",
                "_auto_adjust_rate_limits",
                "export_feedback_report",
                "process_feedback"
            ],
            "classes": {
                "AletheiaFeedbackLoopManager": [
                    "__init__",
                    "generate_feedback_loops",
                    "_calculate_success_rate",
                    "_get_top_tags",
                    "_auto_adjust_rate_limits",
                    "export_feedback_report",
                    "process_feedback"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "core\\config_base.py": {
            "functions": [
                "__init__",
                "_load_env",
                "get_env",
                "_validate_required_keys"
            ],
            "classes": {
                "ConfigBase": [
                    "__init__",
                    "_load_env",
                    "get_env",
                    "_validate_required_keys"
                ]
            },
            "routes": [],
            "complexity": 8
        },
        "core\\AIOutputLogAnalyzer.py": {
            "functions": [
                "__init__",
                "_log",
                "load_context_db",
                "save_context_db",
                "iterate_logs",
                "_validate_log",
                "extract_context_from_logs",
                "get_recent_context",
                "get_user_context",
                "get_platform_context",
                "identify_community_champions",
                "trigger_community_invites",
                "summarize",
                "export_summary_report",
                "send_discord_report_sync",
                "_parse_date"
            ],
            "classes": {
                "AIOutputLogAnalyzer": [
                    "__init__",
                    "_log",
                    "load_context_db",
                    "save_context_db",
                    "iterate_logs",
                    "_validate_log",
                    "extract_context_from_logs",
                    "get_recent_context",
                    "get_user_context",
                    "get_platform_context",
                    "identify_community_champions",
                    "trigger_community_invites",
                    "summarize",
                    "export_summary_report",
                    "send_discord_report_sync",
                    "_parse_date"
                ]
            },
            "routes": [],
            "complexity": 32
        },
        "core\\bootstrap.py": {
            "functions": [
                "get_bootstrap_paths",
                "register",
                "get_paths"
            ],
            "classes": {
                "_PathRegistry": [
                    "register",
                    "get_paths"
                ]
            },
            "routes": [],
            "complexity": 5
        },
        "core\\AletheiaPromptManager.py": {
            "functions": [
                "__init__",
                "load_all_memory_states",
                "save_all_memory_states",
                "start_conversation_cycle",
                "end_conversation_cycle",
                "record_conversation",
                "get_prompt",
                "load_conversation_memory",
                "save_conversation_memory",
                "load_cycle_memory",
                "save_cycle_memory",
                "_load_json_file",
                "_merge_cycle_memory_updates",
                "list_available_prompts",
                "load_memory_state",
                "save_memory_state",
                "parse_memory_updates",
                "_extract_memory_update_block",
                "_merge_memory_updates",
                "archive_episode",
                "_log_memory_diff",
                "review_memory_log",
                "_async_save",
                "save_task"
            ],
            "classes": {
                "AletheiaPromptManager": [
                    "__init__",
                    "load_all_memory_states",
                    "save_all_memory_states",
                    "start_conversation_cycle",
                    "end_conversation_cycle",
                    "record_conversation",
                    "get_prompt",
                    "load_conversation_memory",
                    "save_conversation_memory",
                    "load_cycle_memory",
                    "save_cycle_memory",
                    "_load_json_file",
                    "_merge_cycle_memory_updates",
                    "list_available_prompts",
                    "load_memory_state",
                    "save_memory_state",
                    "parse_memory_updates",
                    "_extract_memory_update_block",
                    "_merge_memory_updates",
                    "archive_episode",
                    "_log_memory_diff",
                    "review_memory_log",
                    "_async_save"
                ]
            },
            "routes": [],
            "complexity": 47
        },
        "core\\ConfigManager.py": {
            "functions": [
                "__init__",
                "logger",
                "set_logger",
                "_start_auto_reload",
                "_config_changed",
                "reload",
                "_load_config",
                "_create_default_config",
                "_apply_env_overrides",
                "_validate_config",
                "get",
                "set",
                "_get_nested_value",
                "_set_nested_value",
                "_save_config",
                "get_all",
                "reset",
                "merge",
                "__new__",
                "get_instance",
                "get",
                "set",
                "get_all",
                "reload",
                "reset",
                "merge",
                "watch_config",
                "validate_dict",
                "deep_merge"
            ],
            "classes": {
                "ConfigValidationError": [],
                "ConfigManager": [
                    "__init__",
                    "logger",
                    "set_logger",
                    "_start_auto_reload",
                    "_config_changed",
                    "reload",
                    "_load_config",
                    "_create_default_config",
                    "_apply_env_overrides",
                    "_validate_config",
                    "get",
                    "set",
                    "_get_nested_value",
                    "_set_nested_value",
                    "_save_config",
                    "get_all",
                    "reset",
                    "merge"
                ],
                "ConfigurationSingleton": [
                    "__new__",
                    "get_instance",
                    "get",
                    "set",
                    "get_all",
                    "reload",
                    "reset",
                    "merge"
                ]
            },
            "routes": [],
            "complexity": 55
        },
        "core\\ConsoleLogger.py": {
            "functions": [
                "__init__",
                "log",
                "log_error",
                "log_debug",
                "log_event",
                "log_system_event"
            ],
            "classes": {
                "ConsoleLogger": [
                    "__init__",
                    "log",
                    "log_error",
                    "log_debug",
                    "log_event",
                    "log_system_event"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "core\\config.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\ChatManager.py": {
            "functions": [
                "sanitize_filename",
                "__init__",
                "start",
                "send_prompt",
                "get_all_chat_titles",
                "execute_prompts_single_chat",
                "analyze_execution_response",
                "shutdown_driver",
                "send_chat_prompt",
                "switch_execution_mode"
            ],
            "classes": {
                "ChatManager": [
                    "__init__",
                    "start",
                    "send_prompt",
                    "get_all_chat_titles",
                    "execute_prompts_single_chat",
                    "analyze_execution_response",
                    "shutdown_driver",
                    "send_chat_prompt",
                    "switch_execution_mode"
                ]
            },
            "routes": [],
            "complexity": 19
        },
        "core\\chat_engine_simple.py": {
            "functions": [
                "__init__",
                "start_browser",
                "close",
                "__init__",
                "initialize",
                "shutdown",
                "get_driver_manager",
                "is_initialized"
            ],
            "classes": {
                "SimpleDriverManager": [
                    "__init__",
                    "start_browser",
                    "close"
                ],
                "SimpleChatEngineManager": [
                    "__init__",
                    "initialize",
                    "shutdown",
                    "get_driver_manager",
                    "is_initialized"
                ]
            },
            "routes": [],
            "complexity": 16
        },
        "core\\DiscordBatchDispatcher.py": {
            "functions": [
                "__init__",
                "start",
                "stop",
                "queue_message",
                "queue_batch",
                "_dispatch_loop",
                "_process_batch",
                "_send_channel_messages",
                "get_queue_size",
                "clear_queue"
            ],
            "classes": {
                "DiscordBatchDispatcher": [
                    "__init__",
                    "start",
                    "stop",
                    "queue_message",
                    "queue_batch",
                    "_dispatch_loop",
                    "_process_batch",
                    "_send_channel_messages",
                    "get_queue_size",
                    "clear_queue"
                ]
            },
            "routes": [],
            "complexity": 20
        },
        "core\\CycleExecutionService.py": {
            "functions": [
                "__init__",
                "run_cycle"
            ],
            "classes": {
                "CycleExecutionService": [
                    "__init__",
                    "run_cycle"
                ]
            },
            "routes": [],
            "complexity": 4
        },
        "core\\DiscordQueueProcessor.py": {
            "functions": [
                "__init__",
                "queue_response"
            ],
            "classes": {
                "DiscordQueueProcessor": [
                    "__init__",
                    "queue_response"
                ]
            },
            "routes": [],
            "complexity": 4
        },
        "core\\DiscordLogger.py": {
            "functions": [
                "__init__",
                "log",
                "log_error",
                "log_debug",
                "log_event",
                "log_system_event"
            ],
            "classes": {
                "DiscordLogger": [
                    "__init__",
                    "log",
                    "log_error",
                    "log_debug",
                    "log_event",
                    "log_system_event"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "core\\CursorSessionManager.py": {
            "functions": [
                "__init__",
                "focus_cursor_window",
                "generate_prompt",
                "safe_copy_to_clipboard",
                "execute_prompt",
                "switch_mode"
            ],
            "classes": {
                "CursorSessionManager": [
                    "__init__",
                    "focus_cursor_window",
                    "generate_prompt",
                    "safe_copy_to_clipboard",
                    "execute_prompt",
                    "switch_mode"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "core\\DiscordTemplateManager.py": {
            "functions": [
                "__init__",
                "_resolve_template_dir",
                "render_message",
                "list_templates"
            ],
            "classes": {
                "DiscordTemplateManager": [
                    "__init__",
                    "_resolve_template_dir",
                    "render_message",
                    "list_templates"
                ]
            },
            "routes": [],
            "complexity": 8
        },
        "core\\DriverManager.py": {
            "functions": [
                "setup_logger",
                "main",
                "__new__",
                "__init__",
                "__enter__",
                "__exit__",
                "_get_cached_driver_path",
                "_download_driver_if_needed",
                "_is_session_expired",
                "refresh_session",
                "get_session_info",
                "set_session_timeout",
                "_create_chrome_options",
                "get_driver",
                "quit_driver",
                "save_cookies",
                "load_cookies",
                "clear_cookies",
                "is_logged_in",
                "execute_with_retry",
                "scroll_into_view",
                "manual_scroll",
                "update_options",
                "__del__"
            ],
            "classes": {
                "DriverManager": [
                    "__new__",
                    "__init__",
                    "__enter__",
                    "__exit__",
                    "_get_cached_driver_path",
                    "_download_driver_if_needed",
                    "_is_session_expired",
                    "refresh_session",
                    "get_session_info",
                    "set_session_timeout",
                    "_create_chrome_options",
                    "get_driver",
                    "quit_driver",
                    "save_cookies",
                    "load_cookies",
                    "clear_cookies",
                    "is_logged_in",
                    "execute_with_retry",
                    "scroll_into_view",
                    "manual_scroll",
                    "update_options",
                    "__del__"
                ]
            },
            "routes": [],
            "complexity": 46
        },
        "core\\EngagementAgent.py": {
            "functions": [
                "__init__",
                "handle_mentions",
                "proactive_engagement",
                "_process_mention",
                "_process_proactive",
                "_log_interaction"
            ],
            "classes": {
                "EngagementAgent": [
                    "__init__",
                    "handle_mentions",
                    "proactive_engagement",
                    "_process_mention",
                    "_process_proactive",
                    "_log_interaction"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "core\\DreamscapeEpisodeGenerator.py": {
            "functions": [
                "__init__",
                "_load_context_memory",
                "_save_context_memory",
                "_extract_themes",
                "_update_context_with_episode",
                "get_context_summary",
                "get_episode_number",
                "shutdown",
                "get_chatgpt_context_prompt",
                "_generate_dreamscape_entry",
                "ensure_model_in_url",
                "_send_prompt_to_chat",
                "_get_latest_response",
                "_save_dreamscape_entry",
                "_extract_protocols",
                "generate_dreamscape_episodes"
            ],
            "classes": {
                "DreamscapeEpisodeGenerator": [
                    "__init__",
                    "_load_context_memory",
                    "_save_context_memory",
                    "_extract_themes",
                    "_update_context_with_episode",
                    "get_context_summary",
                    "get_episode_number",
                    "shutdown",
                    "get_chatgpt_context_prompt",
                    "_generate_dreamscape_entry",
                    "ensure_model_in_url",
                    "_send_prompt_to_chat",
                    "_get_latest_response",
                    "_save_dreamscape_entry",
                    "_extract_protocols",
                    "generate_dreamscape_episodes"
                ]
            },
            "routes": [],
            "complexity": 32
        },
        "core\\DiscordManager.py": {
            "functions": [
                "__init__",
                "set_log_callback",
                "_log",
                "load_config",
                "save_config",
                "update_credentials",
                "map_prompt_to_channel",
                "unmap_prompt_channel",
                "get_channel_for_prompt",
                "_register_events",
                "_register_commands",
                "_build_status_message",
                "run_bot",
                "_run_bot_loop",
                "stop_bot",
                "send_message",
                "send_file",
                "send_dreamscape_episode",
                "send_prompt_response",
                "send_event_notification",
                "update_status",
                "test_connection",
                "__init__",
                "initUI",
                "load_prompt_types",
                "update_credentials",
                "map_prompt_to_channel",
                "unmap_selected_prompt",
                "refresh_prompt_channel_list"
            ],
            "classes": {
                "DiscordManager": [
                    "__init__",
                    "set_log_callback",
                    "_log",
                    "load_config",
                    "save_config",
                    "update_credentials",
                    "map_prompt_to_channel",
                    "unmap_prompt_channel",
                    "get_channel_for_prompt",
                    "_register_events",
                    "_register_commands",
                    "_build_status_message",
                    "run_bot",
                    "_run_bot_loop",
                    "stop_bot",
                    "send_message",
                    "send_file",
                    "send_dreamscape_episode",
                    "send_prompt_response",
                    "send_event_notification",
                    "update_status",
                    "test_connection"
                ],
                "DiscordSettingsDialog": [
                    "__init__",
                    "initUI",
                    "load_prompt_types",
                    "update_credentials",
                    "map_prompt_to_channel",
                    "unmap_selected_prompt",
                    "refresh_prompt_channel_list"
                ]
            },
            "routes": [],
            "complexity": 58
        },
        "core\\EventMessageBuilder.py": {
            "functions": [
                "__init__",
                "on_modified",
                "on_created",
                "on_deleted",
                "__init__",
                "_start_template_watcher",
                "build_message",
                "list_available_templates",
                "clear_cache"
            ],
            "classes": {
                "TemplateChangeHandler": [
                    "__init__",
                    "on_modified",
                    "on_created",
                    "on_deleted"
                ],
                "EventMessageBuilder": [
                    "__init__",
                    "_start_template_watcher",
                    "build_message",
                    "list_available_templates",
                    "clear_cache"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "core\\feedback.py": {
            "functions": [
                "__new__",
                "get_instance",
                "add_feedback",
                "get_feedback",
                "get_context_stats",
                "analyze_feedback"
            ],
            "classes": {
                "FeedbackSingleton": [
                    "__new__",
                    "get_instance",
                    "add_feedback",
                    "get_feedback",
                    "get_context_stats",
                    "analyze_feedback"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "core\\DriverSessionManager.py": {
            "functions": [
                "__init__",
                "initialize_driver",
                "get_driver",
                "_is_session_expired",
                "shutdown_driver",
                "refresh_session",
                "execute_with_retry",
                "get_session_info",
                "set_session_timeout",
                "clear_cookies"
            ],
            "classes": {
                "DriverSessionManager": [
                    "__init__",
                    "initialize_driver",
                    "get_driver",
                    "_is_session_expired",
                    "shutdown_driver",
                    "refresh_session",
                    "execute_with_retry",
                    "get_session_info",
                    "set_session_timeout",
                    "clear_cookies"
                ]
            },
            "routes": [],
            "complexity": 20
        },
        "core\\FileLogger.py": {
            "functions": [
                "__init__",
                "_get_log_file",
                "_rotate_logs",
                "_write_log",
                "log",
                "log_error",
                "log_debug",
                "log_event",
                "log_system_event"
            ],
            "classes": {
                "FileLogger": [
                    "__init__",
                    "_get_log_file",
                    "_rotate_logs",
                    "_write_log",
                    "log",
                    "log_error",
                    "log_debug",
                    "log_event",
                    "log_system_event"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "core\\FileManager.py": {
            "functions": [
                "__init__",
                "save_response",
                "save_memory_state",
                "save_log",
                "archive_file",
                "_save_file",
                "load_file",
                "sanitize_filename"
            ],
            "classes": {
                "FileManager": [
                    "__init__",
                    "save_response",
                    "save_memory_state",
                    "save_log",
                    "archive_file",
                    "_save_file",
                    "load_file",
                    "sanitize_filename"
                ]
            },
            "routes": [],
            "complexity": 16
        },
        "core\\LoggerFactory.py": {
            "functions": [
                "get_logger"
            ],
            "classes": {
                "LoggerFactory": [
                    "get_logger"
                ]
            },
            "routes": [],
            "complexity": 2
        },
        "core\\OptimizedMemoryManager.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\NarrativeAnalytics.py": {
            "functions": [
                "__init__",
                "analyze",
                "_summarize",
                "_analyze_sentiment",
                "_extract_keywords"
            ],
            "classes": {
                "NarrativeAnalytics": [
                    "__init__",
                    "analyze",
                    "_summarize",
                    "_analyze_sentiment",
                    "_extract_keywords"
                ]
            },
            "routes": [],
            "complexity": 10
        },
        "core\\PathManager.py": {
            "functions": [
                "__new__",
                "_generate_properties",
                "__new__",
                "_ensure_initialized",
                "register_path",
                "get_path",
                "ensure_directories",
                "list_paths",
                "get_relative_path",
                "describe_paths",
                "get_env_path",
                "get_rate_limit_state_path",
                "get_chrome_profile_path",
                "make_getter"
            ],
            "classes": {
                "PathManagerMeta": [
                    "__new__",
                    "_generate_properties"
                ],
                "PathManager": [
                    "__new__",
                    "_ensure_initialized",
                    "register_path",
                    "get_path",
                    "ensure_directories",
                    "list_paths",
                    "get_relative_path",
                    "describe_paths",
                    "get_env_path",
                    "get_rate_limit_state_path",
                    "get_chrome_profile_path"
                ]
            },
            "routes": [],
            "complexity": 27
        },
        "core\\OpenAIPromptEngine.py": {
            "functions": [
                "__init__",
                "_is_driver_alive",
                "render_prompt",
                "_retry",
                "send_prompt",
                "_wait_for_response_completion",
                "_scrape_response",
                "log_interaction",
                "execute"
            ],
            "classes": {
                "OpenAIPromptEngine": [
                    "__init__",
                    "_is_driver_alive",
                    "render_prompt",
                    "_retry",
                    "send_prompt",
                    "_wait_for_response_completion",
                    "_scrape_response",
                    "log_interaction",
                    "execute"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "core\\PromptResponseHandler.py": {
            "functions": [
                "__init__",
                "process_response"
            ],
            "classes": {
                "PromptResponseHandler": [
                    "__init__",
                    "process_response"
                ]
            },
            "routes": [],
            "complexity": 4
        },
        "core\\ResilientPromptExecutor.py": {
            "functions": [
                "__init__",
                "execute_with_retry",
                "_execute_prompt",
                "_categorize_error",
                "_cache_response",
                "_get_cached_response",
                "_get_cache_key",
                "_log_execution_result",
                "get_execution_stats",
                "clear_history"
            ],
            "classes": {
                "ExecutionStatus": [],
                "ResilientPromptExecutor": [
                    "__init__",
                    "execute_with_retry",
                    "_execute_prompt",
                    "_categorize_error",
                    "_cache_response",
                    "_get_cached_response",
                    "_get_cache_key",
                    "_log_execution_result",
                    "get_execution_stats",
                    "clear_history"
                ]
            },
            "routes": [],
            "complexity": 20
        },
        "core\\MemoryManager.py": {
            "functions": [
                "__init__",
                "_initialize_db",
                "record_interaction",
                "initialize_conversation",
                "get_conversation",
                "close",
                "__init__",
                "_load_memory",
                "_save_memory",
                "set",
                "get",
                "delete",
                "clear_segment",
                "get_segment_keys",
                "get_segment_size",
                "_save_segment",
                "get_stats",
                "optimize",
                "record_interaction",
                "initialize_conversation",
                "retrieve_conversation",
                "export_conversation_for_finetuning",
                "get_user_history",
                "user_sentiment_summary",
                "clear_user_history",
                "clear_platform_history",
                "generate_narrative",
                "close"
            ],
            "classes": {
                "DatabaseManager": [
                    "__init__",
                    "_initialize_db",
                    "record_interaction",
                    "initialize_conversation",
                    "get_conversation",
                    "close"
                ],
                "MemoryManager": [
                    "__init__",
                    "_load_memory",
                    "_save_memory",
                    "set",
                    "get",
                    "delete",
                    "clear_segment",
                    "get_segment_keys",
                    "get_segment_size",
                    "_save_segment",
                    "get_stats",
                    "optimize",
                    "record_interaction",
                    "initialize_conversation",
                    "retrieve_conversation",
                    "export_conversation_for_finetuning",
                    "get_user_history",
                    "user_sentiment_summary",
                    "clear_user_history",
                    "clear_platform_history",
                    "generate_narrative",
                    "close"
                ]
            },
            "routes": [],
            "complexity": 56
        },
        "core\\PromptCycleOrchestrator.py": {
            "functions": [
                "__init__",
                "initialize_chat_manager",
                "execute_single_cycle",
                "execute_multi_cycle",
                "get_available_prompts",
                "get_prompt",
                "save_prompt",
                "reset_prompts",
                "shutdown"
            ],
            "classes": {
                "PromptCycleOrchestrator": [
                    "__init__",
                    "initialize_chat_manager",
                    "execute_single_cycle",
                    "execute_multi_cycle",
                    "get_available_prompts",
                    "get_prompt",
                    "save_prompt",
                    "reset_prompts",
                    "shutdown"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "core\\ReinforcementEngine.py": {
            "functions": [
                "__init__",
                "load_memory",
                "save_memory",
                "detect_hallucination",
                "calculate_length_score",
                "detect_clarity_issues",
                "calculate_coherence_score",
                "analyze_response",
                "append_execution_log",
                "auto_tune_prompts",
                "append_tuning_log",
                "__init__",
                "initUI",
                "load_feedback",
                "display_feedback_details",
                "export_feedback",
                "clear_feedback",
                "auto_tune_prompts"
            ],
            "classes": {
                "ReinforcementEngine": [
                    "__init__",
                    "load_memory",
                    "save_memory",
                    "detect_hallucination",
                    "calculate_length_score",
                    "detect_clarity_issues",
                    "calculate_coherence_score",
                    "analyze_response",
                    "append_execution_log",
                    "auto_tune_prompts",
                    "append_tuning_log"
                ],
                "ReinforcementToolsDialog": [
                    "__init__",
                    "initUI",
                    "load_feedback",
                    "display_feedback_details",
                    "export_feedback",
                    "clear_feedback",
                    "auto_tune_prompts"
                ]
            },
            "routes": [],
            "complexity": 36
        },
        "core\\ReinforcementEvaluator.py": {
            "functions": [
                "__init__",
                "_load_memory_data",
                "_create_default_memory",
                "_save_memory_data",
                "evaluate_response",
                "_calculate_score",
                "_generate_feedback",
                "_update_prompt_performance",
                "get_prompt_insights",
                "_calculate_score_trend",
                "get_memory_summary",
                "clear_memory"
            ],
            "classes": {
                "ReinforcementEvaluator": [
                    "__init__",
                    "_load_memory_data",
                    "_create_default_memory",
                    "_save_memory_data",
                    "evaluate_response",
                    "_calculate_score",
                    "_generate_feedback",
                    "_update_prompt_performance",
                    "get_prompt_insights",
                    "_calculate_score_trend",
                    "get_memory_summary",
                    "clear_memory"
                ]
            },
            "routes": [],
            "complexity": 24
        },
        "core\\ReportExporter.py": {
            "functions": [
                "__init__",
                "export_markdown",
                "export_html",
                "send_discord_report",
                "send_discord_report_sync"
            ],
            "classes": {
                "ReportExporter": [
                    "__init__",
                    "export_markdown",
                    "export_html",
                    "send_discord_report",
                    "send_discord_report_sync"
                ]
            },
            "routes": [],
            "complexity": 10
        },
        "core\\service_container.py": {
            "functions": [],
            "classes": {
                "ServiceContainer": []
            },
            "routes": [],
            "complexity": 0
        },
        "core\\PromptEngine.py": {
            "functions": [
                "__init__",
                "send_prompt",
                "fetch_response",
                "wait_for_stable_response",
                "log_ai_response",
                "clean_response",
                "__init__",
                "_load_config",
                "execute_prompt",
                "_get_optimized_prompt",
                "_optimize_prompt",
                "_enhance_prompt",
                "_execute_with_retry",
                "_analyze_response",
                "_assess_creativity",
                "_assess_technical_accuracy",
                "_record_feedback",
                "_calculate_feedback_score",
                "_update_stats",
                "get_stats"
            ],
            "classes": {
                "PromptEngine": [
                    "__init__",
                    "_load_config",
                    "execute_prompt",
                    "_get_optimized_prompt",
                    "_optimize_prompt",
                    "_enhance_prompt",
                    "_execute_with_retry",
                    "_analyze_response",
                    "_assess_creativity",
                    "_assess_technical_accuracy",
                    "_record_feedback",
                    "_calculate_feedback_score",
                    "_update_stats",
                    "get_stats"
                ],
                "PromptExecutionError": []
            },
            "routes": [],
            "complexity": 34
        },
        "core\\reinforcement_tools.py": {
            "functions": [
                "__init__",
                "load_feedback",
                "show_feedback_details",
                "export_feedback",
                "clear_feedback",
                "auto_tune_prompts"
            ],
            "classes": {
                "ReinforcementToolsDialog": [
                    "__init__",
                    "load_feedback",
                    "show_feedback_details",
                    "export_feedback",
                    "clear_feedback",
                    "auto_tune_prompts"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "core\\ResponseHandler.py": {
            "functions": [
                "setup_logging",
                "parse_hybrid_response",
                "__init__",
                "_init_driver",
                "save_cookies",
                "load_cookies",
                "is_logged_in",
                "send_prompt",
                "fetch_response",
                "wait_for_stable_response",
                "clean_response",
                "handle_hybrid_response",
                "execute_prompt_cycle",
                "execute_prompts_on_all_chats",
                "shutdown"
            ],
            "classes": {
                "HybridResponseHandler": [
                    "parse_hybrid_response"
                ],
                "ResponseHandler": [
                    "__init__",
                    "_init_driver",
                    "save_cookies",
                    "load_cookies",
                    "is_logged_in",
                    "send_prompt",
                    "fetch_response",
                    "wait_for_stable_response",
                    "clean_response",
                    "handle_hybrid_response",
                    "execute_prompt_cycle",
                    "execute_prompts_on_all_chats",
                    "shutdown"
                ]
            },
            "routes": [],
            "complexity": 29
        },
        "core\\TaskOrchestrator.py": {
            "functions": [
                "__init__",
                "set_cycle_service",
                "execute_task"
            ],
            "classes": {
                "TaskOrchestrator": [
                    "__init__",
                    "set_cycle_service",
                    "execute_task"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "core\\ThreadPoolManager.py": {
            "functions": [
                "__init__",
                "submit_task",
                "_task_scheduler",
                "_execute_task",
                "cancel_task",
                "get_task_status",
                "get_metrics",
                "shutdown",
                "wrapped_func"
            ],
            "classes": {
                "TaskPriority": [],
                "Task": [],
                "ThreadPoolManager": [
                    "__init__",
                    "submit_task",
                    "_task_scheduler",
                    "_execute_task",
                    "cancel_task",
                    "get_task_status",
                    "get_metrics",
                    "shutdown"
                ]
            },
            "routes": [],
            "complexity": 17
        },
        "core\\TaskManager.py": {
            "functions": [
                "__init__",
                "_load",
                "_save",
                "add_task",
                "list_tasks",
                "complete_task",
                "delete_task",
                "clear_completed",
                "get_pending_count"
            ],
            "classes": {
                "TaskManager": [
                    "__init__",
                    "_load",
                    "_save",
                    "add_task",
                    "list_tasks",
                    "complete_task",
                    "delete_task",
                    "clear_completed",
                    "get_pending_count"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "core\\template_loader.py": {
            "functions": [
                "get_base_template_dir",
                "discover_templates",
                "load_template",
                "__init__",
                "get_default_prompt_dir",
                "load_templates",
                "get_available_templates",
                "change_template_dir",
                "set_active_template",
                "render_template",
                "save_rendered_output",
                "validate_context",
                "_on_template_modified",
                "visit_node"
            ],
            "classes": {
                "TemplateManager": [
                    "__init__",
                    "get_default_prompt_dir",
                    "load_templates",
                    "get_available_templates",
                    "change_template_dir",
                    "set_active_template",
                    "render_template",
                    "save_rendered_output",
                    "validate_context",
                    "_on_template_modified"
                ]
            },
            "routes": [],
            "complexity": 24
        },
        "core\\SystemHealthMonitor.py": {
            "functions": [
                "__init__",
                "start_monitoring",
                "stop_monitoring",
                "_monitoring_loop",
                "perform_health_checks",
                "_check_driver",
                "_check_memory",
                "_check_thread_pool",
                "_check_system_resources",
                "_store_metrics",
                "_check_alerts",
                "get_system_health",
                "get_historical_metrics"
            ],
            "classes": {
                "HealthStatus": [],
                "HealthMetrics": [],
                "SystemHealthMonitor": [
                    "__init__",
                    "start_monitoring",
                    "stop_monitoring",
                    "_monitoring_loop",
                    "perform_health_checks",
                    "_check_driver",
                    "_check_memory",
                    "_check_thread_pool",
                    "_check_system_resources",
                    "_store_metrics",
                    "_check_alerts",
                    "get_system_health",
                    "get_historical_metrics"
                ]
            },
            "routes": [],
            "complexity": 26
        },
        "core\\UnifiedPromptEngine.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\TemplateManager.py": {
            "functions": [
                "__init__",
                "_init_environment",
                "set_active_template",
                "render",
                "render_discord_template",
                "render_message_template",
                "render_general_template",
                "list_templates",
                "get_available_templates",
                "_log_template_render",
                "render_template"
            ],
            "classes": {
                "TemplateManager": [
                    "__init__",
                    "_init_environment",
                    "set_active_template",
                    "render",
                    "render_discord_template",
                    "render_message_template",
                    "render_general_template",
                    "list_templates",
                    "get_available_templates",
                    "_log_template_render",
                    "render_template"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "core\\UnifiedDiscordService.py": {
            "functions": [
                "__init__",
                "_register_events",
                "load_config",
                "save_config",
                "run",
                "stop",
                "send_message",
                "send_file",
                "send_template",
                "get_status",
                "set_log_callback",
                "_log",
                "run_bot"
            ],
            "classes": {
                "UnifiedDiscordService": [
                    "__init__",
                    "_register_events",
                    "load_config",
                    "save_config",
                    "run",
                    "stop",
                    "send_message",
                    "send_file",
                    "send_template",
                    "get_status",
                    "set_log_callback",
                    "_log"
                ]
            },
            "routes": [],
            "complexity": 25
        },
        "core\\UnifiedDriverManager.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\UnifiedFeedbackMemory.py": {
            "functions": [
                "__init__",
                "to_dict",
                "from_dict",
                "__init__",
                "add_feedback",
                "get_feedback",
                "get_context_stats",
                "_update_stats",
                "_prune_memory",
                "load",
                "save",
                "analyze_feedback",
                "_filter_by_timeframe"
            ],
            "classes": {
                "FeedbackEntry": [
                    "__init__",
                    "to_dict",
                    "from_dict"
                ],
                "UnifiedFeedbackMemory": [
                    "__init__",
                    "add_feedback",
                    "get_feedback",
                    "get_context_stats",
                    "_update_stats",
                    "_prune_memory",
                    "load",
                    "save",
                    "analyze_feedback",
                    "_filter_by_timeframe"
                ]
            },
            "routes": [],
            "complexity": 26
        },
        "core\\UnifiedLoggingAgent.py": {
            "functions": [
                "__init__",
                "log",
                "_setup_log_directories",
                "_setup_file_handler",
                "log_ai_output",
                "log_social",
                "log_system_event",
                "get_logs",
                "_matches_filters",
                "log_error",
                "log_debug",
                "log_event"
            ],
            "classes": {
                "UnifiedLoggingAgent": [
                    "__init__",
                    "log",
                    "_setup_log_directories",
                    "_setup_file_handler",
                    "log_ai_output",
                    "log_social",
                    "log_system_event",
                    "get_logs",
                    "_matches_filters",
                    "log_error",
                    "log_debug",
                    "log_event"
                ]
            },
            "routes": [],
            "complexity": 24
        },
        "core\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\Agents\\base_agent.py": {
            "functions": [
                "__init__",
                "receive_task",
                "handle_task",
                "process_tasks",
                "run",
                "stop"
            ],
            "classes": {
                "BaseAgent": [
                    "__init__",
                    "receive_task",
                    "handle_task",
                    "process_tasks",
                    "run",
                    "stop"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "core\\Agents\\DocAgent.py": {
            "functions": [
                "run_task",
                "generate_docs"
            ],
            "classes": {
                "DocAgent": [
                    "run_task",
                    "generate_docs"
                ]
            },
            "routes": [],
            "complexity": 4
        },
        "core\\Agents\\AgentDispatcher.py": {
            "functions": [
                "__init__",
                "start",
                "stop",
                "event_loop",
                "add_task",
                "_handle_task",
                "_execute_prompts_on_chat",
                "_review_memory"
            ],
            "classes": {
                "AgentDispatcher": [
                    "__init__",
                    "start",
                    "stop",
                    "event_loop",
                    "add_task",
                    "_handle_task",
                    "_execute_prompts_on_chat",
                    "_review_memory"
                ]
            },
            "routes": [],
            "complexity": 16
        },
        "core\\Agents\\main.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\Agents\\driver_manager.py": {
            "functions": [
                "__init__",
                "get_driver",
                "_init_driver_lazy",
                "shutdown_driver",
                "is_logged_in"
            ],
            "classes": {
                "DriverManager": [
                    "__init__",
                    "get_driver",
                    "_init_driver_lazy",
                    "shutdown_driver",
                    "is_logged_in"
                ]
            },
            "routes": [],
            "complexity": 10
        },
        "core\\Agents\\chat_scraper_agent.py": {
            "functions": [
                "__init__",
                "handle_task",
                "get_all_chats",
                "filter_chats",
                "validate_login",
                "manual_login_flow"
            ],
            "classes": {
                "ChatScraperAgent": [
                    "__init__",
                    "handle_task",
                    "get_all_chats",
                    "filter_chats",
                    "validate_login",
                    "manual_login_flow"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "core\\Agents\\CursorAgentInterface.py": {
            "functions": [
                "__init__",
                "run_task",
                "_format_prompt",
                "_log_task_start",
                "_log_task_complete"
            ],
            "classes": {
                "CursorAgentInterface": [
                    "__init__",
                    "run_task",
                    "_format_prompt",
                    "_log_task_start",
                    "_log_task_complete"
                ]
            },
            "routes": [],
            "complexity": 10
        },
        "core\\Agents\\specialized_agents.py": {
            "functions": [
                "__init__",
                "handle_task",
                "__init__",
                "handle_task",
                "__init__",
                "handle_task"
            ],
            "classes": {
                "RefactorAgent": [
                    "__init__",
                    "handle_task"
                ],
                "TestAgent": [
                    "__init__",
                    "handle_task"
                ],
                "DocAgent": [
                    "__init__",
                    "handle_task"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "core\\Agents\\ReinforcementEvaluator.py": {
            "functions": [
                "__init__",
                "evaluate_task",
                "optimize_agent",
                "_calculate_code_quality",
                "_calculate_test_coverage",
                "_calculate_doc_coverage",
                "_calculate_performance",
                "_calculate_maintainability",
                "_generate_optimization_suggestions",
                "_update_agent_config"
            ],
            "classes": {
                "EvaluationMetrics": [],
                "ReinforcementEvaluator": [
                    "__init__",
                    "evaluate_task",
                    "optimize_agent",
                    "_calculate_code_quality",
                    "_calculate_test_coverage",
                    "_calculate_doc_coverage",
                    "_calculate_performance",
                    "_calculate_maintainability",
                    "_generate_optimization_suggestions",
                    "_update_agent_config"
                ]
            },
            "routes": [],
            "complexity": 20
        },
        "core\\Agents\\RefactorAgent.py": {
            "functions": [
                "run_task",
                "run_refactor"
            ],
            "classes": {
                "RefactorAgent": [
                    "run_task",
                    "run_refactor"
                ]
            },
            "routes": [],
            "complexity": 4
        },
        "core\\Agents\\TestAgent.py": {
            "functions": [
                "run_task",
                "run_tests"
            ],
            "classes": {
                "TestAgent": [
                    "run_task",
                    "run_tests"
                ]
            },
            "routes": [],
            "complexity": 4
        },
        "core\\Agents\\refactoring_utils.py": {
            "functions": [
                "read_file",
                "write_file",
                "parse_code",
                "unparse_code",
                "get_function_bounds",
                "get_class_bounds",
                "get_variable_scope",
                "extract_method",
                "rename_variable",
                "inline_function",
                "format_code"
            ],
            "classes": {
                "CodeAnalyzer": [
                    "get_function_bounds",
                    "get_class_bounds",
                    "get_variable_scope"
                ],
                "CodeTransformer": [
                    "extract_method",
                    "rename_variable",
                    "inline_function"
                ],
                "CodeFormatter": [
                    "format_code"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "core\\Agents\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\chatgpt_automation\\automation_engine.py": {
            "functions": [
                "__init__",
                "initialize_components",
                "scan_project_gui",
                "get_chatgpt_response",
                "switch_model",
                "shutdown",
                "process_file",
                "self_heal_file",
                "select_model",
                "run_tests",
                "deploy_file",
                "prioritize_files",
                "process_all_files",
                "export_chatgpt_context",
                "add_manual_model",
                "__init__",
                "run",
                "__init__",
                "add_task",
                "wait_for_completion",
                "stop_workers"
            ],
            "classes": {
                "AutomationEngine": [
                    "__init__",
                    "initialize_components",
                    "scan_project_gui",
                    "get_chatgpt_response",
                    "switch_model",
                    "shutdown",
                    "process_file",
                    "self_heal_file",
                    "select_model",
                    "run_tests",
                    "deploy_file",
                    "prioritize_files",
                    "process_all_files",
                    "export_chatgpt_context",
                    "add_manual_model"
                ],
                "BotWorker": [
                    "__init__",
                    "run"
                ],
                "MultibotManager": [
                    "__init__",
                    "add_task",
                    "wait_for_completion",
                    "stop_workers"
                ]
            },
            "routes": [],
            "complexity": 42
        },
        "core\\chatgpt_automation\\local_llm_engine.py": {
            "functions": [
                "__init__",
                "set_model",
                "get_response"
            ],
            "classes": {
                "LocalLLMEngine": [
                    "__init__",
                    "set_model",
                    "get_response"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "core\\chatgpt_automation\\bot_worker.py": {
            "functions": [
                "__init__",
                "_login_with_retries",
                "run",
                "process_task",
                "_revalidate_session",
                "shutdown"
            ],
            "classes": {
                "BotWorker": [
                    "__init__",
                    "_login_with_retries",
                    "run",
                    "process_task",
                    "_revalidate_session",
                    "shutdown"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "core\\chatgpt_automation\\config.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\chatgpt_automation\\driver_factory.py": {
            "functions": [
                "__init__",
                "create_driver"
            ],
            "classes": {
                "DriverFactory": [
                    "__init__",
                    "create_driver"
                ]
            },
            "routes": [],
            "complexity": 4
        },
        "core\\chatgpt_automation\\main.py": {
            "functions": [
                "main",
                "__init__",
                "init_ui",
                "load_file_into_preview",
                "process_file",
                "self_heal",
                "run_tests",
                "send_prompt",
                "process_batch_files",
                "closeEvent"
            ],
            "classes": {
                "GUIMain": [
                    "__init__",
                    "init_ui",
                    "load_file_into_preview",
                    "process_file",
                    "self_heal",
                    "run_tests",
                    "send_prompt",
                    "process_batch_files",
                    "closeEvent"
                ]
            },
            "routes": [],
            "complexity": 19
        },
        "core\\chatgpt_automation\\PostProcessValidator.py": {
            "functions": [
                "__init__",
                "run_test_coverage",
                "run_pylint",
                "extract_pylint_score",
                "run_mypy",
                "run_black_check",
                "run_full_validation"
            ],
            "classes": {
                "PostProcessValidator": [
                    "__init__",
                    "run_test_coverage",
                    "run_pylint",
                    "extract_pylint_score",
                    "run_mypy",
                    "run_black_check",
                    "run_full_validation"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "core\\chatgpt_automation\\setup_logging.py": {
            "functions": [
                "setup_logging"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "core\\chatgpt_automation\\setup_chromedriver.py": {
            "functions": [
                "get_chrome_version",
                "download_chromedriver",
                "update_config"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "core\\chatgpt_automation\\ModelRegistry.py": {
            "functions": [
                "__init__",
                "find_project_root",
                "load_models",
                "_load_single_model",
                "reload_models",
                "get_registry",
                "__str__"
            ],
            "classes": {
                "ModelRegistry": [
                    "__init__",
                    "find_project_root",
                    "load_models",
                    "_load_single_model",
                    "reload_models",
                    "get_registry",
                    "__str__"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "core\\chatgpt_automation\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\chatgpt_automation\\controllers\\assistant_orchestrator.py": {
            "functions": [
                "dispatch_action"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "core\\chatgpt_automation\\controllers\\automation_controller.py": {
            "functions": [
                "__init__",
                "update_file",
                "heal_file",
                "run_tests",
                "shutdown"
            ],
            "classes": {
                "AutomationController": [
                    "__init__",
                    "update_file",
                    "heal_file",
                    "run_tests",
                    "shutdown"
                ]
            },
            "routes": [],
            "complexity": 10
        },
        "core\\chatgpt_automation\\OpenAIClient.py": {
            "functions": [
                "__init__",
                "_load_config",
                "get_openai_driver",
                "save_openai_cookies",
                "load_openai_cookies",
                "is_logged_in",
                "login_openai",
                "send_prompt_smoothly",
                "get_chatgpt_response",
                "get_full_response",
                "process_prompt",
                "get_full_response_for_debug",
                "shutdown",
                "_force_kill_chromedriver"
            ],
            "classes": {
                "OpenAIClient": [
                    "__init__",
                    "_load_config",
                    "get_openai_driver",
                    "save_openai_cookies",
                    "load_openai_cookies",
                    "is_logged_in",
                    "login_openai",
                    "send_prompt_smoothly",
                    "get_chatgpt_response",
                    "get_full_response",
                    "process_prompt",
                    "get_full_response_for_debug",
                    "shutdown",
                    "_force_kill_chromedriver"
                ]
            },
            "routes": [],
            "complexity": 28
        },
        "core\\chatgpt_automation\\controllers\\assistant_parser.py": {
            "functions": [
                "_load_command_config",
                "parse_input"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "core\\chatgpt_automation\\controllers\\cursor_dispatcher.py": {
            "functions": [
                "__init__",
                "generate_tests",
                "self_heal",
                "run_feedback_loop"
            ],
            "classes": {
                "CursorDispatcher": [
                    "__init__",
                    "generate_tests",
                    "self_heal",
                    "run_feedback_loop"
                ]
            },
            "routes": [],
            "complexity": 8
        },
        "core\\chatgpt_automation\\controllers\\assistant_mode_controller.py": {
            "functions": [
                "__init__",
                "set_input_source",
                "start",
                "stop",
                "is_active",
                "_run_loop"
            ],
            "classes": {
                "AssistantModeController": [
                    "__init__",
                    "set_input_source",
                    "start",
                    "stop",
                    "is_active",
                    "_run_loop"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "core\\chatgpt_automation\\controllers\\log_monitor_service.py": {
            "functions": [
                "get_latest_log"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "core\\chatgpt_automation\\controllers\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\chatgpt_automation\\controllers\\prompt_loop_orchestrator.py": {
            "functions": [
                "__init__",
                "_load_context",
                "inject_context",
                "orchestrate_prompt_loop"
            ],
            "classes": {
                "PromptLoopOrchestrator": [
                    "__init__",
                    "_load_context",
                    "inject_context",
                    "orchestrate_prompt_loop"
                ]
            },
            "routes": [],
            "complexity": 8
        },
        "core\\chatgpt_automation\\GUI\\assistant_mode_toggle.py": {
            "functions": [
                "__init__",
                "init_ui",
                "toggle_assistant"
            ],
            "classes": {
                "MainWindow": [
                    "__init__",
                    "init_ui",
                    "toggle_assistant"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "core\\chatgpt_automation\\controllers\\speech_input_service.py": {
            "functions": [
                "listen_and_transcribe"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "core\\chatgpt_automation\\GUI\\FileTableWidget.py": {
            "functions": [
                "__init__",
                "dragEnterEvent",
                "dropEvent",
                "add_folder_files",
                "add_file",
                "preview_prompt",
                "get_selected_files",
                "get_all_files",
                "start_processing",
                "log"
            ],
            "classes": {
                "FileTableWidget": [
                    "__init__",
                    "dragEnterEvent",
                    "dropEvent",
                    "add_folder_files",
                    "add_file",
                    "preview_prompt",
                    "get_selected_files",
                    "get_all_files",
                    "start_processing",
                    "log"
                ]
            },
            "routes": [],
            "complexity": 20
        },
        "core\\chatgpt_automation\\GUI\\GuiHelpers.py": {
            "functions": [
                "__init__",
                "setup_status_bar",
                "update_status_bar",
                "log_to_output",
                "read_file",
                "save_file",
                "show_info",
                "show_warning",
                "show_error",
                "confirm_action"
            ],
            "classes": {
                "GuiHelpers": [
                    "__init__",
                    "setup_status_bar",
                    "update_status_bar",
                    "log_to_output",
                    "read_file",
                    "save_file",
                    "show_info",
                    "show_warning",
                    "show_error",
                    "confirm_action"
                ]
            },
            "routes": [],
            "complexity": 20
        },
        "core\\chatgpt_automation\\GUI\\TestAgent.py": {
            "functions": [
                "validate_test_code",
                "__init__",
                "run_full_test_cycle",
                "generate_and_run",
                "create_tests_for_file",
                "validate_test_file",
                "run_tests",
                "repair_tests",
                "get_test_file_path",
                "find_project_root"
            ],
            "classes": {
                "TestAgent": [
                    "__init__",
                    "run_full_test_cycle",
                    "generate_and_run",
                    "create_tests_for_file",
                    "validate_test_file",
                    "run_tests",
                    "repair_tests",
                    "get_test_file_path",
                    "find_project_root"
                ]
            },
            "routes": [],
            "complexity": 19
        },
        "core\\chatgpt_automation\\GUI\\PreviewDialog.py": {
            "functions": [
                "__init__",
                "highlightBlock",
                "__init__",
                "save_override",
                "save_as",
                "backup_file",
                "copy_to_clipboard",
                "toggle_word_wrap",
                "show_message",
                "read_file",
                "show_diff"
            ],
            "classes": {
                "PythonSyntaxHighlighter": [
                    "__init__",
                    "highlightBlock"
                ],
                "PreviewDialog": [
                    "__init__",
                    "save_override",
                    "save_as",
                    "backup_file",
                    "copy_to_clipboard",
                    "toggle_word_wrap",
                    "show_message",
                    "read_file",
                    "show_diff"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "core\\chatgpt_automation\\GUI\\SelfHealRunner.py": {
            "functions": [
                "__init__",
                "run_and_validate",
                "read_file",
                "save_file",
                "__init__",
                "init_ui",
                "add_files",
                "start_self_heal",
                "cancel_self_heal",
                "log",
                "update_progress_bar",
                "__init__",
                "run",
                "_update_progress"
            ],
            "classes": {
                "SelfHealController": [
                    "__init__",
                    "run_and_validate",
                    "read_file",
                    "save_file"
                ],
                "SelfHealRunner": [
                    "__init__",
                    "init_ui",
                    "add_files",
                    "start_self_heal",
                    "cancel_self_heal",
                    "log",
                    "update_progress_bar"
                ],
                "SelfHealWorker": [
                    "__init__",
                    "run",
                    "_update_progress"
                ]
            },
            "routes": [],
            "complexity": 28
        },
        "core\\chatgpt_automation\\GUI\\Worker.py": {
            "functions": [
                "__init__",
                "run"
            ],
            "classes": {
                "Worker": [
                    "__init__",
                    "run"
                ]
            },
            "routes": [],
            "complexity": 4
        },
        "core\\chatgpt_automation\\GUI\\PluginManagerTab.py": {
            "functions": [
                "__init__",
                "init_ui",
                "refresh_table",
                "toggle_plugin",
                "reload_plugin",
                "reload_all_plugins",
                "show_message"
            ],
            "classes": {
                "PluginManagerTab": [
                    "__init__",
                    "init_ui",
                    "refresh_table",
                    "toggle_plugin",
                    "reload_plugin",
                    "reload_all_plugins",
                    "show_message"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "core\\chatgpt_automation\\GUI\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\chatgpt_automation\\GUI\\MultibotManager.py": {
            "functions": [
                "__init__",
                "start_workers",
                "add_task",
                "wait_for_completion",
                "get_all_results",
                "shutdown",
                "mark_task_complete",
                "_update_progress",
                "_worker_status_update",
                "__enter__",
                "__exit__"
            ],
            "classes": {
                "MultibotManager": [
                    "__init__",
                    "start_workers",
                    "add_task",
                    "wait_for_completion",
                    "get_all_results",
                    "shutdown",
                    "mark_task_complete",
                    "_update_progress",
                    "_worker_status_update",
                    "__enter__",
                    "__exit__"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "core\\chatgpt_automation\\GUI\\TestAgentWidget.py": {
            "functions": [
                "__init__",
                "init_ui",
                "browse_files",
                "on_files_dropped",
                "add_files",
                "run_tests",
                "log",
                "__init__",
                "dragEnterEvent",
                "dropEvent",
                "_has_valid_files"
            ],
            "classes": {
                "TestAgentWidget": [
                    "__init__",
                    "init_ui",
                    "browse_files",
                    "on_files_dropped",
                    "add_files",
                    "run_tests",
                    "log"
                ],
                "FileDropListWidget": [
                    "__init__",
                    "dragEnterEvent",
                    "dropEvent",
                    "_has_valid_files"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "core\\chatgpt_automation\\models\\model_gpt4o_mini.py": {
            "functions": [
                "process_with_gpt4o_mini",
                "register"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "core\\chatgpt_automation\\models\\model_gpt4.py": {
            "functions": [
                "process_with_gpt4",
                "register"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "core\\chatgpt_automation\\models\\model_gpt4o.py": {
            "functions": [
                "process_with_gpt4o",
                "register"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "core\\chatgpt_automation\\models\\model_gpt4_5.py": {
            "functions": [
                "process_with_gpt4_5",
                "register"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "core\\chatgpt_automation\\models\\model_o3mini.py": {
            "functions": [
                "process_with_o3mini",
                "register"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "core\\chatgpt_automation\\performance\\ModelPerformanceTracker.py": {
            "functions": [
                "__init__",
                "record_execution",
                "get_average_attempts",
                "rank_models",
                "choose_model",
                "print_metrics"
            ],
            "classes": {
                "ModelPerformanceTracker": [
                    "__init__",
                    "record_execution",
                    "get_average_attempts",
                    "rank_models",
                    "choose_model",
                    "print_metrics"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "core\\chatgpt_automation\\models\\model_mistral.py": {
            "functions": [
                "register"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "core\\chatgpt_automation\\models\\model_o3_mini_high.py": {
            "functions": [
                "process_with_o3_mini_high",
                "register"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "core\\chatgpt_automation\\models\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\chatgpt_automation\\models\\model_o1.py": {
            "functions": [
                "process_with_o1",
                "register"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "core\\chatgpt_automation\\models\\model_template.py": {
            "functions": [
                "process_with_template",
                "register"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "core\\chatgpt_automation\\performance\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\chatgpt_automation\\views\\file_browser_widget.py": {
            "functions": [
                "__init__",
                "startDrag",
                "__init__",
                "init_ui",
                "switch_view_mode",
                "populate_tree",
                "create_tree_item",
                "get_svg_icon_path",
                "get_file_icon_and_type",
                "add_placeholder",
                "on_item_expanded",
                "add_children",
                "on_item_double_clicked",
                "open_context_menu",
                "rename_item",
                "delete_item",
                "show_properties",
                "open_externally",
                "filter_tree",
                "filter_tree_item"
            ],
            "classes": {
                "FileTreeWidget": [
                    "__init__",
                    "startDrag"
                ],
                "FileBrowserWidget": [
                    "__init__",
                    "init_ui",
                    "switch_view_mode",
                    "populate_tree",
                    "create_tree_item",
                    "get_svg_icon_path",
                    "get_file_icon_and_type",
                    "add_placeholder",
                    "on_item_expanded",
                    "add_children",
                    "on_item_double_clicked",
                    "open_context_menu",
                    "rename_item",
                    "delete_item",
                    "show_properties",
                    "open_externally",
                    "filter_tree",
                    "filter_tree_item"
                ]
            },
            "routes": [],
            "complexity": 40
        },
        "core\\chatgpt_automation\\watchers\\ModelFolderWatcher.py": {
            "functions": [
                "__init__",
                "_debounced_reload",
                "_should_handle",
                "on_modified",
                "on_created",
                "on_deleted",
                "start",
                "_watch_loop",
                "stop",
                "reload_wrapper"
            ],
            "classes": {
                "ModelFolderWatcher": [
                    "__init__",
                    "_debounced_reload",
                    "_should_handle",
                    "on_modified",
                    "on_created",
                    "on_deleted",
                    "start",
                    "_watch_loop",
                    "stop"
                ]
            },
            "routes": [],
            "complexity": 19
        },
        "core\\chatgpt_automation\\views\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\chat_engine\\chat_engine_manager.py": {
            "functions": [
                "__init__",
                "start",
                "shutdown"
            ],
            "classes": {
                "ChatEngineManager": [
                    "__init__",
                    "start",
                    "shutdown"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "core\\chatgpt_automation\\views\\preview_panel.py": {
            "functions": [
                "__init__",
                "init_ui",
                "load_file",
                "process_file",
                "self_heal_file",
                "run_tests"
            ],
            "classes": {
                "PreviewPanel": [
                    "__init__",
                    "init_ui",
                    "load_file",
                    "process_file",
                    "self_heal_file",
                    "run_tests"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "core\\chatgpt_automation\\watchers\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\chatgpt_automation\\views\\main_window.py": {
            "functions": [
                "main",
                "__init__",
                "init_ui",
                "load_file_into_preview",
                "closeEvent"
            ],
            "classes": {
                "MainWindow": [
                    "__init__",
                    "init_ui",
                    "load_file_into_preview",
                    "closeEvent"
                ]
            },
            "routes": [],
            "complexity": 9
        },
        "core\\chat_engine\\chat_scraper_service.py": {
            "functions": [
                "__init__",
                "get_driver",
                "get_all_chats",
                "get_filtered_chats",
                "validate_login",
                "manual_login_flow"
            ],
            "classes": {
                "ChatScraperService": [
                    "__init__",
                    "get_driver",
                    "get_all_chats",
                    "get_filtered_chats",
                    "validate_login",
                    "manual_login_flow"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "core\\chat_engine\\feedback_engine.py": {
            "functions": [
                "__init__",
                "_load_memory",
                "_save_memory",
                "save_memory_async",
                "parse_and_update_memory",
                "apply_memory_updates",
                "log_feedback",
                "export_feedback_log",
                "analyze_feedback",
                "review_memory",
                "feedback_loop",
                "save_context_memory_async",
                "save_context_db",
                "review_context_memory"
            ],
            "classes": {
                "FeedbackEngine": [
                    "__init__",
                    "_load_memory",
                    "_save_memory",
                    "save_memory_async",
                    "parse_and_update_memory",
                    "apply_memory_updates",
                    "log_feedback",
                    "export_feedback_log",
                    "analyze_feedback",
                    "review_memory",
                    "feedback_loop",
                    "save_context_memory_async",
                    "save_context_db",
                    "review_context_memory"
                ]
            },
            "routes": [],
            "complexity": 28
        },
        "core\\chat_engine\\discord_dispatcher.py": {
            "functions": [
                "__init__",
                "_setup_events",
                "send_message",
                "dispatch_memory_update",
                "dispatch_dreamscape_episode",
                "dispatch_feedback_loop",
                "run_bot",
                "shutdown"
            ],
            "classes": {
                "DiscordDispatcher": [
                    "__init__",
                    "_setup_events",
                    "send_message",
                    "dispatch_memory_update",
                    "dispatch_dreamscape_episode",
                    "dispatch_feedback_loop",
                    "run_bot",
                    "shutdown"
                ]
            },
            "routes": [],
            "complexity": 16
        },
        "core\\chat_engine\\chat_cycle_controller.py": {
            "functions": [
                "sanitize_filename",
                "__init__",
                "_default_output_callback",
                "append_output",
                "start",
                "process_chat",
                "run_single_chat",
                "_save_prompt_response",
                "_save_run_summary",
                "shutdown"
            ],
            "classes": {
                "ChatCycleController": [
                    "__init__",
                    "_default_output_callback",
                    "append_output",
                    "start",
                    "process_chat",
                    "run_single_chat",
                    "_save_prompt_response",
                    "_save_run_summary",
                    "shutdown"
                ]
            },
            "routes": [],
            "complexity": 19
        },
        "core\\chat_engine\\driver_manager.py": {
            "functions": [
                "__new__",
                "__init__",
                "get_driver",
                "_init_driver",
                "_create_chrome_options",
                "shutdown_driver",
                "quit_driver",
                "is_logged_in",
                "save_cookies",
                "load_cookies",
                "wait_and_find_element",
                "wait_for_url_change"
            ],
            "classes": {
                "DriverManager": [
                    "__new__",
                    "__init__",
                    "get_driver",
                    "_init_driver",
                    "_create_chrome_options",
                    "shutdown_driver",
                    "quit_driver",
                    "is_logged_in",
                    "save_cookies",
                    "load_cookies",
                    "wait_and_find_element",
                    "wait_for_url_change"
                ]
            },
            "routes": [],
            "complexity": 24
        },
        "core\\interfaces\\ILoggingAgent.py": {
            "functions": [
                "log",
                "log_error",
                "log_debug",
                "log_event"
            ],
            "classes": {
                "ILoggingAgent": [
                    "log",
                    "log_error",
                    "log_debug",
                    "log_event"
                ]
            },
            "routes": [],
            "complexity": 8
        },
        "core\\chat_engine\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\interfaces\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\chat_engine\\gui_event_handler.py": {
            "functions": [
                "run_gui",
                "__init__",
                "init_ui",
                "toggle_headless",
                "toggle_reverse",
                "toggle_archive",
                "start_dispatcher",
                "stop_dispatcher",
                "log"
            ],
            "classes": {
                "GUIEventHandler": [
                    "__init__",
                    "init_ui",
                    "toggle_headless",
                    "toggle_reverse",
                    "toggle_archive",
                    "start_dispatcher",
                    "stop_dispatcher",
                    "log"
                ]
            },
            "routes": [],
            "complexity": 17
        },
        "core\\chat_engine\\prompt_execution_service.py": {
            "functions": [
                "__init__",
                "get_prompt",
                "execute_prompt_cycle",
                "execute_prompts_single_chat",
                "execute_prompts_concurrently",
                "_execute_single_prompt_thread",
                "_determine_wait_time",
                "_post_process_jawbone_response",
                "send_prompt",
                "_fetch_response",
                "wait_for_stable_response"
            ],
            "classes": {
                "PromptExecutionService": [
                    "__init__",
                    "get_prompt",
                    "execute_prompt_cycle",
                    "execute_prompts_single_chat",
                    "execute_prompts_concurrently",
                    "_execute_single_prompt_thread",
                    "_determine_wait_time",
                    "_post_process_jawbone_response",
                    "send_prompt",
                    "_fetch_response",
                    "wait_for_stable_response"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "core\\llm_backends\\huggingface_backend.py": {
            "functions": [
                "__init__",
                "load_model",
                "generate"
            ],
            "classes": {
                "HuggingFaceBackend": [
                    "__init__",
                    "load_model",
                    "generate"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "core\\llm_backends\\ollama_backend.py": {
            "functions": [
                "__init__",
                "generate"
            ],
            "classes": {
                "OllamaBackend": [
                    "__init__",
                    "generate"
                ]
            },
            "routes": [],
            "complexity": 4
        },
        "core\\llm_backends\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\logging\\LoggingService.py": {
            "functions": [
                "__init__",
                "_add_console_handler",
                "_add_file_handler",
                "add_custom_handler",
                "debug",
                "info",
                "warning",
                "error",
                "critical",
                "exception",
                "log_system_event",
                "set_level"
            ],
            "classes": {
                "LoggingService": [
                    "__init__",
                    "_add_console_handler",
                    "_add_file_handler",
                    "add_custom_handler",
                    "debug",
                    "info",
                    "warning",
                    "error",
                    "critical",
                    "exception",
                    "log_system_event",
                    "set_level"
                ]
            },
            "routes": [],
            "complexity": 24
        },
        "core\\logging\\factories\\LoggerFactory.py": {
            "functions": [
                "create_standard_logger",
                "create_module_logger",
                "create_agent_logger",
                "get_logger"
            ],
            "classes": {
                "LoggerFactory": [
                    "create_standard_logger",
                    "create_module_logger",
                    "create_agent_logger",
                    "get_logger"
                ]
            },
            "routes": [],
            "complexity": 8
        },
        "core\\logging\\services\\ai_output_service.py": {
            "functions": [
                "log_ai_output",
                "sanitize_filename"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "core\\logging\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\logging\\CompositeLogger.py": {
            "functions": [
                "__init__",
                "_safe_log",
                "log",
                "log_error",
                "log_debug",
                "log_event",
                "log_system_event",
                "add_logger",
                "remove_logger",
                "shutdown"
            ],
            "classes": {
                "CompositeLogger": [
                    "__init__",
                    "_safe_log",
                    "log",
                    "log_error",
                    "log_debug",
                    "log_event",
                    "log_system_event",
                    "add_logger",
                    "remove_logger",
                    "shutdown"
                ]
            },
            "routes": [],
            "complexity": 20
        },
        "core\\logging\\utils\\AsyncDispatcher.py": {
            "functions": [
                "__init__",
                "_start_worker",
                "_process_queue",
                "dispatch",
                "get_metrics",
                "shutdown"
            ],
            "classes": {
                "DispatcherMetrics": [],
                "AsyncDispatcher": [
                    "__init__",
                    "_start_worker",
                    "_process_queue",
                    "dispatch",
                    "get_metrics",
                    "shutdown"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "core\\logging\\factories\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\logging\\utils\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\logging\\handlers\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\logging\\ConsoleLogger.py": {
            "functions": [
                "__init__",
                "_format_message",
                "debug",
                "info",
                "warning",
                "error",
                "critical",
                "log"
            ],
            "classes": {
                "ConsoleLogger": [
                    "__init__",
                    "_format_message",
                    "debug",
                    "info",
                    "warning",
                    "error",
                    "critical",
                    "log"
                ]
            },
            "routes": [],
            "complexity": 16
        },
        "core\\logging\\utils\\setup.py": {
            "functions": [
                "setup_logging"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "core\\logging\\services\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\prompt_cycle\\dialog.py": {
            "functions": [
                "__init__",
                "initUI",
                "start_cycle"
            ],
            "classes": {
                "PromptCycleDialog": [
                    "__init__",
                    "initUI",
                    "start_cycle"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "core\\prompt_cycle\\narrative.py": {
            "functions": [
                "__init__",
                "_setup_template_env",
                "extract_narrative_elements",
                "process_response",
                "broadcast_update",
                "_format_narrative_message",
                "generate_narrative_report",
                "add_event"
            ],
            "classes": {
                "NarrativeManager": [
                    "__init__",
                    "_setup_template_env",
                    "extract_narrative_elements",
                    "process_response",
                    "broadcast_update",
                    "_format_narrative_message",
                    "generate_narrative_report",
                    "add_event"
                ]
            },
            "routes": [],
            "complexity": 16
        },
        "core\\prompt_cycle\\audit.py": {
            "functions": [
                "__init__",
                "perform_audit",
                "_generate_audit_prompt",
                "_process_audit_response",
                "_generate_audit_report",
                "get_audit_history",
                "get_latest_audit"
            ],
            "classes": {
                "AuditManager": [
                    "__init__",
                    "perform_audit",
                    "_generate_audit_prompt",
                    "_process_audit_response",
                    "_generate_audit_report",
                    "get_audit_history",
                    "get_latest_audit"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "core\\prompt_cycle\\memory.py": {
            "functions": [
                "__init__",
                "_load_memory",
                "_save_memory",
                "store_insights",
                "get_insights",
                "update",
                "search_memory",
                "generate_memory_report"
            ],
            "classes": {
                "MemoryManager": [
                    "__init__",
                    "_load_memory",
                    "_save_memory",
                    "store_insights",
                    "get_insights",
                    "update",
                    "search_memory",
                    "generate_memory_report"
                ]
            },
            "routes": [],
            "complexity": 16
        },
        "core\\prompt_cycle\\scraping.py": {
            "functions": [
                "__init__",
                "scrape_conversations",
                "_scrape_thread",
                "_get_contextual_prompt",
                "_manual_login",
                "_wait_for_page_load",
                "_handle_rate_limiting"
            ],
            "classes": {
                "ConversationScraper": [
                    "__init__",
                    "scrape_conversations",
                    "_scrape_thread",
                    "_get_contextual_prompt",
                    "_manual_login",
                    "_wait_for_page_load",
                    "_handle_rate_limiting"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "core\\prompt_cycle\\utils.py": {
            "functions": [
                "sanitize",
                "get_timestamp",
                "ensure_directory"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "core\\services\\debug_service.py": {
            "functions": [
                "__init__",
                "start_debug_session",
                "get_debug_info",
                "_save_debug_info",
                "_get_current_timestamp"
            ],
            "classes": {
                "DebugService": [
                    "__init__",
                    "start_debug_session",
                    "get_debug_info",
                    "_save_debug_info",
                    "_get_current_timestamp"
                ]
            },
            "routes": [],
            "complexity": 10
        },
        "core\\prompt_cycle\\state.py": {
            "functions": [
                "__init__",
                "_load_state",
                "_save_state",
                "get_state",
                "update_state",
                "_deep_merge",
                "increment_metric",
                "add_event",
                "update_configuration",
                "get_metrics",
                "get_events",
                "get_configuration",
                "reset_state",
                "generate_system_report"
            ],
            "classes": {
                "SystemState": [
                    "__init__",
                    "_load_state",
                    "_save_state",
                    "get_state",
                    "update_state",
                    "_deep_merge",
                    "increment_metric",
                    "add_event",
                    "update_configuration",
                    "get_metrics",
                    "get_events",
                    "get_configuration",
                    "reset_state",
                    "generate_system_report"
                ]
            },
            "routes": [],
            "complexity": 28
        },
        "core\\services\\discord_service.py": {
            "functions": [
                "__init__",
                "launch_bot",
                "stop_bot",
                "send_message",
                "send_file",
                "send_template",
                "get_status",
                "is_running"
            ],
            "classes": {
                "DiscordService": [
                    "__init__",
                    "launch_bot",
                    "stop_bot",
                    "send_message",
                    "send_file",
                    "send_template",
                    "get_status",
                    "is_running"
                ]
            },
            "routes": [],
            "complexity": 16
        },
        "core\\prompt_cycle\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\services\\fix_service.py": {
            "functions": [
                "__init__",
                "apply_fix",
                "fix_issue",
                "_log_fix",
                "_get_current_timestamp"
            ],
            "classes": {
                "FixService": [
                    "__init__",
                    "apply_fix",
                    "fix_issue",
                    "_log_fix",
                    "_get_current_timestamp"
                ]
            },
            "routes": [],
            "complexity": 10
        },
        "core\\services\\prompt_service.py": {
            "functions": [
                "__init__",
                "initialize_chat_manager",
                "get_prompt_insights",
                "get_memory_summary",
                "save_prompt",
                "reset_prompts",
                "get_available_prompts",
                "get_prompt",
                "shutdown"
            ],
            "classes": {
                "PromptService": [
                    "__init__",
                    "initialize_chat_manager",
                    "get_prompt_insights",
                    "get_memory_summary",
                    "save_prompt",
                    "reset_prompts",
                    "get_available_prompts",
                    "get_prompt",
                    "shutdown"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "core\\services\\config_service.py": {
            "functions": [
                "__init__",
                "_load_config",
                "_create_default_config",
                "_save_config",
                "get",
                "set",
                "reset_to_defaults"
            ],
            "classes": {
                "ConfigService": [
                    "__init__",
                    "_load_config",
                    "_create_default_config",
                    "_save_config",
                    "get",
                    "set",
                    "reset_to_defaults"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "core\\services\\dreamscape_services.py": {
            "functions": [
                "__init__",
                "create_chat_manager",
                "shutdown",
                "is_running",
                "get_chat_manager",
                "get_chat_history",
                "send_message",
                "get_response",
                "get_model",
                "get_config",
                "get_driver_options",
                "_get_driver_options",
                "get_driver",
                "_get_driver_service",
                "get_excluded_chats",
                "get_timeout",
                "get_stable_period",
                "get_poll_interval",
                "get_headless"
            ],
            "classes": {
                "DreamscapeService": [
                    "__init__",
                    "create_chat_manager",
                    "shutdown",
                    "is_running",
                    "get_chat_manager",
                    "get_chat_history",
                    "send_message",
                    "get_response",
                    "get_model",
                    "get_config",
                    "get_driver_options",
                    "_get_driver_options",
                    "get_driver",
                    "_get_driver_service",
                    "get_excluded_chats",
                    "get_timeout",
                    "get_stable_period",
                    "get_poll_interval",
                    "get_headless"
                ],
                "DummyConfig": []
            },
            "routes": [],
            "complexity": 38
        },
        "core\\services\\rollback_service.py": {
            "functions": [
                "__init__",
                "rollback",
                "create_backup",
                "_find_backup"
            ],
            "classes": {
                "RollbackService": [
                    "__init__",
                    "rollback",
                    "create_backup",
                    "_find_backup"
                ]
            },
            "routes": [],
            "complexity": 8
        },
        "core\\services\\service_registry.py": {
            "functions": [
                "create_config_service",
                "create_logging_service",
                "create_prompt_service",
                "create_chat_service",
                "create_discord_service",
                "create_cursor_service",
                "create_reinforcement_service",
                "create_cycle_service",
                "create_response_handler",
                "create_task_orchestrator",
                "create_dreamscape_generator",
                "register_all_services",
                "info",
                "warning",
                "error",
                "debug",
                "get",
                "set",
                "load",
                "save",
                "get_prompt",
                "save_prompt",
                "get_model",
                "reset_to_defaults",
                "load",
                "save",
                "get",
                "set",
                "clear",
                "execute_prompts_single_chat",
                "get_all_chat_titles",
                "shutdown_driver",
                "run",
                "stop",
                "send_message",
                "send_file",
                "send_template",
                "get_status",
                "auto_tune_prompts",
                "apply_fix",
                "rollback_changes",
                "execute_prompt",
                "debug_code",
                "shutdown_all"
            ],
            "classes": {
                "LoggingService": [
                    "info",
                    "warning",
                    "error",
                    "debug"
                ],
                "ConfigService": [
                    "get",
                    "set",
                    "load",
                    "save"
                ],
                "PromptService": [
                    "get_prompt",
                    "save_prompt",
                    "get_model",
                    "reset_to_defaults"
                ],
                "MemoryService": [
                    "load",
                    "save",
                    "get",
                    "set",
                    "clear"
                ],
                "ChatService": [
                    "execute_prompts_single_chat",
                    "get_all_chat_titles",
                    "shutdown_driver"
                ],
                "DiscordService": [
                    "run",
                    "stop",
                    "send_message",
                    "send_file",
                    "send_template",
                    "get_status"
                ],
                "ReinforcementService": [
                    "auto_tune_prompts",
                    "apply_fix",
                    "rollback_changes"
                ],
                "CursorService": [
                    "execute_prompt",
                    "debug_code",
                    "shutdown_all"
                ]
            },
            "routes": [],
            "complexity": 76
        },
        "core\\social\\driver_manager.py": {
            "functions": [
                "get_multi_driver_sessions",
                "__init__",
                "initialize_driver",
                "_build_chrome_options",
                "_apply_stealth_settings",
                "shutdown_driver",
                "cleanup_profile",
                "restart_driver",
                "_get_profile_dir"
            ],
            "classes": {
                "DriverSession": [
                    "__init__",
                    "initialize_driver",
                    "_build_chrome_options",
                    "_apply_stealth_settings",
                    "shutdown_driver",
                    "cleanup_profile",
                    "restart_driver",
                    "_get_profile_dir"
                ]
            },
            "routes": [],
            "complexity": 17
        },
        "core\\services\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\social\\AIChatAgent.py": {
            "functions": [
                "__init__",
                "ask",
                "_ask_openai",
                "_ask_ollama",
                "_build_prompt",
                "_initialize_chat_thread",
                "append_to_chat_thread",
                "_log_interaction"
            ],
            "classes": {
                "AIChatAgent": [
                    "__init__",
                    "ask",
                    "_ask_openai",
                    "_ask_ollama",
                    "_build_prompt",
                    "_initialize_chat_thread",
                    "append_to_chat_thread",
                    "_log_interaction"
                ]
            },
            "routes": [],
            "complexity": 16
        },
        "core\\social\\CommunityIntegrationManager.py": {
            "functions": [
                "__init__",
                "_check_platform_credentials",
                "_initialize_platforms",
                "_load_strategies",
                "_load_platform_status",
                "_save_platform_status",
                "get_available_platforms",
                "get_platform",
                "get_all_platforms",
                "enable_platform",
                "disable_platform",
                "connect_platform",
                "disconnect_platform",
                "run_daily_community_management",
                "_connect_enabled_platforms",
                "_collect_metrics",
                "analyze_community_health",
                "generate_insights_and_recommendations",
                "create_community_building_plan",
                "post_content",
                "identify_advocates",
                "track_member_interactions"
            ],
            "classes": {
                "CommunityIntegrationManager": [
                    "__init__",
                    "_check_platform_credentials",
                    "_initialize_platforms",
                    "_load_strategies",
                    "_load_platform_status",
                    "_save_platform_status",
                    "get_available_platforms",
                    "get_platform",
                    "get_all_platforms",
                    "enable_platform",
                    "disable_platform",
                    "connect_platform",
                    "disconnect_platform",
                    "run_daily_community_management",
                    "_connect_enabled_platforms",
                    "_collect_metrics",
                    "analyze_community_health",
                    "generate_insights_and_recommendations",
                    "create_community_building_plan",
                    "post_content",
                    "identify_advocates",
                    "track_member_interactions"
                ]
            },
            "routes": [],
            "complexity": 44
        },
        "core\\social\\social_config.py": {
            "functions": [
                "__init__",
                "get_env",
                "_validate_required_keys",
                "_default_platform_urls",
                "get_platform_url",
                "chrome_profile_path",
                "_default_rate_limits",
                "within_rate_limit",
                "register_action",
                "_check_daily_reset",
                "_save_rate_limit_state",
                "_load_rate_limit_state",
                "register_rate_limit"
            ],
            "classes": {
                "SocialConfig": [
                    "__init__",
                    "get_env",
                    "_validate_required_keys",
                    "_default_platform_urls",
                    "get_platform_url",
                    "chrome_profile_path",
                    "_default_rate_limits",
                    "within_rate_limit",
                    "register_action",
                    "_check_daily_reset",
                    "_save_rate_limit_state",
                    "_load_rate_limit_state",
                    "register_rate_limit"
                ]
            },
            "routes": [],
            "complexity": 26
        },
        "core\\social\\community_integration.py": {
            "functions": [
                "__init__",
                "_initialize_strategies",
                "_initialize_dashboard",
                "_initialize_post_manager",
                "analyze_community_health",
                "generate_insights_and_recommendations",
                "create_community_building_plan",
                "identify_advocates",
                "post_across_platforms",
                "track_member_interaction",
                "optimize_platform_strategies",
                "generate_visualizations",
                "run_daily_community_management"
            ],
            "classes": {
                "CommunityIntegrationManager": [
                    "__init__",
                    "_initialize_strategies",
                    "_initialize_dashboard",
                    "_initialize_post_manager",
                    "analyze_community_health",
                    "generate_insights_and_recommendations",
                    "create_community_building_plan",
                    "identify_advocates",
                    "post_across_platforms",
                    "track_member_interaction",
                    "optimize_platform_strategies",
                    "generate_visualizations",
                    "run_daily_community_management"
                ]
            },
            "routes": [],
            "complexity": 26
        },
        "core\\social\\social_config_wrapper.py": {
            "functions": [
                "get_social_config"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "core\\social\\platform_login_manager.py": {
            "functions": [
                "load_cookies",
                "save_cookies",
                "wait_for_manual_login",
                "__init__",
                "login",
                "post",
                "__init__",
                "dispatch_all",
                "_process_platform",
                "_generate_content",
                "_shutdown_all_drivers"
            ],
            "classes": {
                "PlatformStrategy": [
                    "__init__",
                    "login",
                    "post"
                ],
                "SocialPlatformDispatcher": [
                    "__init__",
                    "dispatch_all",
                    "_process_platform",
                    "_generate_content",
                    "_shutdown_all_drivers"
                ]
            },
            "routes": [],
            "complexity": 19
        },
        "core\\social\\log_writer.py": {
            "functions": [
                "write_json_log",
                "log_login",
                "log_post",
                "log_error"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "core\\social\\social_post_db.py": {
            "functions": [
                "__init__",
                "_load",
                "_save",
                "_load_memory",
                "_save_memory",
                "update_memory",
                "get_memory",
                "add_to_queue",
                "mark_posted",
                "mark_failed",
                "get_next_post",
                "get_queue_length"
            ],
            "classes": {
                "SocialPostDatabase": [
                    "__init__",
                    "_load",
                    "_save",
                    "_load_memory",
                    "_save_memory",
                    "update_memory",
                    "get_memory",
                    "add_to_queue",
                    "mark_posted",
                    "mark_failed",
                    "get_next_post",
                    "get_queue_length"
                ]
            },
            "routes": [],
            "complexity": 24
        },
        "core\\social\\StrategyLoader.py": {
            "functions": [
                "__init__",
                "load_strategy",
                "_validate_strategy",
                "get_available_strategies",
                "reload_strategy",
                "register_strategy"
            ],
            "classes": {
                "StrategyLoader": [
                    "__init__",
                    "load_strategy",
                    "_validate_strategy",
                    "get_available_strategies",
                    "reload_strategy",
                    "register_strategy"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "core\\social\\UnifiedPostManager.py": {
            "functions": [
                "__init__",
                "_load_post_history",
                "_save_post_history",
                "post_to_platform",
                "_adapt_content_for_platform",
                "schedule_post",
                "get_scheduled_posts",
                "cancel_scheduled_post",
                "get_post_analytics",
                "_get_current_metrics",
                "generate_content_ideas"
            ],
            "classes": {
                "UnifiedPostManager": [
                    "__init__",
                    "_load_post_history",
                    "_save_post_history",
                    "post_to_platform",
                    "_adapt_content_for_platform",
                    "schedule_post",
                    "get_scheduled_posts",
                    "cancel_scheduled_post",
                    "get_post_analytics",
                    "_get_current_metrics",
                    "generate_content_ideas"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "core\\social\\UnifiedCommunityDashboard.py": {
            "functions": [
                "to_dict",
                "__init__",
                "_initialize_strategies",
                "_load_saved_data",
                "save_data",
                "update_metrics",
                "update_top_members",
                "generate_insights",
                "_calculate_trends",
                "_generate_platform_insights",
                "_generate_overall_insights",
                "get_metrics_history",
                "get_latest_metrics",
                "generate_metrics_chart",
                "get_platform_status",
                "get_community_building_plan",
                "_get_recommended_platforms_for_day"
            ],
            "classes": {
                "CommunityMetrics": [
                    "to_dict"
                ],
                "CommunityDashboard": [
                    "__init__",
                    "_initialize_strategies",
                    "_load_saved_data",
                    "save_data",
                    "update_metrics",
                    "update_top_members",
                    "generate_insights",
                    "_calculate_trends",
                    "_generate_platform_insights",
                    "_generate_overall_insights",
                    "get_metrics_history",
                    "get_latest_metrics",
                    "generate_metrics_chart",
                    "get_platform_status",
                    "get_community_building_plan",
                    "_get_recommended_platforms_for_day"
                ]
            },
            "routes": [],
            "complexity": 34
        },
        "core\\social\\social_post_manager.py": {
            "functions": [
                "__init__",
                "post_next",
                "post_all",
                "enqueue_post",
                "shutdown",
                "post_to_platform"
            ],
            "classes": {
                "SocialPostManager": [
                    "__init__",
                    "post_next",
                    "post_all",
                    "enqueue_post",
                    "shutdown"
                ]
            },
            "routes": [],
            "complexity": 11
        },
        "core\\social\\TaskQueueManager.py": {
            "functions": [
                "__init__",
                "start",
                "stop",
                "add_task",
                "_worker",
                "queue_size",
                "status",
                "sample_task"
            ],
            "classes": {
                "TaskQueueManager": [
                    "__init__",
                    "start",
                    "stop",
                    "add_task",
                    "_worker",
                    "queue_size",
                    "status"
                ]
            },
            "routes": [],
            "complexity": 15
        },
        "core\\social\\ai\\chat_agent.py": {
            "functions": [
                "__init__"
            ],
            "classes": {
                "AIChatAgent": [
                    "__init__"
                ]
            },
            "routes": [],
            "complexity": 2
        },
        "core\\social\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\social\\ai\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\social\\data\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\social\\data\\post_history.py": {
            "functions": [
                "__init__",
                "_load_history",
                "_save_history",
                "add_post",
                "get_posts",
                "clear_history"
            ],
            "classes": {
                "PostHistory": [
                    "__init__",
                    "_load_history",
                    "_save_history",
                    "add_post",
                    "get_posts",
                    "clear_history"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "core\\social\\strategies\\ai_strategy.py": {
            "functions": [
                "__init__",
                "analyze_sentiment",
                "_build_response_prompt",
                "_get_response_template",
                "_get_fallback_response",
                "_summarize_recent_content",
                "_get_sentiment_label",
                "_load_templates",
                "_load_history",
                "_track_response",
                "get_response_analytics"
            ],
            "classes": {
                "AIStrategy": [
                    "__init__",
                    "analyze_sentiment",
                    "_build_response_prompt",
                    "_get_response_template",
                    "_get_fallback_response",
                    "_summarize_recent_content",
                    "_get_sentiment_label",
                    "_load_templates",
                    "_load_history",
                    "_track_response",
                    "get_response_analytics"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "core\\social\\strategies\\community_scheduler.py": {
            "functions": [
                "__init__",
                "schedule_task",
                "schedule_engagement_check",
                "schedule_ai_responses",
                "schedule_daily_report",
                "_check_engagement",
                "_load_schedules",
                "_save_schedules",
                "_is_comment_processed",
                "_mark_comment_processed",
                "start",
                "stop"
            ],
            "classes": {
                "CommunityScheduler": [
                    "__init__",
                    "schedule_task",
                    "schedule_engagement_check",
                    "schedule_ai_responses",
                    "schedule_daily_report",
                    "_check_engagement",
                    "_load_schedules",
                    "_save_schedules",
                    "_is_comment_processed",
                    "_mark_comment_processed",
                    "start",
                    "stop"
                ]
            },
            "routes": [],
            "complexity": 24
        },
        "core\\social\\strategies\\BaseEngagementBot.py": {
            "functions": [
                "retry_on_failure",
                "decorator_retry",
                "__init__",
                "get_driver",
                "get_random_user_agent",
                "_wait",
                "login",
                "is_logged_in",
                "_login_with_credentials",
                "post",
                "like_posts",
                "comment_on_posts",
                "follow_users",
                "unfollow_non_returners",
                "go_viral",
                "_log_followed_users",
                "_find_posts",
                "_find_like_button",
                "_find_comment_box",
                "_find_profile_url",
                "_find_follow_button",
                "_find_unfollow_button",
                "run_daily_session",
                "wrapper_retry"
            ],
            "classes": {
                "BaseEngagementBot": [
                    "__init__",
                    "get_driver",
                    "get_random_user_agent",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "_login_with_credentials",
                    "post",
                    "like_posts",
                    "comment_on_posts",
                    "follow_users",
                    "unfollow_non_returners",
                    "go_viral",
                    "_log_followed_users",
                    "_find_posts",
                    "_find_like_button",
                    "_find_comment_box",
                    "_find_profile_url",
                    "_find_follow_button",
                    "_find_unfollow_button",
                    "run_daily_session"
                ]
            },
            "routes": [],
            "complexity": 45
        },
        "core\\social\\strategies\\base_platform_strategy.py": {
            "functions": [
                "__init__",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "analyze_comment_sentiment",
                "reinforce_engagement",
                "reward_top_engagers",
                "cross_platform_feedback_loop",
                "run_feedback_loop",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction"
            ],
            "classes": {
                "BasePlatformStrategy": [
                    "__init__",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "analyze_comment_sentiment",
                    "reinforce_engagement",
                    "reward_top_engagers",
                    "cross_platform_feedback_loop",
                    "run_feedback_loop",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction"
                ]
            },
            "routes": [],
            "complexity": 28
        },
        "core\\social\\strategies\\config_loader.py": {
            "functions": [
                "load_yaml_config",
                "load_json_config",
                "load_configs",
                "get_nested",
                "get_env_or_config",
                "reload_configs"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "core\\social\\strategies\\reddit_strategy.py": {
            "functions": [
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "run_feedback_loop",
                "adaptive_posting_strategy"
            ],
            "classes": {
                "RedditStrategy": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "run_feedback_loop",
                    "adaptive_posting_strategy"
                ]
            },
            "routes": [],
            "complexity": 34
        },
        "core\\social\\strategies\\context_db.py": {
            "functions": [
                "__init__",
                "create_tables",
                "log_post",
                "fetch_recent_posts",
                "fetch_last_post_content",
                "log_engagement",
                "fetch_engagements_for_post",
                "get_rate_limit",
                "update_rate_limit",
                "update_sentiment",
                "close"
            ],
            "classes": {
                "UnifiedContextEngine": [
                    "__init__",
                    "create_tables",
                    "log_post",
                    "fetch_recent_posts",
                    "fetch_last_post_content",
                    "log_engagement",
                    "fetch_engagements_for_post",
                    "get_rate_limit",
                    "update_rate_limit",
                    "update_sentiment",
                    "close"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "core\\social\\strategies\\facebook_strategy.py": {
            "functions": [
                "retry_on_failure",
                "get_random_user_agent",
                "start_scheduler",
                "post_to_facebook",
                "decorator_retry",
                "__init__",
                "_wait",
                "get_driver",
                "is_logged_in",
                "login",
                "post",
                "like_posts",
                "comment_on_posts",
                "follow_users",
                "unfollow_non_returners",
                "_log_followed_users",
                "go_viral",
                "run_daily_session",
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "get_random_user_agent",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "adaptive_posting_strategy",
                "analyze_comment_sentiment",
                "reinforce_engagement",
                "reward_top_followers",
                "cross_platform_feedback_loop",
                "run_feedback_loop",
                "wrapper_retry"
            ],
            "classes": {
                "FacebookBot": [
                    "__init__",
                    "_wait",
                    "get_driver",
                    "is_logged_in",
                    "login",
                    "post"
                ],
                "FacebookEngagementBot": [
                    "like_posts",
                    "comment_on_posts",
                    "follow_users",
                    "unfollow_non_returners",
                    "_log_followed_users",
                    "go_viral",
                    "run_daily_session"
                ],
                "FacebookStrategy": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "get_random_user_agent",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "adaptive_posting_strategy",
                    "analyze_comment_sentiment",
                    "reinforce_engagement",
                    "reward_top_followers",
                    "cross_platform_feedback_loop",
                    "run_feedback_loop"
                ]
            },
            "routes": [],
            "complexity": 76
        },
        "core\\social\\strategies\\instagram_strategy.py": {
            "functions": [
                "retry_on_failure",
                "get_random_mobile_user_agent",
                "start_scheduler",
                "post_to_instagram",
                "decorator_retry",
                "__init__",
                "get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "create_post",
                "like_posts",
                "comment_on_posts",
                "_gather_post_links",
                "follow_users",
                "unfollow_user",
                "__init__",
                "run_daily_session",
                "generate_ai_comments",
                "like_posts",
                "comment_on_posts",
                "follow_users",
                "unfollow_non_returners",
                "_log_followed_users",
                "go_viral",
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "analyze_comment_sentiment",
                "reinforce_engagement",
                "reward_top_engagers",
                "cross_platform_feedback_loop",
                "run_feedback_loop",
                "wrapper_retry"
            ],
            "classes": {
                "InstagramBot": [
                    "__init__",
                    "get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "create_post",
                    "like_posts",
                    "comment_on_posts",
                    "_gather_post_links",
                    "follow_users",
                    "unfollow_user"
                ],
                "InstagramEngagementBot": [
                    "__init__",
                    "run_daily_session",
                    "generate_ai_comments",
                    "like_posts",
                    "comment_on_posts",
                    "follow_users",
                    "unfollow_non_returners",
                    "_log_followed_users",
                    "go_viral"
                ],
                "InstagramStrategy": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "analyze_comment_sentiment",
                    "reinforce_engagement",
                    "reward_top_engagers",
                    "cross_platform_feedback_loop",
                    "run_feedback_loop"
                ]
            },
            "routes": [],
            "complexity": 86
        },
        "interfaces\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\social\\strategies\\twitter_strategy.py": {
            "functions": [
                "__init__",
                "login",
                "is_logged_in",
                "post_tweet",
                "post_thread",
                "_extract_tweet_id",
                "engage_community",
                "_follow_author",
                "_log_follow",
                "unfollow_non_returners",
                "run_daily_session",
                "post_thread",
                "__init__",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "adaptive_posting_strategy",
                "analyze_comment_sentiment",
                "reinforce_engagement",
                "reward_top_engagers",
                "cross_platform_feedback_loop",
                "run_feedback_loop",
                "run_daily_strategy_session"
            ],
            "classes": {
                "TwitterCommunityArchitect": [
                    "__init__",
                    "login",
                    "is_logged_in",
                    "post_tweet",
                    "post_thread",
                    "_extract_tweet_id",
                    "engage_community",
                    "_follow_author",
                    "_log_follow",
                    "unfollow_non_returners",
                    "run_daily_session",
                    "post_thread"
                ],
                "TwitterStrategy": [
                    "__init__",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "adaptive_posting_strategy",
                    "analyze_comment_sentiment",
                    "reinforce_engagement",
                    "reward_top_engagers",
                    "cross_platform_feedback_loop",
                    "run_feedback_loop",
                    "run_daily_strategy_session"
                ]
            },
            "routes": [],
            "complexity": 46
        },
        "core\\social\\strategies\\stocktwits_strategy.py": {
            "functions": [
                "__init__",
                "login",
                "is_logged_in",
                "post",
                "engage_community",
                "_log_follow",
                "unfollow_non_returners",
                "run_daily_session",
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "run_feedback_loop",
                "adaptive_posting_strategy",
                "reinforce_engagement",
                "reward_top_engagers",
                "cross_platform_feedback_loop"
            ],
            "classes": {
                "StocktwitsCommunityArchitect": [
                    "__init__",
                    "login",
                    "is_logged_in",
                    "post",
                    "engage_community",
                    "_log_follow",
                    "unfollow_non_returners",
                    "run_daily_session"
                ],
                "StocktwitsStrategy": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "run_feedback_loop",
                    "adaptive_posting_strategy",
                    "reinforce_engagement",
                    "reward_top_engagers",
                    "cross_platform_feedback_loop"
                ]
            },
            "routes": [],
            "complexity": 56
        },
        "core\\social\\strategies\\linkedin_strategy.py": {
            "functions": [
                "retry_on_failure",
                "decorator_retry",
                "__init__",
                "_get_driver",
                "get_random_user_agent",
                "_wait",
                "login",
                "is_logged_in",
                "_login_with_credentials",
                "post",
                "like_posts",
                "comment_on_posts",
                "follow_users",
                "unfollow_non_returners",
                "go_viral",
                "_log_followed_users",
                "_find_posts",
                "_find_like_button",
                "_find_comment_box",
                "_find_profile_url",
                "_find_follow_button",
                "_find_unfollow_button",
                "run_daily_session",
                "__init__",
                "is_logged_in",
                "_login_with_credentials",
                "post",
                "_find_posts",
                "_find_like_button",
                "_find_comment_box",
                "_find_profile_url",
                "_find_follow_button",
                "_find_unfollow_button",
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "get_random_user_agent",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "wrapper_retry"
            ],
            "classes": {
                "BaseEngagementBot": [
                    "__init__",
                    "_get_driver",
                    "get_random_user_agent",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "_login_with_credentials",
                    "post",
                    "like_posts",
                    "comment_on_posts",
                    "follow_users",
                    "unfollow_non_returners",
                    "go_viral",
                    "_log_followed_users",
                    "_find_posts",
                    "_find_like_button",
                    "_find_comment_box",
                    "_find_profile_url",
                    "_find_follow_button",
                    "_find_unfollow_button",
                    "run_daily_session"
                ],
                "LinkedInEngagementBot": [
                    "__init__",
                    "is_logged_in",
                    "_login_with_credentials",
                    "post",
                    "_find_posts",
                    "_find_like_button",
                    "_find_comment_box",
                    "_find_profile_url",
                    "_find_follow_button",
                    "_find_unfollow_button"
                ],
                "LinkedinStrategy": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "get_random_user_agent",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session"
                ]
            },
            "routes": [],
            "complexity": 91
        },
        "core\\social\\strategies\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "core\\social\\strategies\\wordpress_strategy.py": {
            "functions": [
                "__init__",
                "initialize",
                "cleanup",
                "sync_youtube_video",
                "moderate_comment",
                "get_community_metrics",
                "get_top_members",
                "_load_community_data",
                "_save_community_data",
                "generate_engagement_report",
                "track_member_interaction"
            ],
            "classes": {
                "WordPressCommunityStrategy": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "sync_youtube_video",
                    "moderate_comment",
                    "get_community_metrics",
                    "get_top_members",
                    "_load_community_data",
                    "_save_community_data",
                    "generate_engagement_report",
                    "track_member_interaction"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "core\\social\\strategies\\youtube_strategy.py": {
            "functions": [
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_video",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "run_feedback_loop",
                "adaptive_posting_strategy",
                "reward_top_creators",
                "cross_platform_feedback_loop"
            ],
            "classes": {
                "YouTubeStrategy": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_video",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "run_feedback_loop",
                    "adaptive_posting_strategy",
                    "reward_top_creators",
                    "cross_platform_feedback_loop"
                ]
            },
            "routes": [],
            "complexity": 38
        },
        "core\\social\\strategies\\tiktok_strategy.py": {
            "functions": [
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_video",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "run_feedback_loop",
                "adaptive_posting_strategy",
                "update_trending_hashtags",
                "reward_top_creators",
                "cross_platform_feedback_loop"
            ],
            "classes": {
                "TikTokStrategy": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_video",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "run_feedback_loop",
                    "adaptive_posting_strategy",
                    "update_trending_hashtags",
                    "reward_top_creators",
                    "cross_platform_feedback_loop"
                ]
            },
            "routes": [],
            "complexity": 40
        },
        "interfaces\\pyqt\\bootstrap.py": {
            "functions": [
                "__init__",
                "initUI",
                "closeEvent"
            ],
            "classes": {
                "DreamscapeGUI": [
                    "__init__",
                    "initUI",
                    "closeEvent"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "interfaces\\pyqt\\dreamscape_ui_logic.py": {
            "functions": [
                "__init__",
                "set_output_signal",
                "set_discord_log_signal",
                "set_status_update_signal",
                "_output",
                "_discord_log",
                "_update_status",
                "get_service",
                "is_service_available",
                "execute_prompt",
                "save_prompts",
                "reset_prompts",
                "execute_single_prompt",
                "run_single_chat_mode",
                "run_multi_chat_mode",
                "start_prompt_cycle",
                "load_prompt",
                "save_prompt",
                "launch_discord_bot",
                "stop_discord_bot",
                "run_prompt_tuning",
                "analyze_execution_response",
                "shutdown",
                "worker",
                "worker"
            ],
            "classes": {
                "DreamscapeUILogic": [
                    "__init__",
                    "set_output_signal",
                    "set_discord_log_signal",
                    "set_status_update_signal",
                    "_output",
                    "_discord_log",
                    "_update_status",
                    "get_service",
                    "is_service_available",
                    "execute_prompt",
                    "save_prompts",
                    "reset_prompts",
                    "execute_single_prompt",
                    "run_single_chat_mode",
                    "run_multi_chat_mode",
                    "start_prompt_cycle",
                    "load_prompt",
                    "save_prompt",
                    "launch_discord_bot",
                    "stop_discord_bot",
                    "run_prompt_tuning",
                    "analyze_execution_response",
                    "shutdown"
                ]
            },
            "routes": [],
            "complexity": 48
        },
        "interfaces\\pyqt\\dreamscape_gui.py": {
            "functions": [
                "initialize_services",
                "initialize_community_manager",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "interfaces\\pyqt\\DreamOsMainWindow.py": {
            "functions": [
                "main",
                "_ensure_service",
                "_create_empty_service",
                "__init__",
                "verify_services",
                "setup_ui",
                "setup_signals",
                "on_append_output",
                "on_status_update",
                "on_discord_log",
                "on_task_started",
                "on_task_progress",
                "on_task_completed",
                "on_task_failed",
                "handle_scan",
                "start_assistant",
                "stop_assistant",
                "send_message",
                "closeEvent",
                "__init__",
                "__getattr__",
                "method"
            ],
            "classes": {
                "DreamscapeMainWindow": [
                    "__init__",
                    "verify_services",
                    "setup_ui",
                    "setup_signals",
                    "on_append_output",
                    "on_status_update",
                    "on_discord_log",
                    "on_task_started",
                    "on_task_progress",
                    "on_task_completed",
                    "on_task_failed",
                    "handle_scan",
                    "start_assistant",
                    "stop_assistant",
                    "send_message",
                    "closeEvent"
                ],
                "EmptyService": [
                    "__init__",
                    "__getattr__"
                ]
            },
            "routes": [],
            "complexity": 40
        },
        "interfaces\\pyqt\\__main__.py": {
            "functions": [
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "interfaces\\pyqt\\feedback_dashboard.py": {
            "functions": [
                "__init__",
                "initUI",
                "refresh_dashboard",
                "update_display"
            ],
            "classes": {
                "FeedbackDashboard": [
                    "__init__",
                    "initUI",
                    "refresh_dashboard",
                    "update_display"
                ]
            },
            "routes": [],
            "complexity": 8
        },
        "interfaces\\pyqt\\IntegratedMainWindow.py": {
            "functions": [
                "__init__",
                "_wire_ui_actions",
                "on_execute_prompt",
                "on_save_prompt",
                "on_reset_prompts",
                "on_launch_discord_bot",
                "on_stop_discord_bot",
                "on_launch_dashboard",
                "append_output",
                "append_discord_log",
                "update_discord_status",
                "task"
            ],
            "classes": {
                "IntegratedMainWindow": [
                    "__init__",
                    "_wire_ui_actions",
                    "on_execute_prompt",
                    "on_save_prompt",
                    "on_reset_prompts",
                    "on_launch_discord_bot",
                    "on_stop_discord_bot",
                    "on_launch_dashboard",
                    "append_output",
                    "append_discord_log",
                    "update_discord_status"
                ]
            },
            "routes": [],
            "complexity": 23
        },
        "interfaces\\pyqt\\dreamscape_services.py": {
            "functions": [
                "find_project_root",
                "__init__",
                "_init_service",
                "_init_discord_service",
                "_init_task_orchestrator",
                "_create_empty_service",
                "_map_service_dependencies",
                "get_service",
                "set_service",
                "_log_initialization_status",
                "service_health_check",
                "shutdown",
                "create_chat_manager",
                "execute_prompt",
                "start_prompt_cycle",
                "load_prompt",
                "save_prompt",
                "reset_prompts",
                "launch_discord_bot",
                "stop_discord_bot",
                "send_discord_message",
                "send_discord_file",
                "send_discord_template",
                "get_discord_status",
                "run_prompt_tuning",
                "generate_dreamscape_content",
                "get_dreamscape_context",
                "send_context_to_chatgpt",
                "schedule_context_updates",
                "analyze_execution_response",
                "discord",
                "discord",
                "bootstrap_services",
                "shutdown_all",
                "__init__",
                "__getattr__",
                "is_empty_service",
                "method"
            ],
            "classes": {
                "DreamscapeService": [
                    "__init__",
                    "_init_service",
                    "_init_discord_service",
                    "_init_task_orchestrator",
                    "_create_empty_service",
                    "_map_service_dependencies",
                    "get_service",
                    "set_service",
                    "_log_initialization_status",
                    "service_health_check",
                    "shutdown",
                    "create_chat_manager",
                    "execute_prompt",
                    "start_prompt_cycle",
                    "load_prompt",
                    "save_prompt",
                    "reset_prompts",
                    "launch_discord_bot",
                    "stop_discord_bot",
                    "send_discord_message",
                    "send_discord_file",
                    "send_discord_template",
                    "get_discord_status",
                    "run_prompt_tuning",
                    "generate_dreamscape_content",
                    "get_dreamscape_context",
                    "send_context_to_chatgpt",
                    "schedule_context_updates",
                    "analyze_execution_response",
                    "discord",
                    "discord",
                    "bootstrap_services",
                    "shutdown_all"
                ],
                "EmptyService": [
                    "__init__",
                    "__getattr__",
                    "is_empty_service"
                ]
            },
            "routes": [],
            "complexity": 74
        },
        "interfaces\\pyqt\\components\\discord_tab.py": {
            "functions": [
                "__init__",
                "_connect_signals",
                "initUI",
                "_create_discord_group",
                "update_status",
                "append_log",
                "get_bot_config",
                "_on_task_done",
                "handle_discord_event",
                "handle_dreamscape_generated",
                "handle_prompt_executed"
            ],
            "classes": {
                "DiscordTab": [
                    "__init__",
                    "_connect_signals",
                    "initUI",
                    "_create_discord_group",
                    "update_status",
                    "append_log",
                    "get_bot_config",
                    "_on_task_done",
                    "handle_discord_event",
                    "handle_dreamscape_generated",
                    "handle_prompt_executed"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "interfaces\\pyqt\\components\\prompt_execution_tab.py": {
            "functions": [
                "__init__",
                "initUI",
                "_create_exclusion_group",
                "_create_prompt_controls_group",
                "add_exclusion",
                "remove_exclusion",
                "get_excluded_chats",
                "update_execution_mode",
                "load_prompt"
            ],
            "classes": {
                "PromptExecutionTab": [
                    "__init__",
                    "initUI",
                    "_create_exclusion_group",
                    "_create_prompt_controls_group",
                    "add_exclusion",
                    "remove_exclusion",
                    "get_excluded_chats",
                    "update_execution_mode",
                    "load_prompt"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "interfaces\\pyqt\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "interfaces\\pyqt\\components\\community_dashboard_tab.py": {
            "functions": [
                "__init__",
                "setup_ui",
                "setup_overview_tab",
                "setup_insights_tab",
                "setup_community_tab",
                "setup_planning_tab",
                "refresh_data",
                "generate_insights",
                "generate_plan",
                "on_platform_changed",
                "on_focus_changed",
                "update_metrics_view",
                "update_insights_view",
                "update_members_view",
                "update_platform_status",
                "update_plan_view",
                "generate_content_strategy",
                "add_activity_log"
            ],
            "classes": {
                "CommunityDashboardTab": [
                    "__init__",
                    "setup_ui",
                    "setup_overview_tab",
                    "setup_insights_tab",
                    "setup_community_tab",
                    "setup_planning_tab",
                    "refresh_data",
                    "generate_insights",
                    "generate_plan",
                    "on_platform_changed",
                    "on_focus_changed",
                    "update_metrics_view",
                    "update_insights_view",
                    "update_members_view",
                    "update_platform_status",
                    "update_plan_view",
                    "generate_content_strategy",
                    "add_activity_log"
                ]
            },
            "routes": [],
            "complexity": 36
        },
        "interfaces\\pyqt\\components\\dialogs\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "interfaces\\pyqt\\components\\prompt_panel.py": {
            "functions": [
                "__init__",
                "setup_ui",
                "load_sample_prompts",
                "_add_prompt_to_list",
                "on_prompt_selected",
                "save_prompt",
                "use_prompt",
                "add_custom_prompt",
                "remove_custom_prompt",
                "get_prompt_text",
                "set_prompt_text"
            ],
            "classes": {
                "PromptPanel": [
                    "__init__",
                    "setup_ui",
                    "load_sample_prompts",
                    "_add_prompt_to_list",
                    "on_prompt_selected",
                    "save_prompt",
                    "use_prompt",
                    "add_custom_prompt",
                    "remove_custom_prompt",
                    "get_prompt_text",
                    "set_prompt_text"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "interfaces\\pyqt\\components\\logs_panel.py": {
            "functions": [
                "__init__",
                "initUI",
                "append_log",
                "clear_logs",
                "export_logs",
                "get_logs"
            ],
            "classes": {
                "LogsPanel": [
                    "__init__",
                    "initUI",
                    "append_log",
                    "clear_logs",
                    "export_logs",
                    "get_logs"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "interfaces\\pyqt\\components\\logs_tab.py": {
            "functions": [
                "__init__",
                "initUI",
                "append_log",
                "clear_logs",
                "get_logs"
            ],
            "classes": {
                "LogsTab": [
                    "__init__",
                    "initUI",
                    "append_log",
                    "clear_logs",
                    "get_logs"
                ]
            },
            "routes": [],
            "complexity": 10
        },
        "interfaces\\pyqt\\components\\dialogs\\discord_settings.py": {
            "functions": [
                "__init__",
                "initUI",
                "save_credentials",
                "map_prompt_to_channel",
                "unmap_selected_prompt",
                "refresh_prompt_channel_list"
            ],
            "classes": {
                "DiscordSettingsDialog": [
                    "__init__",
                    "initUI",
                    "save_credentials",
                    "map_prompt_to_channel",
                    "unmap_selected_prompt",
                    "refresh_prompt_channel_list"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "interfaces\\pyqt\\components\\digital_dreamscape\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "interfaces\\pyqt\\components\\dialogs\\exclusions_dialog.py": {
            "functions": [
                "__init__",
                "initUI",
                "refresh_list",
                "add_exclusion",
                "remove_selected",
                "get_exclusions"
            ],
            "classes": {
                "ExclusionsDialog": [
                    "__init__",
                    "initUI",
                    "refresh_list",
                    "add_exclusion",
                    "remove_selected",
                    "get_exclusions"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "interfaces\\pyqt\\components\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "interfaces\\pyqt\\components\\dialogs\\reinforcement_dialog.py": {
            "functions": [
                "__init__",
                "initUI",
                "load_feedback",
                "display_feedback_details",
                "export_feedback",
                "clear_feedback",
                "auto_tune_prompts"
            ],
            "classes": {
                "ReinforcementToolsDialog": [
                    "__init__",
                    "initUI",
                    "load_feedback",
                    "display_feedback_details",
                    "export_feedback",
                    "clear_feedback",
                    "auto_tune_prompts"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "interfaces\\pyqt\\tabs\\AIDE.py": {
            "functions": [
                "__init__",
                "_init_ui",
                "_connect_signals",
                "load_file_into_preview",
                "process_file",
                "self_heal",
                "run_tests",
                "send_prompt",
                "process_batch_files",
                "on_run_debug",
                "on_apply_fix",
                "on_rollback_fix",
                "on_cursor_execute",
                "on_automation_result",
                "on_cursor_code_generated",
                "append_output"
            ],
            "classes": {
                "AIDE": [
                    "__init__",
                    "_init_ui",
                    "_connect_signals",
                    "load_file_into_preview",
                    "process_file",
                    "self_heal",
                    "run_tests",
                    "send_prompt",
                    "process_batch_files",
                    "on_run_debug",
                    "on_apply_fix",
                    "on_rollback_fix",
                    "on_cursor_execute",
                    "on_automation_result",
                    "on_cursor_code_generated",
                    "append_output"
                ]
            },
            "routes": [],
            "complexity": 32
        },
        "interfaces\\pyqt\\tabs\\ConfigurationTab.py": {
            "functions": [
                "__init__",
                "initUI",
                "open_exclusions_dialog",
                "open_discord_settings_dialog",
                "open_reinforcement_tools_dialog",
                "log_action"
            ],
            "classes": {
                "ConfigurationTab": [
                    "__init__",
                    "initUI",
                    "open_exclusions_dialog",
                    "open_discord_settings_dialog",
                    "open_reinforcement_tools_dialog",
                    "log_action"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "interfaces\\pyqt\\tabs\\LogsTab.py": {
            "functions": [
                "__init__",
                "initUI",
                "append_log",
                "append_output",
                "clear_logs"
            ],
            "classes": {
                "LogsTab": [
                    "__init__",
                    "initUI",
                    "append_log",
                    "append_output",
                    "clear_logs"
                ]
            },
            "routes": [],
            "complexity": 10
        },
        "interfaces\\pyqt\\tabs\\DreamscapeGenerationTab.py": {
            "functions": [
                "__init__",
                "_inject_services",
                "_initialize_services",
                "_initialize_component_managers",
                "_get_output_directory",
                "init_ui",
                "_setup_title",
                "_setup_left_panel",
                "_setup_episode_list_group",
                "_setup_controls_group",
                "_setup_context_controls",
                "_setup_right_panel",
                "_setup_content_tab",
                "_setup_context_tab",
                "_setup_log_tab",
                "_setup_template_tab",
                "on_episode_selected",
                "share_to_discord",
                "_on_template_selected",
                "_validate_template_context",
                "_save_rendered_output",
                "refresh_episode_list",
                "refresh_context_memory",
                "log_output",
                "render_dreamscape_template",
                "_setup_timers",
                "_load_initial_data",
                "send_context_to_chatgpt",
                "save_context_schedule",
                "populate_chat_list",
                "get_selected_chat_url"
            ],
            "classes": {
                "DreamscapeGenerationTab": [
                    "__init__",
                    "_inject_services",
                    "_initialize_services",
                    "_initialize_component_managers",
                    "_get_output_directory",
                    "init_ui",
                    "_setup_title",
                    "_setup_left_panel",
                    "_setup_episode_list_group",
                    "_setup_controls_group",
                    "_setup_context_controls",
                    "_setup_right_panel",
                    "_setup_content_tab",
                    "_setup_context_tab",
                    "_setup_log_tab",
                    "_setup_template_tab",
                    "on_episode_selected",
                    "share_to_discord",
                    "_on_template_selected",
                    "_validate_template_context",
                    "_save_rendered_output",
                    "refresh_episode_list",
                    "refresh_context_memory",
                    "log_output",
                    "render_dreamscape_template",
                    "_setup_timers",
                    "_load_initial_data",
                    "send_context_to_chatgpt",
                    "save_context_schedule",
                    "populate_chat_list",
                    "get_selected_chat_url"
                ]
            },
            "routes": [],
            "complexity": 62
        },
        "interfaces\\pyqt\\tabs\\SyncOpsTab.py": {
            "functions": [
                "__init__",
                "_init_ui",
                "toggle_clock",
                "toggle_pomodoro",
                "update_pomodoro_timer",
                "_log_event",
                "save_session"
            ],
            "classes": {
                "SyncOpsTab": [
                    "__init__",
                    "_init_ui",
                    "toggle_clock",
                    "toggle_pomodoro",
                    "update_pomodoro_timer",
                    "_log_event",
                    "save_session"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "interfaces\\pyqt\\tabs\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "interfaces\\pyqt\\tabs\\dreamscape_generation\\ContextManager.py": {
            "functions": [
                "__init__",
                "_get_output_directory",
                "get_context_summary",
                "refresh_context_display",
                "send_context_to_chat",
                "get_preview_context",
                "save_context_schedule"
            ],
            "classes": {
                "ContextManager": [
                    "__init__",
                    "_get_output_directory",
                    "get_context_summary",
                    "refresh_context_display",
                    "send_context_to_chat",
                    "get_preview_context",
                    "save_context_schedule"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "interfaces\\pyqt\\tabs\\MainTabs.py": {
            "functions": [
                "__init__",
                "_init_tabs",
                "_connect_signals",
                "_on_prompt_executed",
                "_on_dreamscape_generated",
                "_on_discord_event",
                "_on_debug_completed",
                "_on_cursor_code_generated",
                "_on_automation_result",
                "append_output",
                "broadcast_message"
            ],
            "classes": {
                "MainTabs": [
                    "__init__",
                    "_init_tabs",
                    "_connect_signals",
                    "_on_prompt_executed",
                    "_on_dreamscape_generated",
                    "_on_discord_event",
                    "_on_debug_completed",
                    "_on_cursor_code_generated",
                    "_on_automation_result",
                    "append_output",
                    "broadcast_message"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "interfaces\\pyqt\\tabs\\PromptExecutionTab.py": {
            "functions": [
                "__init__",
                "generate",
                "__init__",
                "_init_ui",
                "_connect_signals",
                "ensure_local_llm_loaded",
                "on_prompt_loaded",
                "_on_task_done",
                "log_output",
                "handle_discord_event"
            ],
            "classes": {
                "LocalLLMWrapper": [
                    "__init__",
                    "generate"
                ],
                "PromptExecutionTab": [
                    "__init__",
                    "_init_ui",
                    "_connect_signals",
                    "ensure_local_llm_loaded",
                    "on_prompt_loaded",
                    "_on_task_done",
                    "log_output",
                    "handle_discord_event"
                ]
            },
            "routes": [],
            "complexity": 20
        },
        "interfaces\\pyqt\\tabs\\dreamscape_generation\\EpisodeGenerator.py": {
            "functions": [
                "__init__",
                "_process_multi_chat_results",
                "_process_single_chat_result",
                "_get_chat_title"
            ],
            "classes": {
                "EpisodeGenerator": [
                    "__init__",
                    "_process_multi_chat_results",
                    "_process_single_chat_result",
                    "_get_chat_title"
                ]
            },
            "routes": [],
            "complexity": 8
        },
        "interfaces\\pyqt\\tabs\\dreamscape_generation\\UIManager.py": {
            "functions": [
                "__init__",
                "refresh_episode_list",
                "update_episode_content",
                "load_templates",
                "render_template_preview",
                "save_rendered_output",
                "setup_auto_update_timer",
                "_on_auto_update_timer",
                "log_output",
                "share_to_discord"
            ],
            "classes": {
                "UIManager": [
                    "__init__",
                    "refresh_episode_list",
                    "update_episode_content",
                    "load_templates",
                    "render_template_preview",
                    "save_rendered_output",
                    "setup_auto_update_timer",
                    "_on_auto_update_timer",
                    "log_output",
                    "share_to_discord"
                ]
            },
            "routes": [],
            "complexity": 20
        },
        "interfaces\\pyqt\\tabs\\SocialDashboardTab.py": {
            "functions": [
                "__init__",
                "_load_defaults_from_env",
                "_load_defaults_from_config",
                "init_ui",
                "_create_platform_group",
                "test_platform_connection",
                "save_platform_credentials",
                "save_all_credentials",
                "_save_credentials_to_storage",
                "refresh_from_config",
                "_log_output"
            ],
            "classes": {
                "SocialDashboardTab": [
                    "__init__",
                    "_load_defaults_from_env",
                    "_load_defaults_from_config",
                    "init_ui",
                    "_create_platform_group",
                    "test_platform_connection",
                    "save_platform_credentials",
                    "save_all_credentials",
                    "_save_credentials_to_storage",
                    "refresh_from_config",
                    "_log_output"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "interfaces\\web\\app.py": {
            "functions": [
                "create_app"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "interfaces\\pyqt\\tabs\\dreamscape_generation\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "interfaces\\web\\dependencies.py": {
            "functions": [
                "get_chat_agent",
                "get_memory_manager"
            ],
            "classes": {
                "Dependencies": [
                    "get_chat_agent",
                    "get_memory_manager"
                ]
            },
            "routes": [],
            "complexity": 4
        },
        "interfaces\\web\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "interfaces\\web\\routes\\chat_routes.py": {
            "functions": [],
            "classes": {
                "ChatProcessingResponse": [],
                "ChatProcessingRequest": []
            },
            "routes": [],
            "complexity": 0
        },
        "interfaces\\web\\routes\\memory_routes.py": {
            "functions": [],
            "classes": {
                "MemoryStats": [],
                "MemoryStatsResponse": [],
                "Episode": [],
                "RecentEpisodesResponse": []
            },
            "routes": [],
            "complexity": 0
        },
        "interfaces\\web\\routes\\system_routes.py": {
            "functions": [],
            "classes": {
                "HealthResponse": []
            },
            "routes": [],
            "complexity": 0
        },
        "scripts\\run_dreamscape.py": {
            "functions": [
                "setup_logging",
                "parse_args",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "interfaces\\web\\routes\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "scripts\\check_context_updates.py": {
            "functions": [
                "setup_logging",
                "parse_args",
                "is_update_due",
                "update_schedule_after_run",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 5
        },
        "scripts\\run_with_enhanced_driver.py": {
            "functions": [
                "main",
                "__init__",
                "get"
            ],
            "classes": {
                "Config": [
                    "__init__",
                    "get"
                ]
            },
            "routes": [],
            "complexity": 5
        },
        "scripts\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "social\\AIChatAgent.py": {
            "functions": [
                "__init__",
                "ask",
                "_ask_openai",
                "_ask_ollama",
                "_build_prompt",
                "_initialize_chat_thread",
                "append_to_chat_thread",
                "_log_interaction"
            ],
            "classes": {
                "AIChatAgent": [
                    "__init__",
                    "ask",
                    "_ask_openai",
                    "_ask_ollama",
                    "_build_prompt",
                    "_initialize_chat_thread",
                    "append_to_chat_thread",
                    "_log_interaction"
                ]
            },
            "routes": [],
            "complexity": 16
        },
        "social\\CommunityIntegrationManager.py": {
            "functions": [
                "__init__",
                "_check_platform_credentials",
                "_initialize_platforms",
                "_load_strategies",
                "_load_platform_status",
                "_save_platform_status",
                "get_available_platforms",
                "get_platform",
                "get_all_platforms",
                "enable_platform",
                "disable_platform",
                "connect_platform",
                "disconnect_platform",
                "run_daily_community_management",
                "_connect_enabled_platforms",
                "_collect_metrics",
                "analyze_community_health",
                "generate_insights_and_recommendations",
                "create_community_building_plan",
                "post_content",
                "identify_advocates",
                "track_member_interactions"
            ],
            "classes": {
                "CommunityIntegrationManager": [
                    "__init__",
                    "_check_platform_credentials",
                    "_initialize_platforms",
                    "_load_strategies",
                    "_load_platform_status",
                    "_save_platform_status",
                    "get_available_platforms",
                    "get_platform",
                    "get_all_platforms",
                    "enable_platform",
                    "disable_platform",
                    "connect_platform",
                    "disconnect_platform",
                    "run_daily_community_management",
                    "_connect_enabled_platforms",
                    "_collect_metrics",
                    "analyze_community_health",
                    "generate_insights_and_recommendations",
                    "create_community_building_plan",
                    "post_content",
                    "identify_advocates",
                    "track_member_interactions"
                ]
            },
            "routes": [],
            "complexity": 44
        },
        "social\\driver_manager.py": {
            "functions": [
                "get_multi_driver_sessions",
                "__init__",
                "initialize_driver",
                "_build_chrome_options",
                "_apply_stealth_settings",
                "shutdown_driver",
                "cleanup_profile",
                "restart_driver",
                "_get_profile_dir"
            ],
            "classes": {
                "DriverSession": [
                    "__init__",
                    "initialize_driver",
                    "_build_chrome_options",
                    "_apply_stealth_settings",
                    "shutdown_driver",
                    "cleanup_profile",
                    "restart_driver",
                    "_get_profile_dir"
                ]
            },
            "routes": [],
            "complexity": 17
        },
        "social\\community_integration.py": {
            "functions": [
                "__init__",
                "_initialize_strategies",
                "_initialize_dashboard",
                "_initialize_post_manager",
                "analyze_community_health",
                "generate_insights_and_recommendations",
                "create_community_building_plan",
                "identify_advocates",
                "post_across_platforms",
                "track_member_interaction",
                "optimize_platform_strategies",
                "generate_visualizations",
                "run_daily_community_management"
            ],
            "classes": {
                "CommunityIntegrationManager": [
                    "__init__",
                    "_initialize_strategies",
                    "_initialize_dashboard",
                    "_initialize_post_manager",
                    "analyze_community_health",
                    "generate_insights_and_recommendations",
                    "create_community_building_plan",
                    "identify_advocates",
                    "post_across_platforms",
                    "track_member_interaction",
                    "optimize_platform_strategies",
                    "generate_visualizations",
                    "run_daily_community_management"
                ]
            },
            "routes": [],
            "complexity": 26
        },
        "social\\log_writer.py": {
            "functions": [
                "write_json_log",
                "log_login",
                "log_post",
                "log_error"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "social\\social_config_wrapper.py": {
            "functions": [
                "get_social_config"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "social\\social_post_db.py": {
            "functions": [
                "__init__",
                "_load",
                "_save",
                "_load_memory",
                "_save_memory",
                "update_memory",
                "get_memory",
                "add_to_queue",
                "mark_posted",
                "mark_failed",
                "get_next_post",
                "get_queue_length"
            ],
            "classes": {
                "SocialPostDatabase": [
                    "__init__",
                    "_load",
                    "_save",
                    "_load_memory",
                    "_save_memory",
                    "update_memory",
                    "get_memory",
                    "add_to_queue",
                    "mark_posted",
                    "mark_failed",
                    "get_next_post",
                    "get_queue_length"
                ]
            },
            "routes": [],
            "complexity": 24
        },
        "social\\StrategyLoader.py": {
            "functions": [
                "__init__",
                "load_strategy",
                "_validate_strategy",
                "get_available_strategies",
                "reload_strategy",
                "register_strategy"
            ],
            "classes": {
                "StrategyLoader": [
                    "__init__",
                    "load_strategy",
                    "_validate_strategy",
                    "get_available_strategies",
                    "reload_strategy",
                    "register_strategy"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "social\\social_post_manager.py": {
            "functions": [
                "__init__",
                "post_next",
                "post_all",
                "enqueue_post",
                "shutdown",
                "post_to_platform"
            ],
            "classes": {
                "SocialPostManager": [
                    "__init__",
                    "post_next",
                    "post_all",
                    "enqueue_post",
                    "shutdown"
                ]
            },
            "routes": [],
            "complexity": 11
        },
        "social\\platform_login_manager.py": {
            "functions": [
                "load_cookies",
                "save_cookies",
                "wait_for_manual_login",
                "__init__",
                "login",
                "post",
                "__init__",
                "dispatch_all",
                "_process_platform",
                "_generate_content",
                "_shutdown_all_drivers"
            ],
            "classes": {
                "PlatformStrategy": [
                    "__init__",
                    "login",
                    "post"
                ],
                "SocialPlatformDispatcher": [
                    "__init__",
                    "dispatch_all",
                    "_process_platform",
                    "_generate_content",
                    "_shutdown_all_drivers"
                ]
            },
            "routes": [],
            "complexity": 19
        },
        "social\\TaskQueueManager.py": {
            "functions": [
                "__init__",
                "start",
                "stop",
                "add_task",
                "_worker",
                "queue_size",
                "status",
                "sample_task"
            ],
            "classes": {
                "TaskQueueManager": [
                    "__init__",
                    "start",
                    "stop",
                    "add_task",
                    "_worker",
                    "queue_size",
                    "status"
                ]
            },
            "routes": [],
            "complexity": 15
        },
        "social\\social_config.py": {
            "functions": [
                "__init__",
                "_default_platform_urls",
                "get_platform_url",
                "chrome_profile_path",
                "within_rate_limit",
                "register_action",
                "_check_daily_reset",
                "_save_rate_limit_state",
                "_load_rate_limit_state"
            ],
            "classes": {
                "SocialConfig": [
                    "__init__",
                    "_default_platform_urls",
                    "get_platform_url",
                    "chrome_profile_path",
                    "within_rate_limit",
                    "register_action",
                    "_check_daily_reset",
                    "_save_rate_limit_state",
                    "_load_rate_limit_state"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "social\\UnifiedCommunityDashboard.py": {
            "functions": [
                "to_dict",
                "__init__",
                "_initialize_strategies",
                "_load_saved_data",
                "save_data",
                "update_metrics",
                "update_top_members",
                "generate_insights",
                "_calculate_trends",
                "_generate_platform_insights",
                "_generate_overall_insights",
                "get_metrics_history",
                "get_latest_metrics",
                "generate_metrics_chart",
                "get_platform_status",
                "get_community_building_plan",
                "_get_recommended_platforms_for_day"
            ],
            "classes": {
                "CommunityMetrics": [
                    "to_dict"
                ],
                "UnifiedCommunityDashboard": [
                    "__init__",
                    "_initialize_strategies",
                    "_load_saved_data",
                    "save_data",
                    "update_metrics",
                    "update_top_members",
                    "generate_insights",
                    "_calculate_trends",
                    "_generate_platform_insights",
                    "_generate_overall_insights",
                    "get_metrics_history",
                    "get_latest_metrics",
                    "generate_metrics_chart",
                    "get_platform_status",
                    "get_community_building_plan",
                    "_get_recommended_platforms_for_day"
                ]
            },
            "routes": [],
            "complexity": 34
        },
        "social\\ai\\chat_agent.py": {
            "functions": [
                "__init__"
            ],
            "classes": {
                "AIChatAgent": [
                    "__init__"
                ]
            },
            "routes": [],
            "complexity": 2
        },
        "social\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "social\\data\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "social\\ai\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "social\\data\\post_history.py": {
            "functions": [
                "__init__",
                "_load_history",
                "_save_history",
                "add_post",
                "get_posts",
                "clear_history"
            ],
            "classes": {
                "PostHistory": [
                    "__init__",
                    "_load_history",
                    "_save_history",
                    "add_post",
                    "get_posts",
                    "clear_history"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "social\\UnifiedPostManager.py": {
            "functions": [
                "__init__",
                "_load_post_history",
                "_save_post_history",
                "post_to_platform",
                "_adapt_content_for_platform",
                "schedule_post",
                "get_scheduled_posts",
                "cancel_scheduled_post",
                "get_post_analytics",
                "_get_current_metrics",
                "generate_content_ideas"
            ],
            "classes": {
                "UnifiedPostManager": [
                    "__init__",
                    "_load_post_history",
                    "_save_post_history",
                    "post_to_platform",
                    "_adapt_content_for_platform",
                    "schedule_post",
                    "get_scheduled_posts",
                    "cancel_scheduled_post",
                    "get_post_analytics",
                    "_get_current_metrics",
                    "generate_content_ideas"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "social\\strategies\\base_platform_strategy.py": {
            "functions": [
                "__init__",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "analyze_comment_sentiment",
                "reinforce_engagement",
                "reward_top_engagers",
                "cross_platform_feedback_loop",
                "run_feedback_loop",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction"
            ],
            "classes": {
                "BasePlatformStrategy": [
                    "__init__",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "analyze_comment_sentiment",
                    "reinforce_engagement",
                    "reward_top_engagers",
                    "cross_platform_feedback_loop",
                    "run_feedback_loop",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction"
                ]
            },
            "routes": [],
            "complexity": 28
        },
        "social\\strategies\\ai_strategy.py": {
            "functions": [
                "__init__",
                "analyze_sentiment",
                "_build_response_prompt",
                "_get_response_template",
                "_get_fallback_response",
                "_summarize_recent_content",
                "_get_sentiment_label",
                "_load_templates",
                "_load_history",
                "_track_response",
                "get_response_analytics"
            ],
            "classes": {
                "AIStrategy": [
                    "__init__",
                    "analyze_sentiment",
                    "_build_response_prompt",
                    "_get_response_template",
                    "_get_fallback_response",
                    "_summarize_recent_content",
                    "_get_sentiment_label",
                    "_load_templates",
                    "_load_history",
                    "_track_response",
                    "get_response_analytics"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "social\\strategies\\community_scheduler.py": {
            "functions": [
                "__init__",
                "schedule_task",
                "schedule_engagement_check",
                "schedule_ai_responses",
                "schedule_daily_report",
                "_check_engagement",
                "_load_schedules",
                "_save_schedules",
                "_is_comment_processed",
                "_mark_comment_processed",
                "start",
                "stop"
            ],
            "classes": {
                "CommunityScheduler": [
                    "__init__",
                    "schedule_task",
                    "schedule_engagement_check",
                    "schedule_ai_responses",
                    "schedule_daily_report",
                    "_check_engagement",
                    "_load_schedules",
                    "_save_schedules",
                    "_is_comment_processed",
                    "_mark_comment_processed",
                    "start",
                    "stop"
                ]
            },
            "routes": [],
            "complexity": 24
        },
        "social\\strategies\\config_loader.py": {
            "functions": [
                "load_yaml_config",
                "load_json_config",
                "load_configs",
                "get_nested",
                "get_env_or_config",
                "reload_configs"
            ],
            "classes": {},
            "routes": [],
            "complexity": 6
        },
        "social\\strategies\\BaseEngagementBot.py": {
            "functions": [
                "retry_on_failure",
                "decorator_retry",
                "__init__",
                "get_driver",
                "get_random_user_agent",
                "_wait",
                "login",
                "is_logged_in",
                "_login_with_credentials",
                "post",
                "like_posts",
                "comment_on_posts",
                "follow_users",
                "unfollow_non_returners",
                "go_viral",
                "_log_followed_users",
                "_find_posts",
                "_find_like_button",
                "_find_comment_box",
                "_find_profile_url",
                "_find_follow_button",
                "_find_unfollow_button",
                "run_daily_session",
                "wrapper_retry"
            ],
            "classes": {
                "BaseEngagementBot": [
                    "__init__",
                    "get_driver",
                    "get_random_user_agent",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "_login_with_credentials",
                    "post",
                    "like_posts",
                    "comment_on_posts",
                    "follow_users",
                    "unfollow_non_returners",
                    "go_viral",
                    "_log_followed_users",
                    "_find_posts",
                    "_find_like_button",
                    "_find_comment_box",
                    "_find_profile_url",
                    "_find_follow_button",
                    "_find_unfollow_button",
                    "run_daily_session"
                ]
            },
            "routes": [],
            "complexity": 45
        },
        "social\\strategies\\context_db.py": {
            "functions": [
                "__init__",
                "create_tables",
                "log_post",
                "fetch_recent_posts",
                "fetch_last_post_content",
                "log_engagement",
                "fetch_engagements_for_post",
                "get_rate_limit",
                "update_rate_limit",
                "update_sentiment",
                "close"
            ],
            "classes": {
                "UnifiedContextEngine": [
                    "__init__",
                    "create_tables",
                    "log_post",
                    "fetch_recent_posts",
                    "fetch_last_post_content",
                    "log_engagement",
                    "fetch_engagements_for_post",
                    "get_rate_limit",
                    "update_rate_limit",
                    "update_sentiment",
                    "close"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "social\\strategies\\instagram_strategy.py": {
            "functions": [
                "retry_on_failure",
                "get_random_mobile_user_agent",
                "start_scheduler",
                "post_to_instagram",
                "decorator_retry",
                "__init__",
                "get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "create_post",
                "like_posts",
                "comment_on_posts",
                "_gather_post_links",
                "follow_users",
                "unfollow_user",
                "__init__",
                "run_daily_session",
                "generate_ai_comments",
                "like_posts",
                "comment_on_posts",
                "follow_users",
                "unfollow_non_returners",
                "_log_followed_users",
                "go_viral",
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "analyze_comment_sentiment",
                "reinforce_engagement",
                "reward_top_engagers",
                "cross_platform_feedback_loop",
                "run_feedback_loop",
                "wrapper_retry"
            ],
            "classes": {
                "InstagramBot": [
                    "__init__",
                    "get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "create_post",
                    "like_posts",
                    "comment_on_posts",
                    "_gather_post_links",
                    "follow_users",
                    "unfollow_user"
                ],
                "InstagramEngagementBot": [
                    "__init__",
                    "run_daily_session",
                    "generate_ai_comments",
                    "like_posts",
                    "comment_on_posts",
                    "follow_users",
                    "unfollow_non_returners",
                    "_log_followed_users",
                    "go_viral"
                ],
                "InstagramStrategy": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "analyze_comment_sentiment",
                    "reinforce_engagement",
                    "reward_top_engagers",
                    "cross_platform_feedback_loop",
                    "run_feedback_loop"
                ]
            },
            "routes": [],
            "complexity": 86
        },
        "social\\strategies\\linkedin_strategy.py": {
            "functions": [
                "retry_on_failure",
                "decorator_retry",
                "__init__",
                "_get_driver",
                "get_random_user_agent",
                "_wait",
                "login",
                "is_logged_in",
                "_login_with_credentials",
                "post",
                "like_posts",
                "comment_on_posts",
                "follow_users",
                "unfollow_non_returners",
                "go_viral",
                "_log_followed_users",
                "_find_posts",
                "_find_like_button",
                "_find_comment_box",
                "_find_profile_url",
                "_find_follow_button",
                "_find_unfollow_button",
                "run_daily_session",
                "__init__",
                "is_logged_in",
                "_login_with_credentials",
                "post",
                "_find_posts",
                "_find_like_button",
                "_find_comment_box",
                "_find_profile_url",
                "_find_follow_button",
                "_find_unfollow_button",
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "get_random_user_agent",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "wrapper_retry"
            ],
            "classes": {
                "BaseEngagementBot": [
                    "__init__",
                    "_get_driver",
                    "get_random_user_agent",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "_login_with_credentials",
                    "post",
                    "like_posts",
                    "comment_on_posts",
                    "follow_users",
                    "unfollow_non_returners",
                    "go_viral",
                    "_log_followed_users",
                    "_find_posts",
                    "_find_like_button",
                    "_find_comment_box",
                    "_find_profile_url",
                    "_find_follow_button",
                    "_find_unfollow_button",
                    "run_daily_session"
                ],
                "LinkedInEngagementBot": [
                    "__init__",
                    "is_logged_in",
                    "_login_with_credentials",
                    "post",
                    "_find_posts",
                    "_find_like_button",
                    "_find_comment_box",
                    "_find_profile_url",
                    "_find_follow_button",
                    "_find_unfollow_button"
                ],
                "LinkedinStrategy": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "get_random_user_agent",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session"
                ]
            },
            "routes": [],
            "complexity": 91
        },
        "social\\strategies\\twitter_strategy.py": {
            "functions": [
                "__init__",
                "login",
                "is_logged_in",
                "post_tweet",
                "post_thread",
                "_extract_tweet_id",
                "engage_community",
                "_follow_author",
                "_log_follow",
                "unfollow_non_returners",
                "run_daily_session",
                "post_thread",
                "__init__",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "adaptive_posting_strategy",
                "analyze_comment_sentiment",
                "reinforce_engagement",
                "reward_top_engagers",
                "cross_platform_feedback_loop",
                "run_feedback_loop",
                "run_daily_strategy_session"
            ],
            "classes": {
                "TwitterCommunityArchitect": [
                    "__init__",
                    "login",
                    "is_logged_in",
                    "post_tweet",
                    "post_thread",
                    "_extract_tweet_id",
                    "engage_community",
                    "_follow_author",
                    "_log_follow",
                    "unfollow_non_returners",
                    "run_daily_session",
                    "post_thread"
                ],
                "TwitterStrategy": [
                    "__init__",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "adaptive_posting_strategy",
                    "analyze_comment_sentiment",
                    "reinforce_engagement",
                    "reward_top_engagers",
                    "cross_platform_feedback_loop",
                    "run_feedback_loop",
                    "run_daily_strategy_session"
                ]
            },
            "routes": [],
            "complexity": 46
        },
        "social\\strategies\\stocktwits_strategy.py": {
            "functions": [
                "__init__",
                "login",
                "is_logged_in",
                "post",
                "engage_community",
                "_log_follow",
                "unfollow_non_returners",
                "run_daily_session",
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "run_feedback_loop",
                "adaptive_posting_strategy",
                "reinforce_engagement",
                "reward_top_engagers",
                "cross_platform_feedback_loop"
            ],
            "classes": {
                "StocktwitsCommunityArchitect": [
                    "__init__",
                    "login",
                    "is_logged_in",
                    "post",
                    "engage_community",
                    "_log_follow",
                    "unfollow_non_returners",
                    "run_daily_session"
                ],
                "StocktwitsStrategy": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "run_feedback_loop",
                    "adaptive_posting_strategy",
                    "reinforce_engagement",
                    "reward_top_engagers",
                    "cross_platform_feedback_loop"
                ]
            },
            "routes": [],
            "complexity": 56
        },
        "social\\strategies\\reddit_strategy.py": {
            "functions": [
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "run_feedback_loop",
                "adaptive_posting_strategy"
            ],
            "classes": {
                "RedditStrategy": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "run_feedback_loop",
                    "adaptive_posting_strategy"
                ]
            },
            "routes": [],
            "complexity": 34
        },
        "social\\strategies\\wordpress_strategy.py": {
            "functions": [
                "__init__",
                "initialize",
                "cleanup",
                "sync_youtube_video",
                "moderate_comment",
                "get_community_metrics",
                "get_top_members",
                "_load_community_data",
                "_save_community_data",
                "generate_engagement_report",
                "track_member_interaction"
            ],
            "classes": {
                "WordPressCommunityStrategy": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "sync_youtube_video",
                    "moderate_comment",
                    "get_community_metrics",
                    "get_top_members",
                    "_load_community_data",
                    "_save_community_data",
                    "generate_engagement_report",
                    "track_member_interaction"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "social\\strategies\\tiktok_strategy.py": {
            "functions": [
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_video",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "run_feedback_loop",
                "adaptive_posting_strategy",
                "update_trending_hashtags",
                "reward_top_creators",
                "cross_platform_feedback_loop"
            ],
            "classes": {
                "TikTokStrategy": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_video",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "run_feedback_loop",
                    "adaptive_posting_strategy",
                    "update_trending_hashtags",
                    "reward_top_creators",
                    "cross_platform_feedback_loop"
                ]
            },
            "routes": [],
            "complexity": 40
        },
        "tests\\conftest.py": {
            "functions": [
                "test_client",
                "mock_prompt_service",
                "mock_discord_service",
                "sample_prompt_request",
                "sample_cycle_request",
                "sample_bot_config",
                "setup_test_environment",
                "mock_openai",
                "test_video_data",
                "test_comment_data",
                "test_context_data",
                "qapp",
                "mock_services",
                "test_env"
            ],
            "classes": {},
            "routes": [],
            "complexity": 14
        },
        "social\\strategies\\facebook_strategy.py": {
            "functions": [
                "retry_on_failure",
                "get_random_user_agent",
                "start_scheduler",
                "post_to_facebook",
                "decorator_retry",
                "__init__",
                "_wait",
                "get_driver",
                "is_logged_in",
                "login",
                "post",
                "like_posts",
                "comment_on_posts",
                "follow_users",
                "unfollow_non_returners",
                "_log_followed_users",
                "go_viral",
                "run_daily_session",
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "get_random_user_agent",
                "_wait",
                "login",
                "is_logged_in",
                "post_content",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "adaptive_posting_strategy",
                "analyze_comment_sentiment",
                "reinforce_engagement",
                "reward_top_followers",
                "cross_platform_feedback_loop",
                "run_feedback_loop",
                "wrapper_retry"
            ],
            "classes": {
                "FacebookBot": [
                    "__init__",
                    "_wait",
                    "get_driver",
                    "is_logged_in",
                    "login",
                    "post"
                ],
                "FacebookEngagementBot": [
                    "like_posts",
                    "comment_on_posts",
                    "follow_users",
                    "unfollow_non_returners",
                    "_log_followed_users",
                    "go_viral",
                    "run_daily_session"
                ],
                "FacebookStrategy": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "get_random_user_agent",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "adaptive_posting_strategy",
                    "analyze_comment_sentiment",
                    "reinforce_engagement",
                    "reward_top_followers",
                    "cross_platform_feedback_loop",
                    "run_feedback_loop"
                ]
            },
            "routes": [],
            "complexity": 76
        },
        "social\\strategies\\youtube_strategy.py": {
            "functions": [
                "__init__",
                "initialize",
                "cleanup",
                "get_community_metrics",
                "get_top_members",
                "track_member_interaction",
                "_get_driver",
                "_wait",
                "login",
                "is_logged_in",
                "post_video",
                "run_daily_strategy_session",
                "_load_feedback_data",
                "_save_feedback_data",
                "analyze_engagement_metrics",
                "run_feedback_loop",
                "adaptive_posting_strategy",
                "reward_top_creators",
                "cross_platform_feedback_loop"
            ],
            "classes": {
                "YouTubeStrategy": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_video",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "run_feedback_loop",
                    "adaptive_posting_strategy",
                    "reward_top_creators",
                    "cross_platform_feedback_loop"
                ]
            },
            "routes": [],
            "complexity": 38
        },
        "social\\strategies\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\run_tests.py": {
            "functions": [
                "run_async_tests",
                "main",
                "wrapper",
                "run_async"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\run_coverage.py": {
            "functions": [
                "parse_args",
                "run_coverage",
                "main"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\test_aletheia_feedback_loop_manager.py": {
            "functions": [
                "setUp",
                "test_initialization",
                "test_store_feedback",
                "test_get_feedback",
                "test_update_feedback",
                "test_delete_feedback",
                "test_list_feedback",
                "test_filter_feedback",
                "test_analyze_feedback",
                "test_generate_feedback_report",
                "test_cleanup_old_feedback",
                "test_feedback_aggregation",
                "test_feedback_export",
                "test_feedback_import",
                "tearDown"
            ],
            "classes": {
                "TestAletheiaFeedbackLoopManager": [
                    "setUp",
                    "test_initialization",
                    "test_store_feedback",
                    "test_get_feedback",
                    "test_update_feedback",
                    "test_delete_feedback",
                    "test_list_feedback",
                    "test_filter_feedback",
                    "test_analyze_feedback",
                    "test_generate_feedback_report",
                    "test_cleanup_old_feedback",
                    "test_feedback_aggregation",
                    "test_feedback_export",
                    "test_feedback_import",
                    "tearDown"
                ]
            },
            "routes": [],
            "complexity": 30
        },
        "tests\\test_ai_chat_agent.py": {
            "functions": [
                "setUp",
                "tearDown",
                "test_02_conversation_history_should_maintain_correct_order",
                "test_03_context_management_should_update_and_retrieve_correctly",
                "test_04_response_cache_should_store_and_retrieve_correctly",
                "test_05_conversation_analytics_should_track_correctly",
                "test_06_prompt_templates_should_manage_correctly",
                "test_07_error_handling_should_handle_invalid_inputs",
                "test_08_persistence_should_save_and_load_state"
            ],
            "classes": {
                "TestAIChatAgent": [
                    "setUp",
                    "tearDown",
                    "test_02_conversation_history_should_maintain_correct_order",
                    "test_03_context_management_should_update_and_retrieve_correctly",
                    "test_04_response_cache_should_store_and_retrieve_correctly",
                    "test_05_conversation_analytics_should_track_correctly",
                    "test_06_prompt_templates_should_manage_correctly",
                    "test_07_error_handling_should_handle_invalid_inputs",
                    "test_08_persistence_should_save_and_load_state"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "tests\\discordintegration.py": {
            "functions": [
                "__init__",
                "_register_events",
                "load_config",
                "save_config",
                "run",
                "stop",
                "send_message",
                "send_file",
                "send_template",
                "get_status",
                "set_log_callback",
                "_log",
                "__init__",
                "launch_bot",
                "stop_bot",
                "send_message",
                "send_file",
                "send_template",
                "get_status",
                "is_running",
                "run_bot"
            ],
            "classes": {
                "UnifiedDiscordService": [
                    "__init__",
                    "_register_events",
                    "load_config",
                    "save_config",
                    "run",
                    "stop",
                    "send_message",
                    "send_file",
                    "send_template",
                    "get_status",
                    "set_log_callback",
                    "_log"
                ],
                "DiscordService": [
                    "__init__",
                    "launch_bot",
                    "stop_bot",
                    "send_message",
                    "send_file",
                    "send_template",
                    "get_status",
                    "is_running"
                ]
            },
            "routes": [],
            "complexity": 41
        },
        "tests\\test_agent_dispatcher.py": {
            "functions": [
                "dispatcher",
                "dummy_task",
                "test_dispatcher_initialization",
                "test_add_task_to_queue",
                "test_get_next_task_ready",
                "test_get_next_task_blocked_dependency",
                "test_can_execute_task_dependency_check",
                "test_can_execute_task_scheduled_time",
                "test_execute_task_success",
                "test_execute_task_retry",
                "test_retry_task",
                "test_allocate_and_release_resources",
                "test_cancel_task",
                "test_cancel_task_failure",
                "test_get_task_status",
                "test_update_performance_metrics",
                "test_shutdown",
                "test_context_manager"
            ],
            "classes": {},
            "routes": [],
            "complexity": 18
        },
        "tests\\test_agent_dispatcher_integration.py": {
            "functions": [
                "dispatcher",
                "test_add_and_execute_tasks",
                "test_task_dependencies",
                "test_scheduled_task",
                "test_task_retry_mechanism",
                "test_concurrent_task_execution",
                "test_shutdown_during_execution",
                "test_performance_metrics",
                "mock_task_execution",
                "failing_task",
                "mock_parallel_execution",
                "long_running_task"
            ],
            "classes": {},
            "routes": [],
            "complexity": 12
        },
        "tests\\test_app_buttons.py": {
            "functions": [
                "execution_tab",
                "test_run_prompt_button",
                "test_generate_tests_button",
                "test_git_commit_button",
                "config_tab",
                "test_exclusions_manager_button",
                "test_discord_settings_button",
                "test_reinforcement_tools_button",
                "logs_tab",
                "test_clear_logs_button",
                "prompt_panel",
                "test_add_custom_prompt_button",
                "test_remove_custom_prompt_button",
                "dashboard_tab",
                "test_refresh_data_button",
                "test_generate_insights_button",
                "test_platform_selector_change"
            ],
            "classes": {
                "TestCursorExecutionTab": [
                    "execution_tab",
                    "test_run_prompt_button",
                    "test_generate_tests_button",
                    "test_git_commit_button"
                ],
                "TestConfigurationTab": [
                    "config_tab",
                    "test_exclusions_manager_button",
                    "test_discord_settings_button",
                    "test_reinforcement_tools_button"
                ],
                "TestLogsTab": [
                    "logs_tab",
                    "test_clear_logs_button"
                ],
                "TestPromptPanel": [
                    "prompt_panel",
                    "test_add_custom_prompt_button",
                    "test_remove_custom_prompt_button"
                ],
                "TestCommunityDashboardTab": [
                    "dashboard_tab",
                    "test_refresh_data_button",
                    "test_generate_insights_button",
                    "test_platform_selector_change"
                ]
            },
            "routes": [],
            "complexity": 34
        },
        "tests\\test_aletheia_prompt_manager.py": {
            "functions": [
                "send_message",
                "setUp",
                "tearDown",
                "test_start_conversation_cycle",
                "test_end_conversation_cycle",
                "test_record_conversation",
                "test_get_prompt",
                "test_list_available_prompts",
                "test_load_and_save_memory_state",
                "test_parse_memory_updates_and_archive_episode",
                "test_extract_memory_update_block_valid",
                "test_extract_memory_update_block_invalid",
                "test_merge_memory_updates",
                "test_archive_episode",
                "sync_save"
            ],
            "classes": {
                "DummyDiscordManager": [
                    "send_message"
                ],
                "TestAletheiaPromptManager": [
                    "setUp",
                    "tearDown",
                    "test_start_conversation_cycle",
                    "test_end_conversation_cycle",
                    "test_record_conversation",
                    "test_get_prompt",
                    "test_list_available_prompts",
                    "test_load_and_save_memory_state",
                    "test_parse_memory_updates_and_archive_episode",
                    "test_extract_memory_update_block_valid",
                    "test_extract_memory_update_block_invalid",
                    "test_merge_memory_updates",
                    "test_archive_episode"
                ]
            },
            "routes": [],
            "complexity": 29
        },
        "tests\\test_ai_strategy.py": {
            "functions": [
                "setUp",
                "tearDown",
                "test_analyze_sentiment",
                "test_response_templates",
                "test_fallback_responses",
                "test_response_tracking",
                "test_error_handling"
            ],
            "classes": {
                "TestAIStrategy": [
                    "setUp",
                    "tearDown",
                    "test_analyze_sentiment",
                    "test_response_templates",
                    "test_fallback_responses",
                    "test_response_tracking",
                    "test_error_handling"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "tests\\test_async_event_flow.py": {
            "functions": [
                "dispatcher",
                "dreamscape_tab",
                "discord_tab",
                "__init__",
                "log_output",
                "handle_discord_event",
                "__init__",
                "log_output",
                "handle_dreamscape_generated",
                "on_task_failed"
            ],
            "classes": {
                "MockDreamscapeTab": [
                    "__init__",
                    "log_output",
                    "handle_discord_event"
                ],
                "MockDiscordTab": [
                    "__init__",
                    "log_output",
                    "handle_dreamscape_generated"
                ]
            },
            "routes": [],
            "complexity": 16
        },
        "tests\\test_chat_cycle_controller.py": {
            "functions": [
                "setUp",
                "test_start_cycle",
                "test_shutdown_cycle"
            ],
            "classes": {
                "TestChatCycleController": [
                    "setUp",
                    "test_start_cycle",
                    "test_shutdown_cycle"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "tests\\test_ai_output_log_analyzer.py": {
            "functions": [
                "mock_unified_logger",
                "mock_file_manager",
                "mock_discord_manager",
                "analyzer",
                "test_init",
                "test_validate_log_valid_entry",
                "test_validate_log_invalid_entry",
                "test_iterate_logs",
                "test_extract_context_from_logs",
                "test_get_recent_context",
                "test_get_user_context",
                "test_summarize",
                "test_export_summary_report",
                "test_send_discord_report_sync"
            ],
            "classes": {},
            "routes": [],
            "complexity": 14
        },
        "tests\\test_community_scheduler.py": {
            "functions": [
                "setUp",
                "tearDown",
                "test_schedule_task",
                "test_cancel_task",
                "test_schedule_engagement_check",
                "test_schedule_daily_report",
                "test_error_handling",
                "test_persistence",
                "test_scheduler_lifecycle"
            ],
            "classes": {
                "TestCommunityScheduler": [
                    "setUp",
                    "tearDown",
                    "test_schedule_task",
                    "test_cancel_task",
                    "test_schedule_engagement_check",
                    "test_schedule_daily_report",
                    "test_error_handling",
                    "test_persistence",
                    "test_scheduler_lifecycle"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "tests\\test_chat_manager.py": {
            "functions": [
                "setUp",
                "tearDown",
                "test_invalid_model_raises_value_error",
                "test_set_model_valid",
                "test_set_model_invalid",
                "test_ensure_model_in_url_adds_model",
                "test_is_logged_in_success",
                "test_is_logged_in_failure",
                "test_get_all_chat_titles_no_chats",
                "test_execute_prompts_single_chat_login_required",
                "test_execute_prompts_single_chat_success",
                "test_execute_prompt_cycle_login_required",
                "test_execute_prompt_cycle_success",
                "test_execute_prompt_to_chat_no_link",
                "test_execute_prompt_to_chat_success",
                "test_execute_prompts_on_all_chats",
                "test_cycle_prompts_through_all_chats",
                "test_generate_dreamscape_episodes",
                "test_analyze_execution_response",
                "test_sanitize_filename"
            ],
            "classes": {
                "TestChatManager": [
                    "setUp",
                    "tearDown",
                    "test_invalid_model_raises_value_error",
                    "test_set_model_valid",
                    "test_set_model_invalid",
                    "test_ensure_model_in_url_adds_model",
                    "test_is_logged_in_success",
                    "test_is_logged_in_failure",
                    "test_get_all_chat_titles_no_chats",
                    "test_execute_prompts_single_chat_login_required",
                    "test_execute_prompts_single_chat_success",
                    "test_execute_prompt_cycle_login_required",
                    "test_execute_prompt_cycle_success",
                    "test_execute_prompt_to_chat_no_link",
                    "test_execute_prompt_to_chat_success",
                    "test_execute_prompts_on_all_chats",
                    "test_cycle_prompts_through_all_chats",
                    "test_generate_dreamscape_episodes",
                    "test_analyze_execution_response",
                    "test_sanitize_filename"
                ]
            },
            "routes": [],
            "complexity": 40
        },
        "tests\\test_ChatManager.py": {
            "functions": [
                "test_is_logged_in_true",
                "test_is_logged_in_false",
                "test_ensure_model_in_url_appends_correctly",
                "test_ensure_model_in_url_with_existing_params",
                "test_ensure_model_in_url_with_model_already_present",
                "test_get_all_chat_titles_scrolls_and_filters",
                "create_mock_chat"
            ],
            "classes": {
                "TestChatManager": [
                    "test_is_logged_in_true",
                    "test_is_logged_in_false",
                    "test_ensure_model_in_url_appends_correctly",
                    "test_ensure_model_in_url_with_existing_params",
                    "test_ensure_model_in_url_with_model_already_present",
                    "test_get_all_chat_titles_scrolls_and_filters",
                    "create_mock_chat"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "tests\\test_discord_manager.py": {
            "functions": [
                "setUp",
                "tearDown",
                "test_load_config_file_not_exists",
                "test_save_and_load_config_success",
                "test_update_credentials",
                "test_map_prompt_to_channel",
                "test_unmap_prompt_channel",
                "test_get_channel_for_prompt",
                "test_run_bot_without_credentials",
                "test_run_bot_with_valid_credentials",
                "test_stop_bot",
                "test_send_message_when_bot_not_running",
                "test_send_file_when_bot_not_running",
                "test_send_dreamscape_episode_as_message",
                "test_send_dreamscape_episode_as_file",
                "test_send_prompt_response_text",
                "test_send_prompt_response_file",
                "test_send_event_notification",
                "test_update_status",
                "setUp",
                "test_update_credentials_success",
                "test_map_prompt_to_channel_success",
                "test_unmap_selected_prompt_success",
                "test_refresh_prompt_channel_list_with_mappings",
                "test_load_prompt_types_file_not_found"
            ],
            "classes": {
                "TestDiscordManager": [
                    "setUp",
                    "tearDown",
                    "test_load_config_file_not_exists",
                    "test_save_and_load_config_success",
                    "test_update_credentials",
                    "test_map_prompt_to_channel",
                    "test_unmap_prompt_channel",
                    "test_get_channel_for_prompt",
                    "test_run_bot_without_credentials",
                    "test_run_bot_with_valid_credentials",
                    "test_stop_bot",
                    "test_send_message_when_bot_not_running",
                    "test_send_file_when_bot_not_running",
                    "test_send_dreamscape_episode_as_message",
                    "test_send_dreamscape_episode_as_file",
                    "test_send_prompt_response_text",
                    "test_send_prompt_response_file",
                    "test_send_event_notification",
                    "test_update_status"
                ],
                "TestDiscordSettingsDialog": [
                    "setUp",
                    "test_update_credentials_success",
                    "test_map_prompt_to_channel_success",
                    "test_unmap_selected_prompt_success",
                    "test_refresh_prompt_channel_list_with_mappings",
                    "test_load_prompt_types_file_not_found"
                ]
            },
            "routes": [],
            "complexity": 50
        },
        "tests\\test_community_integration_manager.py": {
            "functions": [
                "setUp",
                "tearDown",
                "test_01_sync_content_should_distribute_across_platforms",
                "test_02_process_interactions_should_handle_all_platforms",
                "test_03_get_analytics_should_combine_platform_metrics",
                "test_04_engagement_tracking_should_track_across_platforms",
                "test_05_member_management_should_track_across_platforms",
                "test_06_content_optimization_should_apply_to_all_platforms",
                "test_07_error_handling_should_manage_platform_failures",
                "test_08_persistence_should_maintain_cross_platform_state",
                "test_09_scheduling_should_coordinate_across_platforms"
            ],
            "classes": {
                "TestCommunityIntegrationManager": [
                    "setUp",
                    "tearDown",
                    "test_01_sync_content_should_distribute_across_platforms",
                    "test_02_process_interactions_should_handle_all_platforms",
                    "test_03_get_analytics_should_combine_platform_metrics",
                    "test_04_engagement_tracking_should_track_across_platforms",
                    "test_05_member_management_should_track_across_platforms",
                    "test_06_content_optimization_should_apply_to_all_platforms",
                    "test_07_error_handling_should_manage_platform_failures",
                    "test_08_persistence_should_maintain_cross_platform_state",
                    "test_09_scheduling_should_coordinate_across_platforms"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "tests\\test_cursor_session_manager.py": {
            "functions": [
                "__init__",
                "clear",
                "send_keys",
                "setUp",
                "test_switch_mode_valid",
                "test_switch_mode_invalid",
                "test_generate_prompt_full_sync",
                "test_generate_prompt_tdd",
                "test_execute_prompt_success",
                "test_execute_prompt_failure"
            ],
            "classes": {
                "DummyElement": [
                    "__init__",
                    "clear",
                    "send_keys"
                ],
                "TestCursorSessionManager": [
                    "setUp",
                    "test_switch_mode_valid",
                    "test_switch_mode_invalid",
                    "test_generate_prompt_full_sync",
                    "test_generate_prompt_tdd",
                    "test_execute_prompt_success",
                    "test_execute_prompt_failure"
                ]
            },
            "routes": [],
            "complexity": 20
        },
        "tests\\test_discord_template_manager.py": {
            "functions": [
                "setUp",
                "test_resolve_template_dir_env",
                "test_resolve_template_dir_json",
                "test_resolve_template_dir_fallback",
                "test_init_creates_directory_if_not_exist",
                "test_init_does_not_create_directory_if_exists",
                "test_render_message_successful",
                "test_render_message_template_not_found",
                "test_render_message_general_exception",
                "test_list_templates_success",
                "test_list_templates_error"
            ],
            "classes": {
                "TestDiscordTemplateManager": [
                    "setUp",
                    "test_resolve_template_dir_env",
                    "test_resolve_template_dir_json",
                    "test_resolve_template_dir_fallback",
                    "test_init_creates_directory_if_not_exist",
                    "test_init_does_not_create_directory_if_exists",
                    "test_render_message_successful",
                    "test_render_message_template_not_found",
                    "test_render_message_general_exception",
                    "test_list_templates_success",
                    "test_list_templates_error"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "tests\\test_driver_manager.py": {
            "functions": [
                "setUp",
                "test_init_sets_directories",
                "test_download_driver_if_needed_downloads_when_missing",
                "test_download_driver_if_needed_uses_cache",
                "test_get_driver_initializes_driver",
                "test_get_driver_returns_existing",
                "test_quit_driver_with_temp_profile",
                "test_quit_driver_without_driver",
                "test_save_cookies_success",
                "test_save_cookies_no_driver",
                "test_load_cookies_success",
                "test_load_cookies_no_driver",
                "test_load_cookies_no_file",
                "test_is_logged_in_success",
                "test_is_logged_in_failure",
                "test_is_logged_in_no_driver",
                "test_scroll_into_view_success",
                "test_scroll_into_view_no_driver",
                "test_manual_scroll_success",
                "test_manual_scroll_no_driver"
            ],
            "classes": {
                "TestDriverManager": [
                    "setUp",
                    "test_init_sets_directories",
                    "test_download_driver_if_needed_downloads_when_missing",
                    "test_download_driver_if_needed_uses_cache",
                    "test_get_driver_initializes_driver",
                    "test_get_driver_returns_existing",
                    "test_quit_driver_with_temp_profile",
                    "test_quit_driver_without_driver",
                    "test_save_cookies_success",
                    "test_save_cookies_no_driver",
                    "test_load_cookies_success",
                    "test_load_cookies_no_driver",
                    "test_load_cookies_no_file",
                    "test_is_logged_in_success",
                    "test_is_logged_in_failure",
                    "test_is_logged_in_no_driver",
                    "test_scroll_into_view_success",
                    "test_scroll_into_view_no_driver",
                    "test_manual_scroll_success",
                    "test_manual_scroll_no_driver"
                ]
            },
            "routes": [],
            "complexity": 40
        },
        "tests\\test_dreamscape_service.py": {
            "functions": [
                "mock_logger",
                "mock_config",
                "service_patches",
                "test_service_initialization",
                "test_service_initialization_with_failures",
                "test_service_health_check",
                "test_chat_manager_creation",
                "test_service_shutdown",
                "test_dependencies_tracked_correctly",
                "test_specific_service_failure",
                "__init__",
                "get"
            ],
            "classes": {
                "MockConfig": [
                    "__init__",
                    "get"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "tests\\test_dreamscape_generation_tab.py": {
            "functions": [
                "qapp",
                "mock_services",
                "dreamscape_tab",
                "test_init",
                "test_refresh_episode_list",
                "test_share_to_discord",
                "test_context_memory_refresh",
                "test_load_schedule_settings",
                "test_validate_schedule_settings"
            ],
            "classes": {},
            "routes": [],
            "complexity": 9
        },
        "tests\\test_enhanced_driver_manager.py": {
            "functions": [
                "run_tests",
                "setUp",
                "tearDown",
                "test_singleton_pattern",
                "test_driver_initialization",
                "test_driver_navigation",
                "test_cookie_save_load",
                "test_wait_functions"
            ],
            "classes": {
                "TestEnhancedDriverManager": [
                    "setUp",
                    "tearDown",
                    "test_singleton_pattern",
                    "test_driver_initialization",
                    "test_driver_navigation",
                    "test_cookie_save_load",
                    "test_wait_functions"
                ]
            },
            "routes": [],
            "complexity": 15
        },
        "tests\\test_DriverManager.py": {
            "functions": [
                "test_driver_initialization_with_cache",
                "test_driver_download_when_cache_missing",
                "test_quit_driver"
            ],
            "classes": {
                "TestDriverManager": [
                    "test_driver_initialization_with_cache",
                    "test_driver_download_when_cache_missing",
                    "test_quit_driver"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "tests\\test_engagement_agent.py": {
            "functions": [
                "setUp",
                "test_initialization",
                "test_handle_mentions_no_strategy",
                "test_handle_mentions_with_task_queue",
                "test_handle_mentions_direct_processing",
                "test_proactive_engagement_no_strategy",
                "test_proactive_engagement_with_task_queue",
                "test_proactive_engagement_direct_processing",
                "test_proactive_engagement_skips_already_engaged",
                "test_process_mention",
                "test_process_proactive",
                "test_log_interaction_successful"
            ],
            "classes": {
                "TestEngagementAgent": [
                    "setUp",
                    "test_initialization",
                    "test_handle_mentions_no_strategy",
                    "test_handle_mentions_with_task_queue",
                    "test_handle_mentions_direct_processing",
                    "test_proactive_engagement_no_strategy",
                    "test_proactive_engagement_with_task_queue",
                    "test_proactive_engagement_direct_processing",
                    "test_proactive_engagement_skips_already_engaged",
                    "test_process_mention",
                    "test_process_proactive",
                    "test_log_interaction_successful"
                ]
            },
            "routes": [],
            "complexity": 24
        },
        "tests\\test_FileManager.py": {
            "functions": [
                "setUp",
                "tearDown",
                "test_save_and_load_json",
                "test_save_and_load_yaml",
                "test_fail_on_invalid_load",
                "test_save_entry_invalid_json",
                "test_load_entry_invalid_json_content",
                "test_load_entry_invalid_yaml_content",
                "dummy_function"
            ],
            "classes": {
                "TestFileManager": [
                    "setUp",
                    "tearDown",
                    "test_save_and_load_json",
                    "test_save_and_load_yaml",
                    "test_fail_on_invalid_load",
                    "test_save_entry_invalid_json",
                    "test_load_entry_invalid_json_content",
                    "test_load_entry_invalid_yaml_content"
                ]
            },
            "routes": [],
            "complexity": 17
        },
        "tests\\test_event_message_builder.py": {
            "functions": [
                "setUp",
                "test_initialization",
                "test_build_message",
                "test_build_message_with_template",
                "test_build_message_with_custom_format",
                "test_build_message_with_attachments",
                "test_build_message_with_embeds",
                "test_build_message_with_actions",
                "test_build_message_with_metadata",
                "test_build_message_with_validation",
                "test_build_message_with_localization",
                "test_build_message_with_compression",
                "test_save_message",
                "test_load_message",
                "tearDown"
            ],
            "classes": {
                "TestEventMessageBuilder": [
                    "setUp",
                    "test_initialization",
                    "test_build_message",
                    "test_build_message_with_template",
                    "test_build_message_with_custom_format",
                    "test_build_message_with_attachments",
                    "test_build_message_with_embeds",
                    "test_build_message_with_actions",
                    "test_build_message_with_metadata",
                    "test_build_message_with_validation",
                    "test_build_message_with_localization",
                    "test_build_message_with_compression",
                    "test_save_message",
                    "test_load_message",
                    "tearDown"
                ]
            },
            "routes": [],
            "complexity": 30
        },
        "tests\\test_feedback_loop_manager.py": {
            "functions": [
                "dummy_write_json_log",
                "__init__",
                "setUp",
                "test_calculate_success_rate",
                "test_get_top_tags",
                "test_auto_adjust_rate_limits",
                "test_generate_feedback_loops",
                "test_export_feedback_report"
            ],
            "classes": {
                "DummySocialConfig": [
                    "__init__"
                ],
                "TestAletheiaFeedbackLoopManager": [
                    "setUp",
                    "test_calculate_success_rate",
                    "test_get_top_tags",
                    "test_auto_adjust_rate_limits",
                    "test_generate_feedback_loops",
                    "test_export_feedback_report"
                ]
            },
            "routes": [],
            "complexity": 15
        },
        "tests\\test_memory_cycle.py": {
            "functions": [
                "setUp",
                "tearDown",
                "test_conversation_cycle",
                "test_multiple_cycles",
                "test_template_rendering"
            ],
            "classes": {
                "TestMemoryCycle": [
                    "setUp",
                    "tearDown",
                    "test_conversation_cycle",
                    "test_multiple_cycles",
                    "test_template_rendering"
                ]
            },
            "routes": [],
            "complexity": 10
        },
        "tests\\test_narrative_analytics.py": {
            "functions": [
                "setUp",
                "test_initialization",
                "test_update_analytics",
                "test_generate_visualizations",
                "test_generate_analytics_report",
                "tearDown"
            ],
            "classes": {
                "TestNarrativeAnalytics": [
                    "setUp",
                    "test_initialization",
                    "test_update_analytics",
                    "test_generate_visualizations",
                    "test_generate_analytics_report",
                    "tearDown"
                ]
            },
            "routes": [],
            "complexity": 12
        },
        "tests\\test_load_post_history_file_exists.py": {
            "functions": [
                "test_load_post_history_file_exists"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "tests\\test_openai_client.py": {
            "functions": [
                "temp_profile_dir",
                "mock_config",
                "test_init_paths",
                "test_config_loading",
                "test_driver_initialization",
                "test_fallback_paths",
                "test_platform_specific_paths"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\test_file_manager.py": {
            "functions": [
                "setUp",
                "tearDown",
                "test_save_response_creates_file",
                "test_save_response_creates_correct_path",
                "test_save_memory_state_creates_json_file",
                "test_save_log_creates_log_file",
                "test_archive_file_moves_file",
                "test_save_file_json_and_yaml",
                "test_save_file_handles_exceptions",
                "test_load_file_json_and_yaml",
                "test_load_file_handles_exceptions",
                "test_sanitize_filename_strips_and_replaces"
            ],
            "classes": {
                "TestFileManager": [
                    "setUp",
                    "tearDown",
                    "test_save_response_creates_file",
                    "test_save_response_creates_correct_path",
                    "test_save_memory_state_creates_json_file",
                    "test_save_log_creates_log_file",
                    "test_archive_file_moves_file",
                    "test_save_file_json_and_yaml",
                    "test_save_file_handles_exceptions",
                    "test_load_file_json_and_yaml",
                    "test_load_file_handles_exceptions",
                    "test_sanitize_filename_strips_and_replaces"
                ]
            },
            "routes": [],
            "complexity": 24
        },
        "tests\\test_MemoryManager.py": {
            "functions": [
                "setUp",
                "tearDown",
                "test_initialization",
                "test_record_interaction",
                "test_initialize_conversation",
                "test_retrieve_conversation",
                "test_get_user_history",
                "test_user_sentiment_summary",
                "test_clear_user_history",
                "test_clear_platform_history"
            ],
            "classes": {
                "TestMemoryManager": [
                    "setUp",
                    "tearDown",
                    "test_initialization",
                    "test_record_interaction",
                    "test_initialize_conversation",
                    "test_retrieve_conversation",
                    "test_get_user_history",
                    "test_user_sentiment_summary",
                    "test_clear_user_history",
                    "test_clear_platform_history"
                ]
            },
            "routes": [],
            "complexity": 20
        },
        "tests\\test_openai_prompt_engine.py": {
            "functions": [
                "dummy_wait",
                "__init__",
                "clear",
                "send_keys",
                "setUp",
                "tearDown",
                "test_render_prompt",
                "test_driver_health_check",
                "test_send_prompt_and_scrape_response",
                "test_retry_backoff_logic",
                "test_log_interaction",
                "flaky_function"
            ],
            "classes": {
                "DummyElement": [
                    "__init__",
                    "clear",
                    "send_keys"
                ],
                "OpenAIPromptEngineTest": [
                    "setUp",
                    "tearDown",
                    "test_render_prompt",
                    "test_driver_health_check",
                    "test_send_prompt_and_scrape_response",
                    "test_retry_backoff_logic",
                    "test_log_interaction"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "tests\\test_post_history.py": {
            "functions": [
                "setUp",
                "tearDown",
                "test_01_add_post_should_store_correctly",
                "test_02_get_post_by_id_should_return_correct_post",
                "test_03_update_post_should_modify_correctly",
                "test_04_get_posts_by_platform_should_filter_correctly",
                "test_05_get_recent_posts_should_return_correct_timeframe",
                "test_06_get_engagement_metrics_should_calculate_correctly",
                "test_07_persistence_should_save_and_load_correctly",
                "test_08_error_handling_should_handle_invalid_inputs",
                "test_09_delete_post_should_remove_correctly"
            ],
            "classes": {
                "TestPostHistory": [
                    "setUp",
                    "tearDown",
                    "test_01_add_post_should_store_correctly",
                    "test_02_get_post_by_id_should_return_correct_post",
                    "test_03_update_post_should_modify_correctly",
                    "test_04_get_posts_by_platform_should_filter_correctly",
                    "test_05_get_recent_posts_should_return_correct_timeframe",
                    "test_06_get_engagement_metrics_should_calculate_correctly",
                    "test_07_persistence_should_save_and_load_correctly",
                    "test_08_error_handling_should_handle_invalid_inputs",
                    "test_09_delete_post_should_remove_correctly"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "tests\\test_PathManager.py": {
            "functions": [
                "setUp",
                "tearDown",
                "test_ensure_directories",
                "test_get_path",
                "test_register_path",
                "test_list_paths",
                "test_path_consistency"
            ],
            "classes": {
                "TestPathManager": [
                    "setUp",
                    "tearDown",
                    "test_ensure_directories",
                    "test_get_path",
                    "test_register_path",
                    "test_list_paths",
                    "test_path_consistency"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "tests\\test_prompt_cycle_manager.py": {
            "functions": [
                "setUp",
                "test_initialization",
                "test_get_contextual_prompt",
                "test_extract_narrative_elements",
                "test_update_system_state",
                "test_update_memory",
                "test_generate_narrative_report",
                "test_perform_ai_audit",
                "test_broadcast_narrative_update",
                "tearDown",
                "setUp",
                "test_cycle_service_initialization",
                "test_prompt_handler_initialization",
                "test_discord_processor_initialization",
                "test_task_orchestrator_initialization"
            ],
            "classes": {
                "TestPromptCycleOrchestrator": [
                    "setUp",
                    "test_initialization",
                    "test_get_contextual_prompt",
                    "test_extract_narrative_elements",
                    "test_update_system_state",
                    "test_update_memory",
                    "test_generate_narrative_report",
                    "test_perform_ai_audit",
                    "test_broadcast_narrative_update",
                    "tearDown"
                ],
                "TestCycleServices": [
                    "setUp",
                    "test_cycle_service_initialization",
                    "test_prompt_handler_initialization",
                    "test_discord_processor_initialization",
                    "test_task_orchestrator_initialization"
                ]
            },
            "routes": [],
            "complexity": 30
        },
        "tests\\test_project_scanner.py": {
            "functions": [
                "temp_project",
                "mock_cache",
                "test_language_analyzer_analyze_python",
                "test_language_analyzer_analyze_rust",
                "test_language_analyzer_analyze_javascript",
                "test_file_processor_hash_file",
                "test_file_processor_should_exclude",
                "test_report_generator_save_report",
                "test_report_generator_generate_init_files",
                "test_project_scanner_scan_project",
                "test_bot_worker",
                "test_multibot_manager"
            ],
            "classes": {},
            "routes": [],
            "complexity": 12
        },
        "tests\\test_PromptManager.py": {
            "functions": [
                "setUp",
                "test_get_prompt_devlog",
                "test_get_prompt_content_ideas",
                "test_get_prompt_dreamscape",
                "test_get_prompt_invalid_type",
                "test_list_available_prompts",
                "test_add_prompt",
                "test_remove_prompt",
                "test_remove_nonexistent_prompt"
            ],
            "classes": {
                "TestPromptManager": [
                    "setUp",
                    "test_get_prompt_devlog",
                    "test_get_prompt_content_ideas",
                    "test_get_prompt_dreamscape",
                    "test_get_prompt_invalid_type",
                    "test_list_available_prompts",
                    "test_add_prompt",
                    "test_remove_prompt",
                    "test_remove_nonexistent_prompt"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "tests\\test_resilient_prompt_executor.py": {
            "functions": [
                "setUp",
                "test_initialization",
                "test_execute_prompt",
                "test_execute_prompt_with_retry",
                "test_execute_prompt_timeout",
                "test_execute_prompt_validation",
                "test_save_response",
                "test_load_response",
                "test_handle_error",
                "test_cleanup_old_responses",
                "test_get_execution_metrics",
                "test_validate_response",
                "test_preprocess_prompt",
                "test_postprocess_response",
                "tearDown",
                "slow_api_call"
            ],
            "classes": {
                "TestResilientPromptExecutor": [
                    "setUp",
                    "test_initialization",
                    "test_execute_prompt",
                    "test_execute_prompt_with_retry",
                    "test_execute_prompt_timeout",
                    "test_execute_prompt_validation",
                    "test_save_response",
                    "test_load_response",
                    "test_handle_error",
                    "test_cleanup_old_responses",
                    "test_get_execution_metrics",
                    "test_validate_response",
                    "test_preprocess_prompt",
                    "test_postprocess_response",
                    "tearDown"
                ]
            },
            "routes": [],
            "complexity": 31
        },
        "tests\\test_prompt_execution_tab.py": {
            "functions": [
                "app",
                "prompt_manager_mock",
                "chat_manager_mock",
                "response_handler_mock",
                "prompt_execution_tab",
                "test_init_creates_ui_components",
                "test_update_managers_sets_managers",
                "test_load_prompt_sets_text",
                "test_load_prompt_handles_missing_manager",
                "test_update_execution_mode_updates_ui",
                "test_load_prompt_data",
                "test_exclusion_list_management",
                "test_execute_prompt_direct_mode",
                "test_execute_prompt_cycle_mode"
            ],
            "classes": {},
            "routes": [],
            "complexity": 14
        },
        "tests\\test_signal_dispatcher.py": {
            "functions": [
                "dispatcher",
                "recorder",
                "test_log_output_signal",
                "test_prompt_executed_signal",
                "test_dreamscape_generated_signal",
                "test_discord_event_signal",
                "test_task_signals",
                "test_listener_registration",
                "__init__",
                "on_log_output",
                "on_prompt_executed",
                "on_dreamscape_generated",
                "on_discord_event",
                "on_task_started",
                "on_task_progress",
                "on_task_completed",
                "on_task_failed",
                "on_status_update"
            ],
            "classes": {
                "SignalRecorder": [
                    "__init__",
                    "on_log_output",
                    "on_prompt_executed",
                    "on_dreamscape_generated",
                    "on_discord_event",
                    "on_task_started",
                    "on_task_progress",
                    "on_task_completed",
                    "on_task_failed",
                    "on_status_update"
                ]
            },
            "routes": [],
            "complexity": 28
        },
        "tests\\test_report_exporter.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\test_ResponseHandler.py": {
            "functions": [
                "setUp",
                "test_fetch_response_returns_latest_text",
                "test_fetch_response_returns_empty_on_exception",
                "test_clean_response_trims_whitespace",
                "test_wait_for_stable_response_returns_stable_text",
                "side_effect"
            ],
            "classes": {
                "TestResponseHandler": [
                    "setUp",
                    "test_fetch_response_returns_latest_text",
                    "test_fetch_response_returns_empty_on_exception",
                    "test_clean_response_trims_whitespace",
                    "test_wait_for_stable_response_returns_stable_text"
                ]
            },
            "routes": [],
            "complexity": 11
        },
        "tests\\test_prompt_endpoints.py": {
            "functions": [
                "test_execute_prompt",
                "test_execute_prompt_invalid_request",
                "test_start_cycle",
                "test_start_cycle_invalid_request"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "tests\\test_specialized_agents.py": {
            "functions": [
                "refactor_agent",
                "test_agent",
                "doc_agent",
                "sample_python_file",
                "test_refactor_agent_initialization",
                "test_refactor_agent_extract_method",
                "test_refactor_agent_rename_variable",
                "test_refactor_agent_inline_function",
                "test_refactor_agent_invalid_task",
                "test_refactor_agent_invalid_file",
                "test_refactor_agent_invalid_method_params",
                "test_refactor_agent_invalid_rename_params",
                "test_refactor_agent_unsupported_type",
                "test_test_agent_initialization",
                "test_test_agent_handle_task",
                "test_test_agent_invalid_task",
                "test_doc_agent_initialization",
                "test_doc_agent_handle_task",
                "test_doc_agent_handle_task_no_examples",
                "test_doc_agent_invalid_task"
            ],
            "classes": {},
            "routes": [],
            "complexity": 20
        },
        "tests\\test_TemplateManager.py": {
            "functions": [
                "setUpClass",
                "tearDownClass",
                "_create_test_templates",
                "setUp",
                "tearDown",
                "test_initialization",
                "test_render_discord_template",
                "test_render_message_template",
                "test_render_general_template",
                "test_invalid_category",
                "test_invalid_template_data",
                "test_list_templates",
                "test_template_not_found"
            ],
            "classes": {
                "TestTemplateManager": [
                    "setUpClass",
                    "tearDownClass",
                    "_create_test_templates",
                    "setUp",
                    "tearDown",
                    "test_initialization",
                    "test_render_discord_template",
                    "test_render_message_template",
                    "test_render_general_template",
                    "test_invalid_category",
                    "test_invalid_template_data",
                    "test_list_templates",
                    "test_template_not_found"
                ]
            },
            "routes": [],
            "complexity": 26
        },
        "tests\\test_system_health_monitor.py": {
            "functions": [
                "setUp",
                "test_initialization",
                "test_collect_system_metrics",
                "test_check_system_health",
                "test_generate_health_report",
                "test_monitor_system",
                "test_alert_handling",
                "test_cleanup_old_reports",
                "tearDown"
            ],
            "classes": {
                "TestSystemHealthMonitor": [
                    "setUp",
                    "test_initialization",
                    "test_collect_system_metrics",
                    "test_check_system_health",
                    "test_generate_health_report",
                    "test_monitor_system",
                    "test_alert_handling",
                    "test_cleanup_old_reports",
                    "tearDown"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "tests\\test_unified_config_manager.py": {
            "functions": [
                "setUp",
                "test_initialization",
                "test_load_config",
                "test_get_config",
                "test_update_config",
                "test_save_config",
                "test_validate_config",
                "test_get_environment_config",
                "test_merge_configs",
                "test_handle_config_error",
                "tearDown"
            ],
            "classes": {
                "TestConfigManager": [
                    "setUp",
                    "test_initialization",
                    "test_load_config",
                    "test_get_config",
                    "test_update_config",
                    "test_save_config",
                    "test_validate_config",
                    "test_get_environment_config",
                    "test_merge_configs",
                    "test_handle_config_error",
                    "tearDown"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "tests\\test_task_manager.py": {
            "functions": [
                "setUp",
                "test_initialization",
                "test_add_task",
                "test_get_task",
                "test_update_task",
                "test_delete_task",
                "test_list_tasks",
                "test_schedule_task",
                "test_task_priority_queue",
                "test_task_timeout",
                "test_task_retry",
                "test_task_dependencies",
                "test_task_metrics",
                "test_task_persistence",
                "tearDown"
            ],
            "classes": {
                "TestTaskManager": [
                    "setUp",
                    "test_initialization",
                    "test_add_task",
                    "test_get_task",
                    "test_update_task",
                    "test_delete_task",
                    "test_list_tasks",
                    "test_schedule_task",
                    "test_task_priority_queue",
                    "test_task_timeout",
                    "test_task_retry",
                    "test_task_dependencies",
                    "test_task_metrics",
                    "test_task_persistence",
                    "tearDown"
                ]
            },
            "routes": [],
            "complexity": 30
        },
        "tests\\test_unified_dreamscape_generator.py": {
            "functions": [
                "setUp",
                "test_initialization",
                "test_generate_dreamscape",
                "test_generate_dreamscape_with_elements",
                "test_generate_dreamscape_with_style",
                "test_generate_dreamscape_with_constraints",
                "test_save_dreamscape",
                "test_load_dreamscape",
                "test_list_dreamscapes",
                "test_search_dreamscapes",
                "test_cleanup_old_dreamscapes",
                "test_validate_dreamscape",
                "test_preprocess_dreamscape",
                "test_postprocess_dreamscape",
                "tearDown"
            ],
            "classes": {
                "TestUnifiedDreamscapeGenerator": [
                    "setUp",
                    "test_initialization",
                    "test_generate_dreamscape",
                    "test_generate_dreamscape_with_elements",
                    "test_generate_dreamscape_with_style",
                    "test_generate_dreamscape_with_constraints",
                    "test_save_dreamscape",
                    "test_load_dreamscape",
                    "test_list_dreamscapes",
                    "test_search_dreamscapes",
                    "test_cleanup_old_dreamscapes",
                    "test_validate_dreamscape",
                    "test_preprocess_dreamscape",
                    "test_postprocess_dreamscape",
                    "tearDown"
                ]
            },
            "routes": [],
            "complexity": 30
        },
        "tests\\test_unified_discord_service.py": {
            "functions": [
                "setUp",
                "test_initialization",
                "test_get_channel",
                "test_send_message",
                "test_send_embed",
                "test_send_file",
                "test_create_channel",
                "test_delete_channel",
                "test_get_channel_history",
                "test_add_reaction",
                "test_handle_error",
                "tearDown"
            ],
            "classes": {
                "TestUnifiedDiscordService": [
                    "setUp",
                    "test_initialization",
                    "test_get_channel",
                    "test_send_message",
                    "test_send_embed",
                    "test_send_file",
                    "test_create_channel",
                    "test_delete_channel",
                    "test_get_channel_history",
                    "test_add_reaction",
                    "test_handle_error",
                    "tearDown"
                ]
            },
            "routes": [],
            "complexity": 24
        },
        "tests\\test_unified_feedback_memory.py": {
            "functions": [
                "setUp",
                "test_initialization",
                "test_store_memory",
                "test_get_memory",
                "test_update_memory",
                "test_delete_memory",
                "test_list_memories",
                "test_search_memories",
                "test_retrieve_memories",
                "test_cleanup_old_memories",
                "test_memory_compression",
                "test_memory_validation",
                "test_memory_aggregation",
                "test_memory_export",
                "test_memory_import",
                "tearDown"
            ],
            "classes": {
                "TestUnifiedFeedbackMemory": [
                    "setUp",
                    "test_initialization",
                    "test_store_memory",
                    "test_get_memory",
                    "test_update_memory",
                    "test_delete_memory",
                    "test_list_memories",
                    "test_search_memories",
                    "test_retrieve_memories",
                    "test_cleanup_old_memories",
                    "test_memory_compression",
                    "test_memory_validation",
                    "test_memory_aggregation",
                    "test_memory_export",
                    "test_memory_import",
                    "tearDown"
                ]
            },
            "routes": [],
            "complexity": 32
        },
        "tests\\test_unified_logging_agent.py": {
            "functions": [
                "setUp",
                "test_initialization",
                "test_log_message",
                "test_log_with_context",
                "test_log_rotation",
                "test_log_analysis",
                "test_log_filtering",
                "test_log_export",
                "test_log_cleanup",
                "test_log_metrics",
                "tearDown"
            ],
            "classes": {
                "TestUnifiedLoggingAgent": [
                    "setUp",
                    "test_initialization",
                    "test_log_message",
                    "test_log_with_context",
                    "test_log_rotation",
                    "test_log_analysis",
                    "test_log_filtering",
                    "test_log_export",
                    "test_log_cleanup",
                    "test_log_metrics",
                    "tearDown"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "tests\\test_thread_pool_manager.py": {
            "functions": [
                "setUp",
                "test_initialization",
                "test_submit_task",
                "test_submit_multiple_tasks",
                "test_task_priority",
                "test_task_cancellation",
                "test_task_timeout",
                "test_task_error_handling",
                "test_pool_shutdown",
                "test_task_metrics",
                "test_task_logging",
                "tearDown",
                "test_function",
                "test_function",
                "test_function",
                "long_running_function",
                "timeout_function",
                "error_function",
                "test_function",
                "test_function",
                "test_function"
            ],
            "classes": {
                "TestThreadPoolManager": [
                    "setUp",
                    "test_initialization",
                    "test_submit_task",
                    "test_submit_multiple_tasks",
                    "test_task_priority",
                    "test_task_cancellation",
                    "test_task_timeout",
                    "test_task_error_handling",
                    "test_pool_shutdown",
                    "test_task_metrics",
                    "test_task_logging",
                    "tearDown"
                ]
            },
            "routes": [],
            "complexity": 33
        },
        "tests\\test_wordpress_strategy.py": {
            "functions": [
                "setUp",
                "tearDown",
                "test_track_member_interaction",
                "test_get_community_metrics",
                "test_member_history",
                "test_error_handling",
                "test_data_persistence"
            ],
            "classes": {
                "TestWordPressCommunityStrategy": [
                    "setUp",
                    "tearDown",
                    "test_track_member_interaction",
                    "test_get_community_metrics",
                    "test_member_history",
                    "test_error_handling",
                    "test_data_persistence"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "tests\\test_youtube_strategy.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\gui\\conftest.py": {
            "functions": [
                "qapp",
                "qtbot",
                "mock_config_manager",
                "mock_analytics_manager",
                "mock_community_manager",
                "mock_chat_manager",
                "mock_template_manager",
                "mock_chat_engine",
                "mock_driver_manager",
                "format",
                "__init__",
                "get_credentials",
                "get_settings",
                "update_credentials",
                "update_settings",
                "__init__",
                "get_metrics",
                "refresh_data",
                "__init__",
                "get_platforms",
                "post_content",
                "get_members",
                "__init__",
                "send_message",
                "get_history",
                "__init__",
                "get_templates",
                "add_template",
                "update_template",
                "delete_template",
                "__init__",
                "execute_prompt",
                "get_response_history",
                "__init__",
                "start",
                "stop",
                "quit",
                "execute_command",
                "__init__",
                "addWidget",
                "waitExposed",
                "wait",
                "waitUntil",
                "mouseClick",
                "keyClick"
            ],
            "classes": {
                "SafeFormatter": [
                    "format"
                ],
                "MockConfigManager": [
                    "__init__",
                    "get_credentials",
                    "get_settings",
                    "update_credentials",
                    "update_settings"
                ],
                "MockAnalyticsManager": [
                    "__init__",
                    "get_metrics",
                    "refresh_data"
                ],
                "MockCommunityManager": [
                    "__init__",
                    "get_platforms",
                    "post_content",
                    "get_members"
                ],
                "MockChatManager": [
                    "__init__",
                    "send_message",
                    "get_history"
                ],
                "MockTemplateManager": [
                    "__init__",
                    "get_templates",
                    "add_template",
                    "update_template",
                    "delete_template"
                ],
                "MockChatEngine": [
                    "__init__",
                    "execute_prompt",
                    "get_response_history"
                ],
                "MockDriverManager": [
                    "__init__",
                    "start",
                    "stop",
                    "quit",
                    "execute_command"
                ],
                "MockQtBot": [
                    "__init__",
                    "addWidget",
                    "waitExposed",
                    "wait",
                    "waitUntil",
                    "mouseClick",
                    "keyClick"
                ]
            },
            "routes": [],
            "complexity": 81
        },
        "tests\\e2e\\test_dreamscape_generation_tab_e2e.py": {
            "functions": [
                "__init__",
                "init_ui",
                "refresh_episode_list",
                "load_episode_content",
                "_update_ui_for_generation",
                "share_to_discord",
                "save_context_schedule",
                "load_context_schedule",
                "refresh_context_memory",
                "test_episode_interaction_workflow",
                "test_filter_context_memory"
            ],
            "classes": {
                "TestDreamscapeGenerationTab": [
                    "__init__",
                    "init_ui",
                    "refresh_episode_list",
                    "load_episode_content",
                    "_update_ui_for_generation",
                    "share_to_discord",
                    "save_context_schedule",
                    "load_context_schedule",
                    "refresh_context_memory"
                ],
                "TestDreamscapeGenerationTabE2E": [
                    "test_episode_interaction_workflow",
                    "test_filter_context_memory"
                ]
            },
            "routes": [],
            "complexity": 22
        },
        "tests\\e2e\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\gui\\test_configuration_tab.py": {
            "functions": [
                "config_manager_mock",
                "configuration_tab",
                "test_init_creates_ui_components",
                "test_load_config",
                "test_save_config",
                "test_reset_config",
                "test_browse_database_path",
                "test_validate_config_valid",
                "test_validate_config_invalid",
                "test_temperature_slider_changes_label",
                "test_model_selector_changes_max_tokens"
            ],
            "classes": {},
            "routes": [],
            "complexity": 11
        },
        "tests\\gui\\test_historical_chats_tab.py": {
            "functions": [
                "chat_history_mock",
                "historical_chats_tab",
                "test_init_creates_ui_components",
                "test_history_tree_has_columns",
                "test_load_chat_history",
                "test_display_chat_session",
                "test_export_chat_history",
                "test_search_chat_history",
                "test_clear_search",
                "test_delete_chat_session",
                "test_refresh_history"
            ],
            "classes": {},
            "routes": [],
            "complexity": 11
        },
        "tests\\gui\\run_gui_tests.py": {
            "functions": [
                "parse_args",
                "run_gui_tests"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "tests\\gui\\test_analytics_tab.py": {
            "functions": [
                "test_analytics_tab_init",
                "test_platform_combo_initialization",
                "test_date_range_combo_initialization",
                "test_custom_date_range_visibility",
                "test_results_table_initialization",
                "test_refresh_analytics_empty_manager",
                "test_refresh_analytics_with_manager",
                "test_export_data",
                "test_update_managers",
                "mock_refresh"
            ],
            "classes": {
                "TestAnalyticsTab": [
                    "test_analytics_tab_init",
                    "test_platform_combo_initialization",
                    "test_date_range_combo_initialization",
                    "test_custom_date_range_visibility",
                    "test_results_table_initialization",
                    "test_refresh_analytics_empty_manager",
                    "test_refresh_analytics_with_manager",
                    "test_export_data",
                    "test_update_managers"
                ]
            },
            "routes": [],
            "complexity": 19
        },
        "tests\\gui\\test_community_management_tab.py": {
            "functions": [
                "test_community_tab_init",
                "test_platform_combo_initialization",
                "test_metrics_table_initialization",
                "test_refresh_metrics_empty_manager",
                "test_refresh_metrics_with_manager",
                "test_update_managers",
                "test_execute_action",
                "mock_refresh",
                "mock_refresh"
            ],
            "classes": {
                "TestCommunityManagementTab": [
                    "test_community_tab_init",
                    "test_platform_combo_initialization",
                    "test_metrics_table_initialization",
                    "test_refresh_metrics_empty_manager",
                    "test_refresh_metrics_with_manager",
                    "test_update_managers",
                    "test_execute_action"
                ]
            },
            "routes": [],
            "complexity": 16
        },
        "tests\\gui\\test_digital_dreamscape_tab.py": {
            "functions": [
                "app",
                "template_manager",
                "chat_engine",
                "tab",
                "test_tab_initialization",
                "test_view_mode_changes",
                "test_theme_toggle",
                "test_template_control_panel",
                "test_prompt_debug_panel",
                "test_cycle_feedback_panel",
                "test_metrics_dashboard_update",
                "test_episode_publishing",
                "test_cleanup",
                "test_ui_density_changes"
            ],
            "classes": {
                "TestDigitalDreamscapeTab": [
                    "app",
                    "template_manager",
                    "chat_engine",
                    "tab",
                    "test_tab_initialization",
                    "test_view_mode_changes",
                    "test_theme_toggle",
                    "test_template_control_panel",
                    "test_prompt_debug_panel",
                    "test_cycle_feedback_panel",
                    "test_metrics_dashboard_update",
                    "test_episode_publishing",
                    "test_cleanup",
                    "test_ui_density_changes"
                ]
            },
            "routes": [],
            "complexity": 28
        },
        "tests\\gui\\test_dreamscape_generation_tab.py": {
            "functions": [
                "prompt_manager_mock",
                "chat_engine_mock",
                "response_handler_mock",
                "memory_manager_mock",
                "discord_manager_mock",
                "dreamscape_generation_tab",
                "test_init_creates_ui_components",
                "test_update_managers_sets_managers",
                "test_load_prompt_template",
                "test_validate_inputs_valid",
                "test_validate_inputs_invalid",
                "test_add_character",
                "test_remove_character",
                "test_generate_dreamscape",
                "test_preview_dreamscape",
                "test_get_character_list",
                "test_reset_form"
            ],
            "classes": {},
            "routes": [],
            "complexity": 17
        },
        "tests\\gui\\test_settings_tab.py": {
            "functions": [
                "test_settings_tab_init",
                "test_password_fields_masked",
                "test_placeholder_text",
                "test_general_settings_init",
                "test_automation_settings_init",
                "test_validate_credentials_missing",
                "test_validate_credentials_complete",
                "test_save_settings_validates_first",
                "test_save_settings_success",
                "test_load_settings",
                "test_update_managers",
                "mock_load_settings"
            ],
            "classes": {
                "TestSettingsTab": [
                    "test_settings_tab_init",
                    "test_password_fields_masked",
                    "test_placeholder_text",
                    "test_general_settings_init",
                    "test_automation_settings_init",
                    "test_validate_credentials_missing",
                    "test_validate_credentials_complete",
                    "test_save_settings_validates_first",
                    "test_save_settings_success",
                    "test_load_settings",
                    "test_update_managers"
                ]
            },
            "routes": [],
            "complexity": 23
        },
        "tests\\gui\\test_logs_tab.py": {
            "functions": [
                "logs_tab",
                "test_init_creates_ui_components",
                "test_clear_logs",
                "test_append_log",
                "test_multiple_log_entries",
                "test_log_text_is_read_only",
                "test_filter_logs"
            ],
            "classes": {},
            "routes": [],
            "complexity": 7
        },
        "tests\\gui\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\gui\\test_main_tabs.py": {
            "functions": [
                "test_main_tabs_init",
                "test_tab_properties",
                "test_tab_bar_properties",
                "test_tab_tooltips",
                "test_tab_dimensions",
                "test_set_managers",
                "test_tab_switching",
                "mock_dreamscape_update",
                "mock_community_update",
                "mock_analytics_update",
                "mock_settings_update"
            ],
            "classes": {
                "TestMainTabs": [
                    "test_main_tabs_init",
                    "test_tab_properties",
                    "test_tab_bar_properties",
                    "test_tab_tooltips",
                    "test_tab_dimensions",
                    "test_set_managers",
                    "test_tab_switching"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "tests\\gui\\test_prompt_execution_tab.py": {
            "functions": [
                "prompt_manager_mock",
                "chat_manager_mock",
                "response_handler_mock",
                "prompt_execution_tab",
                "test_init_creates_ui_components",
                "test_update_managers_sets_managers",
                "test_load_prompt_sets_text",
                "test_load_prompt_handles_missing_manager",
                "test_update_execution_mode_updates_ui",
                "test_load_prompt_data",
                "test_exclusion_list_management",
                "test_execute_prompt_direct_mode",
                "test_execute_prompt_cycle_mode",
                "test_save_prompt_with_valid_manager",
                "test_save_prompt_with_missing_manager",
                "test_reset_prompts_with_valid_manager",
                "test_reset_prompts_with_missing_manager"
            ],
            "classes": {},
            "routes": [],
            "complexity": 17
        },
        "tests\\isolated\\conftest.py": {
            "functions": [
                "qapp"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "tests\\integration\\test_community_integration.py": {
            "functions": [
                "setUpClass",
                "test_error_handling",
                "tearDownClass"
            ],
            "classes": {
                "TestCommunityIntegration": [
                    "setUpClass",
                    "test_error_handling",
                    "tearDownClass"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "tests\\isolated\\test_dreamscape_generation_tab.py": {
            "functions": [
                "mock_services",
                "test_env",
                "__init__",
                "init_ui",
                "refresh_episode_list",
                "load_episode_content",
                "_update_ui_for_generation",
                "share_to_discord",
                "save_context_schedule",
                "load_context_schedule",
                "refresh_context_memory",
                "setup",
                "test_episode_interaction_workflow",
                "test_filter_context_memory"
            ],
            "classes": {
                "TestDreamscapeGenerationTab": [
                    "setup",
                    "test_episode_interaction_workflow",
                    "test_filter_context_memory"
                ]
            },
            "routes": [],
            "complexity": 17
        },
        "tests\\integration\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\mocks\\chatgpt_automation\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\mocks\\GUI\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\integration\\test_platform_integration.py": {
            "functions": [
                "setup"
            ],
            "classes": {
                "TestPlatformIntegration": [
                    "setup"
                ]
            },
            "routes": [],
            "complexity": 2
        },
        "tests\\isolated\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\mocks\\chatgpt_automation\\views\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\mocks\\chatgpt_automation\\views\\file_browser_widget.py": {
            "functions": [
                "__init__",
                "get_path",
                "set_path"
            ],
            "classes": {
                "FileBrowserWidget": [
                    "__init__",
                    "get_path",
                    "set_path"
                ]
            },
            "routes": [],
            "complexity": 6
        },
        "tests\\mocks\\GUI\\GuiHelpers.py": {
            "functions": [
                "create_button",
                "create_label",
                "create_text_edit",
                "create_line_edit",
                "create_combo_box",
                "create_checkbox",
                "create_list_widget"
            ],
            "classes": {
                "GuiHelpers": [
                    "create_button",
                    "create_label",
                    "create_text_edit",
                    "create_line_edit",
                    "create_combo_box",
                    "create_checkbox",
                    "create_list_widget"
                ]
            },
            "routes": [],
            "complexity": 14
        },
        "tests\\performance\\test_performance.py": {
            "functions": [
                "setup",
                "measure_execution_time",
                "test_04_memory_usage_performance",
                "test_09_cache_performance"
            ],
            "classes": {
                "TestPerformance": [
                    "setup",
                    "measure_execution_time",
                    "test_04_memory_usage_performance",
                    "test_09_cache_performance"
                ]
            },
            "routes": [],
            "complexity": 8
        },
        "tests\\performance\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\test_logging\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\test_logging\\test_async_dispatcher.py": {
            "functions": [
                "setUp",
                "tearDown",
                "test_dispatch_success",
                "test_dispatch_queue_full",
                "test_shutdown",
                "test_error_handling",
                "test_multiple_dispatches",
                "failing_callback"
            ],
            "classes": {
                "TestAsyncDispatcher": [
                    "setUp",
                    "tearDown",
                    "test_dispatch_success",
                    "test_dispatch_queue_full",
                    "test_shutdown",
                    "test_error_handling",
                    "test_multiple_dispatches"
                ]
            },
            "routes": [],
            "complexity": 15
        },
        "tests\\test_logging\\test_composite_logger.py": {
            "functions": [
                "__init__",
                "log",
                "log_error",
                "log_debug",
                "log_event",
                "log_system_event",
                "setUp",
                "tearDown",
                "test_log_distribution",
                "test_error_handling",
                "test_logger_management",
                "test_all_log_types",
                "test_shutdown",
                "failing_logger"
            ],
            "classes": {
                "MockLogger": [
                    "__init__",
                    "log",
                    "log_error",
                    "log_debug",
                    "log_event",
                    "log_system_event"
                ],
                "TestCompositeLogger": [
                    "setUp",
                    "tearDown",
                    "test_log_distribution",
                    "test_error_handling",
                    "test_logger_management",
                    "test_all_log_types",
                    "test_shutdown"
                ]
            },
            "routes": [],
            "complexity": 27
        },
        "utils\\ai_output_logger.py": {
            "functions": [
                "log_ai_output"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "tests\\unit\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "tests\\test_logging\\test_logger_factory.py": {
            "functions": [
                "setUp",
                "test_create_console_logger",
                "test_create_file_logger",
                "test_create_discord_logger",
                "test_create_composite_logger",
                "test_fallback_to_console",
                "test_invalid_logger_type",
                "test_logger_initialization_error",
                "test_empty_logger_list"
            ],
            "classes": {
                "TestLoggerFactory": [
                    "setUp",
                    "test_create_console_logger",
                    "test_create_file_logger",
                    "test_create_discord_logger",
                    "test_create_composite_logger",
                    "test_fallback_to_console",
                    "test_invalid_logger_type",
                    "test_logger_initialization_error",
                    "test_empty_logger_list"
                ]
            },
            "routes": [],
            "complexity": 18
        },
        "utils\\cookie_manager.py": {
            "functions": [
                "__init__",
                "_get_cookie_path",
                "load_cookies",
                "save_cookies",
                "wait_for_manual_login"
            ],
            "classes": {
                "CookieManager": [
                    "__init__",
                    "_get_cookie_path",
                    "load_cookies",
                    "save_cookies",
                    "wait_for_manual_login"
                ]
            },
            "routes": [],
            "complexity": 10
        },
        "utils\\emoji_cleaner.py": {
            "functions": [
                "remove_emojis",
                "clean_file",
                "clean_directory"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "tests\\unit\\test_dreamscape_generation_tab.py": {
            "functions": [
                "setUpClass",
                "setUp",
                "tearDown",
                "test_init_services",
                "test_ui_initialization",
                "test_log_output",
                "test_refresh_episode_list",
                "test_share_to_discord",
                "test_generate_dreamscape_episodes",
                "test_validate_required_services",
                "test_confirm_generation",
                "test_update_ui_for_generation",
                "test_get_schedule_interval",
                "test_auto_select_dreamscape_chat",
                "test_load_schedule_settings",
                "tearDownClass"
            ],
            "classes": {
                "TestDreamscapeGenerationTab": [
                    "setUpClass",
                    "setUp",
                    "tearDown",
                    "test_init_services",
                    "test_ui_initialization",
                    "test_log_output",
                    "test_refresh_episode_list",
                    "test_share_to_discord",
                    "test_generate_dreamscape_episodes",
                    "test_validate_required_services",
                    "test_confirm_generation",
                    "test_update_ui_for_generation",
                    "test_get_schedule_interval",
                    "test_auto_select_dreamscape_chat",
                    "test_load_schedule_settings",
                    "tearDownClass"
                ]
            },
            "routes": [
                {
                    "function": "test_refresh_episode_list",
                    "method": "PATCH",
                    "path": "os.path.exists"
                },
                {
                    "function": "test_refresh_episode_list",
                    "method": "PATCH",
                    "path": "os.listdir"
                },
                {
                    "function": "test_generate_dreamscape_episodes",
                    "method": "PATCH",
                    "path": "asyncio.create_task"
                }
            ],
            "complexity": 32
        },
        "utils\\driver_factory.py": {
            "functions": [
                "create_driver"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "utils\\filesystem.py": {
            "functions": [
                "sanitize_filename",
                "get_project_root",
                "ensure_directory_exists"
            ],
            "classes": {},
            "routes": [],
            "complexity": 3
        },
        "utils\\helpers.py": {
            "functions": [
                "sanitize_filename"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "utils\\io.py": {
            "functions": [
                "read_file",
                "write_file",
                "read_json",
                "write_json"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "utils\\json_paths.py": {
            "functions": [
                "get_path"
            ],
            "classes": {
                "JsonPaths": [
                    "get_path"
                ]
            },
            "routes": [],
            "complexity": 2
        },
        "utils\\prompt_tuner.py": {
            "functions": [
                "__init__",
                "load_reinforcement_feedback",
                "analyze_feedback",
                "tune_prompt"
            ],
            "classes": {
                "PromptTuner": [
                    "__init__",
                    "load_reinforcement_feedback",
                    "analyze_feedback",
                    "tune_prompt"
                ]
            },
            "routes": [],
            "complexity": 8
        },
        "utils\\nltk_init.py": {
            "functions": [
                "ensure_nltk_data"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "utils\\qasync_event_loop_manager.py": {
            "functions": [
                "__init__",
                "start",
                "schedule_task",
                "_shutdown_handler",
                "shutdown"
            ],
            "classes": {
                "QAsyncEventLoopManager": [
                    "__init__",
                    "start",
                    "schedule_task",
                    "_shutdown_handler",
                    "shutdown"
                ]
            },
            "routes": [],
            "complexity": 10
        },
        "utils\\logging_utils.py": {
            "functions": [
                "write_json_log",
                "log_success",
                "log_error",
                "setup_basic_logging"
            ],
            "classes": {},
            "routes": [],
            "complexity": 4
        },
        "utils\\rate_limit_manager.py": {
            "functions": [
                "__init__",
                "_initialize_default_limits",
                "get_rate_limits",
                "adjust_rate_limit",
                "adjust_from_failures"
            ],
            "classes": {
                "RateLimitManager": [
                    "__init__",
                    "_initialize_default_limits",
                    "get_rate_limits",
                    "adjust_rate_limit",
                    "adjust_from_failures"
                ]
            },
            "routes": [],
            "complexity": 10
        },
        "utils\\run_summary.py": {
            "functions": [
                "generate_full_run_json",
                "sanitize_filename"
            ],
            "classes": {},
            "routes": [],
            "complexity": 2
        },
        "utils\\proxy_utils.py": {
            "functions": [
                "get_random_proxy"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "utils\\reinforcement_trainer.py": {
            "functions": [
                "process_feedback"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "utils\\SentimentAnalyzer.py": {
            "functions": [
                "__init__",
                "load_lexicon",
                "analyze",
                "analyze_batch",
                "analyze_with_context",
                "analyze_trend",
                "get_keyword_sentiment",
                "analyze_feedback_trends",
                "_generate_trend_visualization",
                "extract_topics",
                "add_custom_keywords",
                "load_custom_lexicon"
            ],
            "classes": {
                "SentimentAnalyzer": [
                    "__init__",
                    "load_lexicon",
                    "analyze",
                    "analyze_batch",
                    "analyze_with_context",
                    "analyze_trend",
                    "get_keyword_sentiment",
                    "analyze_feedback_trends",
                    "_generate_trend_visualization",
                    "extract_topics",
                    "add_custom_keywords",
                    "load_custom_lexicon"
                ]
            },
            "routes": [],
            "complexity": 24
        },
        "utils\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "utils\\web\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "utils\\ai\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "utils\\ua_utils.py": {
            "functions": [
                "get_random_user_agent"
            ],
            "classes": {},
            "routes": [],
            "complexity": 1
        },
        "utils\\signal_dispatcher.py": {
            "functions": [
                "__init__",
                "emit_log_output",
                "emit_prompt_executed",
                "emit_dreamscape_generated",
                "emit_discord_event",
                "emit_task_started",
                "emit_task_progress",
                "emit_task_completed",
                "emit_task_failed",
                "emit_status_update",
                "emit_append_output",
                "emit_discord_log",
                "emit_automation_result",
                "register_listener",
                "unregister_listener"
            ],
            "classes": {
                "SignalDispatcher": [
                    "__init__",
                    "emit_log_output",
                    "emit_prompt_executed",
                    "emit_dreamscape_generated",
                    "emit_discord_event",
                    "emit_task_started",
                    "emit_task_progress",
                    "emit_task_completed",
                    "emit_task_failed",
                    "emit_status_update",
                    "emit_append_output",
                    "emit_discord_log",
                    "emit_automation_result",
                    "register_listener",
                    "unregister_listener"
                ]
            },
            "routes": [],
            "complexity": 30
        },
        "web\\__init__.py": {
            "functions": [],
            "classes": {},
            "routes": [],
            "complexity": 0
        },
        "web\\app.py": {
            "functions": [
                "create_app",
                "start_flask_app",
                "index",
                "status"
            ],
            "classes": {},
            "routes": [
                {
                    "function": "index",
                    "method": "ROUTE",
                    "path": "/"
                },
                {
                    "function": "status",
                    "method": "ROUTE",
                    "path": "/api/status"
                }
            ],
            "complexity": 4
        }
    }
}