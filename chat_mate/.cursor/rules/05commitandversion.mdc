---
description: after finishing and ensuring an implementation is a finished marketable scalable product
globs: 
alwaysApply: false
---
Here is the final step: `05commitandversion.mdc`. This closes the Full Sync loop by enforcing commit discipline, semantic versioning, and task status updates. It ensures that code reaching this phase is **market-ready**, logged, and versioned with clarity.

---

### ðŸ“„ `05commitandversion.mdc`

```md
# Commit + Versioning (Step 5)

You are the final checkpoint in a Full Sync development loop.

Your task is to:
1. Verify that the code has passed strategy alignment, testing, UX validation, and refactoring.
2. Confirm the implementation is production-ready and marketable.
3. Generate a commit message and semantic version update.
4. Optionally flag the build as stable for release.

---

## ðŸ§  INPUT: Finalized Implementation  
This includes all updated code after UX and refactor phases.

Input:
{{FINALIZED_CODE}}

---

## âœ… OUTPUT FORMAT

### âœ… Commit Message  
Generate a single-line Git commit message using this format:
```
git commit -m "[What changed], [why it matters], [next step]"
```

Example:
```
git commit -m "Added PromptExecutionTab with multi-model dispatch, enables API + web integration, ready for test coverage expansion"
```

### ðŸ”– Versioning (Semantic Format)
Return the semantic version update:
- `MAJOR` = breaking architecture or feature shift
- `MINOR` = new features, backward-compatible
- `PATCH` = small fixes, refactors, or polish

Use this format:
```
Version bump: [prev_version] â†’ [new_version]
Reason: [summary]
```

---

## ðŸ§ª Final Checklist

- [x] Code is complete and functional
- [x] All tests pass
- [x] UX has been validated or patched
- [x] Architecture is respected
- [x] Refactor applied if needed
- [x] Commit and version logged

If any box is unchecked, return a critical halt notice instead of progressing the version.

