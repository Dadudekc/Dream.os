{
    "auto_test_maker.py": {
        "language": ".py",
        "functions": [
            "is_testable_python_file",
            "run_cursor_test",
            "append_log",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "dependency_dashboard.py": {
        "language": ".py",
        "functions": [
            "load_latest_data",
            "update_network_graph",
            "update_hotspots_chart",
            "display_module_details"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "analyze_test_coverage.py": {
        "language": ".py",
        "functions": [
            "parse_args",
            "run_coverage_analysis",
            "find_python_files",
            "generate_mock_coverage_data",
            "analyze_coverage_data",
            "print_coverage_report",
            "visualize_coverage",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 8
    },
    "autonomous_loop.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "start",
            "stop",
            "pause",
            "resume",
            "_watcher_loop",
            "_worker_loop",
            "_execute_task",
            "_execute_cursor_task",
            "_execute_runner_task",
            "_convert_to_task_runner_format",
            "_move_file",
            "generate_task_from_web",
            "generate_task_from_project",
            "generate_task_from_file",
            "get_stats",
            "_format_time"
        ],
        "classes": {
            "AutonomousLoop": {
                "methods": [
                    "__init__",
                    "start",
                    "stop",
                    "pause",
                    "resume",
                    "_watcher_loop",
                    "_worker_loop",
                    "_execute_task",
                    "_execute_cursor_task",
                    "_execute_runner_task",
                    "_convert_to_task_runner_format",
                    "_move_file",
                    "generate_task_from_web",
                    "generate_task_from_project",
                    "generate_task_from_file",
                    "get_stats",
                    "_format_time"
                ],
                "docstring": "Watches for new tasks and executes them automatically.\nAlso provides mechanisms to generate new tasks from various inputs.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 35
    },
    "chat_mate.py": {
        "language": ".py",
        "functions": [
            "setup_logging",
            "get_driver",
            "save_cookies",
            "load_cookies",
            "is_logged_in",
            "force_model_in_url",
            "get_chat_titles",
            "send_prompt_to_chat",
            "get_latest_response",
            "generate_devlog",
            "save_rough_draft",
            "archive_chat",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 13
    },
    "demo_orchestration.py": {
        "language": ".py",
        "functions": [
            "ensure_directories",
            "create_demo_templates",
            "create_demo_tasks",
            "run_orchestration",
            "main",
            "on_task_execution_completed",
            "on_task_requeued"
        ],
        "classes": {},
        "routes": [],
        "complexity": 7
    },
    "debug_and_run.py": {
        "language": ".py",
        "functions": [
            "setup_logging",
            "run_command",
            "check_environment",
            "check_dependencies",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "dreamscape_automation.py": {
        "language": ".py",
        "functions": [
            "initialize_services",
            "get_excluded_chats",
            "get_available_chats",
            "get_previously_processed_chats",
            "process_chat",
            "extract_episode_metadata",
            "send_to_discord",
            "save_archive",
            "analyze_episode_chain",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 10
    },
    "conftest.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cursor_dispatcher.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "_find_cursor_binary",
            "create_prompt_file",
            "create_prompt_json",
            "execute_prompt",
            "dispatch_task",
            "_get_template_path",
            "_save_execution_result",
            "_extract_generated_files"
        ],
        "classes": {
            "CursorDispatcher": {
                "methods": [
                    "__init__",
                    "_find_cursor_binary",
                    "create_prompt_file",
                    "create_prompt_json",
                    "execute_prompt",
                    "dispatch_task",
                    "_get_template_path",
                    "_save_execution_result",
                    "_extract_generated_files"
                ],
                "docstring": "Dispatches prompt tasks to Cursor by creating prompt files and executing \nthem via the Cursor CLI.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 19
    },
    "DreamOsMainWindow_full.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_template",
            "render_template",
            "get_available_templates",
            "__init__",
            "run_tests",
            "run_specific_test",
            "get_test_coverage",
            "__init__",
            "get_status",
            "stage_file",
            "commit",
            "get_current_branch",
            "create_branch",
            "checkout_branch",
            "__init__",
            "execute_command",
            "get_status",
            "__init__",
            "validate_all_tabs",
            "_validate_tab_factory",
            "_create_service_fallbacks",
            "get_validation_status",
            "get_error_details",
            "__init__",
            "_load_strategies",
            "handle_stall",
            "execute_recovery_action",
            "_categorize_error",
            "_update_recovery_metrics",
            "_update_performance_metrics",
            "__init__",
            "_load_metrics",
            "_save_metrics",
            "update_task_metrics",
            "get_task_metrics",
            "get_global_metrics",
            "_get_tasks_by_status",
            "_get_hourly_stats",
            "__init__",
            "_init_ui",
            "execute_prompt",
            "_execute_with_ui_update",
            "log_message",
            "customEvent",
            "__init__",
            "create",
            "_validate_services",
            "__init__",
            "_init_ui",
            "_refresh_status",
            "_retry_failed_services",
            "_validate_all_tabs",
            "log_message",
            "__init__",
            "_initialize_services",
            "_init_ui",
            "_add_tab_safely",
            "_retry_load_tab",
            "_retry_initialization",
            "_retry_load_cursor_tab",
            "_diagnose_services",
            "_handle_queued_task",
            "_on_tab_changed",
            "_update_status",
            "execute_task",
            "on_stall"
        ],
        "classes": {
            "MockTemplateManager": {
                "methods": [
                    "__init__",
                    "get_template",
                    "render_template",
                    "get_available_templates"
                ],
                "docstring": "Mock implementation of TemplateManager that won't crash when templates can't be loaded.",
                "base_classes": []
            },
            "MockTestRunner": {
                "methods": [
                    "__init__",
                    "run_tests",
                    "run_specific_test",
                    "get_test_coverage"
                ],
                "docstring": "Mock implementation of TestRunner for development.",
                "base_classes": []
            },
            "MockGitManager": {
                "methods": [
                    "__init__",
                    "get_status",
                    "stage_file",
                    "commit",
                    "get_current_branch",
                    "create_branch",
                    "checkout_branch"
                ],
                "docstring": "Mock implementation of GitManager for development.",
                "base_classes": []
            },
            "MockCursorDispatcher": {
                "methods": [
                    "__init__",
                    "execute_command",
                    "get_status"
                ],
                "docstring": "Mock implementation of CursorDispatcher for development.",
                "base_classes": []
            },
            "TabValidatorService": {
                "methods": [
                    "__init__",
                    "validate_all_tabs",
                    "_validate_tab_factory",
                    "_create_service_fallbacks",
                    "get_validation_status",
                    "get_error_details"
                ],
                "docstring": "Enhanced service for validating PyQt tab constructors and dependencies.\nProvides graceful degradation and detailed error reporting.",
                "base_classes": []
            },
            "RecoveryEngine": {
                "methods": [
                    "__init__",
                    "_load_strategies",
                    "handle_stall",
                    "execute_recovery_action",
                    "_categorize_error",
                    "_update_recovery_metrics",
                    "_update_performance_metrics"
                ],
                "docstring": "Centralized engine for handling task recovery and stall detection.\n\nEncapsulates recovery logic including:\n- Stall detection and recovery action selection\n- Execution of recovery actions via CursorSessionManager\n- Metrics tracking and strategy performance updates",
                "base_classes": []
            },
            "MetricsService": {
                "methods": [
                    "__init__",
                    "_load_metrics",
                    "_save_metrics",
                    "update_task_metrics",
                    "get_task_metrics",
                    "get_global_metrics",
                    "_get_tasks_by_status",
                    "_get_hourly_stats"
                ],
                "docstring": "Thread-safe service for tracking and analyzing task execution metrics.\nPersists data to disk for historical analysis.",
                "base_classes": []
            },
            "CursorExecutionTab": {
                "methods": [
                    "__init__",
                    "_init_ui",
                    "execute_prompt",
                    "_execute_with_ui_update",
                    "log_message",
                    "customEvent"
                ],
                "docstring": "Real implementation of CursorExecutionTab with UI and logic.\nIncludes error handling and recovery integration.",
                "base_classes": [
                    "QWidget"
                ]
            },
            "ExecutionCompletedEvent": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Custom event for notifying UI of task completion.",
                "base_classes": [
                    "QEvent"
                ]
            },
            "CursorExecutionTabFactory": {
                "methods": [
                    "create",
                    "_validate_services"
                ],
                "docstring": "Factory for creating CursorExecutionTab instances with validated dependencies.",
                "base_classes": []
            },
            "ServiceDiagnosticTab": {
                "methods": [
                    "__init__",
                    "_init_ui",
                    "_refresh_status",
                    "_retry_failed_services",
                    "_validate_all_tabs",
                    "log_message"
                ],
                "docstring": "Diagnostic tab for monitoring service status and attempting service recovery.\nDisplays all required services, their status, and provides retry options.",
                "base_classes": [
                    "QWidget"
                ]
            },
            "DreamOsMainWindow": {
                "methods": [
                    "__init__",
                    "_initialize_services",
                    "_init_ui",
                    "_add_tab_safely",
                    "_retry_load_tab",
                    "_retry_initialization",
                    "_retry_load_cursor_tab",
                    "_diagnose_services",
                    "_handle_queued_task",
                    "_on_tab_changed",
                    "_update_status"
                ],
                "docstring": null,
                "base_classes": [
                    "QMainWindow"
                ]
            }
        },
        "routes": [],
        "complexity": 132
    },
    "code_metrics.py": {
        "language": ".py",
        "functions": [
            "get_code_metrics",
            "__init__",
            "analyze_file",
            "_calculate_complexity",
            "_calculate_halstead",
            "_calculate_maintainability",
            "_get_test_coverage",
            "analyze_directory"
        ],
        "classes": {
            "CodeMetricsAnalyzer": {
                "methods": [
                    "__init__",
                    "analyze_file",
                    "_calculate_complexity",
                    "_calculate_halstead",
                    "_calculate_maintainability",
                    "_get_test_coverage",
                    "analyze_directory"
                ],
                "docstring": "Advanced code metrics analyzer for Python modules.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 15
    },
    "generate_dependency_graph.py": {
        "language": ".py",
        "functions": [
            "load_cache",
            "save_cache",
            "file_hash",
            "analyze_file",
            "get_git_metadata",
            "get_all_git_metadata",
            "calculate_hotspot_score",
            "is_virtual_env_path",
            "get_module_name",
            "resolve_prefix",
            "shorten",
            "generate_dependency_graph",
            "export_graph_to_json",
            "generate_interactive_graph",
            "__init__",
            "visit_ClassDef",
            "visit_FunctionDef",
            "visit_If",
            "visit_Import",
            "visit_ImportFrom"
        ],
        "classes": {
            "CodeAnalyzer": {
                "methods": [
                    "__init__",
                    "visit_ClassDef",
                    "visit_FunctionDef",
                    "visit_If",
                    "visit_Import",
                    "visit_ImportFrom"
                ],
                "docstring": "Analyzes Python code for semantic information.",
                "base_classes": [
                    "ast.NodeVisitor"
                ]
            }
        },
        "routes": [],
        "complexity": 26
    },
    "extract_unused_code_safely.py": {
        "language": ".py",
        "functions": [
            "print_info",
            "print_error",
            "print_success",
            "is_vulture_available",
            "install_vulture",
            "run_vulture",
            "group_vulture_output",
            "detect_full_unused_files",
            "basic_ast_scan",
            "menu_choice",
            "interactive_delete_menu",
            "move_to_trash",
            "interactive_menu",
            "extract_snippet",
            "is_python_file",
            "scan_ast_for_unused_defs"
        ],
        "classes": {},
        "routes": [],
        "complexity": 16
    },
    "generate_missing_tests.py": {
        "language": ".py",
        "functions": [
            "find_module_dirs",
            "module_to_test_filename",
            "parse_args",
            "load_cache",
            "save_cache",
            "find_python_modules",
            "find_existing_tests",
            "analyze_module_content",
            "generate_test_template",
            "generate_test_with_ollama",
            "format_with_black",
            "create_test_file",
            "run_tests",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 14
    },
    "generate_jinja_templates.py": {
        "language": ".py",
        "functions": [
            "generate_templates"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "generate_test_tasks.py": {
        "language": ".py",
        "functions": [
            "generate_service_tasks",
            "generate_web_tasks",
            "generate_project_tasks",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "minimal_test.py": {
        "language": ".py",
        "functions": [
            "test_imports"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "main.py": {
        "language": ".py",
        "functions": [
            "setup_logging",
            "load_config",
            "initialize_system",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "run_demo.py": {
        "language": ".py",
        "functions": [
            "ensure_resources",
            "create_demo_templates",
            "create_demo_resources",
            "run_demo",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "overnight_prompt_queue.py": {
        "language": ".py",
        "functions": [
            "load_calibrated_coords",
            "save_calibrated_coords",
            "calibrate_coordinate",
            "focus_cursor_window",
            "click_coordinate",
            "type_prompt_and_send",
            "wait_for_generation",
            "retrieve_context",
            "post_execution_review",
            "run_prompt_queue",
            "parse_args",
            "main",
            "__init__",
            "output"
        ],
        "classes": {
            "OutputHandler": {
                "methods": [
                    "__init__",
                    "output"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "run_app.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "run_dreamscape_discord.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "run_dreamscape_tests.py": {
        "language": ".py",
        "functions": [
            "run_tests",
            "run_tests_with_coverage"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "run_full_sync.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "run_dream_os.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "run_simple.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "scheduled_dreamscape.py": {
        "language": ".py",
        "functions": [
            "send_discord_status",
            "get_chain_status",
            "format_status_message",
            "run_dreamscape_automation",
            "calculate_next_run_time",
            "save_schedule_state",
            "load_schedule_state",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 8
    },
    "setup.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "simulate_orchestration_cycle.py": {
        "language": ".py",
        "functions": [
            "print_simulation_summary",
            "main",
            "__init__",
            "scan",
            "register_completion_callback",
            "__init__",
            "add_task",
            "execute_task",
            "_generate_service_output",
            "_generate_ui_output",
            "_generate_scanner_output",
            "requeue_task",
            "register_completion_callback",
            "get_all_tasks",
            "__init__",
            "_on_scan_completed",
            "_on_task_completed",
            "_emit_event",
            "register_event_handler",
            "load_templates",
            "generate_tasks_from_templates",
            "execute_tasks",
            "validate_tasks",
            "run_simulation",
            "log_event",
            "handler"
        ],
        "classes": {
            "SimulatedScanner": {
                "methods": [
                    "__init__",
                    "scan",
                    "register_completion_callback"
                ],
                "docstring": "Simulated version of ProjectContextScanner that provides mock project data.",
                "base_classes": []
            },
            "SimulatedExecutionService": {
                "methods": [
                    "__init__",
                    "add_task",
                    "execute_task",
                    "_generate_service_output",
                    "_generate_ui_output",
                    "_generate_scanner_output",
                    "requeue_task",
                    "register_completion_callback",
                    "get_all_tasks"
                ],
                "docstring": "Simulated version of PromptExecutionService that handles task execution simulation.",
                "base_classes": []
            },
            "SimulatedOrchestrator": {
                "methods": [
                    "__init__",
                    "_on_scan_completed",
                    "_on_task_completed",
                    "_emit_event",
                    "register_event_handler",
                    "load_templates",
                    "generate_tasks_from_templates",
                    "execute_tasks",
                    "validate_tasks",
                    "run_simulation"
                ],
                "docstring": "Simulated version of PromptCycleOrchestrator that orchestrates the whole process.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 48
    },
    "start_prompt_orchestrator.py": {
        "language": ".py",
        "functions": [
            "ensure_directories",
            "start_task_watcher",
            "start_dream_os",
            "monitor_processes",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "task_runner.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "to_dict",
            "__init__",
            "execute_task",
            "execute_tasks",
            "filter_tasks",
            "generate_report",
            "save_report",
            "print_summary",
            "_handle_orchestrator_task",
            "_handle_execution_service_task",
            "_handle_cursor_dispatcher_task",
            "_handle_prompt_renderer_task",
            "_handle_feedback_engine_task",
            "_handle_memory_manager_task",
            "_handle_test_generation_task",
            "_handle_ui_task",
            "_handle_path_manager_task",
            "_handle_manual_task_add",
            "_handle_safe_execution_task",
            "_handle_release_task",
            "safe_execute",
            "failing_function"
        ],
        "classes": {
            "TaskResult": {
                "methods": [
                    "__init__",
                    "to_dict"
                ],
                "docstring": "Represents the result of a task execution.",
                "base_classes": []
            },
            "TaskExecutor": {
                "methods": [
                    "__init__",
                    "execute_task",
                    "execute_tasks",
                    "filter_tasks",
                    "generate_report",
                    "save_report",
                    "print_summary",
                    "_handle_orchestrator_task",
                    "_handle_execution_service_task",
                    "_handle_cursor_dispatcher_task",
                    "_handle_prompt_renderer_task",
                    "_handle_feedback_engine_task",
                    "_handle_memory_manager_task",
                    "_handle_test_generation_task",
                    "_handle_ui_task",
                    "_handle_path_manager_task",
                    "_handle_manual_task_add",
                    "_handle_safe_execution_task",
                    "_handle_release_task"
                ],
                "docstring": "Executes test tasks using the appropriate handlers.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 45
    },
    "test_config_import.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "test_dreamscape_tab_integration.py": {
        "language": ".py",
        "functions": [
            "qapp",
            "mock_services",
            "mock_chat_data",
            "patched_service_initializer",
            "dreamscape_tab",
            "test_full_episode_generation_workflow",
            "test_service_interaction",
            "test_ui_state_during_generation",
            "test_error_handling",
            "test_share_to_discord_flow",
            "generate_episode_side_effect"
        ],
        "classes": {},
        "routes": [],
        "complexity": 11
    },
    "test_dreamscape_tab_unit.py": {
        "language": ".py",
        "functions": [
            "qapp",
            "mock_services",
            "mock_chat_data",
            "mock_episode_content",
            "patched_service_initializer",
            "dreamscape_tab",
            "test_tab_initialization",
            "test_load_available_chats",
            "test_load_episode_list",
            "test_load_selected_episode",
            "test_update_status",
            "test_generate_episode_no_chat_selected",
            "test_progress_bar_updates"
        ],
        "classes": {},
        "routes": [],
        "complexity": 13
    },
    "test_path.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "test_dreamscape_ui_components.py": {
        "language": ".py",
        "functions": [
            "qapp",
            "mock_services",
            "patched_service_initializer",
            "dreamscape_tab",
            "ui_manager",
            "test_button_properties",
            "test_combo_box_properties",
            "test_episode_list_properties",
            "test_generate_all_checkbox",
            "test_progress_bar_properties",
            "test_episode_viewer_properties",
            "test_button_layout",
            "test_ui_manager_create_widgets",
            "test_ui_manager_layout_helpers",
            "test_ui_splitter_arrangement",
            "test_ui_components_disabled_during_generation",
            "test_ui_responsiveness"
        ],
        "classes": {},
        "routes": [],
        "complexity": 17
    },
    "test_imports.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "test_pyqt.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "APPS\\products\\code_quality_dashboard\\setup.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "APPS\\products\\code_quality_dashboard\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "APPS\\products\\code_quality_dashboard\\code_quality_dashboard\\dashboard.py": {
        "language": ".py",
        "functions": [
            "get_file_analysis",
            "__init__",
            "is_ready",
            "analyze_file",
            "get_current_metrics",
            "record_snapshot",
            "get_trends",
            "_calculate_complexity",
            "_calculate_maintainability"
        ],
        "classes": {
            "FileAnalysis": {
                "methods": [],
                "docstring": "Protocol defining the interface we expect from FileAnalysis",
                "base_classes": [
                    "Protocol"
                ]
            },
            "Scanner": {
                "methods": [
                    "get_file_analysis"
                ],
                "docstring": "Protocol defining the interface we expect from scanner",
                "base_classes": [
                    "Protocol"
                ]
            },
            "Dashboard": {
                "methods": [
                    "__init__",
                    "is_ready",
                    "analyze_file",
                    "get_current_metrics",
                    "record_snapshot",
                    "get_trends",
                    "_calculate_complexity",
                    "_calculate_maintainability"
                ],
                "docstring": "Core dashboard class that provides code quality metrics and trend analysis\nIntegrates with Dream.OS scanner for deep code intelligence",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "APPS\\products\\code_quality_dashboard\\tests\\conftest.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "APPS\\products\\code_quality_dashboard\\tests\\test_dashboard.py": {
        "language": ".py",
        "functions": [
            "mock_analysis",
            "mock_scanner",
            "dashboard",
            "test_dashboard_initializes_empty",
            "test_dashboard_requires_scanner",
            "test_dashboard_can_analyze_file",
            "test_dashboard_trend_tracking",
            "test_dashboard_handles_invalid_file",
            "test_dashboard_ready_state_changes"
        ],
        "classes": {},
        "routes": [],
        "complexity": 9
    },
    "APPS\\products\\code_quality_dashboard\\tests\\fixtures\\simple.py": {
        "language": ".py",
        "functions": [
            "calculate_fibonacci",
            "__init__",
            "process"
        ],
        "classes": {
            "SimpleClass": {
                "methods": [
                    "__init__",
                    "process"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 5
    },
    "APPS\\products\\code_quality_dashboard\\tests\\mocks\\scanner\\models.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "APPS\\products\\code_quality_dashboard\\tests\\mocks\\scanner\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\CommerceHeuristics\\2023.3.30.1305\\cart_product_extraction.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "APPS\\products\\code_quality_dashboard\\tests\\mocks\\scanner\\core\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\service-worker.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\browser\\js\\assistantPopup.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\browser\\js\\ch-settings.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\browser\\js\\check-cookies.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\browser\\js\\content-privateApi.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\browser\\js\\content-util.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\browser\\js\\download-banner.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\browser\\js\\express.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\browser\\js\\failToast.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\browser\\js\\frame.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\browser\\js\\frameUI.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\browser\\js\\local-fte.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\browser\\js\\lsCopy.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\browser\\js\\options.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\browser\\js\\progress.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\browser\\js\\popup.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\browser\\js\\tab-storage.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\browser\\js\\successToast.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\browser\\js\\offscreen\\Mutex.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\browser\\js\\offscreen\\offscreen.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\browser\\js\\offscreen\\offscreenTaskManager.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\browser\\js\\offscreen\\offscrenUtil.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\browser\\js\\viewer\\BookmarkUtils.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\browser\\js\\viewer\\fileUtil.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\browser\\js\\viewer\\index.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\browser\\js\\viewer\\localFileSignInRedirection.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\browser\\js\\viewer\\LruUtil.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\browser\\js\\viewer\\ResponseHeaders.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\browser\\js\\viewer\\signInAdobeYolo.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\browser\\js\\viewer\\signInHandler.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\browser\\js\\viewer\\signInUtils.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\common\\analytics.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\common\\constant.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\common\\expressindexedDB.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\common\\indexDB.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\common\\local-storage.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\common\\locale.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\common\\loggingApi.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\common\\util.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\acrobat-content-script.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\ch-content-script-dend.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\ch-content-script.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\content-script-utils.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\content-util.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\detect-embedded.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\express-content-script.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\gdrive-download-page-content-script.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\gdrive-content-script.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\get-html.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\gmail-content-script.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\injectAIMarker.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\injectBannerIframe.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\injectCopyLSIframe.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\express\\express-fte-utils.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\express\\express-fte.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\express\\express-master-content-script.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\gdrive\\gdrive-inject.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\gdrive\\get-auth-user.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\gdrive\\state.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\gdrive\\touchpoint-service.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\gdrive\\util.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\gmail\\default-viewership-service.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\gmail\\gmail-inject.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\gmail\\gmail-response-service.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\gmail\\list-view-touch-point-service.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\gmail\\message-view-touch-point-service.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\gmail\\native-viewer-touch-point-service.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\gmail\\state.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\gmail\\util.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\gsuite\\fte-utils.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\gsuite\\util.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\prompts\\ShowOneChild.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\SidePanel\\ActionableCoachmark.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\SidePanel\\AnimateCannedQuestions.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\SidePanel\\AttributionManager.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\SidePanel\\FABManager.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\SidePanel\\GenAIWebpageBlocklist.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\content_scripts\\SidePanel\\GenAIWebpageEligibilityService.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\libs\\jquery-3.1.1.min.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\libs\\jquery-3.1.1.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\libs\\readability.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\resources\\SidePanel\\sidepanel.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\resources\\SidePanel\\sidePanelUpsellSuccess.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\resources\\SidePanel\\sidePanelUtil.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\resources\\SidePanel\\signInSuccess.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\resources\\SidePanel\\upsellService.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\sw_modules\\acro-actions.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\sw_modules\\acro-gstate.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\sw_modules\\acro-web2pdf.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\sw_modules\\acrobatUserDetails.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\sw_modules\\api-util.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\sw_modules\\ch-context-menu.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\sw_modules\\common.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\sw_modules\\communicate.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\sw_modules\\constant.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\sw_modules\\download-manager.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\sw_modules\\express.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\sw_modules\\externalClients.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\sw_modules\\feat.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\sw_modules\\floodgate.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\sw_modules\\force-reset-service.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\sw_modules\\frictionless-handler.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\sw_modules\\googleQueryAnalyzer.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\sw_modules\\handleVersionChecks.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\sw_modules\\hydrate.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\sw_modules\\offscreen-actions.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\sw_modules\\polyfills.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\sw_modules\\private-api.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\sw_modules\\proxy.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\sw_modules\\session.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\sw_modules\\settings.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\sw_modules\\sharepoint-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\sw_modules\\splunkAllowedLogs.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\sw_modules\\TimeoutPromise.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\sw_modules\\user-subscription.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\sw_modules\\util.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\sw_modules\\viewer-module-utils.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cache\\openai_profile\\Default\\Extensions\\efaidnbmnnnibpcajpcglclefindmkaj\\25.3.1.1_0\\sw_modules\\viewer-module.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\analyze_test_coverage.py": {
        "language": ".py",
        "functions": [
            "parse_args",
            "run_coverage_analysis",
            "find_python_files",
            "generate_mock_coverage_data",
            "analyze_coverage_data",
            "print_coverage_report",
            "visualize_coverage",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 8
    },
    "cache\\openai_profile\\Default\\Extensions\\nmmhkkegccagdldgiimedpiccmgmieda\\1.0.0.6_0\\craw_window.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\auto_test_maker.py": {
        "language": ".py",
        "functions": [
            "is_testable_python_file",
            "run_cursor_test",
            "append_log",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "cache\\openai_profile\\Default\\Extensions\\nmmhkkegccagdldgiimedpiccmgmieda\\1.0.0.6_0\\craw_background.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\code_metrics.py": {
        "language": ".py",
        "functions": [
            "get_code_metrics",
            "__init__",
            "analyze_file",
            "_calculate_complexity",
            "_calculate_halstead",
            "_calculate_maintainability",
            "_get_test_coverage",
            "analyze_directory"
        ],
        "classes": {
            "CodeMetricsAnalyzer": {
                "methods": [
                    "__init__",
                    "analyze_file",
                    "_calculate_complexity",
                    "_calculate_halstead",
                    "_calculate_maintainability",
                    "_get_test_coverage",
                    "analyze_directory"
                ],
                "docstring": "Advanced code metrics analyzer for Python modules.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 15
    },
    "chat_mate\\chat_mate.py": {
        "language": ".py",
        "functions": [
            "setup_logging",
            "get_driver",
            "save_cookies",
            "load_cookies",
            "is_logged_in",
            "force_model_in_url",
            "get_chat_titles",
            "send_prompt_to_chat",
            "get_latest_response",
            "generate_devlog",
            "save_rough_draft",
            "archive_chat",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 13
    },
    "chat_mate\\dependency_dashboard.py": {
        "language": ".py",
        "functions": [
            "load_latest_data",
            "update_network_graph",
            "update_hotspots_chart",
            "display_module_details"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "chat_mate\\dreamscape_automation.py": {
        "language": ".py",
        "functions": [
            "initialize_services",
            "get_excluded_chats",
            "get_available_chats",
            "get_previously_processed_chats",
            "process_chat",
            "send_to_discord",
            "save_archive",
            "analyze_episode_chain",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 9
    },
    "chat_mate\\extract_unused_code_safely.py": {
        "language": ".py",
        "functions": [
            "print_info",
            "print_error",
            "print_success",
            "is_vulture_available",
            "install_vulture",
            "run_vulture",
            "group_vulture_output",
            "detect_full_unused_files",
            "basic_ast_scan",
            "menu_choice",
            "interactive_delete_menu",
            "move_to_trash",
            "interactive_menu",
            "extract_snippet",
            "is_python_file",
            "scan_ast_for_unused_defs"
        ],
        "classes": {},
        "routes": [],
        "complexity": 16
    },
    "chat_mate\\generate_dependency_graph.py": {
        "language": ".py",
        "functions": [
            "load_cache",
            "save_cache",
            "file_hash",
            "analyze_file",
            "get_git_metadata",
            "get_all_git_metadata",
            "calculate_hotspot_score",
            "is_virtual_env_path",
            "get_module_name",
            "resolve_prefix",
            "shorten",
            "generate_dependency_graph",
            "export_graph_to_json",
            "generate_interactive_graph",
            "__init__",
            "visit_ClassDef",
            "visit_FunctionDef",
            "visit_If",
            "visit_Import",
            "visit_ImportFrom"
        ],
        "classes": {
            "CodeAnalyzer": {
                "methods": [
                    "__init__",
                    "visit_ClassDef",
                    "visit_FunctionDef",
                    "visit_If",
                    "visit_Import",
                    "visit_ImportFrom"
                ],
                "docstring": "Analyzes Python code for semantic information.",
                "base_classes": [
                    "ast.NodeVisitor"
                ]
            }
        },
        "routes": [],
        "complexity": 26
    },
    "chat_mate\\generate_missing_tests.py": {
        "language": ".py",
        "functions": [
            "parse_args",
            "find_python_modules",
            "find_existing_tests",
            "analyze_module_content",
            "generate_test_template",
            "generate_test_with_ollama",
            "create_test_file",
            "run_tests",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 9
    },
    "chat_mate\\main.py": {
        "language": ".py",
        "functions": [
            "setup_logging",
            "initialize_services",
            "show_error_dialog",
            "run_agent_dispatcher",
            "run_pyqt_gui",
            "run_flask_app",
            "execute_mode",
            "main",
            "flask_thread"
        ],
        "classes": {},
        "routes": [],
        "complexity": 9
    },
    "chat_mate\\overnight_prompt_queue.py": {
        "language": ".py",
        "functions": [
            "load_calibrated_coords",
            "save_calibrated_coords",
            "calibrate_coordinate",
            "focus_cursor_window",
            "click_coordinate",
            "type_prompt_and_send",
            "wait_for_generation",
            "retrieve_context",
            "post_execution_review",
            "run_prompt_queue",
            "parse_args",
            "main",
            "__init__",
            "output"
        ],
        "classes": {
            "OutputHandler": {
                "methods": [
                    "__init__",
                    "output"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "chat_mate\\overnight_test_generator.py": {
        "language": ".py",
        "functions": [
            "is_test_file",
            "contains_testable_code",
            "find_python_files",
            "get_missing_coverage_files",
            "load_json_safe",
            "save_json_safe",
            "call_ollama",
            "generate_test_prompt",
            "generate_coverage_improved_test_prompt",
            "run_test_generation",
            "run_unittest",
            "run_coverage_on_file",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 13
    },
    "chat_mate\\run_dreamscape_discord.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\scheduled_dreamscape.py": {
        "language": ".py",
        "functions": [
            "read_status_file",
            "write_status_file",
            "should_run",
            "count_generated_episodes",
            "get_chain_info",
            "notify_discord",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 7
    },
    "chat_mate\\ProjectScanner.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "_init_tree_sitter_language",
            "analyze_file",
            "_analyze_python",
            "_analyze_rust",
            "_analyze_javascript",
            "__init__",
            "run",
            "__init__",
            "add_task",
            "wait_for_completion",
            "stop_workers",
            "__init__",
            "hash_file",
            "should_exclude",
            "process_file",
            "__init__",
            "load_existing_report",
            "save_report",
            "generate_init_files",
            "load_existing_chatgpt_context",
            "export_chatgpt_context",
            "__init__",
            "load_cache",
            "save_cache",
            "scan_project",
            "_process_file",
            "generate_init_files",
            "export_chatgpt_context",
            "categorize_agents",
            "_maturity_level",
            "_agent_type",
            "_traverse",
            "get_node_text",
            "_traverse"
        ],
        "classes": {
            "LanguageAnalyzer": {
                "methods": [
                    "__init__",
                    "_init_tree_sitter_language",
                    "analyze_file",
                    "_analyze_python",
                    "_analyze_rust",
                    "_analyze_javascript"
                ],
                "docstring": "Handles language-specific code analysis for different programming languages.",
                "base_classes": []
            },
            "BotWorker": {
                "methods": [
                    "__init__",
                    "run"
                ],
                "docstring": "A background worker that pulls file tasks from a queue,\nprocesses them, and appends results to results_list.",
                "base_classes": [
                    "threading.Thread"
                ]
            },
            "MultibotManager": {
                "methods": [
                    "__init__",
                    "add_task",
                    "wait_for_completion",
                    "stop_workers"
                ],
                "docstring": "Manages a pool of BotWorker threads.",
                "base_classes": []
            },
            "FileProcessor": {
                "methods": [
                    "__init__",
                    "hash_file",
                    "should_exclude",
                    "process_file"
                ],
                "docstring": "Handles file hashing, ignoring, caching checks, etc.",
                "base_classes": []
            },
            "ReportGenerator": {
                "methods": [
                    "__init__",
                    "load_existing_report",
                    "save_report",
                    "generate_init_files",
                    "load_existing_chatgpt_context",
                    "export_chatgpt_context"
                ],
                "docstring": "Handles merging new analysis into existing project_analysis.json and chatgpt context.",
                "base_classes": []
            },
            "ProjectScanner": {
                "methods": [
                    "__init__",
                    "load_cache",
                    "save_cache",
                    "scan_project",
                    "_process_file",
                    "generate_init_files",
                    "export_chatgpt_context",
                    "categorize_agents",
                    "_maturity_level",
                    "_agent_type"
                ],
                "docstring": "A universal project scanner that:\n  - Identifies Python, Rust, JS, TS files.\n  - Extracts functions, classes, routes, complexity.\n  - Caches file hashes to skip unchanged files.\n  - Detects moved files by matching file hashes.\n  - Merges new analysis into existing project_analysis.json (preserving old entries).\n  - Exports a merged ChatGPT context if requested (preserving old context data).\n  - Processes files asynchronously with BotWorker threads.\n  - Auto-generates __init__.py files for Python packages.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 68
    },
    "chat_mate\\setup.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\test_chat_mate.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__call__",
            "test_no_direct_import_of_interfaces",
            "test_isolation_from_core_modules",
            "setUp",
            "tearDown",
            "test_setup_logging",
            "test_get_driver_with_cached_driver",
            "test_get_driver_without_cached_driver",
            "test_save_cookies_success",
            "test_save_cookies_exception",
            "test_load_cookies_file_not_found",
            "test_load_cookies_success",
            "test_load_cookies_exception",
            "test_is_logged_in_success",
            "test_is_logged_in_failure",
            "test_force_model_in_url_main_page",
            "test_force_model_in_url_chat_page",
            "test_force_model_in_url_existing_model",
            "test_force_model_in_url_custom_model",
            "test_get_chat_titles_no_chats",
            "test_get_chat_titles_with_exclusions",
            "test_get_chat_titles_exception",
            "test_send_prompt_to_chat_success",
            "test_send_prompt_to_chat_exception",
            "test_get_latest_response_no_messages",
            "test_get_latest_response_message_stabilized",
            "test_get_latest_response_edge_cases",
            "test_get_latest_response_message_keeps_changing",
            "test_get_latest_response_exception",
            "test_generate_devlog",
            "test_save_rough_draft",
            "test_save_rough_draft_special_chars",
            "test_archive_chat",
            "test_main_already_logged_in",
            "test_main_login_required",
            "test_main_login_failed",
            "test_send_discord_message",
            "test_on_ready",
            "test_force_model_in_url_edge_cases",
            "test_send_prompt_to_chat_edge_cases",
            "test_get_chat_titles_edge_cases",
            "find_elements_special_chars",
            "find_elements_multiple_messages",
            "find_elements_side_effect"
        ],
        "classes": {
            "TimeCounter": {
                "methods": [
                    "__init__",
                    "__call__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "TestCircularImportPrevention": {
                "methods": [
                    "test_no_direct_import_of_interfaces",
                    "test_isolation_from_core_modules"
                ],
                "docstring": "Tests specifically targeting potential circular import issues",
                "base_classes": [
                    "unittest.TestCase"
                ]
            },
            "TestChatMateCore": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_setup_logging",
                    "test_get_driver_with_cached_driver",
                    "test_get_driver_without_cached_driver",
                    "test_save_cookies_success",
                    "test_save_cookies_exception",
                    "test_load_cookies_file_not_found",
                    "test_load_cookies_success",
                    "test_load_cookies_exception",
                    "test_is_logged_in_success",
                    "test_is_logged_in_failure",
                    "test_force_model_in_url_main_page",
                    "test_force_model_in_url_chat_page",
                    "test_force_model_in_url_existing_model",
                    "test_force_model_in_url_custom_model",
                    "test_get_chat_titles_no_chats",
                    "test_get_chat_titles_with_exclusions",
                    "test_get_chat_titles_exception",
                    "test_send_prompt_to_chat_success",
                    "test_send_prompt_to_chat_exception",
                    "test_get_latest_response_no_messages",
                    "test_get_latest_response_message_stabilized",
                    "test_get_latest_response_edge_cases",
                    "test_get_latest_response_message_keeps_changing",
                    "test_get_latest_response_exception",
                    "test_generate_devlog",
                    "test_save_rough_draft",
                    "test_save_rough_draft_special_chars",
                    "test_archive_chat",
                    "test_main_already_logged_in",
                    "test_main_login_required",
                    "test_main_login_failed",
                    "test_send_discord_message",
                    "test_on_ready",
                    "test_force_model_in_url_edge_cases",
                    "test_send_prompt_to_chat_edge_cases",
                    "test_get_chat_titles_edge_cases"
                ],
                "docstring": "Tests for the core functionality of chat_mate.py",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 87
    },
    "chat_mate\\chat_mate\\interfaces\\pyqt\\tabs\\dreamscape\\DreamscapeTab.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\config\\ConfigManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_config",
            "_init_services",
            "load_config",
            "_merge_config",
            "get",
            "set",
            "save_config",
            "reset",
            "create_driver",
            "get_cached_driver",
            "clear_driver_cache",
            "__del__",
            "merge_dicts"
        ],
        "classes": {
            "ConfigManager": {
                "methods": [
                    "__init__",
                    "_load_config",
                    "_init_services",
                    "load_config",
                    "_merge_config",
                    "get",
                    "set",
                    "save_config",
                    "reset",
                    "create_driver",
                    "get_cached_driver",
                    "clear_driver_cache",
                    "__del__"
                ],
                "docstring": "Manages application configuration, including loading from files,\nenvironment variables, and providing access to configuration values.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 27
    },
    "chat_mate\\config\\config_singleton.py": {
        "language": ".py",
        "functions": [
            "__new__",
            "_initialize",
            "_setup_logging",
            "get_instance",
            "get",
            "set",
            "load_config",
            "save_config",
            "reset"
        ],
        "classes": {
            "ConfigurationSingleton": {
                "methods": [
                    "__new__",
                    "_initialize",
                    "_setup_logging",
                    "get_instance",
                    "get",
                    "set",
                    "load_config",
                    "save_config",
                    "reset"
                ],
                "docstring": "Singleton class for managing global configuration state.\nEnsures only one configuration instance exists throughout the application.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "chat_mate\\config\\default_config.py": {
        "language": ".py",
        "functions": [
            "get_default_config"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "chat_mate\\config\\driver_factory.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_driver",
            "_get_chrome_options",
            "_get_driver_service",
            "get_cached_driver",
            "cache_driver",
            "clear_cache",
            "__del__"
        ],
        "classes": {
            "DriverFactory": {
                "methods": [
                    "__init__",
                    "create_driver",
                    "_get_chrome_options",
                    "_get_driver_service",
                    "get_cached_driver",
                    "cache_driver",
                    "clear_cache",
                    "__del__"
                ],
                "docstring": "Factory class for creating and managing WebDriver instances.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "chat_mate\\content\\AletheiaContentDispatcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "execute_full_dispatch"
        ],
        "classes": {
            "AletheiaContentDispatcher": {
                "methods": [
                    "__init__",
                    "execute_full_dispatch"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "chat_mate\\config\\logger_utils.py": {
        "language": ".py",
        "functions": [
            "setup_logger",
            "get_logger",
            "clear_handlers"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "chat_mate\\content\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\core\\AgentDispatcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_config",
            "add_task",
            "_start_workers",
            "_worker_loop",
            "_get_next_task",
            "_can_execute_task",
            "_execute_task",
            "_dispatch_to_agent",
            "_execute_social_task",
            "_execute_chat_task",
            "_execute_reinforcement_task",
            "_execute_refactor_task",
            "_execute_test_task",
            "_execute_doc_task",
            "_retry_task",
            "_allocate_resources",
            "_release_resources",
            "_update_performance_metrics",
            "get_task_status",
            "cancel_task",
            "get_performance_metrics",
            "shutdown",
            "__enter__",
            "__exit__"
        ],
        "classes": {
            "TaskPriority": {
                "methods": [],
                "docstring": "Task priority levels for intelligent dispatching.",
                "base_classes": [
                    "Enum"
                ]
            },
            "TaskStatus": {
                "methods": [],
                "docstring": "Possible states for a task in the system.",
                "base_classes": [
                    "Enum"
                ]
            },
            "Task": {
                "methods": [],
                "docstring": "Represents a task in the system with metadata.",
                "base_classes": []
            },
            "AgentDispatcher": {
                "methods": [
                    "__init__",
                    "_load_config",
                    "add_task",
                    "_start_workers",
                    "_worker_loop",
                    "_get_next_task",
                    "_can_execute_task",
                    "_execute_task",
                    "_dispatch_to_agent",
                    "_execute_social_task",
                    "_execute_chat_task",
                    "_execute_reinforcement_task",
                    "_execute_refactor_task",
                    "_execute_test_task",
                    "_execute_doc_task",
                    "_retry_task",
                    "_allocate_resources",
                    "_release_resources",
                    "_update_performance_metrics",
                    "get_task_status",
                    "cancel_task",
                    "get_performance_metrics",
                    "shutdown",
                    "__enter__",
                    "__exit__"
                ],
                "docstring": "Enhanced Agent Dispatcher that orchestrates tasks across different engines\nwith intelligent prioritization and task management.\n\nFeatures:\n- Priority-based task scheduling\n- Dependency resolution\n- Automatic retries with backoff\n- Resource management\n- Task batching and optimization\n- Real-time monitoring\n- Performance analytics",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 50
    },
    "chat_mate\\core\\AIOutputLogAnalyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_log",
            "load_context_db",
            "save_context_db",
            "iterate_logs",
            "_validate_log",
            "extract_context_from_logs",
            "get_recent_context",
            "get_user_context",
            "get_platform_context",
            "identify_community_champions",
            "trigger_community_invites",
            "summarize",
            "export_summary_report",
            "send_discord_report_sync",
            "_parse_date"
        ],
        "classes": {
            "AIOutputLogAnalyzer": {
                "methods": [
                    "__init__",
                    "_log",
                    "load_context_db",
                    "save_context_db",
                    "iterate_logs",
                    "_validate_log",
                    "extract_context_from_logs",
                    "get_recent_context",
                    "get_user_context",
                    "get_platform_context",
                    "identify_community_champions",
                    "trigger_community_invites",
                    "summarize",
                    "export_summary_report",
                    "send_discord_report_sync",
                    "_parse_date"
                ],
                "docstring": "Analyzes AI output logs stored in JSONL format.\nNow integrated with UnifiedLoggingAgent for consistent log access.\n\nFeatures:\n  - Community champion identification\n  - Community digest reporting\n  - Persistent context memory for adaptive AI responses\n  - Discord integration for reports and updates",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 32
    },
    "chat_mate\\core\\AletheiaFeedbackLoopManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate_feedback_loops",
            "_calculate_success_rate",
            "_get_top_tags",
            "_auto_adjust_rate_limits",
            "export_feedback_report",
            "process_feedback"
        ],
        "classes": {
            "AletheiaFeedbackLoopManager": {
                "methods": [
                    "__init__",
                    "generate_feedback_loops",
                    "_calculate_success_rate",
                    "_get_top_tags",
                    "_auto_adjust_rate_limits",
                    "export_feedback_report",
                    "process_feedback"
                ],
                "docstring": "FULL SYNC Feedback Loop Manager:\n- Reviews log summaries.\n- Detects failure clusters and reinforces actions.\n- Adjusts system configurations (rate limits, retries, etc).",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "chat_mate\\core\\AletheiaPromptManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_all_memory_states",
            "save_all_memory_states",
            "start_conversation_cycle",
            "end_conversation_cycle",
            "record_conversation",
            "get_prompt",
            "load_conversation_memory",
            "save_conversation_memory",
            "load_cycle_memory",
            "save_cycle_memory",
            "_load_json_file",
            "_merge_cycle_memory_updates",
            "list_available_prompts",
            "load_memory_state",
            "save_memory_state",
            "parse_memory_updates",
            "_extract_memory_update_block",
            "_merge_memory_updates",
            "archive_episode",
            "_log_memory_diff",
            "review_memory_log",
            "_async_save",
            "save_task"
        ],
        "classes": {
            "AletheiaPromptManager": {
                "methods": [
                    "__init__",
                    "load_all_memory_states",
                    "save_all_memory_states",
                    "start_conversation_cycle",
                    "end_conversation_cycle",
                    "record_conversation",
                    "get_prompt",
                    "load_conversation_memory",
                    "save_conversation_memory",
                    "load_cycle_memory",
                    "save_cycle_memory",
                    "_load_json_file",
                    "_merge_cycle_memory_updates",
                    "list_available_prompts",
                    "load_memory_state",
                    "save_memory_state",
                    "parse_memory_updates",
                    "_extract_memory_update_block",
                    "_merge_memory_updates",
                    "archive_episode",
                    "_log_memory_diff",
                    "review_memory_log",
                    "_async_save"
                ],
                "docstring": "Aletheia - Autonomous Architect of Strategic Convergence.\n\nThis class handles:\n  - Template-based prompt generation using Jinja2\n  - Adaptive structured memory updates\n  - FULL SYNC integration with Victor.OS\n  - Auto-dispatch of Discord notifications on episode archiving\nManaged by Aletheia (Thea).",
                "base_classes": [
                    "IPromptManager"
                ]
            }
        },
        "routes": [],
        "complexity": 47
    },
    "chat_mate\\core\\bootstrap.py": {
        "language": ".py",
        "functions": [
            "get_bootstrap_paths",
            "register",
            "get_paths"
        ],
        "classes": {
            "_PathRegistry": {
                "methods": [
                    "register",
                    "get_paths"
                ],
                "docstring": "Internal path registry to avoid circular imports.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 5
    },
    "chat_mate\\core\\ChatManager.py": {
        "language": ".py",
        "functions": [
            "sanitize_filename",
            "__init__",
            "_load_memory",
            "start",
            "send_prompt",
            "get_all_chat_titles",
            "execute_prompts_single_chat",
            "analyze_execution_response",
            "shutdown_driver",
            "send_chat_prompt",
            "switch_execution_mode",
            "generate_dreamscape_episode",
            "execute_prompt_cycle",
            "queue_prompts",
            "get_last_response",
            "inject_context",
            "get_chat_history"
        ],
        "classes": {
            "ChatManager": {
                "methods": [
                    "__init__",
                    "_load_memory",
                    "start",
                    "send_prompt",
                    "get_all_chat_titles",
                    "execute_prompts_single_chat",
                    "analyze_execution_response",
                    "shutdown_driver",
                    "send_chat_prompt",
                    "switch_execution_mode",
                    "generate_dreamscape_episode",
                    "execute_prompt_cycle",
                    "queue_prompts",
                    "get_last_response",
                    "inject_context",
                    "get_chat_history"
                ],
                "docstring": null,
                "base_classes": [
                    "IChatManager"
                ]
            }
        },
        "routes": [],
        "complexity": 33
    },
    "chat_mate\\core\\chat_message.py": {
        "language": ".py",
        "functions": [
            "to_dict",
            "from_dict",
            "default"
        ],
        "classes": {
            "ChatMessage": {
                "methods": [
                    "to_dict",
                    "from_dict"
                ],
                "docstring": "Represents a chat message with metadata.",
                "base_classes": []
            },
            "MessageEncoder": {
                "methods": [
                    "default"
                ],
                "docstring": "JSON encoder for ChatMessage objects.",
                "base_classes": [
                    "json.JSONEncoder"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "chat_mate\\core\\config_base.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_env",
            "get_env",
            "_validate_required_keys"
        ],
        "classes": {
            "ConfigBase": {
                "methods": [
                    "__init__",
                    "_load_env",
                    "get_env",
                    "_validate_required_keys"
                ],
                "docstring": "Base configuration class with shared functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "chat_mate\\core\\config.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\core\\ConsoleLogger.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "log",
            "log_error",
            "log_debug",
            "log_event",
            "log_system_event"
        ],
        "classes": {
            "ConsoleLogger": {
                "methods": [
                    "__init__",
                    "log",
                    "log_error",
                    "log_debug",
                    "log_event",
                    "log_system_event"
                ],
                "docstring": "Logger implementation for console output.",
                "base_classes": [
                    "ILoggingAgent"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "chat_mate\\core\\CycleExecutionService.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "run_cycle"
        ],
        "classes": {
            "CycleExecutionService": {
                "methods": [
                    "__init__",
                    "run_cycle"
                ],
                "docstring": "Handles prompt cycle execution and orchestration in a scalable way using dependency injection.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "chat_mate\\core\\DriverManager.py": {
        "language": ".py",
        "functions": [
            "setup_logger",
            "main",
            "__new__",
            "__init__",
            "__enter__",
            "__exit__",
            "_get_cached_driver_path",
            "_download_driver_if_needed",
            "_is_session_expired",
            "refresh_session",
            "get_session_info",
            "set_session_timeout",
            "_create_chrome_options",
            "get_driver",
            "quit_driver",
            "save_cookies",
            "load_cookies",
            "clear_cookies",
            "is_logged_in",
            "execute_with_retry",
            "scroll_into_view",
            "manual_scroll",
            "update_options",
            "shutdown_driver",
            "force_kill_browsers",
            "__del__"
        ],
        "classes": {
            "DriverManager": {
                "methods": [
                    "__new__",
                    "__init__",
                    "__enter__",
                    "__exit__",
                    "_get_cached_driver_path",
                    "_download_driver_if_needed",
                    "_is_session_expired",
                    "refresh_session",
                    "get_session_info",
                    "set_session_timeout",
                    "_create_chrome_options",
                    "get_driver",
                    "quit_driver",
                    "save_cookies",
                    "load_cookies",
                    "clear_cookies",
                    "is_logged_in",
                    "execute_with_retry",
                    "scroll_into_view",
                    "manual_scroll",
                    "update_options",
                    "shutdown_driver",
                    "force_kill_browsers",
                    "__del__"
                ],
                "docstring": "Unified DriverManager for Selenium-based browser automation.\n\nFeatures:\n  - Singleton pattern to ensure a single active driver instance\n  - Session management with automatic expiration (default 1 hour) and renewal\n  - Persistent profile support (or temporary profiles in headless mode)\n  - Cookie saving/loading for session persistence\n  - Support for headless mode, mobile emulation, and optional undetected mode\n  - Auto-downloading and caching of the ChromeDriver executable\n  - Robust retry mechanisms for resilient browser operations\n  - Utilities for waiting, scrolling, and option updates",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 50
    },
    "chat_mate\\core\\DriverSessionManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize_driver",
            "get_driver",
            "_is_session_expired",
            "shutdown_driver",
            "refresh_session",
            "execute_with_retry",
            "get_session_info",
            "set_session_timeout",
            "clear_cookies"
        ],
        "classes": {
            "DriverSessionManager": {
                "methods": [
                    "__init__",
                    "initialize_driver",
                    "get_driver",
                    "_is_session_expired",
                    "shutdown_driver",
                    "refresh_session",
                    "execute_with_retry",
                    "get_session_info",
                    "set_session_timeout",
                    "clear_cookies"
                ],
                "docstring": "Backward compatibility wrapper for the legacy DriverSessionManager.\nThis class maintains the same interface as the original DriverSessionManager \nbut delegates all functionality to the new unified DriverManager.\n\nDO NOT use this class for new code. Use DriverManager directly instead.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "chat_mate\\core\\EngagementAgent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "handle_mentions",
            "proactive_engagement",
            "_process_mention",
            "_process_proactive",
            "_log_interaction"
        ],
        "classes": {
            "EngagementAgent": {
                "methods": [
                    "__init__",
                    "handle_mentions",
                    "proactive_engagement",
                    "_process_mention",
                    "_process_proactive",
                    "_log_interaction"
                ],
                "docstring": "Manages intelligent, automated interactions leveraging AIChatAgent \nfor personalized, context-aware community engagement.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "chat_mate\\core\\EventMessageBuilder.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "on_modified",
            "on_created",
            "on_deleted",
            "__init__",
            "_start_template_watcher",
            "build_message",
            "list_available_templates",
            "clear_cache"
        ],
        "classes": {
            "TemplateChangeHandler": {
                "methods": [
                    "__init__",
                    "on_modified",
                    "on_created",
                    "on_deleted"
                ],
                "docstring": "Watches the template directory for changes. When a template file is modified,\ncreated, or deleted, it will trigger a cache clear in the EventMessageBuilder.",
                "base_classes": [
                    "FileSystemEventHandler"
                ]
            },
            "EventMessageBuilder": {
                "methods": [
                    "__init__",
                    "_start_template_watcher",
                    "build_message",
                    "list_available_templates",
                    "clear_cache"
                ],
                "docstring": "Builds Discord messages using Jinja2 templates for various event types.\nPlace your templates (e.g., quest_complete.j2, protocol_unlock.j2, tier_up.j2)\nin your designated template directory.\n\nIf no template directory is provided, the default location is:\n  ../templates/message_templates relative to this file.\n  \nThis builder will automatically watch for changes in the template directory\nand clear its cache accordingly.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "chat_mate\\core\\feedback.py": {
        "language": ".py",
        "functions": [
            "__new__",
            "get_instance",
            "add_feedback",
            "get_feedback",
            "get_context_stats",
            "analyze_feedback"
        ],
        "classes": {
            "FeedbackSingleton": {
                "methods": [
                    "__new__",
                    "get_instance",
                    "add_feedback",
                    "get_feedback",
                    "get_context_stats",
                    "analyze_feedback"
                ],
                "docstring": "Singleton class that provides global access to the UnifiedFeedbackMemory.\nEnsures only one instance of the feedback memory exists.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "chat_mate\\core\\FileLogger.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_log_file",
            "_rotate_logs",
            "_write_log",
            "log",
            "log_error",
            "log_debug",
            "log_event",
            "log_system_event"
        ],
        "classes": {
            "FileLogger": {
                "methods": [
                    "__init__",
                    "_get_log_file",
                    "_rotate_logs",
                    "_write_log",
                    "log",
                    "log_error",
                    "log_debug",
                    "log_event",
                    "log_system_event"
                ],
                "docstring": "Logger implementation for file output with rotation.",
                "base_classes": [
                    "ILoggingAgent"
                ]
            }
        },
        "routes": [],
        "complexity": 18
    },
    "chat_mate\\core\\FileManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "save_response",
            "save_memory_state",
            "save_log",
            "archive_file",
            "_save_file",
            "load_file",
            "sanitize_filename",
            "list_episode_files",
            "read_file"
        ],
        "classes": {
            "FileManager": {
                "methods": [
                    "__init__",
                    "save_response",
                    "save_memory_state",
                    "save_log",
                    "archive_file",
                    "_save_file",
                    "load_file",
                    "sanitize_filename",
                    "list_episode_files",
                    "read_file"
                ],
                "docstring": "Unified file management system for ChatMate.\nHandles all file operations using PathManager for consistent directory structure.\nSupports JSON, YAML, and plain text formats with thread-safe operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "chat_mate\\core\\memory_utils.py": {
        "language": ".py",
        "functions": [
            "load_memory_file"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "chat_mate\\core\\IChatManager.py": {
        "language": ".py",
        "functions": [
            "start",
            "send_prompt",
            "get_all_chat_titles",
            "execute_prompts_single_chat",
            "analyze_execution_response",
            "shutdown_driver",
            "send_chat_prompt",
            "execute_prompt_cycle",
            "queue_prompts",
            "get_last_response",
            "inject_context"
        ],
        "classes": {
            "IChatManager": {
                "methods": [
                    "start",
                    "send_prompt",
                    "get_all_chat_titles",
                    "execute_prompts_single_chat",
                    "analyze_execution_response",
                    "shutdown_driver",
                    "send_chat_prompt",
                    "execute_prompt_cycle",
                    "queue_prompts",
                    "get_last_response",
                    "inject_context"
                ],
                "docstring": "Interface for Chat Manager implementations with orchestration capabilities.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 22
    },
    "chat_mate\\core\\LoggerFactory.py": {
        "language": ".py",
        "functions": [
            "get_logger"
        ],
        "classes": {
            "LoggerFactory": {
                "methods": [
                    "get_logger"
                ],
                "docstring": "Legacy bridge to the new logging system.\nProvides backward compatibility while redirecting to the new implementation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "chat_mate\\core\\NarrativeAnalytics.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze",
            "_summarize",
            "_analyze_sentiment",
            "_extract_keywords"
        ],
        "classes": {
            "NarrativeAnalytics": {
                "methods": [
                    "__init__",
                    "analyze",
                    "_summarize",
                    "_analyze_sentiment",
                    "_extract_keywords"
                ],
                "docstring": "A simple narrative analytics engine placeholder.\nProvides basic summarization, sentiment analysis, and keyword extraction.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "chat_mate\\core\\OpenAIPromptEngine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_is_driver_alive",
            "render_prompt",
            "_retry",
            "send_prompt",
            "_wait_for_response_completion",
            "_scrape_response",
            "log_interaction",
            "execute"
        ],
        "classes": {
            "OpenAIPromptEngine": {
                "methods": [
                    "__init__",
                    "_is_driver_alive",
                    "render_prompt",
                    "_retry",
                    "send_prompt",
                    "_wait_for_response_completion",
                    "_scrape_response",
                    "log_interaction",
                    "execute"
                ],
                "docstring": "OpenAIPromptEngine:\n  - Renders prompts using Jinja2 templates.\n  - Uses Selenium to interact with a custom GPT endpoint.\n  - Logs interactions for reinforcement learning.\n  - Optionally triggers voice automation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "chat_mate\\core\\PathManager.py": {
        "language": ".py",
        "functions": [
            "__new__",
            "_generate_properties",
            "__new__",
            "_ensure_initialized",
            "register_path",
            "get_path",
            "ensure_directories",
            "list_paths",
            "get_relative_path",
            "describe_paths",
            "get_env_path",
            "get_rate_limit_state_path",
            "get_chrome_profile_path",
            "get_template_path",
            "ensure_path_exists",
            "get_config_path",
            "get_memory_path",
            "get_workspace_path",
            "make_getter"
        ],
        "classes": {
            "PathManagerMeta": {
                "methods": [
                    "__new__",
                    "_generate_properties"
                ],
                "docstring": "A metaclass to dynamically create properties for all registered paths.",
                "base_classes": [
                    "type"
                ]
            },
            "PathManager": {
                "methods": [
                    "__new__",
                    "_ensure_initialized",
                    "register_path",
                    "get_path",
                    "ensure_directories",
                    "list_paths",
                    "get_relative_path",
                    "describe_paths",
                    "get_env_path",
                    "get_rate_limit_state_path",
                    "get_chrome_profile_path",
                    "get_template_path",
                    "ensure_path_exists",
                    "get_config_path",
                    "get_memory_path",
                    "get_workspace_path"
                ],
                "docstring": "Unified PathManager for core functionalities.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 37
    },
    "chat_mate\\core\\PromptCycleOrchestrator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "set_chat_manager",
            "execute_single_cycle",
            "execute_multi_cycle",
            "get_available_prompts",
            "get_prompt",
            "save_prompt",
            "reset_prompts",
            "shutdown"
        ],
        "classes": {
            "PromptCycleOrchestrator": {
                "methods": [
                    "__init__",
                    "set_chat_manager",
                    "execute_single_cycle",
                    "execute_multi_cycle",
                    "get_available_prompts",
                    "get_prompt",
                    "save_prompt",
                    "reset_prompts",
                    "shutdown"
                ],
                "docstring": "Orchestrates prompt cycles with injected chat management.",
                "base_classes": [
                    "IPromptOrchestrator"
                ]
            }
        },
        "routes": [],
        "complexity": 18
    },
    "chat_mate\\core\\PromptResponseHandler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "process_response"
        ],
        "classes": {
            "PromptResponseHandler": {
                "methods": [
                    "__init__",
                    "process_response"
                ],
                "docstring": "Handles response validation, reinforcement, and logging.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "chat_mate\\core\\PromptEngine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "send_prompt",
            "fetch_response",
            "wait_for_stable_response",
            "log_ai_response",
            "clean_response",
            "__init__",
            "_load_config",
            "execute_prompt",
            "_get_optimized_prompt",
            "_optimize_prompt",
            "_enhance_prompt",
            "_execute_with_retry",
            "_analyze_response",
            "_assess_creativity",
            "_assess_technical_accuracy",
            "_record_feedback",
            "_calculate_feedback_score",
            "_update_stats",
            "get_stats"
        ],
        "classes": {
            "PromptEngine": {
                "methods": [
                    "__init__",
                    "_load_config",
                    "execute_prompt",
                    "_get_optimized_prompt",
                    "_optimize_prompt",
                    "_enhance_prompt",
                    "_execute_with_retry",
                    "_analyze_response",
                    "_assess_creativity",
                    "_assess_technical_accuracy",
                    "_record_feedback",
                    "_calculate_feedback_score",
                    "_update_stats",
                    "get_stats"
                ],
                "docstring": "Centralized prompt execution engine that:\n  - Retrieves and optionally optimizes a prompt template.\n  - Executes the prompt via a lower-level PromptEngine with automatic retry and exponential backoff.\n  - Analyzes the response and records feedback.\n  - Maintains performance statistics.",
                "base_classes": []
            },
            "PromptExecutionError": {
                "methods": [],
                "docstring": "Raised when prompt execution fails.",
                "base_classes": [
                    "Exception"
                ]
            }
        },
        "routes": [],
        "complexity": 34
    },
    "chat_mate\\core\\ReinforcementEngine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_memory",
            "save_memory",
            "detect_hallucination",
            "calculate_length_score",
            "detect_clarity_issues",
            "calculate_coherence_score",
            "analyze_response",
            "append_execution_log",
            "auto_tune_prompts",
            "append_tuning_log",
            "__init__",
            "initUI",
            "load_feedback",
            "display_feedback_details",
            "export_feedback",
            "clear_feedback",
            "auto_tune_prompts"
        ],
        "classes": {
            "ReinforcementEngine": {
                "methods": [
                    "__init__",
                    "load_memory",
                    "save_memory",
                    "detect_hallucination",
                    "calculate_length_score",
                    "detect_clarity_issues",
                    "calculate_coherence_score",
                    "analyze_response",
                    "append_execution_log",
                    "auto_tune_prompts",
                    "append_tuning_log"
                ],
                "docstring": null,
                "base_classes": []
            },
            "ReinforcementToolsDialog": {
                "methods": [
                    "__init__",
                    "initUI",
                    "load_feedback",
                    "display_feedback_details",
                    "export_feedback",
                    "clear_feedback",
                    "auto_tune_prompts"
                ],
                "docstring": "A dialog for managing reinforcement feedback, exporting logs,\nclearing feedback data, and auto-tuning prompts.",
                "base_classes": [
                    "QDialog"
                ]
            }
        },
        "routes": [],
        "complexity": 36
    },
    "chat_mate\\core\\ReinforcementEvaluator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_memory_data",
            "_create_default_memory",
            "_save_memory_data",
            "evaluate_response",
            "_calculate_score",
            "_generate_feedback",
            "_update_prompt_performance",
            "get_prompt_insights",
            "_calculate_score_trend",
            "get_memory_summary",
            "clear_memory"
        ],
        "classes": {
            "ReinforcementEvaluator": {
                "methods": [
                    "__init__",
                    "_load_memory_data",
                    "_create_default_memory",
                    "_save_memory_data",
                    "evaluate_response",
                    "_calculate_score",
                    "_generate_feedback",
                    "_update_prompt_performance",
                    "get_prompt_insights",
                    "_calculate_score_trend",
                    "get_memory_summary",
                    "clear_memory"
                ],
                "docstring": "Evaluates responses and provides reinforcement feedback.\nManages memory data and generates insights for prompt tuning.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "chat_mate\\core\\reinforcement_tools.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_feedback",
            "show_feedback_details",
            "export_feedback",
            "clear_feedback",
            "auto_tune_prompts"
        ],
        "classes": {
            "ReinforcementToolsDialog": {
                "methods": [
                    "__init__",
                    "load_feedback",
                    "show_feedback_details",
                    "export_feedback",
                    "clear_feedback",
                    "auto_tune_prompts"
                ],
                "docstring": "Dialog UI for Reinforcement Engine analysis and feedback management.",
                "base_classes": [
                    "QDialog"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "chat_mate\\core\\ResilientPromptExecutor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "execute_with_retry",
            "_execute_prompt",
            "_categorize_error",
            "_cache_response",
            "_get_cached_response",
            "_get_cache_key",
            "_log_execution_result",
            "get_execution_stats",
            "clear_history"
        ],
        "classes": {
            "ExecutionStatus": {
                "methods": [],
                "docstring": "Status of prompt execution.",
                "base_classes": [
                    "Enum"
                ]
            },
            "ResilientPromptExecutor": {
                "methods": [
                    "__init__",
                    "execute_with_retry",
                    "_execute_prompt",
                    "_categorize_error",
                    "_cache_response",
                    "_get_cached_response",
                    "_get_cache_key",
                    "_log_execution_result",
                    "get_execution_stats",
                    "clear_history"
                ],
                "docstring": "Enhanced prompt executor with automatic retries and error recovery.\nFeatures:\n- Automatic retries with exponential backoff\n- Error categorization and handling\n- Execution history tracking\n- Performance monitoring\n- Health checks",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "chat_mate\\core\\ReportExporter.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "export_markdown",
            "export_html",
            "send_discord_report",
            "send_discord_report_sync"
        ],
        "classes": {
            "ReportExporter": {
                "methods": [
                    "__init__",
                    "export_markdown",
                    "export_html",
                    "send_discord_report",
                    "send_discord_report_sync"
                ],
                "docstring": "Handles exporting reports in various formats (Markdown, HTML, Discord).\nUses templates for consistent formatting.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "chat_mate\\core\\ResponseHandler.py": {
        "language": ".py",
        "functions": [
            "setup_logging",
            "parse_hybrid_response",
            "__init__",
            "_init_driver",
            "save_cookies",
            "load_cookies",
            "is_logged_in",
            "send_prompt",
            "fetch_response",
            "wait_for_stable_response",
            "clean_response",
            "handle_hybrid_response",
            "execute_prompt_cycle",
            "execute_prompts_on_all_chats",
            "shutdown"
        ],
        "classes": {
            "HybridResponseHandler": {
                "methods": [
                    "parse_hybrid_response"
                ],
                "docstring": "Parses a hybrid response that includes both narrative text and a MEMORY_UPDATE JSON block.\nReturns a tuple of (text_part, memory_update_json).",
                "base_classes": []
            },
            "ResponseHandler": {
                "methods": [
                    "__init__",
                    "_init_driver",
                    "save_cookies",
                    "load_cookies",
                    "is_logged_in",
                    "send_prompt",
                    "fetch_response",
                    "wait_for_stable_response",
                    "clean_response",
                    "handle_hybrid_response",
                    "execute_prompt_cycle",
                    "execute_prompts_on_all_chats",
                    "shutdown"
                ],
                "docstring": "Handles sending prompts, fetching, and stabilizing ChatGPT responses.\nNow includes hybrid response processing: it will extract narrative text and MEMORY_UPDATE JSON.\nAlso hooks into the AI output logger for reinforcement training.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 29
    },
    "chat_mate\\core\\service_container.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "ServiceContainer": {
                "methods": [],
                "docstring": "Container for service dependencies.",
                "base_classes": [
                    "containers.DeclarativeContainer"
                ]
            }
        },
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\core\\TaskManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load",
            "_save",
            "add_task",
            "list_tasks",
            "complete_task",
            "delete_task",
            "clear_completed",
            "get_pending_count"
        ],
        "classes": {
            "TaskManager": {
                "methods": [
                    "__init__",
                    "_load",
                    "_save",
                    "add_task",
                    "list_tasks",
                    "complete_task",
                    "delete_task",
                    "clear_completed",
                    "get_pending_count"
                ],
                "docstring": "JSON-based Task / To-Do List Manager.\nManages tasks with support for adding, completing, deleting, and listing.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "chat_mate\\core\\SystemHealthMonitor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start_monitoring",
            "stop_monitoring",
            "_monitoring_loop",
            "perform_health_checks",
            "_check_driver",
            "_check_memory",
            "_check_thread_pool",
            "_check_system_resources",
            "_store_metrics",
            "_check_alerts",
            "get_system_health",
            "get_historical_metrics"
        ],
        "classes": {
            "HealthStatus": {
                "methods": [],
                "docstring": "System component health status.",
                "base_classes": [
                    "Enum"
                ]
            },
            "HealthMetrics": {
                "methods": [],
                "docstring": "Health metrics for a system component.",
                "base_classes": []
            },
            "SystemHealthMonitor": {
                "methods": [
                    "__init__",
                    "start_monitoring",
                    "stop_monitoring",
                    "_monitoring_loop",
                    "perform_health_checks",
                    "_check_driver",
                    "_check_memory",
                    "_check_thread_pool",
                    "_check_system_resources",
                    "_store_metrics",
                    "_check_alerts",
                    "get_system_health",
                    "get_historical_metrics"
                ],
                "docstring": "Centralized system health monitoring.\nFeatures:\n- Component health checks\n- Resource utilization monitoring\n- Performance metrics tracking\n- Automatic alerts\n- Historical metrics",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "chat_mate\\core\\TaskOrchestrator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "set_cycle_service",
            "execute_task"
        ],
        "classes": {
            "TaskOrchestrator": {
                "methods": [
                    "__init__",
                    "set_cycle_service",
                    "execute_task"
                ],
                "docstring": "Coordinates task execution between agents and cycle services.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "chat_mate\\core\\TemplateManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_base_template_dir",
            "_init_environment",
            "discover_templates",
            "load_templates",
            "get_available_templates",
            "change_template_dir",
            "load_template",
            "set_active_template",
            "render",
            "render_discord_template",
            "render_message_template",
            "render_general_template",
            "render_template",
            "validate_context",
            "save_rendered_output",
            "_log_template_render",
            "_on_template_modified",
            "write_json_log",
            "load_json_filter",
            "tojson_filter",
            "visit_node"
        ],
        "classes": {
            "TemplateManager": {
                "methods": [
                    "__init__",
                    "get_base_template_dir",
                    "_init_environment",
                    "discover_templates",
                    "load_templates",
                    "get_available_templates",
                    "change_template_dir",
                    "load_template",
                    "set_active_template",
                    "render",
                    "render_discord_template",
                    "render_message_template",
                    "render_general_template",
                    "render_template",
                    "validate_context",
                    "save_rendered_output",
                    "_log_template_render",
                    "_on_template_modified"
                ],
                "docstring": "Centralized manager for Jinja2 templates across multiple categories.\nProvides hot-reloading, multi-environment support, context validation, and integration into a GUI.\n\nFeatures:\n  - Auto-loads environments for each template category.\n  - Supports dynamic directory switching and recursive template discovery.\n  - Emits signals on template updates, modifications, and render previews.\n  - Logs template activity for analytics.",
                "base_classes": [
                    "QObject"
                ]
            }
        },
        "routes": [],
        "complexity": 40
    },
    "chat_mate\\core\\ThreadPoolManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "submit_task",
            "_task_scheduler",
            "_execute_task",
            "cancel_task",
            "get_task_status",
            "get_metrics",
            "shutdown",
            "wrapped_func"
        ],
        "classes": {
            "TaskPriority": {
                "methods": [],
                "docstring": "Task priority levels for the thread pool.",
                "base_classes": [
                    "Enum"
                ]
            },
            "Task": {
                "methods": [],
                "docstring": "Represents a task to be executed by the thread pool.",
                "base_classes": []
            },
            "ThreadPoolManager": {
                "methods": [
                    "__init__",
                    "submit_task",
                    "_task_scheduler",
                    "_execute_task",
                    "cancel_task",
                    "get_task_status",
                    "get_metrics",
                    "shutdown"
                ],
                "docstring": "Enhanced thread pool manager with priority queuing and task management.\nFeatures:\n- Priority-based task scheduling\n- Task timeout management\n- Automatic retries with exponential backoff\n- Resource monitoring\n- Task statistics and metrics",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 17
    },
    "chat_mate\\core\\UnifiedDiscordService.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_register_events",
            "load_config",
            "save_config",
            "run",
            "stop",
            "send_message",
            "send_file",
            "send_template",
            "get_status",
            "set_log_callback",
            "_log",
            "run_bot"
        ],
        "classes": {
            "UnifiedDiscordService": {
                "methods": [
                    "__init__",
                    "_register_events",
                    "load_config",
                    "save_config",
                    "run",
                    "stop",
                    "send_message",
                    "send_file",
                    "send_template",
                    "get_status",
                    "set_log_callback",
                    "_log"
                ],
                "docstring": "UnifiedDiscordService - Centralized Discord integration service.\nHandles all Discord-related functionality including:\n- Bot lifecycle management\n- Message dispatching\n- Template rendering\n- Channel management\n- Status monitoring\n- Event notifications",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 25
    },
    "chat_mate\\core\\UnifiedFeedbackMemory.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "to_dict",
            "from_dict",
            "__init__",
            "add_feedback",
            "get_feedback",
            "get_context_stats",
            "_update_stats",
            "_prune_memory",
            "load",
            "save",
            "analyze_feedback",
            "_filter_by_timeframe"
        ],
        "classes": {
            "FeedbackEntry": {
                "methods": [
                    "__init__",
                    "to_dict",
                    "from_dict"
                ],
                "docstring": "Structured feedback entry for reinforcement learning.",
                "base_classes": []
            },
            "UnifiedFeedbackMemory": {
                "methods": [
                    "__init__",
                    "add_feedback",
                    "get_feedback",
                    "get_context_stats",
                    "_update_stats",
                    "_prune_memory",
                    "load",
                    "save",
                    "analyze_feedback",
                    "_filter_by_timeframe"
                ],
                "docstring": "Centralized reinforcement learning memory system.\nFeatures:\n- Thread-safe operations\n- Memory segmentation by context\n- Real-time feedback processing\n- Automatic memory pruning\n- Score-based filtering\n- Context-aware learning",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "chat_mate\\core\\UnifiedLoggingAgent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "log",
            "_setup_log_directories",
            "_setup_file_handler",
            "log_ai_output",
            "log_social",
            "log_system_event",
            "get_logs",
            "_matches_filters",
            "log_error",
            "log_debug",
            "log_event"
        ],
        "classes": {
            "UnifiedLoggingAgent": {
                "methods": [
                    "__init__",
                    "log",
                    "_setup_log_directories",
                    "_setup_file_handler",
                    "log_ai_output",
                    "log_social",
                    "log_system_event",
                    "get_logs",
                    "_matches_filters",
                    "log_error",
                    "log_debug",
                    "log_event"
                ],
                "docstring": "Centralized logging system for ChatMate that handles all logging operations.\nFeatures:\n- Thread-safe logging operations\n- Multiple output formats (text, JSON, JSONL)\n- Structured logging with metadata\n- Integration with FileManager for consistent file operations\n- Real-time logging with rotation support\n- Domain-specific logging (AI outputs, social interactions, system events)",
                "base_classes": [
                    "ILoggingAgent"
                ]
            }
        },
        "routes": [],
        "complexity": 24
    },
    "chat_mate\\core\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\core\\Agents\\AgentDispatcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start",
            "stop",
            "event_loop",
            "add_task",
            "_handle_task",
            "_execute_prompts_on_chat",
            "_review_memory"
        ],
        "classes": {
            "AgentDispatcher": {
                "methods": [
                    "__init__",
                    "start",
                    "stop",
                    "event_loop",
                    "add_task",
                    "_handle_task",
                    "_execute_prompts_on_chat",
                    "_review_memory"
                ],
                "docstring": "Orchestrates and manages all system agents. Handles task distribution,\nlifecycle management, and communication between agents.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "chat_mate\\core\\Agents\\base_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "receive_task",
            "handle_task",
            "process_tasks",
            "run",
            "stop"
        ],
        "classes": {
            "BaseAgent": {
                "methods": [
                    "__init__",
                    "receive_task",
                    "handle_task",
                    "process_tasks",
                    "run",
                    "stop"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "chat_mate\\core\\Agents\\chat_scraper_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "handle_task",
            "get_all_chats",
            "filter_chats",
            "validate_login",
            "manual_login_flow"
        ],
        "classes": {
            "ChatScraperAgent": {
                "methods": [
                    "__init__",
                    "handle_task",
                    "get_all_chats",
                    "filter_chats",
                    "validate_login",
                    "manual_login_flow"
                ],
                "docstring": "ChatScraperAgent: Autonomous agent responsible for scraping chat metadata.",
                "base_classes": [
                    "BaseAgent"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "chat_mate\\core\\Agents\\DocAgent.py": {
        "language": ".py",
        "functions": [
            "run_task",
            "generate_docs"
        ],
        "classes": {
            "DocAgent": {
                "methods": [
                    "run_task",
                    "generate_docs"
                ],
                "docstring": "Agent for handling documentation generation tasks.",
                "base_classes": [
                    "CursorAgentInterface"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "chat_mate\\core\\Agents\\CursorAgentInterface.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "run_task",
            "_format_prompt",
            "_log_task_start",
            "_log_task_complete"
        ],
        "classes": {
            "CursorAgentInterface": {
                "methods": [
                    "__init__",
                    "run_task",
                    "_format_prompt",
                    "_log_task_start",
                    "_log_task_complete"
                ],
                "docstring": "Base interface for Cursor-based agents.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "chat_mate\\core\\Agents\\main.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\core\\Agents\\RefactorAgent.py": {
        "language": ".py",
        "functions": [
            "run_task",
            "run_refactor"
        ],
        "classes": {
            "RefactorAgent": {
                "methods": [
                    "run_task",
                    "run_refactor"
                ],
                "docstring": "Agent for handling code refactoring tasks.",
                "base_classes": [
                    "CursorAgentInterface"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "chat_mate\\core\\Agents\\refactoring_utils.py": {
        "language": ".py",
        "functions": [
            "read_file",
            "write_file",
            "parse_code",
            "unparse_code",
            "get_function_bounds",
            "get_class_bounds",
            "get_variable_scope",
            "extract_method",
            "rename_variable",
            "inline_function",
            "format_code"
        ],
        "classes": {
            "CodeAnalyzer": {
                "methods": [
                    "get_function_bounds",
                    "get_class_bounds",
                    "get_variable_scope"
                ],
                "docstring": "Utility class for analyzing Python code.",
                "base_classes": []
            },
            "CodeTransformer": {
                "methods": [
                    "extract_method",
                    "rename_variable",
                    "inline_function"
                ],
                "docstring": "Utility class for transforming Python code.",
                "base_classes": []
            },
            "CodeFormatter": {
                "methods": [
                    "format_code"
                ],
                "docstring": "Utility class for formatting Python code.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "chat_mate\\core\\Agents\\ReinforcementEvaluator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "evaluate_task",
            "optimize_agent",
            "_calculate_code_quality",
            "_calculate_test_coverage",
            "_calculate_doc_coverage",
            "_calculate_performance",
            "_calculate_maintainability",
            "_generate_optimization_suggestions",
            "_update_agent_config"
        ],
        "classes": {
            "EvaluationMetrics": {
                "methods": [],
                "docstring": "Metrics for evaluating agent performance.",
                "base_classes": []
            },
            "ReinforcementEvaluator": {
                "methods": [
                    "__init__",
                    "evaluate_task",
                    "optimize_agent",
                    "_calculate_code_quality",
                    "_calculate_test_coverage",
                    "_calculate_doc_coverage",
                    "_calculate_performance",
                    "_calculate_maintainability",
                    "_generate_optimization_suggestions",
                    "_update_agent_config"
                ],
                "docstring": "Evaluates and optimizes agent performance through reinforcement learning.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "chat_mate\\core\\Agents\\TestAgent.py": {
        "language": ".py",
        "functions": [
            "run_task",
            "run_tests"
        ],
        "classes": {
            "TestAgent": {
                "methods": [
                    "run_task",
                    "run_tests"
                ],
                "docstring": "Agent for handling test generation tasks.",
                "base_classes": [
                    "CursorAgentInterface"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "chat_mate\\core\\Agents\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\core\\Agents\\specialized_agents.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "handle_task",
            "__init__",
            "handle_task",
            "__init__",
            "handle_task"
        ],
        "classes": {
            "SpecializedAgent": {
                "methods": [
                    "__init__",
                    "handle_task"
                ],
                "docstring": "Base class for specialized agents.",
                "base_classes": [
                    "CursorAgentInterface"
                ]
            },
            "TestAgent": {
                "methods": [
                    "__init__",
                    "handle_task"
                ],
                "docstring": "Agent responsible for generating and running tests.",
                "base_classes": [
                    "BaseAgent"
                ]
            },
            "DocAgent": {
                "methods": [
                    "__init__",
                    "handle_task"
                ],
                "docstring": "Agent responsible for generating documentation.",
                "base_classes": [
                    "BaseAgent"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "chat_mate\\core\\chatgpt_automation\\automation_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize_components",
            "scan_project_gui",
            "get_chatgpt_response",
            "switch_model",
            "shutdown",
            "process_file",
            "self_heal_file",
            "select_model",
            "run_tests",
            "deploy_file",
            "prioritize_files",
            "process_all_files",
            "export_chatgpt_context",
            "add_manual_model",
            "close",
            "get_config",
            "update_config",
            "__init__",
            "run",
            "__init__",
            "add_task",
            "wait_for_completion",
            "stop_workers"
        ],
        "classes": {
            "AutomationEngine": {
                "methods": [
                    "__init__",
                    "initialize_components",
                    "scan_project_gui",
                    "get_chatgpt_response",
                    "switch_model",
                    "shutdown",
                    "process_file",
                    "self_heal_file",
                    "select_model",
                    "run_tests",
                    "deploy_file",
                    "prioritize_files",
                    "process_all_files",
                    "export_chatgpt_context",
                    "add_manual_model",
                    "close",
                    "get_config",
                    "update_config"
                ],
                "docstring": "Engine for automating interactions with ChatGPT.",
                "base_classes": []
            },
            "BotWorker": {
                "methods": [
                    "__init__",
                    "run"
                ],
                "docstring": "A background worker that processes file tasks from a queue.",
                "base_classes": [
                    "threading.Thread"
                ]
            },
            "MultibotManager": {
                "methods": [
                    "__init__",
                    "add_task",
                    "wait_for_completion",
                    "stop_workers"
                ],
                "docstring": "Manages a pool of BotWorker threads.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 48
    },
    "chat_mate\\core\\chatgpt_automation\\bot_worker.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_login_with_retries",
            "run",
            "process_task",
            "_revalidate_session",
            "shutdown"
        ],
        "classes": {
            "BotWorker": {
                "methods": [
                    "__init__",
                    "_login_with_retries",
                    "run",
                    "process_task",
                    "_revalidate_session",
                    "shutdown"
                ],
                "docstring": "A threaded worker that processes tasks using OpenAIClient.\nHandles login sessions, periodic revalidation, and task execution.\n\nThis implementation supports:\n  - Robust login with retries\n  - Graceful handling of task exceptions\n  - Periodic session revalidation for long-running tasks\n  - Scalability for beta and production environments",
                "base_classes": [
                    "threading.Thread"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "chat_mate\\core\\chatgpt_automation\\config.py": {
        "language": ".py",
        "functions": [
            "get_models_dir"
        ],
        "classes": {
            "Config": {
                "methods": [
                    "get_models_dir"
                ],
                "docstring": "Configuration class for the chatgpt automation package.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "chat_mate\\core\\chatgpt_automation\\driver_factory.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_driver",
            "get_driver",
            "close_driver"
        ],
        "classes": {
            "DriverFactory": {
                "methods": [
                    "__init__",
                    "create_driver",
                    "get_driver",
                    "close_driver"
                ],
                "docstring": "Factory class for creating and managing ChatGPT drivers.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "chat_mate\\core\\chatgpt_automation\\local_llm_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "close",
            "get_response"
        ],
        "classes": {
            "LocalLLMEngine": {
                "methods": [
                    "__init__",
                    "initialize",
                    "close",
                    "get_response"
                ],
                "docstring": "Engine for running local language models.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "chat_mate\\core\\chatgpt_automation\\model_registry.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_models",
            "get_model",
            "add_model",
            "remove_model",
            "get_registry",
            "clear_registry",
            "update_model",
            "get_model_file"
        ],
        "classes": {
            "ModelRegistry": {
                "methods": [
                    "__init__",
                    "load_models",
                    "get_model",
                    "add_model",
                    "remove_model",
                    "get_registry",
                    "clear_registry",
                    "update_model",
                    "get_model_file"
                ],
                "docstring": "Registry for managing different language models.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "chat_mate\\core\\chatgpt_automation\\post_process_validator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "validate_output",
            "_apply_rule",
            "add_rule",
            "remove_rule",
            "clear_rules",
            "get_rules"
        ],
        "classes": {
            "PostProcessValidator": {
                "methods": [
                    "__init__",
                    "validate_output",
                    "_apply_rule",
                    "add_rule",
                    "remove_rule",
                    "clear_rules",
                    "get_rules"
                ],
                "docstring": "Validator for post-processing model outputs.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "chat_mate\\core\\chatgpt_automation\\setup_chromedriver.py": {
        "language": ".py",
        "functions": [
            "get_chrome_version",
            "download_chromedriver",
            "update_config"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "chat_mate\\core\\chatgpt_automation\\setup_logging.py": {
        "language": ".py",
        "functions": [
            "setup_logging"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "chat_mate\\core\\chatgpt_automation\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\core\\chatgpt_automation\\controllers\\assistant_mode_controller.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "set_input_source",
            "start",
            "stop",
            "is_active",
            "_run_loop"
        ],
        "classes": {
            "AssistantModeController": {
                "methods": [
                    "__init__",
                    "set_input_source",
                    "start",
                    "stop",
                    "is_active",
                    "_run_loop"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "chat_mate\\core\\chatgpt_automation\\controllers\\assistant_orchestrator.py": {
        "language": ".py",
        "functions": [
            "dispatch_action"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "chat_mate\\core\\chatgpt_automation\\controllers\\assistant_parser.py": {
        "language": ".py",
        "functions": [
            "_load_command_config",
            "parse_input"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "chat_mate\\core\\chatgpt_automation\\controllers\\automation_controller.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "update_file",
            "heal_file",
            "run_tests",
            "shutdown"
        ],
        "classes": {
            "AutomationController": {
                "methods": [
                    "__init__",
                    "update_file",
                    "heal_file",
                    "run_tests",
                    "shutdown"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "chat_mate\\core\\chatgpt_automation\\controllers\\log_monitor_service.py": {
        "language": ".py",
        "functions": [
            "get_latest_log"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "chat_mate\\core\\chatgpt_automation\\controllers\\cursor_dispatcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate_tests",
            "self_heal",
            "run_feedback_loop"
        ],
        "classes": {
            "CursorDispatcher": {
                "methods": [
                    "__init__",
                    "generate_tests",
                    "self_heal",
                    "run_feedback_loop"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "chat_mate\\core\\chatgpt_automation\\controllers\\prompt_loop_orchestrator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_context",
            "inject_context",
            "orchestrate_prompt_loop"
        ],
        "classes": {
            "PromptLoopOrchestrator": {
                "methods": [
                    "__init__",
                    "_load_context",
                    "inject_context",
                    "orchestrate_prompt_loop"
                ],
                "docstring": "Manages context injection into prompts and orchestrates a loop\nthat sends combined prompts to ChatGPT and handles the responses.\n\nThis layer is part of Full Sync Mode.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "chat_mate\\core\\chatgpt_automation\\controllers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\core\\chatgpt_automation\\controllers\\speech_input_service.py": {
        "language": ".py",
        "functions": [
            "listen_and_transcribe"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "chat_mate\\core\\chatgpt_automation\\models\\model_gpt4.py": {
        "language": ".py",
        "functions": [
            "process_with_gpt4",
            "register"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "chat_mate\\core\\chatgpt_automation\\models\\model_gpt4o.py": {
        "language": ".py",
        "functions": [
            "process_with_gpt4o",
            "register"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "chat_mate\\core\\chatgpt_automation\\models\\model_gpt4o_mini.py": {
        "language": ".py",
        "functions": [
            "process_with_gpt4o_mini",
            "register"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "chat_mate\\core\\chatgpt_automation\\models\\model_gpt4_5.py": {
        "language": ".py",
        "functions": [
            "process_with_gpt4_5",
            "register"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "chat_mate\\core\\chatgpt_automation\\models\\model_mistral.py": {
        "language": ".py",
        "functions": [
            "register"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "chat_mate\\core\\chatgpt_automation\\models\\model_o1.py": {
        "language": ".py",
        "functions": [
            "process_with_o1",
            "register"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "chat_mate\\core\\chatgpt_automation\\models\\model_o3_mini.py": {
        "language": ".py",
        "functions": [
            "process_with_o3mini",
            "register"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "chat_mate\\core\\chatgpt_automation\\models\\model_o3_mini_high.py": {
        "language": ".py",
        "functions": [
            "process_with_o3_mini_high",
            "register"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "chat_mate\\core\\chatgpt_automation\\models\\model_template.py": {
        "language": ".py",
        "functions": [
            "process_with_template",
            "register"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "chat_mate\\core\\chatgpt_automation\\models\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\core\\chatgpt_automation\\views\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\core\\chatgpt_automation\\performance\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\core\\chatgpt_automation\\performance\\ModelPerformanceTracker.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "record_execution",
            "get_average_attempts",
            "rank_models",
            "choose_model",
            "print_metrics"
        ],
        "classes": {
            "ModelPerformanceTracker": {
                "methods": [
                    "__init__",
                    "record_execution",
                    "get_average_attempts",
                    "rank_models",
                    "choose_model",
                    "print_metrics"
                ],
                "docstring": "Tracks model performance based on the number of attempts needed to generate working tests.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "chat_mate\\core\\chatgpt_automation\\watchers\\ModelFolderWatcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_debounced_reload",
            "_should_handle",
            "on_modified",
            "on_created",
            "on_deleted",
            "start",
            "_watch_loop",
            "stop",
            "reload_wrapper"
        ],
        "classes": {
            "ModelFolderWatcher": {
                "methods": [
                    "__init__",
                    "_debounced_reload",
                    "_should_handle",
                    "on_modified",
                    "on_created",
                    "on_deleted",
                    "start",
                    "_watch_loop",
                    "stop"
                ],
                "docstring": "Watches the models directory for changes and triggers a model registry reload,\ndebouncing rapid events to avoid redundant reloads.\n\nImprovements:\n  - Configurable file extensions (defaults to .py).\n  - Robust error handling when reloading models.\n  - Ready for beta/production with clear logging and thread management.",
                "base_classes": [
                    "FileSystemEventHandler"
                ]
            }
        },
        "routes": [],
        "complexity": 19
    },
    "chat_mate\\core\\chatgpt_automation\\watchers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\core\\chat_engine\\chat_cycle_controller.py": {
        "language": ".py",
        "functions": [
            "sanitize_filename",
            "__init__",
            "append_output",
            "start",
            "process_chat",
            "run_single_chat",
            "retrieve_project_context",
            "post_cycle_analysis",
            "_save_prompt_response",
            "_save_run_summary",
            "shutdown"
        ],
        "classes": {
            "ChatCycleController": {
                "methods": [
                    "__init__",
                    "append_output",
                    "start",
                    "process_chat",
                    "run_single_chat",
                    "retrieve_project_context",
                    "post_cycle_analysis",
                    "_save_prompt_response",
                    "_save_run_summary",
                    "shutdown"
                ],
                "docstring": "Master orchestrator for chat scraping, prompt cycles,\nmemory updates, and Discord dispatching.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 21
    },
    "chat_mate\\core\\chat_engine\\chat_engine_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_memory",
            "start",
            "shutdown",
            "shutdown_driver",
            "send_prompt",
            "get_all_chat_titles",
            "execute_prompts_single_chat",
            "analyze_execution_response",
            "send_chat_prompt",
            "switch_execution_mode",
            "generate_dreamscape_episode",
            "execute_prompt_cycle",
            "queue_prompts",
            "get_last_response",
            "inject_context",
            "run_cycle"
        ],
        "classes": {
            "ChatEngineManager": {
                "methods": [
                    "__init__",
                    "_load_memory",
                    "start",
                    "shutdown",
                    "shutdown_driver",
                    "send_prompt",
                    "get_all_chat_titles",
                    "execute_prompts_single_chat",
                    "analyze_execution_response",
                    "send_chat_prompt",
                    "switch_execution_mode",
                    "generate_dreamscape_episode",
                    "execute_prompt_cycle",
                    "queue_prompts",
                    "get_last_response",
                    "inject_context",
                    "run_cycle"
                ],
                "docstring": "Facade for managing the chat engine services.\nThis class coordinates the various components of the chat engine.",
                "base_classes": [
                    "IChatManager"
                ]
            }
        },
        "routes": [],
        "complexity": 34
    },
    "chat_mate\\core\\chat_engine\\chat_scraper_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_driver",
            "get_all_chats",
            "get_filtered_chats",
            "validate_login",
            "manual_login_flow"
        ],
        "classes": {
            "ChatScraperService": {
                "methods": [
                    "__init__",
                    "get_driver",
                    "get_all_chats",
                    "get_filtered_chats",
                    "validate_login",
                    "manual_login_flow"
                ],
                "docstring": "ChatScraperService retrieves available chat titles and links from the chat UI.\nIt handles exclusions and filtering for downstream execution cycles.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "chat_mate\\core\\chat_engine\\discord_dispatcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_setup_events",
            "send_message",
            "dispatch_memory_update",
            "dispatch_dreamscape_episode",
            "dispatch_feedback_loop",
            "run_bot",
            "shutdown"
        ],
        "classes": {
            "DiscordDispatcher": {
                "methods": [
                    "__init__",
                    "_setup_events",
                    "send_message",
                    "dispatch_memory_update",
                    "dispatch_dreamscape_episode",
                    "dispatch_feedback_loop",
                    "run_bot",
                    "shutdown"
                ],
                "docstring": "DiscordDispatcher - Manages communication to a Discord server.\nSends updates on system events, memory updates, and AI output.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "chat_mate\\core\\chat_engine\\feedback_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_memory",
            "_save_memory",
            "save_memory_async",
            "parse_and_update_memory",
            "apply_memory_updates",
            "log_feedback",
            "export_feedback_log",
            "analyze_feedback",
            "review_memory",
            "feedback_loop",
            "save_context_memory_async",
            "save_context_db",
            "review_context_memory"
        ],
        "classes": {
            "FeedbackEngine": {
                "methods": [
                    "__init__",
                    "_load_memory",
                    "_save_memory",
                    "save_memory_async",
                    "parse_and_update_memory",
                    "apply_memory_updates",
                    "log_feedback",
                    "export_feedback_log",
                    "analyze_feedback",
                    "review_memory",
                    "feedback_loop",
                    "save_context_memory_async",
                    "save_context_db",
                    "review_context_memory"
                ],
                "docstring": "FeedbackEngine - Parses AI responses, updates persistent memory,\ntracks reinforcement loops, and evolves Victor.OS intelligence.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 28
    },
    "chat_mate\\core\\chat_engine\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\core\\chat_engine\\gui_event_handler.py": {
        "language": ".py",
        "functions": [
            "run_gui",
            "__init__",
            "init_ui",
            "toggle_headless",
            "toggle_reverse",
            "toggle_archive",
            "start_dispatcher",
            "stop_dispatcher",
            "log",
            "closeEvent"
        ],
        "classes": {
            "GUIEventHandler": {
                "methods": [
                    "__init__",
                    "init_ui",
                    "toggle_headless",
                    "toggle_reverse",
                    "toggle_archive",
                    "start_dispatcher",
                    "stop_dispatcher",
                    "log",
                    "closeEvent"
                ],
                "docstring": "GUI Event Handler for ChatMate Agent Control Panel\n- Control Config Flags (Headless, Reverse Order, Archive)\n- Start/Stop the Agent Dispatcher\n- Display logs or status updates",
                "base_classes": [
                    "QMainWindow"
                ]
            }
        },
        "routes": [],
        "complexity": 19
    },
    "chat_mate\\core\\config\\ConfigManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get",
            "_ensure_valid_path",
            "set",
            "_load_config",
            "_save_config",
            "get_path"
        ],
        "classes": {
            "ConfigManager": {
                "methods": [
                    "__init__",
                    "get",
                    "_ensure_valid_path",
                    "set",
                    "_load_config",
                    "_save_config",
                    "get_path"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "chat_mate\\core\\config\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\core\\dreamscape\\dreamscape_automation.py": {
        "language": ".py",
        "functions": [
            "parse_args",
            "main",
            "__init__",
            "initialize_services",
            "get_excluded_chats",
            "get_available_chats",
            "process_chat",
            "send_to_discord",
            "save_archive",
            "run",
            "shutdown"
        ],
        "classes": {
            "DigitalDreamscapeEpisodesPipeline": {
                "methods": [
                    "__init__",
                    "initialize_services",
                    "get_excluded_chats",
                    "get_available_chats",
                    "process_chat",
                    "send_to_discord",
                    "save_archive",
                    "run",
                    "shutdown"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "chat_mate\\core\\dreamscape\\TemplateRenderer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_setup_jinja_env",
            "load_template",
            "render_template",
            "render_string_template",
            "validate_template_context"
        ],
        "classes": {
            "TemplateRenderer": {
                "methods": [
                    "__init__",
                    "_setup_jinja_env",
                    "load_template",
                    "render_template",
                    "render_string_template",
                    "validate_template_context"
                ],
                "docstring": "Handles all template rendering operations for Dreamscape episodes.\nUses Jinja2 to load and render templates with context data.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "chat_mate\\core\\dreamscape\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\core\\executors\\base_executor.py": {
        "language": ".py",
        "functions": [
            "shutdown"
        ],
        "classes": {
            "BaseExecutor": {
                "methods": [
                    "shutdown"
                ],
                "docstring": "Base interface for prompt executors.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "chat_mate\\core\\executors\\chatgpt_executor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "shutdown"
        ],
        "classes": {
            "ChatGPTExecutor": {
                "methods": [
                    "__init__",
                    "shutdown"
                ],
                "docstring": "Executor for running prompts through ChatGPT web interface.",
                "base_classes": [
                    "BaseExecutor"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "chat_mate\\core\\executors\\cursor_executor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_process_response",
            "shutdown"
        ],
        "classes": {
            "CursorExecutor": {
                "methods": [
                    "__init__",
                    "_process_response",
                    "shutdown"
                ],
                "docstring": "Executor for running prompts through Cursor's websocket interface.",
                "base_classes": [
                    "BaseExecutor"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "chat_mate\\core\\executors\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\core\\interfaces\\IDreamscapeService.py": {
        "language": ".py",
        "functions": [
            "load_context_from_file",
            "generate_context_from_memory",
            "render_episode",
            "save_episode",
            "generate_episode_from_template",
            "generate_episode_from_memory"
        ],
        "classes": {
            "IDreamscapeService": {
                "methods": [
                    "load_context_from_file",
                    "generate_context_from_memory",
                    "render_episode",
                    "save_episode",
                    "generate_episode_from_template",
                    "generate_episode_from_memory"
                ],
                "docstring": "Interface for Dreamscape generation services.\nDefines standard methods for episode generation and rendering.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "chat_mate\\core\\interfaces\\IPromptManager.py": {
        "language": ".py",
        "functions": [
            "get_prompt",
            "list_available_prompts",
            "load_memory_state",
            "save_memory_state",
            "record_conversation",
            "start_conversation_cycle",
            "end_conversation_cycle"
        ],
        "classes": {
            "IPromptManager": {
                "methods": [
                    "get_prompt",
                    "list_available_prompts",
                    "load_memory_state",
                    "save_memory_state",
                    "record_conversation",
                    "start_conversation_cycle",
                    "end_conversation_cycle"
                ],
                "docstring": "Interface for prompt management services.\nDefines standard methods for prompt retrieval, storage and memory management.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 14
    },
    "chat_mate\\core\\interfaces\\ILoggingAgent.py": {
        "language": ".py",
        "functions": [
            "log",
            "log_error",
            "log_debug",
            "log_event",
            "log_system_event"
        ],
        "classes": {
            "ILoggingAgent": {
                "methods": [
                    "log",
                    "log_error",
                    "log_debug",
                    "log_event",
                    "log_system_event"
                ],
                "docstring": "Base interface for logging agents.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "chat_mate\\core\\interfaces\\IPromptOrchestrator.py": {
        "language": ".py",
        "functions": [
            "set_chat_manager",
            "execute_single_cycle",
            "execute_multi_cycle",
            "get_available_prompts",
            "get_prompt",
            "save_prompt",
            "shutdown"
        ],
        "classes": {
            "IPromptOrchestrator": {
                "methods": [
                    "set_chat_manager",
                    "execute_single_cycle",
                    "execute_multi_cycle",
                    "get_available_prompts",
                    "get_prompt",
                    "save_prompt",
                    "shutdown"
                ],
                "docstring": "Interface for prompt cycle orchestration services.\nDefines standard methods for executing prompt cycles and managing prompts.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 14
    },
    "chat_mate\\core\\interfaces\\logging.py": {
        "language": ".py",
        "functions": [
            "log",
            "log_error",
            "log_debug",
            "log_event",
            "log_system_event"
        ],
        "classes": {
            "ILoggingAgent": {
                "methods": [
                    "log",
                    "log_error",
                    "log_debug",
                    "log_event",
                    "log_system_event"
                ],
                "docstring": "Base interface for logging agents.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "chat_mate\\core\\interfaces\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\core\\llm_backends\\huggingface_backend.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_model",
            "generate"
        ],
        "classes": {
            "HuggingFaceBackend": {
                "methods": [
                    "__init__",
                    "load_model",
                    "generate"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "chat_mate\\core\\llm_backends\\ollama_backend.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate"
        ],
        "classes": {
            "OllamaBackend": {
                "methods": [
                    "__init__",
                    "generate"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "chat_mate\\core\\llm_backends\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\core\\logging\\CompositeLogger.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_safe_log",
            "log",
            "log_error",
            "log_debug",
            "log_event",
            "log_system_event",
            "add_logger",
            "remove_logger",
            "shutdown"
        ],
        "classes": {
            "CompositeLogger": {
                "methods": [
                    "__init__",
                    "_safe_log",
                    "log",
                    "log_error",
                    "log_debug",
                    "log_event",
                    "log_system_event",
                    "add_logger",
                    "remove_logger",
                    "shutdown"
                ],
                "docstring": "Composite logger that manages multiple logging handlers.",
                "base_classes": [
                    "ILoggingAgent"
                ]
            }
        },
        "routes": [],
        "complexity": 20
    },
    "chat_mate\\core\\logging\\ConsoleLogger.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_format_message",
            "debug",
            "info",
            "warning",
            "error",
            "critical",
            "log"
        ],
        "classes": {
            "ConsoleLogger": {
                "methods": [
                    "__init__",
                    "_format_message",
                    "debug",
                    "info",
                    "warning",
                    "error",
                    "critical",
                    "log"
                ],
                "docstring": "A logger that outputs messages to the console with color formatting.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "chat_mate\\core\\logging\\LoggingService.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_add_console_handler",
            "_add_file_handler",
            "add_custom_handler",
            "debug",
            "info",
            "warning",
            "error",
            "critical",
            "exception",
            "log_system_event",
            "set_level",
            "log"
        ],
        "classes": {
            "LoggingService": {
                "methods": [
                    "__init__",
                    "_add_console_handler",
                    "_add_file_handler",
                    "add_custom_handler",
                    "debug",
                    "info",
                    "warning",
                    "error",
                    "critical",
                    "exception",
                    "log_system_event",
                    "set_level",
                    "log"
                ],
                "docstring": "Centralized logging service that provides standardized logging capabilities\nacross the application. Supports multiple output destinations including\nconsole, file, and custom handlers.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "chat_mate\\core\\logging\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\core\\logging\\factories\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\core\\logging\\factories\\LoggerFactory.py": {
        "language": ".py",
        "functions": [
            "create_standard_logger",
            "create_module_logger",
            "create_agent_logger",
            "get_logger"
        ],
        "classes": {
            "LoggerFactory": {
                "methods": [
                    "create_standard_logger",
                    "create_module_logger",
                    "create_agent_logger",
                    "get_logger"
                ],
                "docstring": "Factory class for creating standardized loggers across the application.\nProvides methods to create different types of loggers with consistent \nconfiguration.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "chat_mate\\core\\logging\\handlers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\core\\logging\\services\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\core\\logging\\services\\ai_output_service.py": {
        "language": ".py",
        "functions": [
            "log_ai_output",
            "sanitize_filename"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "chat_mate\\core\\logging\\utils\\setup.py": {
        "language": ".py",
        "functions": [
            "setup_logging"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "chat_mate\\core\\logging\\utils\\AsyncDispatcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_start_worker",
            "_process_queue",
            "dispatch",
            "get_metrics",
            "shutdown"
        ],
        "classes": {
            "DispatcherMetrics": {
                "methods": [],
                "docstring": "Metrics for the AsyncDispatcher.",
                "base_classes": []
            },
            "AsyncDispatcher": {
                "methods": [
                    "__init__",
                    "_start_worker",
                    "_process_queue",
                    "dispatch",
                    "get_metrics",
                    "shutdown"
                ],
                "docstring": "Handles asynchronous dispatch of logging operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "chat_mate\\core\\logging\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\core\\memory\\context.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_ensure_output_dir",
            "save_context",
            "load_context",
            "update_context",
            "_deep_update",
            "delete_context",
            "list_contexts",
            "clear_all"
        ],
        "classes": {
            "ContextMemoryManager": {
                "methods": [
                    "__init__",
                    "_ensure_output_dir",
                    "save_context",
                    "load_context",
                    "update_context",
                    "_deep_update",
                    "delete_context",
                    "list_contexts",
                    "clear_all"
                ],
                "docstring": "Manages context-specific memory storage and retrieval, particularly for\nDreamscape episode generation and other context-dependent features.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "chat_mate\\core\\memory\\feedback.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "to_dict",
            "from_dict",
            "__new__",
            "__init__",
            "_load_feedback",
            "_save_feedback",
            "add_feedback",
            "get_feedback",
            "mark_processed",
            "add_tags",
            "update_metadata",
            "clear_all",
            "get_stats"
        ],
        "classes": {
            "FeedbackEntry": {
                "methods": [
                    "__init__",
                    "to_dict",
                    "from_dict"
                ],
                "docstring": "Represents a single feedback entry with metadata.",
                "base_classes": []
            },
            "UnifiedFeedbackMemory": {
                "methods": [
                    "__new__",
                    "__init__",
                    "_load_feedback",
                    "_save_feedback",
                    "add_feedback",
                    "get_feedback",
                    "mark_processed",
                    "add_tags",
                    "update_metadata",
                    "clear_all",
                    "get_stats"
                ],
                "docstring": "Singleton class that provides global access to the UnifiedFeedbackMemory.\nHandles storage, retrieval, and analysis of system feedback across components.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 28
    },
    "chat_mate\\core\\memory\\database.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_initialize_db",
            "record_interaction",
            "initialize_conversation",
            "get_conversation",
            "get_user_interactions",
            "get_conversation_metadata",
            "clear_user_interactions",
            "close"
        ],
        "classes": {
            "DatabaseManager": {
                "methods": [
                    "__init__",
                    "_initialize_db",
                    "record_interaction",
                    "initialize_conversation",
                    "get_conversation",
                    "get_user_interactions",
                    "get_conversation_metadata",
                    "clear_user_interactions",
                    "close"
                ],
                "docstring": "DatabaseManager stores interactions and conversation metadata for\nlong-term retention using SQLite.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "chat_mate\\core\\memory\\MeritChainManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_schema",
            "validate_entry",
            "save",
            "query",
            "all",
            "get_by_username",
            "_load",
            "_write"
        ],
        "classes": {
            "MeritChainManager": {
                "methods": [
                    "__init__",
                    "_load_schema",
                    "validate_entry",
                    "save",
                    "query",
                    "all",
                    "get_by_username",
                    "_load",
                    "_write"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "chat_mate\\core\\memory\\manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_register_failure_handlers",
            "_load_memory",
            "_create_initial_memory",
            "_save_memory",
            "set",
            "get",
            "delete",
            "clear_segment",
            "get_segment_keys",
            "get_segment_size",
            "optimize",
            "get_stats",
            "close",
            "handle_memory_corruption",
            "handle_cache_error"
        ],
        "classes": {
            "MemoryManager": {
                "methods": [
                    "__init__",
                    "_register_failure_handlers",
                    "_load_memory",
                    "_create_initial_memory",
                    "_save_memory",
                    "set",
                    "get",
                    "delete",
                    "clear_segment",
                    "get_segment_keys",
                    "get_segment_size",
                    "optimize",
                    "get_stats",
                    "close"
                ],
                "docstring": "MemoryManager combines:\n  - LRU caching + zlib compression for short-term memory\n  - JSON-based loading/saving with schema validation + backup on corruption\n  - SQLite-based long-term storage of interactions\n  - Conversation/interaction management\n  - Narrative generation via Jinja2 templates",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 30
    },
    "chat_mate\\core\\memory\\utils.py": {
        "language": ".py",
        "functions": [
            "load_memory_file",
            "repair_memory_file",
            "create_backup",
            "fix_memory_file",
            "merge_memory_files",
            "validate_memory_structure",
            "_validate_type",
            "_validate_object"
        ],
        "classes": {},
        "routes": [],
        "complexity": 8
    },
    "chat_mate\\core\\memory\\__init__.py": {
        "language": ".py",
        "functions": [
            "to_dict",
            "from_dict"
        ],
        "classes": {
            "FeedbackEntry": {
                "methods": [
                    "to_dict",
                    "from_dict"
                ],
                "docstring": "Data class for feedback entries.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "chat_mate\\core\\meredith\\profile_scraper.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "scrape_profiles",
            "__init__",
            "scrape_profiles",
            "_safe_get_text",
            "__init__",
            "scrape_profiles",
            "__init__",
            "scrape_profiles",
            "__init__",
            "_init_driver",
            "register_scraper",
            "register_default_scrapers",
            "run_all",
            "close",
            "filter_by_location",
            "filter_by_gender"
        ],
        "classes": {
            "BaseScraper": {
                "methods": [
                    "__init__",
                    "scrape_profiles"
                ],
                "docstring": "Abstract base class that enforces a 'scrape_profiles' method.\nEach platform-specific scraper will inherit and implement its own logic.",
                "base_classes": [
                    "ABC"
                ]
            },
            "TwitterScraper": {
                "methods": [
                    "__init__",
                    "scrape_profiles",
                    "_safe_get_text"
                ],
                "docstring": "Scrapes Twitter user search results based on a text query.",
                "base_classes": [
                    "BaseScraper"
                ]
            },
            "InstagramScraper": {
                "methods": [
                    "__init__",
                    "scrape_profiles"
                ],
                "docstring": "Scrapes Instagram hashtag pages to find recent posts, used here as a proxy\nfor user profiles. Real user data might require additional steps or logins.",
                "base_classes": [
                    "BaseScraper"
                ]
            },
            "FacebookScraper": {
                "methods": [
                    "__init__",
                    "scrape_profiles"
                ],
                "docstring": "Scrapes public Facebook \"people\" search results. Facebook often requires\nlogin or advanced dynamic handling, so YMMV with purely anonymous scraping.",
                "base_classes": [
                    "BaseScraper"
                ]
            },
            "ScraperManager": {
                "methods": [
                    "__init__",
                    "_init_driver",
                    "register_scraper",
                    "register_default_scrapers",
                    "run_all",
                    "close"
                ],
                "docstring": "Orchestrates multiple platform scrapers, aggregates their results,\nand manages the Selenium WebDriver lifecycle.",
                "base_classes": []
            },
            "ProfileFilter": {
                "methods": [
                    "filter_by_location",
                    "filter_by_gender"
                ],
                "docstring": "A utility class to filter scraped profiles by location, gender, or any custom rules.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 35
    },
    "chat_mate\\core\\meredith\\resonance_scorer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_model",
            "score_profile"
        ],
        "classes": {
            "ResonanceScorer": {
                "methods": [
                    "__init__",
                    "load_model",
                    "score_profile"
                ],
                "docstring": "Loads a resonance model (e.g. romantic.json, side_chick.json, etc.)\nand scores a given profile dict based on alignment with:\n  - required traits\n  - bonus traits\n  - frequency keywords\n  - deal breakers\n  - location preference (ZIP or keywords)\n\nDesigned for dynamic model switching via `load_model(path)`.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "chat_mate\\core\\meredith\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\core\\micro_factories\\chat_factory.py": {
        "language": ".py",
        "functions": [
            "create_chat_manager"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "chat_mate\\core\\micro_factories\\orchestrator_factory.py": {
        "language": ".py",
        "functions": [
            "create_orchestrator"
        ],
        "classes": {
            "OrchestratorFactory": {
                "methods": [
                    "create_orchestrator"
                ],
                "docstring": "Factory for creating PromptCycleOrchestrator instances.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "chat_mate\\core\\micro_factories\\prompt_factory.py": {
        "language": ".py",
        "functions": [
            "create_prompt_manager"
        ],
        "classes": {
            "PromptFactory": {
                "methods": [
                    "create_prompt_manager"
                ],
                "docstring": "Factory for creating PromptManager instances.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "chat_mate\\core\\micro_factories\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\core\\openai\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\core\\openai\\OpenAIClient.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_config",
            "get_openai_driver",
            "save_openai_cookies",
            "load_openai_cookies",
            "is_logged_in",
            "boot",
            "_assert_ready",
            "login_openai",
            "send_prompt_smoothly",
            "get_chatgpt_response",
            "get_full_response",
            "process_prompt",
            "get_full_response_for_debug",
            "shutdown",
            "_force_kill_chromedriver",
            "closeEvent"
        ],
        "classes": {
            "OpenAIClient": {
                "methods": [
                    "__init__",
                    "_load_config",
                    "get_openai_driver",
                    "save_openai_cookies",
                    "load_openai_cookies",
                    "is_logged_in",
                    "boot",
                    "_assert_ready",
                    "login_openai",
                    "send_prompt_smoothly",
                    "get_chatgpt_response",
                    "get_full_response",
                    "process_prompt",
                    "get_full_response_for_debug",
                    "shutdown",
                    "_force_kill_chromedriver",
                    "closeEvent"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 34
    },
    "chat_mate\\core\\pipelines\\project_optimizer_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_optimization_plan",
            "create_prompts_from_plan",
            "_render_action_prompt"
        ],
        "classes": {
            "ProjectOptimizerAgent": {
                "methods": [
                    "__init__",
                    "load_optimization_plan",
                    "create_prompts_from_plan",
                    "_render_action_prompt"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "chat_mate\\core\\pipelines\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\core\\prompt_cycle\\dialog.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initUI",
            "start_cycle"
        ],
        "classes": {
            "PromptCycleDialog": {
                "methods": [
                    "__init__",
                    "initUI",
                    "start_cycle"
                ],
                "docstring": "Dialog for selecting prompts to include in the cycle.",
                "base_classes": [
                    "QDialog"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "chat_mate\\core\\prompt_cycle\\audit.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "perform_audit",
            "_generate_audit_prompt",
            "_process_audit_response",
            "_generate_audit_report",
            "get_audit_history",
            "get_latest_audit"
        ],
        "classes": {
            "AuditManager": {
                "methods": [
                    "__init__",
                    "perform_audit",
                    "_generate_audit_prompt",
                    "_process_audit_response",
                    "_generate_audit_report",
                    "get_audit_history",
                    "get_latest_audit"
                ],
                "docstring": "Manages AI audits and audit reporting for the prompt cycle system.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "chat_mate\\core\\prompt_cycle\\memory.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_memory",
            "_save_memory",
            "store_insights",
            "get_insights",
            "update",
            "search_memory",
            "generate_memory_report"
        ],
        "classes": {
            "MemoryManager": {
                "methods": [
                    "__init__",
                    "_load_memory",
                    "_save_memory",
                    "store_insights",
                    "get_insights",
                    "update",
                    "search_memory",
                    "generate_memory_report"
                ],
                "docstring": "Manages memory for the prompt cycle system.\nHandles storing, retrieving, and updating insights from interactions.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "chat_mate\\core\\prompt_cycle\\narrative.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_setup_template_env",
            "extract_narrative_elements",
            "process_response",
            "broadcast_update",
            "_format_narrative_message",
            "generate_narrative_report",
            "add_event"
        ],
        "classes": {
            "NarrativeManager": {
                "methods": [
                    "__init__",
                    "_setup_template_env",
                    "extract_narrative_elements",
                    "process_response",
                    "broadcast_update",
                    "_format_narrative_message",
                    "generate_narrative_report",
                    "add_event"
                ],
                "docstring": "Manages narrative tracking and updates for the prompt cycle system.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "chat_mate\\core\\prompt_cycle\\scraping.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "scrape_conversations",
            "_scrape_thread",
            "_get_contextual_prompt",
            "_manual_login",
            "_wait_for_page_load",
            "_handle_rate_limiting"
        ],
        "classes": {
            "ConversationScraper": {
                "methods": [
                    "__init__",
                    "scrape_conversations",
                    "_scrape_thread",
                    "_get_contextual_prompt",
                    "_manual_login",
                    "_wait_for_page_load",
                    "_handle_rate_limiting"
                ],
                "docstring": "Manages conversation scraping and processing.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "chat_mate\\core\\prompt_cycle\\utils.py": {
        "language": ".py",
        "functions": [
            "sanitize",
            "get_timestamp",
            "ensure_directory"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "chat_mate\\core\\prompt_cycle\\state.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_state",
            "_save_state",
            "get_state",
            "update_state",
            "_deep_merge",
            "increment_metric",
            "add_event",
            "update_configuration",
            "get_metrics",
            "get_events",
            "get_configuration",
            "reset_state",
            "generate_system_report"
        ],
        "classes": {
            "SystemState": {
                "methods": [
                    "__init__",
                    "_load_state",
                    "_save_state",
                    "get_state",
                    "update_state",
                    "_deep_merge",
                    "increment_metric",
                    "add_event",
                    "update_configuration",
                    "get_metrics",
                    "get_events",
                    "get_configuration",
                    "reset_state",
                    "generate_system_report"
                ],
                "docstring": "Manages the state of the prompt cycle system.\nTracks system metrics, events, and configuration.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 28
    },
    "chat_mate\\core\\prompt_cycle\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\core\\refactor\\CursorSessionManager.py": {
        "language": ".py",
        "functions": [
            "_demo",
            "__init__",
            "_load_or_calibrate_coords",
            "_save_calibrated_coords",
            "_calibrate",
            "queue_task",
            "start_loop",
            "stop_loop",
            "accept_next_task",
            "toggle_auto_accept",
            "set_on_update_callback",
            "build_prompt_batch",
            "run_overnight_mode",
            "_task_loop",
            "_execute_task",
            "_inject_context",
            "_focus_cursor_window",
            "_click_coordinate",
            "_type_prompt_and_send",
            "_wait_for_response",
            "shutdown"
        ],
        "classes": {
            "CursorSessionManager": {
                "methods": [
                    "__init__",
                    "_load_or_calibrate_coords",
                    "_save_calibrated_coords",
                    "_calibrate",
                    "queue_task",
                    "start_loop",
                    "stop_loop",
                    "accept_next_task",
                    "toggle_auto_accept",
                    "set_on_update_callback",
                    "build_prompt_batch",
                    "run_overnight_mode",
                    "_task_loop",
                    "_execute_task",
                    "_inject_context",
                    "_focus_cursor_window",
                    "_click_coordinate",
                    "_type_prompt_and_send",
                    "_wait_for_response",
                    "shutdown"
                ],
                "docstring": "Unified class that handles:\n  1) UI calibration for Cursor (prompt box + accept button)\n  2) Task queueing with auto/manual acceptance\n  3) Batch prompt building (optional)\n  4) Dynamic wait for 'Accept' detection\n  5) Execution history of tasks",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 41
    },
    "chat_mate\\core\\refactor\\refactor_and_polish.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "chat_mate\\core\\refactor\\cursor_dispatcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_create_timestamp",
            "load_and_render",
            "run_prompt",
            "send_to_cursor",
            "wait_for_cursor_edit",
            "wait_for_cursor_edit_with_timeout",
            "send_and_wait",
            "run_tests",
            "_create_test_file",
            "_append_to_json",
            "execute_prompt_sequence",
            "git_commit_changes",
            "install_git_hook"
        ],
        "classes": {
            "CursorDispatcher": {
                "methods": [
                    "__init__",
                    "_create_timestamp",
                    "load_and_render",
                    "run_prompt",
                    "send_to_cursor",
                    "wait_for_cursor_edit",
                    "wait_for_cursor_edit_with_timeout",
                    "send_and_wait",
                    "run_tests",
                    "_create_test_file",
                    "_append_to_json",
                    "execute_prompt_sequence",
                    "git_commit_changes",
                    "install_git_hook"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 28
    },
    "chat_mate\\core\\refactor\\task_refactor_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_tasks",
            "run",
            "_handle_extract",
            "_handle_replace",
            "_apply_changes"
        ],
        "classes": {
            "TaskRefactorEngine": {
                "methods": [
                    "__init__",
                    "_load_tasks",
                    "run",
                    "_handle_extract",
                    "_handle_replace",
                    "_apply_changes"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "chat_mate\\core\\refactor\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\core\\scraping\\web_chat_scraper.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_driver",
            "navigate_to_chatgpt",
            "scrape_chat_list",
            "navigate_to_chat",
            "load_all_chat_messages",
            "extract_message_content",
            "scrape_chat_by_title"
        ],
        "classes": {
            "WebChatScraper": {
                "methods": [
                    "__init__",
                    "get_driver",
                    "navigate_to_chatgpt",
                    "scrape_chat_list",
                    "navigate_to_chat",
                    "load_all_chat_messages",
                    "extract_message_content",
                    "scrape_chat_by_title"
                ],
                "docstring": "WebChatScraper extracts chat data directly from the ChatGPT web interface.\nIt uses Selenium to navigate the DOM and extract chat titles and message content.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "chat_mate\\core\\services\\chat_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_chat_manager",
            "shutdown",
            "is_running",
            "get_chat_manager",
            "get_chat_history",
            "send_message",
            "get_response",
            "get_model",
            "get_config",
            "_get_driver_options",
            "get_driver",
            "_get_driver_service"
        ],
        "classes": {
            "ChatService": {
                "methods": [
                    "__init__",
                    "create_chat_manager",
                    "shutdown",
                    "is_running",
                    "get_chat_manager",
                    "get_chat_history",
                    "send_message",
                    "get_response",
                    "get_model",
                    "get_config",
                    "_get_driver_options",
                    "get_driver",
                    "_get_driver_service"
                ],
                "docstring": "Manages the lifecycle of the ChatManager and Selenium WebDriver\nfor chat execution. Provides helper methods to interact with\nthe chat interface, retrieve responses, and manage driver options.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "chat_mate\\core\\services\\config_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_config",
            "_create_default_config",
            "_save_config",
            "get",
            "set",
            "reset_to_defaults"
        ],
        "classes": {
            "ConfigService": {
                "methods": [
                    "__init__",
                    "_load_config",
                    "_create_default_config",
                    "_save_config",
                    "get",
                    "set",
                    "reset_to_defaults"
                ],
                "docstring": "Service for managing application configuration.\nHandles loading, saving, and accessing configuration values.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "chat_mate\\core\\services\\discord_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "launch_bot",
            "stop_bot",
            "send_message",
            "send_file",
            "send_template",
            "get_status",
            "is_running"
        ],
        "classes": {
            "DiscordService": {
                "methods": [
                    "__init__",
                    "launch_bot",
                    "stop_bot",
                    "send_message",
                    "send_file",
                    "send_template",
                    "get_status",
                    "is_running"
                ],
                "docstring": "Service layer for Discord integration.\nProvides a Qt-friendly interface to the UnifiedDiscordService.",
                "base_classes": [
                    "QObject"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "chat_mate\\core\\services\\debug_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start_debug_session",
            "get_debug_info",
            "_save_debug_info",
            "_get_current_timestamp"
        ],
        "classes": {
            "DebugService": {
                "methods": [
                    "__init__",
                    "start_debug_session",
                    "get_debug_info",
                    "_save_debug_info",
                    "_get_current_timestamp"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "chat_mate\\core\\services\\dreamscape_episode_chain.py": {
        "language": ".py",
        "functions": [
            "writeback_to_memory",
            "parse_last_episode_summary",
            "update_episode_chain",
            "get_context_from_chain",
            "_extract_with_pattern"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "chat_mate\\core\\services\\DynamicContainer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "register",
            "get",
            "has",
            "_create_empty_service",
            "__init__",
            "__getattr__",
            "method"
        ],
        "classes": {
            "DynamicContainer": {
                "methods": [
                    "__init__",
                    "register",
                    "get",
                    "has",
                    "_create_empty_service"
                ],
                "docstring": "A dynamic service container that supports lazy loading and dependency injection.",
                "base_classes": []
            },
            "EmptyService": {
                "methods": [
                    "__init__",
                    "__getattr__"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 15
    },
    "chat_mate\\core\\services\\fix_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "apply_fix",
            "fix_issue",
            "_log_fix",
            "_get_current_timestamp"
        ],
        "classes": {
            "FixService": {
                "methods": [
                    "__init__",
                    "apply_fix",
                    "fix_issue",
                    "_log_fix",
                    "_get_current_timestamp"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "chat_mate\\core\\services\\full_sync_pipeline_runner.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "FullSyncPipelineRunner": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "chat_mate\\core\\services\\git_integration_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_repo"
        ],
        "classes": {
            "GitIntegrationService": {
                "methods": [
                    "__init__",
                    "_get_repo"
                ],
                "docstring": "Service for handling Git operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "chat_mate\\core\\services\\prompt_execution_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_executor",
            "execute_prompt_cycle",
            "execute_prompts_single_chat",
            "execute_prompts_concurrently",
            "_execute_single_prompt_thread",
            "_determine_wait_time",
            "_post_process_jawbone_response",
            "send_prompt",
            "_fetch_response",
            "wait_for_stable_response",
            "get_prompt_insights",
            "get_memory_summary",
            "save_prompt",
            "reset_prompts",
            "get_available_prompts",
            "get_prompt",
            "_load_project_context",
            "load_project_context",
            "archive_files",
            "clear_context_cache",
            "shutdown"
        ],
        "classes": {
            "ModelType": {
                "methods": [],
                "docstring": "Supported model types for prompt execution.",
                "base_classes": [
                    "Enum"
                ]
            },
            "PromptService": {
                "methods": [
                    "__init__",
                    "_get_executor",
                    "execute_prompt_cycle",
                    "execute_prompts_single_chat",
                    "execute_prompts_concurrently",
                    "_execute_single_prompt_thread",
                    "_determine_wait_time",
                    "_post_process_jawbone_response",
                    "send_prompt",
                    "_fetch_response",
                    "wait_for_stable_response",
                    "get_prompt_insights",
                    "get_memory_summary",
                    "save_prompt",
                    "reset_prompts",
                    "get_available_prompts",
                    "get_prompt",
                    "_load_project_context",
                    "load_project_context",
                    "archive_files",
                    "clear_context_cache",
                    "shutdown"
                ],
                "docstring": "A unified prompt service that combines:\n  - Asynchronous prompt execution via ChatGPT and Cursor executors,\n  - Synchronous prompt cycles using Selenium (with both sequential and concurrent flows),\n  - Orchestration for multi\u2013prompt async execution, Discord feedback, and reinforcement evaluation,\n  - Prompt management (caching, saving, resetting),\n  - Project context loading and file archiving,\n  - Coordinated shutdown of all components.",
                "base_classes": [
                    "QObject"
                ]
            }
        },
        "routes": [],
        "complexity": 44
    },
    "chat_mate\\core\\services\\output_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "output",
            "add_callback",
            "remove_callback",
            "info",
            "warning",
            "error",
            "debug"
        ],
        "classes": {
            "OutputHandler": {
                "methods": [
                    "__init__",
                    "output",
                    "add_callback",
                    "remove_callback",
                    "info",
                    "warning",
                    "error",
                    "debug"
                ],
                "docstring": "Centralized service for handling output across the system.\nSupports console output, logging, and optional GUI callbacks.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "chat_mate\\core\\services\\rollback_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "rollback",
            "create_backup",
            "_find_backup"
        ],
        "classes": {
            "RollbackService": {
                "methods": [
                    "__init__",
                    "rollback",
                    "create_backup",
                    "_find_backup"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "chat_mate\\core\\services\\service_registry.py": {
        "language": ".py",
        "functions": [
            "create_config_service",
            "create_logging_service",
            "create_prompt_service",
            "create_chat_service",
            "create_discord_service",
            "create_cursor_service",
            "create_reinforcement_service",
            "create_cycle_service",
            "create_response_handler",
            "create_task_orchestrator",
            "create_dreamscape_generator",
            "create_memory_service",
            "create_template_manager",
            "register_all_services",
            "get_service",
            "_create_empty_service",
            "info",
            "warning",
            "error",
            "debug",
            "get",
            "set",
            "load",
            "save",
            "get_prompt",
            "save_prompt",
            "get_model",
            "reset_to_defaults",
            "load",
            "save",
            "get",
            "set",
            "clear",
            "execute_prompts_single_chat",
            "get_all_chat_titles",
            "shutdown_driver",
            "run",
            "stop",
            "send_message",
            "send_file",
            "send_template",
            "get_status",
            "auto_tune_prompts",
            "apply_fix",
            "rollback_changes",
            "execute_prompt",
            "debug_code",
            "shutdown_all",
            "__init__",
            "register",
            "get",
            "validate_service_registry",
            "_is_empty_service",
            "_create_empty_service",
            "initialize",
            "_register_core_services",
            "register_service",
            "get_service",
            "has_service",
            "__init__",
            "__getattr__",
            "__init__",
            "__getattr__"
        ],
        "classes": {
            "LoggingService": {
                "methods": [
                    "info",
                    "warning",
                    "error",
                    "debug"
                ],
                "docstring": null,
                "base_classes": [
                    "Protocol"
                ]
            },
            "ConfigService": {
                "methods": [
                    "get",
                    "set",
                    "load",
                    "save"
                ],
                "docstring": null,
                "base_classes": [
                    "Protocol"
                ]
            },
            "PromptService": {
                "methods": [
                    "get_prompt",
                    "save_prompt",
                    "get_model",
                    "reset_to_defaults"
                ],
                "docstring": null,
                "base_classes": [
                    "Protocol"
                ]
            },
            "MemoryService": {
                "methods": [
                    "load",
                    "save",
                    "get",
                    "set",
                    "clear"
                ],
                "docstring": null,
                "base_classes": [
                    "Protocol"
                ]
            },
            "ChatService": {
                "methods": [
                    "execute_prompts_single_chat",
                    "get_all_chat_titles",
                    "shutdown_driver"
                ],
                "docstring": null,
                "base_classes": [
                    "Protocol"
                ]
            },
            "DiscordService": {
                "methods": [
                    "run",
                    "stop",
                    "send_message",
                    "send_file",
                    "send_template",
                    "get_status"
                ],
                "docstring": null,
                "base_classes": [
                    "Protocol"
                ]
            },
            "ReinforcementService": {
                "methods": [
                    "auto_tune_prompts",
                    "apply_fix",
                    "rollback_changes"
                ],
                "docstring": null,
                "base_classes": [
                    "Protocol"
                ]
            },
            "CursorService": {
                "methods": [
                    "execute_prompt",
                    "debug_code",
                    "shutdown_all"
                ],
                "docstring": null,
                "base_classes": [
                    "Protocol"
                ]
            },
            "ServiceRegistry": {
                "methods": [
                    "__init__",
                    "register",
                    "get",
                    "validate_service_registry",
                    "_is_empty_service",
                    "_create_empty_service",
                    "initialize",
                    "_register_core_services",
                    "register_service",
                    "get_service",
                    "has_service"
                ],
                "docstring": "Central registry for managing and validating services.",
                "base_classes": []
            },
            "EmptyService": {
                "methods": [
                    "__init__",
                    "__getattr__"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 108
    },
    "chat_mate\\core\\services\\discord\\DiscordLogger.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_format_message",
            "log",
            "log_error",
            "log_debug",
            "log_event",
            "log_system_event",
            "enable",
            "disable"
        ],
        "classes": {
            "DiscordLogger": {
                "methods": [
                    "__init__",
                    "_format_message",
                    "log",
                    "log_error",
                    "log_debug",
                    "log_event",
                    "log_system_event",
                    "enable",
                    "disable"
                ],
                "docstring": "Discord-based logging implementation that sends log messages to Discord channels.",
                "base_classes": [
                    "ILoggingAgent"
                ]
            }
        },
        "routes": [],
        "complexity": 18
    },
    "chat_mate\\core\\services\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\core\\services\\discord\\DiscordBatchDispatcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start",
            "stop",
            "queue_message",
            "queue_batch",
            "_dispatch_loop",
            "_process_batch",
            "_send_channel_messages",
            "get_queue_size",
            "clear_queue"
        ],
        "classes": {
            "DiscordBatchDispatcher": {
                "methods": [
                    "__init__",
                    "start",
                    "stop",
                    "queue_message",
                    "queue_batch",
                    "_dispatch_loop",
                    "_process_batch",
                    "_send_channel_messages",
                    "get_queue_size",
                    "clear_queue"
                ],
                "docstring": "Handles queuing and batching of Discord messages for efficient delivery.\nManages rate limits and provides feedback on message delivery status.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "chat_mate\\core\\services\\discord\\DiscordManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "set_log_callback",
            "_log",
            "load_config",
            "save_config",
            "update_credentials",
            "map_prompt_to_channel",
            "unmap_prompt_channel",
            "get_channel_for_prompt",
            "_register_events",
            "_register_commands",
            "_build_status_message",
            "run_bot",
            "_run_bot_loop",
            "stop_bot",
            "send_message",
            "send_file",
            "send_dreamscape_episode",
            "send_prompt_response",
            "send_event_notification",
            "update_status",
            "test_connection",
            "__init__",
            "initUI",
            "load_prompt_types",
            "update_credentials",
            "map_prompt_to_channel",
            "unmap_selected_prompt",
            "refresh_prompt_channel_list"
        ],
        "classes": {
            "DiscordManager": {
                "methods": [
                    "__init__",
                    "set_log_callback",
                    "_log",
                    "load_config",
                    "save_config",
                    "update_credentials",
                    "map_prompt_to_channel",
                    "unmap_prompt_channel",
                    "get_channel_for_prompt",
                    "_register_events",
                    "_register_commands",
                    "_build_status_message",
                    "run_bot",
                    "_run_bot_loop",
                    "stop_bot",
                    "send_message",
                    "send_file",
                    "send_dreamscape_episode",
                    "send_prompt_response",
                    "send_event_notification",
                    "update_status",
                    "test_connection"
                ],
                "docstring": null,
                "base_classes": []
            },
            "DiscordSettingsDialog": {
                "methods": [
                    "__init__",
                    "initUI",
                    "load_prompt_types",
                    "update_credentials",
                    "map_prompt_to_channel",
                    "unmap_selected_prompt",
                    "refresh_prompt_channel_list"
                ],
                "docstring": null,
                "base_classes": [
                    "QDialog"
                ]
            }
        },
        "routes": [],
        "complexity": 58
    },
    "chat_mate\\core\\services\\discord\\DiscordQueueProcessor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "queue_response"
        ],
        "classes": {
            "DiscordQueueProcessor": {
                "methods": [
                    "__init__",
                    "queue_response"
                ],
                "docstring": "Queues processed responses for Discord or other destinations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "chat_mate\\core\\services\\discord\\DiscordTemplateManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_resolve_template_dir",
            "render_message",
            "list_templates"
        ],
        "classes": {
            "DiscordTemplateManager": {
                "methods": [
                    "__init__",
                    "_resolve_template_dir",
                    "render_message",
                    "list_templates"
                ],
                "docstring": "Manages Discord templates using Jinja2.\n\nTemplate directory resolution order:\n1. Environment variable DISCORD_TEMPLATE_DIR\n2. New config system key: discord.template_dir\n3. Hard-coded fallback: \"templates/discord\"",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "chat_mate\\core\\services\\dreamscape\\interfaces.py": {
        "language": ".py",
        "functions": [
            "generate_episode",
            "get_generation_status",
            "cancel_generation"
        ],
        "classes": {
            "IDreamscapeService": {
                "methods": [
                    "generate_episode",
                    "get_generation_status",
                    "cancel_generation"
                ],
                "docstring": "Interface for dreamscape generation services.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "chat_mate\\core\\services\\dreamscape\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\core\\services\\dreamscape\\engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate_episode",
            "get_generation_status",
            "cancel_generation",
            "_save_episode"
        ],
        "classes": {
            "DreamscapeGenerationService": {
                "methods": [
                    "__init__",
                    "generate_episode",
                    "get_generation_status",
                    "cancel_generation",
                    "_save_episode"
                ],
                "docstring": "Service for generating dreamscape episodes.",
                "base_classes": [
                    "IDreamscapeService"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "chat_mate\\core\\services\\requirements\\requirements_generator_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "run",
            "_get_target_directories",
            "_get_requirements_for_directory",
            "_filter_requirements",
            "_write_requirements_file"
        ],
        "classes": {
            "RequirementsGeneratorService": {
                "methods": [
                    "__init__",
                    "run",
                    "_get_target_directories",
                    "_get_requirements_for_directory",
                    "_filter_requirements",
                    "_write_requirements_file"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "chat_mate\\core\\social\\AIChatAgent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "ask",
            "_ask_openai",
            "_ask_ollama",
            "_build_prompt",
            "_initialize_chat_thread",
            "append_to_chat_thread",
            "_log_interaction"
        ],
        "classes": {
            "AIChatAgent": {
                "methods": [
                    "__init__",
                    "ask",
                    "_ask_openai",
                    "_ask_ollama",
                    "_build_prompt",
                    "_initialize_chat_thread",
                    "append_to_chat_thread",
                    "_log_interaction"
                ],
                "docstring": "AIChatAgent: Unified AI assistant optimized for context-rich, personalized interactions in Victor's voice.\nSupports OpenAI, local LLMs (Ollama), automatic ChatGPT thread creation, persistent memory logging, and fine-tuning dataset preparation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "chat_mate\\core\\social\\community_integration.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_initialize_strategies",
            "_initialize_dashboard",
            "_initialize_post_manager",
            "analyze_community_health",
            "generate_insights_and_recommendations",
            "create_community_building_plan",
            "identify_advocates",
            "post_across_platforms",
            "track_member_interaction",
            "optimize_platform_strategies",
            "generate_visualizations",
            "run_daily_community_management"
        ],
        "classes": {
            "CommunityIntegrationManager": {
                "methods": [
                    "__init__",
                    "_initialize_strategies",
                    "_initialize_dashboard",
                    "_initialize_post_manager",
                    "analyze_community_health",
                    "generate_insights_and_recommendations",
                    "create_community_building_plan",
                    "identify_advocates",
                    "post_across_platforms",
                    "track_member_interaction",
                    "optimize_platform_strategies",
                    "generate_visualizations",
                    "run_daily_community_management"
                ],
                "docstring": "Integrates all social media platforms with the unified community dashboard.\n\nThis class serves as the main entry point for community management,\nconnecting platform-specific strategies with unified analytics and reporting.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "chat_mate\\core\\social\\CommunityIntegrationManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_check_platform_credentials",
            "_initialize_platforms",
            "_load_strategies",
            "_load_platform_status",
            "_save_platform_status",
            "get_available_platforms",
            "get_platform",
            "get_all_platforms",
            "enable_platform",
            "disable_platform",
            "connect_platform",
            "disconnect_platform",
            "run_daily_community_management",
            "_connect_enabled_platforms",
            "_collect_metrics",
            "analyze_community_health",
            "generate_insights_and_recommendations",
            "create_community_building_plan",
            "post_content",
            "identify_advocates",
            "track_member_interactions"
        ],
        "classes": {
            "CommunityIntegrationManager": {
                "methods": [
                    "__init__",
                    "_check_platform_credentials",
                    "_initialize_platforms",
                    "_load_strategies",
                    "_load_platform_status",
                    "_save_platform_status",
                    "get_available_platforms",
                    "get_platform",
                    "get_all_platforms",
                    "enable_platform",
                    "disable_platform",
                    "connect_platform",
                    "disconnect_platform",
                    "run_daily_community_management",
                    "_connect_enabled_platforms",
                    "_collect_metrics",
                    "analyze_community_health",
                    "generate_insights_and_recommendations",
                    "create_community_building_plan",
                    "post_content",
                    "identify_advocates",
                    "track_member_interactions"
                ],
                "docstring": "Manages integrations with various social platforms, handles authentication,\nand provides a unified interface for community building.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 44
    },
    "chat_mate\\core\\social\\log_writer.py": {
        "language": ".py",
        "functions": [
            "write_json_log",
            "log_login",
            "log_post",
            "log_error"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "chat_mate\\core\\social\\platform_login_manager.py": {
        "language": ".py",
        "functions": [
            "load_cookies",
            "save_cookies",
            "wait_for_manual_login",
            "__init__",
            "login",
            "post",
            "__init__",
            "dispatch_all",
            "_process_platform",
            "_generate_content",
            "_shutdown_all_drivers"
        ],
        "classes": {
            "PlatformStrategy": {
                "methods": [
                    "__init__",
                    "login",
                    "post"
                ],
                "docstring": null,
                "base_classes": []
            },
            "SocialPlatformDispatcher": {
                "methods": [
                    "__init__",
                    "dispatch_all",
                    "_process_platform",
                    "_generate_content",
                    "_shutdown_all_drivers"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 19
    },
    "chat_mate\\core\\social\\social_config.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_env",
            "_validate_required_keys",
            "_default_platform_urls",
            "get_platform_url",
            "chrome_profile_path",
            "_default_rate_limits",
            "within_rate_limit",
            "register_action",
            "_check_daily_reset",
            "_save_rate_limit_state",
            "_load_rate_limit_state",
            "register_rate_limit"
        ],
        "classes": {
            "SocialConfig": {
                "methods": [
                    "__init__",
                    "get_env",
                    "_validate_required_keys",
                    "_default_platform_urls",
                    "get_platform_url",
                    "chrome_profile_path",
                    "_default_rate_limits",
                    "within_rate_limit",
                    "register_action",
                    "_check_daily_reset",
                    "_save_rate_limit_state",
                    "_load_rate_limit_state",
                    "register_rate_limit"
                ],
                "docstring": "FULL SYNC social_config with integrated rate limit and daily reset handling.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "chat_mate\\core\\social\\social_config_wrapper.py": {
        "language": ".py",
        "functions": [
            "get_social_config"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "chat_mate\\core\\social\\social_post_db.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load",
            "_save",
            "_load_memory",
            "_save_memory",
            "update_memory",
            "get_memory",
            "add_to_queue",
            "mark_posted",
            "mark_failed",
            "get_next_post",
            "get_queue_length"
        ],
        "classes": {
            "SocialPostDatabase": {
                "methods": [
                    "__init__",
                    "_load",
                    "_save",
                    "_load_memory",
                    "_save_memory",
                    "update_memory",
                    "get_memory",
                    "add_to_queue",
                    "mark_posted",
                    "mark_failed",
                    "get_next_post",
                    "get_queue_length"
                ],
                "docstring": "Manages the queue of social media posts.\nTracks pending, posted, and failed posts in a JSON database.\nAlso integrates with a persistent memory system to store global context.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "chat_mate\\core\\social\\social_post_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "post_next",
            "post_all",
            "enqueue_post",
            "shutdown",
            "post_to_platform"
        ],
        "classes": {
            "SocialPostManager": {
                "methods": [
                    "__init__",
                    "post_next",
                    "post_all",
                    "enqueue_post",
                    "shutdown"
                ],
                "docstring": "Manages posting of social media content across multiple platforms.\nSupports multi-threading for faster execution and centralized error handling.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 11
    },
    "chat_mate\\core\\social\\StrategyLoader.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_strategy",
            "_validate_strategy",
            "get_available_strategies",
            "reload_strategy",
            "register_strategy"
        ],
        "classes": {
            "StrategyLoader": {
                "methods": [
                    "__init__",
                    "load_strategy",
                    "_validate_strategy",
                    "get_available_strategies",
                    "reload_strategy",
                    "register_strategy"
                ],
                "docstring": "Dynamically loads platform-specific strategy classes.\nHandles strategy initialization and validation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "chat_mate\\core\\social\\TaskQueueManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start",
            "stop",
            "add_task",
            "_worker",
            "queue_size",
            "status",
            "sample_task"
        ],
        "classes": {
            "TaskQueueManager": {
                "methods": [
                    "__init__",
                    "start",
                    "stop",
                    "add_task",
                    "_worker",
                    "queue_size",
                    "status"
                ],
                "docstring": "TaskQueueManager: A robust, priority-based task queue with threaded workers.\nThis manager supports:\n  - Prioritized task scheduling (lower value = higher priority)\n  - Delayed execution for rate-limiting or scheduling\n  - Configurable retries with exponential backoff\n  - Structured logging of task outcomes for feedback and reinforcement learning loops",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 15
    },
    "chat_mate\\core\\social\\UnifiedCommunityDashboard.py": {
        "language": ".py",
        "functions": [
            "to_dict",
            "__init__",
            "_initialize_strategies",
            "_load_saved_data",
            "save_data",
            "update_metrics",
            "update_top_members",
            "generate_insights",
            "_calculate_trends",
            "_generate_platform_insights",
            "_generate_overall_insights",
            "get_metrics_history",
            "get_latest_metrics",
            "generate_metrics_chart",
            "get_platform_status",
            "get_community_building_plan",
            "_get_recommended_platforms_for_day"
        ],
        "classes": {
            "CommunityMetrics": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Data structure for standardized community metrics across platforms.",
                "base_classes": []
            },
            "CommunityDashboard": {
                "methods": [
                    "__init__",
                    "_initialize_strategies",
                    "_load_saved_data",
                    "save_data",
                    "update_metrics",
                    "update_top_members",
                    "generate_insights",
                    "_calculate_trends",
                    "_generate_platform_insights",
                    "_generate_overall_insights",
                    "get_metrics_history",
                    "get_latest_metrics",
                    "generate_metrics_chart",
                    "get_platform_status",
                    "get_community_building_plan",
                    "_get_recommended_platforms_for_day"
                ],
                "docstring": "Provides a centralized dashboard for cross-platform community analytics and insights",
                "base_classes": [
                    "QObject"
                ]
            }
        },
        "routes": [],
        "complexity": 34
    },
    "chat_mate\\core\\social\\UnifiedPostManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_post_history",
            "_save_post_history",
            "post_to_platform",
            "_adapt_content_for_platform",
            "schedule_post",
            "get_scheduled_posts",
            "cancel_scheduled_post",
            "get_post_analytics",
            "_get_current_metrics",
            "generate_content_ideas"
        ],
        "classes": {
            "UnifiedPostManager": {
                "methods": [
                    "__init__",
                    "_load_post_history",
                    "_save_post_history",
                    "post_to_platform",
                    "_adapt_content_for_platform",
                    "schedule_post",
                    "get_scheduled_posts",
                    "cancel_scheduled_post",
                    "get_post_analytics",
                    "_get_current_metrics",
                    "generate_content_ideas"
                ],
                "docstring": "Manages post creation, scheduling, and distribution across multiple social platforms.\nProvides a unified interface for content management and cross-platform posting.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "chat_mate\\core\\social\\ai\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\core\\social\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\core\\social\\data\\post_history.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_history",
            "_save_history",
            "add_post",
            "get_posts",
            "clear_history"
        ],
        "classes": {
            "PostHistory": {
                "methods": [
                    "__init__",
                    "_load_history",
                    "_save_history",
                    "add_post",
                    "get_posts",
                    "clear_history"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "chat_mate\\core\\social\\data\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\core\\social\\services\\BasePlatformLoginService.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "platform_name",
            "connect",
            "disconnect",
            "test_connection",
            "get_connection_status",
            "_log_error",
            "_log_info",
            "_update_connection_state"
        ],
        "classes": {
            "BasePlatformLoginService": {
                "methods": [
                    "__init__",
                    "platform_name",
                    "connect",
                    "disconnect",
                    "test_connection",
                    "get_connection_status",
                    "_log_error",
                    "_log_info",
                    "_update_connection_state"
                ],
                "docstring": "Abstract base class for platform-specific login services.\nDefines the common interface that all social platform login services must implement.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 18
    },
    "chat_mate\\core\\social\\services\\DiscordLoginService.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "platform_name",
            "connect",
            "disconnect",
            "test_connection",
            "get_connection_status",
            "_login_with_token",
            "_login_with_credentials"
        ],
        "classes": {
            "DiscordLoginService": {
                "methods": [
                    "__init__",
                    "platform_name",
                    "connect",
                    "disconnect",
                    "test_connection",
                    "get_connection_status",
                    "_login_with_token",
                    "_login_with_credentials"
                ],
                "docstring": "Discord-specific implementation of the platform login service.\nHandles Discord authentication using Selenium WebDriver.",
                "base_classes": [
                    "BasePlatformLoginService"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "chat_mate\\core\\social\\services\\SocialLoginManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "register_service",
            "initialize_services",
            "connect_platform",
            "disconnect_platform",
            "test_platform_connection",
            "get_platform_status",
            "get_all_platform_statuses",
            "cleanup"
        ],
        "classes": {
            "SocialLoginManager": {
                "methods": [
                    "__init__",
                    "register_service",
                    "initialize_services",
                    "connect_platform",
                    "disconnect_platform",
                    "test_platform_connection",
                    "get_platform_status",
                    "get_all_platform_statuses",
                    "cleanup"
                ],
                "docstring": "Manages social platform login services and orchestrates their lifecycle.\nProvides a unified interface for managing social platform connections.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "chat_mate\\core\\social\\services\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\core\\social\\strategies\\BaseEngagementBot.py": {
        "language": ".py",
        "functions": [
            "retry_on_failure",
            "decorator_retry",
            "__init__",
            "get_driver",
            "get_random_user_agent",
            "_wait",
            "login",
            "is_logged_in",
            "_login_with_credentials",
            "post",
            "like_posts",
            "comment_on_posts",
            "follow_users",
            "unfollow_non_returners",
            "go_viral",
            "_log_followed_users",
            "_find_posts",
            "_find_like_button",
            "_find_comment_box",
            "_find_profile_url",
            "_find_follow_button",
            "_find_unfollow_button",
            "run_daily_session",
            "wrapper_retry"
        ],
        "classes": {
            "BaseEngagementBot": {
                "methods": [
                    "__init__",
                    "get_driver",
                    "get_random_user_agent",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "_login_with_credentials",
                    "post",
                    "like_posts",
                    "comment_on_posts",
                    "follow_users",
                    "unfollow_non_returners",
                    "go_viral",
                    "_log_followed_users",
                    "_find_posts",
                    "_find_like_button",
                    "_find_comment_box",
                    "_find_profile_url",
                    "_find_follow_button",
                    "_find_unfollow_button",
                    "run_daily_session"
                ],
                "docstring": "Base class for all social platform engagement bots.\nProvides unified methods for:\n  - Login (cookie and credential-based, with manual fallback)\n  - Community engagement actions (like, comment, follow, unfollow, viral actions)\n  - Daily session orchestration.\n\nPlatform-specific details are provided via abstract helper methods.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 45
    },
    "chat_mate\\core\\social\\strategies\\ai_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze_sentiment",
            "_build_response_prompt",
            "_get_response_template",
            "_get_fallback_response",
            "_summarize_recent_content",
            "_get_sentiment_label",
            "_load_templates",
            "_load_history",
            "_track_response",
            "get_response_analytics"
        ],
        "classes": {
            "AIStrategy": {
                "methods": [
                    "__init__",
                    "analyze_sentiment",
                    "_build_response_prompt",
                    "_get_response_template",
                    "_get_fallback_response",
                    "_summarize_recent_content",
                    "_get_sentiment_label",
                    "_load_templates",
                    "_load_history",
                    "_track_response",
                    "get_response_analytics"
                ],
                "docstring": "Enhanced AI strategy for community management and content generation.\nHandles all AI-related tasks including:\n- Content generation\n- Comment responses\n- Engagement prompts\n- Sentiment analysis\n- Content optimization",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "chat_mate\\core\\social\\strategies\\base_platform_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_feedback_data",
            "_save_feedback_data",
            "analyze_engagement_metrics",
            "analyze_comment_sentiment",
            "reinforce_engagement",
            "reward_top_engagers",
            "cross_platform_feedback_loop",
            "run_feedback_loop",
            "initialize",
            "cleanup",
            "get_community_metrics",
            "get_top_members",
            "track_member_interaction"
        ],
        "classes": {
            "BasePlatformStrategy": {
                "methods": [
                    "__init__",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "analyze_comment_sentiment",
                    "reinforce_engagement",
                    "reward_top_engagers",
                    "cross_platform_feedback_loop",
                    "run_feedback_loop",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction"
                ],
                "docstring": "Base class for all platform-specific strategies.\nProvides common functionality for:\n- Feedback tracking and metrics\n- Sentiment analysis\n- Engagement reinforcement\n- Cross-platform data integration\n- Reward systems",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 28
    },
    "chat_mate\\core\\social\\strategies\\community_scheduler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "schedule_task",
            "schedule_engagement_check",
            "schedule_ai_responses",
            "schedule_daily_report",
            "_check_engagement",
            "_load_schedules",
            "_save_schedules",
            "_is_comment_processed",
            "_mark_comment_processed",
            "start",
            "stop"
        ],
        "classes": {
            "CommunityScheduler": {
                "methods": [
                    "__init__",
                    "schedule_task",
                    "schedule_engagement_check",
                    "schedule_ai_responses",
                    "schedule_daily_report",
                    "_check_engagement",
                    "_load_schedules",
                    "_save_schedules",
                    "_is_comment_processed",
                    "_mark_comment_processed",
                    "start",
                    "stop"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "chat_mate\\core\\social\\strategies\\context_db.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_tables",
            "log_post",
            "fetch_recent_posts",
            "fetch_last_post_content",
            "log_engagement",
            "fetch_engagements_for_post",
            "get_rate_limit",
            "update_rate_limit",
            "update_sentiment",
            "close"
        ],
        "classes": {
            "UnifiedContextEngine": {
                "methods": [
                    "__init__",
                    "create_tables",
                    "log_post",
                    "fetch_recent_posts",
                    "fetch_last_post_content",
                    "log_engagement",
                    "fetch_engagements_for_post",
                    "get_rate_limit",
                    "update_rate_limit",
                    "update_sentiment",
                    "close"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "chat_mate\\core\\social\\strategies\\config_loader.py": {
        "language": ".py",
        "functions": [
            "load_yaml_config",
            "load_json_config",
            "load_configs",
            "get_nested",
            "get_env_or_config",
            "reload_configs"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "chat_mate\\core\\social\\strategies\\facebook_strategy.py": {
        "language": ".py",
        "functions": [
            "retry_on_failure",
            "get_random_user_agent",
            "start_scheduler",
            "post_to_facebook",
            "decorator_retry",
            "__init__",
            "_wait",
            "get_driver",
            "is_logged_in",
            "login",
            "post",
            "like_posts",
            "comment_on_posts",
            "follow_users",
            "unfollow_non_returners",
            "_log_followed_users",
            "go_viral",
            "run_daily_session",
            "__init__",
            "initialize",
            "cleanup",
            "get_community_metrics",
            "get_top_members",
            "track_member_interaction",
            "_get_driver",
            "get_random_user_agent",
            "_wait",
            "login",
            "is_logged_in",
            "post_content",
            "run_daily_strategy_session",
            "_load_feedback_data",
            "_save_feedback_data",
            "analyze_engagement_metrics",
            "adaptive_posting_strategy",
            "analyze_comment_sentiment",
            "reinforce_engagement",
            "reward_top_followers",
            "cross_platform_feedback_loop",
            "run_feedback_loop",
            "wrapper_retry"
        ],
        "classes": {
            "FacebookBot": {
                "methods": [
                    "__init__",
                    "_wait",
                    "get_driver",
                    "is_logged_in",
                    "login",
                    "post"
                ],
                "docstring": "Automates Facebook login and posting.\nThis base class handles authentication and AI-powered post creation.",
                "base_classes": []
            },
            "FacebookEngagementBot": {
                "methods": [
                    "like_posts",
                    "comment_on_posts",
                    "follow_users",
                    "unfollow_non_returners",
                    "_log_followed_users",
                    "go_viral",
                    "run_daily_session"
                ],
                "docstring": "Extends FacebookBot with essential community building functions:\n  - Like posts, comment, follow/unfollow users, and viral engagement.\n  - Maintains a FOLLOW_DB to track engagements.\n  - Runs daily engagement sessions.",
                "base_classes": [
                    "FacebookBot"
                ]
            },
            "FacebookStrategy": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "get_random_user_agent",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "adaptive_posting_strategy",
                    "analyze_comment_sentiment",
                    "reinforce_engagement",
                    "reward_top_followers",
                    "cross_platform_feedback_loop",
                    "run_feedback_loop"
                ],
                "docstring": "Centralized strategy class for managing Facebook automation and community building.\nExtends BasePlatformStrategy with Facebook-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops using ChatGPT responses\n  - Reward system for top engaging followers\n  - Cross-platform feedback integration",
                "base_classes": [
                    "BasePlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 76
    },
    "chat_mate\\core\\social\\strategies\\instagram_strategy.py": {
        "language": ".py",
        "functions": [
            "retry_on_failure",
            "get_random_mobile_user_agent",
            "start_scheduler",
            "post_to_instagram",
            "decorator_retry",
            "__init__",
            "get_driver",
            "_wait",
            "login",
            "is_logged_in",
            "create_post",
            "like_posts",
            "comment_on_posts",
            "_gather_post_links",
            "follow_users",
            "unfollow_user",
            "__init__",
            "run_daily_session",
            "generate_ai_comments",
            "like_posts",
            "comment_on_posts",
            "follow_users",
            "unfollow_non_returners",
            "_log_followed_users",
            "go_viral",
            "__init__",
            "initialize",
            "cleanup",
            "get_community_metrics",
            "get_top_members",
            "track_member_interaction",
            "_get_driver",
            "_wait",
            "login",
            "is_logged_in",
            "post_content",
            "run_daily_strategy_session",
            "_load_feedback_data",
            "_save_feedback_data",
            "analyze_engagement_metrics",
            "analyze_comment_sentiment",
            "reinforce_engagement",
            "reward_top_engagers",
            "cross_platform_feedback_loop",
            "run_feedback_loop",
            "wrapper_retry"
        ],
        "classes": {
            "InstagramBot": {
                "methods": [
                    "__init__",
                    "get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "create_post",
                    "like_posts",
                    "comment_on_posts",
                    "_gather_post_links",
                    "follow_users",
                    "unfollow_user"
                ],
                "docstring": "Automates Instagram login, posting, and engagement actions using Selenium.\nUses mobile emulation (Pixel 5) to enable posting via Instagram's mobile interface.",
                "base_classes": []
            },
            "InstagramEngagementBot": {
                "methods": [
                    "__init__",
                    "run_daily_session",
                    "generate_ai_comments",
                    "like_posts",
                    "comment_on_posts",
                    "follow_users",
                    "unfollow_non_returners",
                    "_log_followed_users",
                    "go_viral"
                ],
                "docstring": null,
                "base_classes": []
            },
            "InstagramStrategy": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "analyze_comment_sentiment",
                    "reinforce_engagement",
                    "reward_top_engagers",
                    "cross_platform_feedback_loop",
                    "run_feedback_loop"
                ],
                "docstring": "Centralized strategy class for Instagram automation and community building.\nExtends BasePlatformStrategy with Instagram-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops using ChatGPT responses\n  - Reward system for top engaging followers\n  - Cross-platform feedback integration",
                "base_classes": [
                    "BasePlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 86
    },
    "chat_mate\\core\\social\\strategies\\linkedin_strategy.py": {
        "language": ".py",
        "functions": [
            "retry_on_failure",
            "decorator_retry",
            "__init__",
            "_get_driver",
            "get_random_user_agent",
            "_wait",
            "login",
            "is_logged_in",
            "_login_with_credentials",
            "post",
            "like_posts",
            "comment_on_posts",
            "follow_users",
            "unfollow_non_returners",
            "go_viral",
            "_log_followed_users",
            "_find_posts",
            "_find_like_button",
            "_find_comment_box",
            "_find_profile_url",
            "_find_follow_button",
            "_find_unfollow_button",
            "run_daily_session",
            "__init__",
            "is_logged_in",
            "_login_with_credentials",
            "post",
            "_find_posts",
            "_find_like_button",
            "_find_comment_box",
            "_find_profile_url",
            "_find_follow_button",
            "_find_unfollow_button",
            "__init__",
            "initialize",
            "cleanup",
            "get_community_metrics",
            "get_top_members",
            "track_member_interaction",
            "_get_driver",
            "get_random_user_agent",
            "_wait",
            "login",
            "is_logged_in",
            "post_content",
            "run_daily_strategy_session",
            "wrapper_retry"
        ],
        "classes": {
            "BaseEngagementBot": {
                "methods": [
                    "__init__",
                    "_get_driver",
                    "get_random_user_agent",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "_login_with_credentials",
                    "post",
                    "like_posts",
                    "comment_on_posts",
                    "follow_users",
                    "unfollow_non_returners",
                    "go_viral",
                    "_log_followed_users",
                    "_find_posts",
                    "_find_like_button",
                    "_find_comment_box",
                    "_find_profile_url",
                    "_find_follow_button",
                    "_find_unfollow_button",
                    "run_daily_session"
                ],
                "docstring": "A universal base class for social media engagement bots.\nProvides core community building functions:\n  - Login (with cookie & credential fallback)\n  - Post content (AI-generated if needed)\n  - Like, comment, follow, unfollow, viral engagement, and DM functionalities\n  - Daily session orchestration",
                "base_classes": [
                    "ABC"
                ]
            },
            "LinkedInEngagementBot": {
                "methods": [
                    "__init__",
                    "is_logged_in",
                    "_login_with_credentials",
                    "post",
                    "_find_posts",
                    "_find_like_button",
                    "_find_comment_box",
                    "_find_profile_url",
                    "_find_follow_button",
                    "_find_unfollow_button"
                ],
                "docstring": "LinkedIn-specific implementation of BaseEngagementBot.\nImplements abstract methods using LinkedIn's DOM structure.",
                "base_classes": [
                    "BaseEngagementBot"
                ]
            },
            "LinkedinStrategy": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "get_random_user_agent",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session"
                ],
                "docstring": "Centralized strategy class for LinkedIn automation and community building.\nExtends BasePlatformStrategy with LinkedIn-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops using ChatGPT responses\n  - Reward system for top engaging followers\n  - Cross-platform feedback integration",
                "base_classes": [
                    "BasePlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 91
    },
    "chat_mate\\core\\social\\strategies\\reddit_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "cleanup",
            "get_community_metrics",
            "get_top_members",
            "track_member_interaction",
            "_get_driver",
            "_wait",
            "login",
            "is_logged_in",
            "post_content",
            "run_daily_strategy_session",
            "_load_feedback_data",
            "_save_feedback_data",
            "analyze_engagement_metrics",
            "run_feedback_loop",
            "adaptive_posting_strategy"
        ],
        "classes": {
            "RedditStrategy": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "run_feedback_loop",
                    "adaptive_posting_strategy"
                ],
                "docstring": "Centralized strategy class for Reddit automation and community building.\nExtends BasePlatformStrategy with Reddit-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops using ChatGPT responses\n  - Reward system for top engaging followers\n  - Cross-platform feedback integration",
                "base_classes": [
                    "BasePlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 34
    },
    "chat_mate\\core\\social\\strategies\\tiktok_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "cleanup",
            "get_community_metrics",
            "get_top_members",
            "track_member_interaction",
            "_get_driver",
            "_wait",
            "login",
            "is_logged_in",
            "post_video",
            "run_daily_strategy_session",
            "_load_feedback_data",
            "_save_feedback_data",
            "analyze_engagement_metrics",
            "run_feedback_loop",
            "adaptive_posting_strategy",
            "update_trending_hashtags",
            "reward_top_creators",
            "cross_platform_feedback_loop"
        ],
        "classes": {
            "TikTokStrategy": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_video",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "run_feedback_loop",
                    "adaptive_posting_strategy",
                    "update_trending_hashtags",
                    "reward_top_creators",
                    "cross_platform_feedback_loop"
                ],
                "docstring": "Centralized strategy class for TikTok automation and community building.\nExtends BasePlatformStrategy with TikTok-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Video content scheduling and posting\n  - Hashtag trend analysis and optimization\n  - Cross-platform content repurposing\n  - Engagement analytics and community growth tracking",
                "base_classes": [
                    "BasePlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 40
    },
    "chat_mate\\core\\social\\strategies\\stocktwits_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "login",
            "is_logged_in",
            "post",
            "engage_community",
            "_log_follow",
            "unfollow_non_returners",
            "run_daily_session",
            "__init__",
            "initialize",
            "cleanup",
            "get_community_metrics",
            "get_top_members",
            "track_member_interaction",
            "_get_driver",
            "_wait",
            "login",
            "is_logged_in",
            "post_content",
            "run_daily_strategy_session",
            "_load_feedback_data",
            "_save_feedback_data",
            "analyze_engagement_metrics",
            "run_feedback_loop",
            "adaptive_posting_strategy",
            "reinforce_engagement",
            "reward_top_engagers",
            "cross_platform_feedback_loop"
        ],
        "classes": {
            "StocktwitsCommunityArchitect": {
                "methods": [
                    "__init__",
                    "login",
                    "is_logged_in",
                    "post",
                    "engage_community",
                    "_log_follow",
                    "unfollow_non_returners",
                    "run_daily_session"
                ],
                "docstring": "Stocktwits Community Builder:\nAutomates posts, engagement, and follower interactions with AI-generated content in Victor's authentic tone.",
                "base_classes": []
            },
            "StocktwitsStrategy": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "run_feedback_loop",
                    "adaptive_posting_strategy",
                    "reinforce_engagement",
                    "reward_top_engagers",
                    "cross_platform_feedback_loop"
                ],
                "docstring": "Centralized strategy class for Stocktwits automation and community building.\nExtends BasePlatformStrategy with Stocktwits-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops using ChatGPT responses\n  - Reward system for top engaging followers\n  - Cross-platform feedback integration",
                "base_classes": [
                    "BasePlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 56
    },
    "chat_mate\\core\\social\\strategies\\twitter_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "login",
            "is_logged_in",
            "post_tweet",
            "post_thread",
            "_extract_tweet_id",
            "engage_community",
            "_follow_author",
            "_log_follow",
            "unfollow_non_returners",
            "run_daily_session",
            "post_thread",
            "__init__",
            "_load_feedback_data",
            "_save_feedback_data",
            "analyze_engagement_metrics",
            "adaptive_posting_strategy",
            "analyze_comment_sentiment",
            "reinforce_engagement",
            "reward_top_engagers",
            "cross_platform_feedback_loop",
            "run_feedback_loop",
            "run_daily_strategy_session"
        ],
        "classes": {
            "TwitterCommunityArchitect": {
                "methods": [
                    "__init__",
                    "login",
                    "is_logged_in",
                    "post_tweet",
                    "post_thread",
                    "_extract_tweet_id",
                    "engage_community",
                    "_follow_author",
                    "_log_follow",
                    "unfollow_non_returners",
                    "run_daily_session",
                    "post_thread"
                ],
                "docstring": "Ultimate Twitter Engagement Bot.\nCombines posting, commenting, following, and adaptive AI-powered interactions.",
                "base_classes": []
            },
            "TwitterStrategy": {
                "methods": [
                    "__init__",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "adaptive_posting_strategy",
                    "analyze_comment_sentiment",
                    "reinforce_engagement",
                    "reward_top_engagers",
                    "cross_platform_feedback_loop",
                    "run_feedback_loop",
                    "run_daily_strategy_session"
                ],
                "docstring": "Centralized strategy class for Twitter automation and community building.\nExtends TwitterCommunityArchitect with:\n  - Dynamic feedback loops for engagement metrics analysis.\n  - AI sentiment analysis & reinforcement loops.\n  - Reward system for top engagers.\n  - Cross-platform feedback integration.",
                "base_classes": [
                    "TwitterCommunityArchitect"
                ]
            }
        },
        "routes": [],
        "complexity": 46
    },
    "chat_mate\\core\\social\\strategies\\wordpress_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "cleanup",
            "sync_youtube_video",
            "moderate_comment",
            "get_community_metrics",
            "get_top_members",
            "_load_community_data",
            "_save_community_data",
            "generate_engagement_report",
            "track_member_interaction"
        ],
        "classes": {
            "WordPressCommunityStrategy": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "sync_youtube_video",
                    "moderate_comment",
                    "get_community_metrics",
                    "get_top_members",
                    "_load_community_data",
                    "_save_community_data",
                    "generate_engagement_report",
                    "track_member_interaction"
                ],
                "docstring": "WordPress community strategy that integrates with YouTube for automated community building.\nFeatures:\n- Auto-syncs YouTube videos as WordPress posts\n- Manages comments across both platforms\n- Generates engagement reports\n- Handles community moderation\n- Creates automated responses",
                "base_classes": [
                    "BasePlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 22
    },
    "chat_mate\\core\\social\\strategies\\youtube_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "cleanup",
            "get_community_metrics",
            "get_top_members",
            "track_member_interaction",
            "_get_driver",
            "_wait",
            "login",
            "is_logged_in",
            "post_video",
            "run_daily_strategy_session",
            "_load_feedback_data",
            "_save_feedback_data",
            "analyze_engagement_metrics",
            "run_feedback_loop",
            "adaptive_posting_strategy",
            "reward_top_creators",
            "cross_platform_feedback_loop"
        ],
        "classes": {
            "YouTubeStrategy": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_video",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "run_feedback_loop",
                    "adaptive_posting_strategy",
                    "reward_top_creators",
                    "cross_platform_feedback_loop"
                ],
                "docstring": "Centralized strategy class for YouTube automation and community building.\nExtends BasePlatformStrategy with YouTube-specific implementations.\nFeatures:\n  - Video content management and scheduling\n  - Shorts creation and optimization\n  - Community post engagement\n  - Analytics tracking and optimization\n  - Cross-platform content distribution",
                "base_classes": [
                    "BasePlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 38
    },
    "chat_mate\\core\\social\\strategies\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\core\\system\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\core\\system\\startup_validator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "run_all_checks",
            "check_env_vars",
            "check_paths",
            "check_memory_files",
            "check_template_dir"
        ],
        "classes": {
            "StartupValidator": {
                "methods": [
                    "__init__",
                    "run_all_checks",
                    "check_env_vars",
                    "check_paths",
                    "check_memory_files",
                    "check_template_dir"
                ],
                "docstring": "Validates core system requirements during startup.\nChecks paths, configs, memory files, and environment variables.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "chat_mate\\cursor_prompts\\ollama_tests\\test_chat_mate.py": {
        "language": ".py",
        "functions": [
            "test_placeholder"
        ],
        "classes": {
            "PlaceholderTest": {
                "methods": [
                    "test_placeholder"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "chat_mate\\cursor_prompts\\ollama_tests\\test_extract_unused_code_safely.py": {
        "language": ".py",
        "functions": [
            "test_placeholder"
        ],
        "classes": {
            "PlaceholderTest": {
                "methods": [
                    "test_placeholder"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "chat_mate\\cursor_prompts\\ollama_tests\\test_generate_dependency_graph.py": {
        "language": ".py",
        "functions": [
            "test_placeholder"
        ],
        "classes": {
            "PlaceholderTest": {
                "methods": [
                    "test_placeholder"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "chat_mate\\cursor_prompts\\ollama_tests\\test_ProjectScanner.py": {
        "language": ".py",
        "functions": [
            "test_placeholder"
        ],
        "classes": {
            "PlaceholderTest": {
                "methods": [
                    "test_placeholder"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "chat_mate\\discord\\DreamscapeDiscordBot.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_setup_commands",
            "run_bot"
        ],
        "classes": {
            "DreamscapeDiscordBot": {
                "methods": [
                    "__init__",
                    "_setup_commands",
                    "run_bot"
                ],
                "docstring": "Discord bot specialized for interacting with Dreamscape episodes.",
                "base_classes": [
                    "commands.Bot"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "chat_mate\\interfaces\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\interfaces\\pyqt\\bootstrap.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initUI",
            "closeEvent"
        ],
        "classes": {
            "DreamscapeGUI": {
                "methods": [
                    "__init__",
                    "initUI",
                    "closeEvent"
                ],
                "docstring": null,
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "chat_mate\\interfaces\\pyqt\\DreamOsMainWindow.py": {
        "language": ".py",
        "functions": [
            "main",
            "_ensure_service",
            "_create_empty_service",
            "initialize_services",
            "__init__",
            "verify_services",
            "setup_ui",
            "setup_signals",
            "on_append_output",
            "on_status_update",
            "on_discord_log",
            "closeEvent",
            "_run_startup_validation",
            "__init__",
            "__getattr__",
            "method"
        ],
        "classes": {
            "DreamOsMainWindow": {
                "methods": [
                    "__init__",
                    "verify_services",
                    "setup_ui",
                    "setup_signals",
                    "on_append_output",
                    "on_status_update",
                    "on_discord_log",
                    "closeEvent",
                    "_run_startup_validation"
                ],
                "docstring": "Main window for the DreamOS application.",
                "base_classes": [
                    "QMainWindow"
                ]
            },
            "EmptyService": {
                "methods": [
                    "__init__",
                    "__getattr__"
                ],
                "docstring": "Empty service implementation for graceful fallback when a service is unavailable.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 27
    },
    "chat_mate\\interfaces\\pyqt\\dreamscape_gui.py": {
        "language": ".py",
        "functions": [
            "initialize_services",
            "initialize_community_manager",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "chat_mate\\interfaces\\pyqt\\dreamscape_services.py": {
        "language": ".py",
        "functions": [
            "find_project_root",
            "__init__",
            "_init_service",
            "_init_discord_service",
            "_init_task_orchestrator",
            "_create_empty_service",
            "_map_service_dependencies",
            "get_service",
            "set_service",
            "_log_initialization_status",
            "service_health_check",
            "shutdown",
            "create_chat_manager",
            "execute_prompt",
            "start_prompt_cycle",
            "load_prompt",
            "save_prompt",
            "reset_prompts",
            "launch_discord_bot",
            "stop_discord_bot",
            "send_discord_message",
            "send_discord_file",
            "send_discord_template",
            "get_discord_status",
            "get_dreamscape_context",
            "send_context_to_chatgpt",
            "schedule_context_updates",
            "analyze_execution_response",
            "discord",
            "discord",
            "bootstrap_services",
            "shutdown_all",
            "__init__",
            "__getattr__",
            "is_empty_service",
            "method"
        ],
        "classes": {
            "DreamscapeService": {
                "methods": [
                    "__init__",
                    "_init_service",
                    "_init_discord_service",
                    "_init_task_orchestrator",
                    "_create_empty_service",
                    "_map_service_dependencies",
                    "get_service",
                    "set_service",
                    "_log_initialization_status",
                    "service_health_check",
                    "shutdown",
                    "create_chat_manager",
                    "execute_prompt",
                    "start_prompt_cycle",
                    "load_prompt",
                    "save_prompt",
                    "reset_prompts",
                    "launch_discord_bot",
                    "stop_discord_bot",
                    "send_discord_message",
                    "send_discord_file",
                    "send_discord_template",
                    "get_discord_status",
                    "get_dreamscape_context",
                    "send_context_to_chatgpt",
                    "schedule_context_updates",
                    "analyze_execution_response",
                    "discord",
                    "discord",
                    "bootstrap_services",
                    "shutdown_all"
                ],
                "docstring": "Central service class that encapsulates all core business logic.\nThis module has zero dependencies on any UI framework.\n\nDesign rationale:\n- Centralizes all business logic and service creation\n- Provides robust error handling for all service initialization\n- Implements fallback mechanisms with EmptyService implementations\n- Supports runtime service creation and health checks",
                "base_classes": []
            },
            "EmptyService": {
                "methods": [
                    "__init__",
                    "__getattr__",
                    "is_empty_service"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 70
    },
    "chat_mate\\interfaces\\pyqt\\dreamscape_ui_logic.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "set_output_signal",
            "set_discord_log_signal",
            "set_status_update_signal",
            "_output",
            "_discord_log",
            "_update_status",
            "get_service",
            "is_service_available",
            "execute_prompt",
            "save_prompts",
            "reset_prompts",
            "execute_single_prompt",
            "run_single_chat_mode",
            "run_multi_chat_mode",
            "start_prompt_cycle",
            "load_prompt",
            "save_prompt",
            "launch_discord_bot",
            "stop_discord_bot",
            "run_prompt_tuning",
            "analyze_execution_response",
            "shutdown",
            "worker",
            "worker"
        ],
        "classes": {
            "DreamscapeUILogic": {
                "methods": [
                    "__init__",
                    "set_output_signal",
                    "set_discord_log_signal",
                    "set_status_update_signal",
                    "_output",
                    "_discord_log",
                    "_update_status",
                    "get_service",
                    "is_service_available",
                    "execute_prompt",
                    "save_prompts",
                    "reset_prompts",
                    "execute_single_prompt",
                    "run_single_chat_mode",
                    "run_multi_chat_mode",
                    "start_prompt_cycle",
                    "load_prompt",
                    "save_prompt",
                    "launch_discord_bot",
                    "stop_discord_bot",
                    "run_prompt_tuning",
                    "analyze_execution_response",
                    "shutdown"
                ],
                "docstring": "Bridges UI interactions with backend services.\nProvides async support and emits signals for UI updates.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 48
    },
    "chat_mate\\interfaces\\pyqt\\feedback_dashboard.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initUI",
            "refresh_dashboard",
            "update_display"
        ],
        "classes": {
            "FeedbackDashboard": {
                "methods": [
                    "__init__",
                    "initUI",
                    "refresh_dashboard",
                    "update_display"
                ],
                "docstring": null,
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "chat_mate\\interfaces\\pyqt\\GuiHelpers.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "setup_status_bar",
            "update_status_bar",
            "log_to_output",
            "read_file",
            "save_file",
            "show_info",
            "show_warning",
            "show_error",
            "confirm_action"
        ],
        "classes": {
            "GuiHelpers": {
                "methods": [
                    "__init__",
                    "setup_status_bar",
                    "update_status_bar",
                    "log_to_output",
                    "read_file",
                    "save_file",
                    "show_info",
                    "show_warning",
                    "show_error",
                    "confirm_action"
                ],
                "docstring": "Utility class for managing GUI-related helpers.\nHandles status bars, file operations, logging, and dialogs.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "chat_mate\\interfaces\\pyqt\\ILoggingAgent.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\interfaces\\pyqt\\IntegratedMainWindow.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_wire_ui_actions",
            "on_execute_prompt",
            "on_save_prompt",
            "on_reset_prompts",
            "on_launch_discord_bot",
            "on_stop_discord_bot",
            "on_launch_dashboard",
            "append_output",
            "append_discord_log",
            "update_discord_status",
            "task"
        ],
        "classes": {
            "IntegratedMainWindow": {
                "methods": [
                    "__init__",
                    "_wire_ui_actions",
                    "on_execute_prompt",
                    "on_save_prompt",
                    "on_reset_prompts",
                    "on_launch_discord_bot",
                    "on_stop_discord_bot",
                    "on_launch_dashboard",
                    "append_output",
                    "append_discord_log",
                    "update_discord_status"
                ],
                "docstring": null,
                "base_classes": [
                    "DreamOsMainWindow"
                ]
            }
        },
        "routes": [],
        "complexity": 23
    },
    "chat_mate\\interfaces\\pyqt\\sip_patcher.py": {
        "language": ".py",
        "functions": [
            "patch_sip_imports",
            "patched_import"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "chat_mate\\interfaces\\pyqt\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\interfaces\\pyqt\\__main__.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "chat_mate\\interfaces\\pyqt\\components\\logs_panel.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initUI",
            "append_log",
            "clear_logs",
            "export_logs",
            "get_logs"
        ],
        "classes": {
            "LogsPanel": {
                "methods": [
                    "__init__",
                    "initUI",
                    "append_log",
                    "clear_logs",
                    "export_logs",
                    "get_logs"
                ],
                "docstring": null,
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "chat_mate\\interfaces\\pyqt\\components\\logs_tab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initUI",
            "append_log",
            "clear_logs",
            "get_logs"
        ],
        "classes": {
            "LogsTab": {
                "methods": [
                    "__init__",
                    "initUI",
                    "append_log",
                    "clear_logs",
                    "get_logs"
                ],
                "docstring": null,
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "chat_mate\\interfaces\\pyqt\\components\\community_dashboard_tab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "setup_ui",
            "setup_overview_tab",
            "setup_insights_tab",
            "setup_community_tab",
            "setup_planning_tab",
            "refresh_data",
            "generate_insights",
            "generate_plan",
            "on_platform_changed",
            "on_focus_changed",
            "update_metrics_view",
            "update_insights_view",
            "update_members_view",
            "update_platform_status",
            "update_plan_view",
            "generate_content_strategy",
            "add_activity_log"
        ],
        "classes": {
            "CommunityDashboardTab": {
                "methods": [
                    "__init__",
                    "setup_ui",
                    "setup_overview_tab",
                    "setup_insights_tab",
                    "setup_community_tab",
                    "setup_planning_tab",
                    "refresh_data",
                    "generate_insights",
                    "generate_plan",
                    "on_platform_changed",
                    "on_focus_changed",
                    "update_metrics_view",
                    "update_insights_view",
                    "update_members_view",
                    "update_platform_status",
                    "update_plan_view",
                    "generate_content_strategy",
                    "add_activity_log"
                ],
                "docstring": "Provides a comprehensive dashboard for monitoring social media community metrics\nand insights across all platforms.",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 36
    },
    "chat_mate\\interfaces\\pyqt\\components\\prompt_execution_tab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initUI",
            "_create_exclusion_group",
            "_create_prompt_controls_group",
            "add_exclusion",
            "remove_exclusion",
            "get_excluded_chats",
            "update_execution_mode",
            "load_prompt"
        ],
        "classes": {
            "PromptExecutionTab": {
                "methods": [
                    "__init__",
                    "initUI",
                    "_create_exclusion_group",
                    "_create_prompt_controls_group",
                    "add_exclusion",
                    "remove_exclusion",
                    "get_excluded_chats",
                    "update_execution_mode",
                    "load_prompt"
                ],
                "docstring": null,
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 18
    },
    "chat_mate\\interfaces\\pyqt\\components\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\interfaces\\pyqt\\components\\prompt_panel.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "setup_ui",
            "load_sample_prompts",
            "_add_prompt_to_list",
            "on_prompt_selected",
            "save_prompt",
            "use_prompt",
            "add_custom_prompt",
            "remove_custom_prompt",
            "get_prompt_text",
            "set_prompt_text"
        ],
        "classes": {
            "PromptPanel": {
                "methods": [
                    "__init__",
                    "setup_ui",
                    "load_sample_prompts",
                    "_add_prompt_to_list",
                    "on_prompt_selected",
                    "save_prompt",
                    "use_prompt",
                    "add_custom_prompt",
                    "remove_custom_prompt",
                    "get_prompt_text",
                    "set_prompt_text"
                ],
                "docstring": "Panel for managing and executing prompts",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 22
    },
    "chat_mate\\interfaces\\pyqt\\components\\dialogs\\discord_settings.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initUI",
            "save_credentials",
            "map_prompt_to_channel",
            "unmap_selected_prompt",
            "refresh_prompt_channel_list"
        ],
        "classes": {
            "DiscordSettingsDialog": {
                "methods": [
                    "__init__",
                    "initUI",
                    "save_credentials",
                    "map_prompt_to_channel",
                    "unmap_selected_prompt",
                    "refresh_prompt_channel_list"
                ],
                "docstring": "Dialog window for configuring Discord bot settings and prompt channel mappings.",
                "base_classes": [
                    "QDialog"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "chat_mate\\interfaces\\pyqt\\components\\dialogs\\exclusions_dialog.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initUI",
            "refresh_list",
            "add_exclusion",
            "remove_selected",
            "get_exclusions"
        ],
        "classes": {
            "ExclusionsDialog": {
                "methods": [
                    "__init__",
                    "initUI",
                    "refresh_list",
                    "add_exclusion",
                    "remove_selected",
                    "get_exclusions"
                ],
                "docstring": "Dialog window for managing excluded items (chats, users, etc.)",
                "base_classes": [
                    "QDialog"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "chat_mate\\interfaces\\pyqt\\components\\dialogs\\reinforcement_dialog.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initUI",
            "load_feedback",
            "display_feedback_details",
            "export_feedback",
            "clear_feedback",
            "auto_tune_prompts"
        ],
        "classes": {
            "ReinforcementToolsDialog": {
                "methods": [
                    "__init__",
                    "initUI",
                    "load_feedback",
                    "display_feedback_details",
                    "export_feedback",
                    "clear_feedback",
                    "auto_tune_prompts"
                ],
                "docstring": "Dialog window for reinforcement learning tools.\nProvides prompt feedback review, tuning, and export functionality.",
                "base_classes": [
                    "QDialog"
                ]
            }
        },
        "routes": [],
        "complexity": 14
    },
    "chat_mate\\interfaces\\pyqt\\components\\dialogs\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\interfaces\\pyqt\\components\\digital_dreamscape\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\interfaces\\pyqt\\dream_os_window\\main_window.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_run_startup_validation",
            "_verify_services",
            "_setup_ui",
            "_setup_signals",
            "closeEvent",
            "_setup_signal_handlers",
            "signal_handler"
        ],
        "classes": {
            "DreamOsMainWindow": {
                "methods": [
                    "__init__",
                    "_run_startup_validation",
                    "_verify_services",
                    "_setup_ui",
                    "_setup_signals",
                    "closeEvent",
                    "_setup_signal_handlers"
                ],
                "docstring": "Main window for the Dreamscape application.\nProvides a decoupled interface with signal dispatching and async task support.",
                "base_classes": [
                    "QMainWindow"
                ]
            }
        },
        "routes": [],
        "complexity": 15
    },
    "chat_mate\\interfaces\\pyqt\\dream_os_window\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\interfaces\\pyqt\\dream_os_window\\handlers\\assistant_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "set_services",
            "handle_openai_login",
            "handle_scan",
            "start_assistant",
            "stop_assistant",
            "send_message"
        ],
        "classes": {
            "AssistantHandler": {
                "methods": [
                    "__init__",
                    "set_services",
                    "handle_openai_login",
                    "handle_scan",
                    "start_assistant",
                    "stop_assistant",
                    "send_message"
                ],
                "docstring": "Handles assistant-related functionality including OpenAI login,\nassistant mode control, and message handling.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "chat_mate\\interfaces\\pyqt\\dream_os_window\\services\\service_container.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize_services",
            "_init_openai_client",
            "_init_assistant_controller",
            "_init_automation_engine",
            "validate_services",
            "shutdown_services",
            "get_service"
        ],
        "classes": {
            "ServiceContainer": {
                "methods": [
                    "__init__",
                    "initialize_services",
                    "_init_openai_client",
                    "_init_assistant_controller",
                    "_init_automation_engine",
                    "validate_services",
                    "shutdown_services",
                    "get_service"
                ],
                "docstring": "Container for managing Dream.OS services.\nHandles initialization, validation, and lifecycle management.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "chat_mate\\interfaces\\pyqt\\dream_os_window\\services\\service_factory.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_logger",
            "create_prompt_response_handler",
            "create_cycle_service",
            "create_dreamscape_service",
            "create_ui_logic",
            "get_service"
        ],
        "classes": {
            "ServiceFactory": {
                "methods": [
                    "__init__",
                    "create_logger",
                    "create_prompt_response_handler",
                    "create_cycle_service",
                    "create_dreamscape_service",
                    "create_ui_logic",
                    "get_service"
                ],
                "docstring": "Factory for creating and managing DreamOS services with proper dependency injection.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "chat_mate\\interfaces\\pyqt\\dream_os_window\\services\\service_initializer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize_core_services",
            "_create_orchestrator",
            "create_empty_service_stub",
            "ensure_service"
        ],
        "classes": {
            "ServiceInitializer": {
                "methods": [
                    "__init__",
                    "initialize_core_services",
                    "_create_orchestrator",
                    "create_empty_service_stub",
                    "ensure_service"
                ],
                "docstring": "Handles initialization and management of all Dream.OS services.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "chat_mate\\interfaces\\pyqt\\dream_os_window\\services\\service_validator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "verify_services",
            "check_service_health"
        ],
        "classes": {
            "ServiceValidator": {
                "methods": [
                    "__init__",
                    "verify_services",
                    "check_service_health"
                ],
                "docstring": "Validates and monitors service health in Dream.OS.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "chat_mate\\interfaces\\pyqt\\dream_os_window\\ui\\signal_handlers.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "setup_signals",
            "on_append_output",
            "on_status_update",
            "on_discord_log",
            "on_task_started",
            "on_task_progress",
            "on_task_completed",
            "on_task_failed",
            "_append_task_output"
        ],
        "classes": {
            "SignalHandlers": {
                "methods": [
                    "__init__",
                    "setup_signals",
                    "on_append_output",
                    "on_status_update",
                    "on_discord_log",
                    "on_task_started",
                    "on_task_progress",
                    "on_task_completed",
                    "on_task_failed",
                    "_append_task_output"
                ],
                "docstring": "Manages signal handling for the Dream.OS main window.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "chat_mate\\interfaces\\pyqt\\dream_os_window\\ui\\window_ui.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "setup_ui",
            "_setup_tabs",
            "_setup_fallback_tabs",
            "_setup_buttons",
            "_setup_chat_interface",
            "show_startup_warnings",
            "get_tabs"
        ],
        "classes": {
            "WindowUI": {
                "methods": [
                    "__init__",
                    "setup_ui",
                    "_setup_tabs",
                    "_setup_fallback_tabs",
                    "_setup_buttons",
                    "_setup_chat_interface",
                    "show_startup_warnings",
                    "get_tabs"
                ],
                "docstring": "Manages UI setup and layout for the Dream.OS main window.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "chat_mate\\interfaces\\pyqt\\tabs\\AIDE.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_init_ui",
            "_connect_signals",
            "load_file_into_preview",
            "process_file",
            "self_heal",
            "run_tests",
            "on_scan_project",
            "send_prompt",
            "process_batch_files",
            "on_run_debug",
            "on_apply_fix",
            "on_rollback_fix",
            "on_cursor_execute",
            "on_automation_result",
            "on_cursor_code_generated",
            "append_output",
            "progress_callback"
        ],
        "classes": {
            "AIDE": {
                "methods": [
                    "__init__",
                    "_init_ui",
                    "_connect_signals",
                    "load_file_into_preview",
                    "process_file",
                    "self_heal",
                    "run_tests",
                    "on_scan_project",
                    "send_prompt",
                    "process_batch_files",
                    "on_run_debug",
                    "on_apply_fix",
                    "on_rollback_fix",
                    "on_cursor_execute",
                    "on_automation_result",
                    "on_cursor_code_generated",
                    "append_output"
                ],
                "docstring": null,
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 35
    },
    "chat_mate\\interfaces\\pyqt\\dream_os_window\\utils\\empty_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__getattr__",
            "method"
        ],
        "classes": {
            "EmptyService": {
                "methods": [
                    "__init__",
                    "__getattr__"
                ],
                "docstring": "Empty service implementation that logs warnings when methods are called.\nUsed for graceful degradation when a service is unavailable.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 5
    },
    "chat_mate\\interfaces\\pyqt\\tabs\\ConfigurationTab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initUI",
            "open_exclusions_dialog",
            "open_discord_settings_dialog",
            "open_reinforcement_tools_dialog",
            "log_action"
        ],
        "classes": {
            "ConfigurationTab": {
                "methods": [
                    "__init__",
                    "initUI",
                    "open_exclusions_dialog",
                    "open_discord_settings_dialog",
                    "open_reinforcement_tools_dialog",
                    "log_action"
                ],
                "docstring": "Configuration & Discord Settings tab.\nManages dialogs for exclusions, Discord setup, and reinforcement tools.",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "chat_mate\\interfaces\\pyqt\\tabs\\cursor_execution_tab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "run",
            "__init__",
            "init_ui",
            "_create_prompt_tab",
            "_create_sequence_tab",
            "_create_test_tab",
            "_create_git_tab",
            "load_templates",
            "load_sequences",
            "load_sequence_info",
            "execute_prompt",
            "run_sequence",
            "browse_test_file",
            "generate_tests",
            "run_tests",
            "install_git_hooks",
            "commit_changes",
            "log_message",
            "log_sequence_message",
            "log_test_message",
            "log_git_message",
            "update_progress",
            "execution_finished",
            "sequence_finished",
            "tests_generated",
            "tests_run",
            "git_operation_finished",
            "__init__",
            "closeEvent",
            "execute_task",
            "execute_sequence_task",
            "generate_tests_task",
            "run_tests_task",
            "install_hooks_task",
            "commit_task"
        ],
        "classes": {
            "WorkerThread": {
                "methods": [
                    "__init__",
                    "run"
                ],
                "docstring": "Worker thread for executing tasks without blocking the UI.",
                "base_classes": [
                    "QThread"
                ]
            },
            "CursorExecutionTab": {
                "methods": [
                    "__init__",
                    "init_ui",
                    "_create_prompt_tab",
                    "_create_sequence_tab",
                    "_create_test_tab",
                    "_create_git_tab",
                    "load_templates",
                    "load_sequences",
                    "load_sequence_info",
                    "execute_prompt",
                    "run_sequence",
                    "browse_test_file",
                    "generate_tests",
                    "run_tests",
                    "install_git_hooks",
                    "commit_changes",
                    "log_message",
                    "log_sequence_message",
                    "log_test_message",
                    "log_git_message",
                    "update_progress",
                    "execution_finished",
                    "sequence_finished",
                    "tests_generated",
                    "tests_run",
                    "git_operation_finished"
                ],
                "docstring": "PyQt5 tab for executing and managing Cursor dispatching operations.\n\nProvides a GUI interface for:\n- Selecting and rendering templates (prompt execution)\n- Running prompt sequences\n- Generating and running tests\n- Performing Git operations (install hooks, commit changes)",
                "base_classes": [
                    "QWidget"
                ]
            },
            "CursorExecutionWindow": {
                "methods": [
                    "__init__",
                    "closeEvent"
                ],
                "docstring": "Main window wrapper for CursorExecutionTab with proper close event handling.",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 66
    },
    "chat_mate\\interfaces\\pyqt\\tabs\\DependencyMapTab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "init_ui",
            "load_graph"
        ],
        "classes": {
            "DependencyMapTab": {
                "methods": [
                    "__init__",
                    "init_ui",
                    "load_graph"
                ],
                "docstring": null,
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "chat_mate\\interfaces\\pyqt\\tabs\\DreamscapeGenerationTab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_store_service_references",
            "init_ui",
            "_setup_title",
            "_setup_left_panel",
            "_setup_episode_list_group",
            "_setup_controls_group",
            "_setup_context_controls",
            "_setup_right_panel",
            "_setup_content_tab",
            "_setup_context_tab",
            "_setup_log_tab",
            "_setup_template_tab",
            "_setup_timers",
            "_load_initial_data",
            "on_episode_selected",
            "share_to_discord",
            "_on_template_selected",
            "_validate_template_context",
            "_save_rendered_output",
            "refresh_episode_list",
            "refresh_context_memory",
            "log_output",
            "render_dreamscape_template",
            "on_cancel_clicked",
            "send_context_to_chatgpt",
            "save_context_schedule",
            "populate_chat_list",
            "cleanup"
        ],
        "classes": {
            "DreamscapeGenerationTab": {
                "methods": [
                    "__init__",
                    "_store_service_references",
                    "init_ui",
                    "_setup_title",
                    "_setup_left_panel",
                    "_setup_episode_list_group",
                    "_setup_controls_group",
                    "_setup_context_controls",
                    "_setup_right_panel",
                    "_setup_content_tab",
                    "_setup_context_tab",
                    "_setup_log_tab",
                    "_setup_template_tab",
                    "_setup_timers",
                    "_load_initial_data",
                    "on_episode_selected",
                    "share_to_discord",
                    "_on_template_selected",
                    "_validate_template_context",
                    "_save_rendered_output",
                    "refresh_episode_list",
                    "refresh_context_memory",
                    "log_output",
                    "render_dreamscape_template",
                    "on_cancel_clicked",
                    "send_context_to_chatgpt",
                    "save_context_schedule",
                    "populate_chat_list",
                    "cleanup"
                ],
                "docstring": "Main UI tab for generating and managing Dreamscape episodes.",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 58
    },
    "chat_mate\\interfaces\\pyqt\\tabs\\LogsTab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initUI",
            "load_log_files",
            "load_selected_log",
            "filter_logs",
            "append_log",
            "append_output",
            "clear_logs"
        ],
        "classes": {
            "LogsTab": {
                "methods": [
                    "__init__",
                    "initUI",
                    "load_log_files",
                    "load_selected_log",
                    "filter_logs",
                    "append_log",
                    "append_output",
                    "clear_logs"
                ],
                "docstring": "Provides a unified interface for viewing, filtering, and managing logs.",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "chat_mate\\interfaces\\pyqt\\tabs\\main_tab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_append_log",
            "_show_error",
            "setup_ui",
            "setup_log_handler",
            "refresh_status",
            "restart_services",
            "clear_logs",
            "__init__",
            "emit"
        ],
        "classes": {
            "MainTab": {
                "methods": [
                    "__init__",
                    "_append_log",
                    "_show_error",
                    "setup_ui",
                    "setup_log_handler",
                    "refresh_status",
                    "restart_services",
                    "clear_logs"
                ],
                "docstring": "Main tab for the Dream.OS interface.",
                "base_classes": [
                    "QWidget"
                ]
            },
            "QTextEditHandler": {
                "methods": [
                    "__init__",
                    "emit"
                ],
                "docstring": null,
                "base_classes": [
                    "logging.Handler"
                ]
            }
        },
        "routes": [],
        "complexity": 20
    },
    "chat_mate\\interfaces\\pyqt\\tabs\\MainTabs.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "init_tabs",
            "cleanup",
            "_init_tabs",
            "_connect_signals",
            "_on_prompt_executed",
            "_on_dreamscape_generated",
            "_on_discord_event",
            "_on_debug_completed",
            "_on_cursor_code_generated",
            "_on_automation_result",
            "append_output",
            "broadcast_message"
        ],
        "classes": {
            "MainTabs": {
                "methods": [
                    "__init__",
                    "init_tabs",
                    "cleanup",
                    "_init_tabs",
                    "_connect_signals",
                    "_on_prompt_executed",
                    "_on_dreamscape_generated",
                    "_on_discord_event",
                    "_on_debug_completed",
                    "_on_cursor_code_generated",
                    "_on_automation_result",
                    "append_output",
                    "broadcast_message"
                ],
                "docstring": "Manages all tabs in the Dreamscape application, providing central control\nvia dependency injection and a SignalDispatcher for decoupled interactions.\n\nThis implementation uses a data-driven approach to initialize tabs,\nwhich improves readability and extensibility while retaining all original features.",
                "base_classes": [
                    "QTabWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 26
    },
    "chat_mate\\interfaces\\pyqt\\tabs\\PromptExecutionTab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate",
            "__init__",
            "_init_ui",
            "_connect_signals",
            "log_output",
            "ensure_local_llm_loaded",
            "on_prompt_loaded",
            "_on_task_done",
            "__init__",
            "_init_ui",
            "log",
            "cancel_sync",
            "_on_sync_completed"
        ],
        "classes": {
            "LocalLLMWrapper": {
                "methods": [
                    "__init__",
                    "generate"
                ],
                "docstring": "Example local LLM wrapper for demonstration purposes.\nReplace the model name or adapt for other frameworks as needed.",
                "base_classes": []
            },
            "PromptExecutionTab": {
                "methods": [
                    "__init__",
                    "_init_ui",
                    "_connect_signals",
                    "log_output",
                    "ensure_local_llm_loaded",
                    "on_prompt_loaded",
                    "_on_task_done"
                ],
                "docstring": "Tab for executing prompts through various services.\nProvides a unified interface for prompt selection, editing, and execution.\nSupports both online and offline (local LLM) modes.",
                "base_classes": [
                    "QWidget"
                ]
            },
            "FullSyncTab": {
                "methods": [
                    "__init__",
                    "_init_ui",
                    "log",
                    "cancel_sync",
                    "_on_sync_completed"
                ],
                "docstring": "Tab interface for running and monitoring full sync operations.\nProvides visual feedback and control over the sync process.",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 28
    },
    "chat_mate\\interfaces\\pyqt\\tabs\\meredith_tab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "cancel",
            "run",
            "__init__",
            "init_ui",
            "populate_model_selector",
            "switch_model",
            "log",
            "run_full_scan",
            "stop_scan",
            "on_scan_completed",
            "populate_results_table",
            "open_profile_in_browser",
            "export_results",
            "clear_results",
            "_reset_ui_for_new_scan",
            "toggle_visibility"
        ],
        "classes": {
            "ScraperThread": {
                "methods": [
                    "__init__",
                    "cancel",
                    "run"
                ],
                "docstring": "A separate QThread to perform the Meredith scraping process off the main UI thread.\nThis prevents UI blocking while ScraperManager runs.\n\nSignals:\n    scan_completed (list): Emitted when scraping+filtering completes or is canceled/errored.\n    log_update (str): Emitted for logging messages to the UI.\n    progress_update (int): Emitted for updating a progress bar (0-100).",
                "base_classes": [
                    "QThread"
                ]
            },
            "MeredithTab": {
                "methods": [
                    "__init__",
                    "init_ui",
                    "populate_model_selector",
                    "switch_model",
                    "log",
                    "run_full_scan",
                    "stop_scan",
                    "on_scan_completed",
                    "populate_results_table",
                    "open_profile_in_browser",
                    "export_results",
                    "clear_results",
                    "_reset_ui_for_new_scan",
                    "toggle_visibility"
                ],
                "docstring": "A private PyQt5 tab that orchestrates:\n  - Running the Meredith scraping (in a background thread).\n  - Displaying progress logs and a progress bar.\n  - Showing the final filtered profiles in a QTableWidget.\n  - Exporting or clearing results.\n  - Providing a 'Message' button that opens each profile in your default browser.\n  - Displaying a \"Resonance Score\" computed via the ResonanceScorer.\n  - Dynamically loading available resonance models from a directory.\n  - Can be toggled visible/invisible if running in \"private mode.\"\n\nArgs:\n    parent (QWidget): Parent widget, if any.\n    private_mode (bool): If True, the tab is hidden by default.",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 34
    },
    "chat_mate\\interfaces\\pyqt\\tabs\\SocialSetupTab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_register_platform_services",
            "_init_ui",
            "_setup_platform_select_page",
            "_setup_login_page",
            "_setup_review_page",
            "_handle_back",
            "_handle_next",
            "_handle_finish",
            "_get_selected_platforms",
            "_update_login_page",
            "_add_credential_field",
            "_get_credentials",
            "_load_saved_credentials",
            "_save_credentials",
            "_update_platform_status"
        ],
        "classes": {
            "SocialSetupTab": {
                "methods": [
                    "__init__",
                    "_register_platform_services",
                    "_init_ui",
                    "_setup_platform_select_page",
                    "_setup_login_page",
                    "_setup_review_page",
                    "_handle_back",
                    "_handle_next",
                    "_handle_finish",
                    "_get_selected_platforms",
                    "_update_login_page",
                    "_add_credential_field",
                    "_get_credentials",
                    "_load_saved_credentials",
                    "_save_credentials",
                    "_update_platform_status"
                ],
                "docstring": "A wizard-style interface for setting up social platform connections.\nGuides users through platform selection, login, and validation.",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 32
    },
    "chat_mate\\interfaces\\pyqt\\tabs\\SyncOpsTab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_init_ui",
            "toggle_clock",
            "toggle_pomodoro",
            "update_pomodoro_timer",
            "_log_event",
            "save_session"
        ],
        "classes": {
            "SyncOpsTab": {
                "methods": [
                    "__init__",
                    "_init_ui",
                    "toggle_clock",
                    "toggle_pomodoro",
                    "update_pomodoro_timer",
                    "_log_event",
                    "save_session"
                ],
                "docstring": null,
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 14
    },
    "chat_mate\\interfaces\\pyqt\\tabs\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\interfaces\\pyqt\\tabs\\chat_tab\\ChatTab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "setup_ui"
        ],
        "classes": {
            "ChatTab": {
                "methods": [
                    "__init__",
                    "setup_ui"
                ],
                "docstring": "Tab for chat interactions.",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "chat_mate\\interfaces\\pyqt\\tabs\\chat_tab\\ChatTabManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_tab",
            "close_tab",
            "get_tabs"
        ],
        "classes": {
            "ChatTabManager": {
                "methods": [
                    "__init__",
                    "create_tab",
                    "close_tab",
                    "get_tabs"
                ],
                "docstring": "Manager for chat tabs.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "chat_mate\\interfaces\\pyqt\\tabs\\chat_tab\\ChatTabWidget.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_tab",
            "_on_tab_close"
        ],
        "classes": {
            "ChatTabWidget": {
                "methods": [
                    "__init__",
                    "add_tab",
                    "_on_tab_close"
                ],
                "docstring": "Widget for managing chat tabs.",
                "base_classes": [
                    "QTabWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "chat_mate\\interfaces\\pyqt\\tabs\\chat_tab\\ChatTabWidgetManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_new_tab",
            "get_widget"
        ],
        "classes": {
            "ChatTabWidgetManager": {
                "methods": [
                    "__init__",
                    "create_new_tab",
                    "get_widget"
                ],
                "docstring": "Manager for chat tab widgets.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "chat_mate\\interfaces\\pyqt\\tabs\\chat_tab\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\interfaces\\pyqt\\tabs\\components\\EpisodePanel.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_metadata",
            "set_metadata",
            "__init__",
            "_init_ui",
            "_connect_signals",
            "set_content",
            "_update_word_count",
            "_save_episode",
            "_export_episode",
            "_dispatch_episode",
            "_save_to_file",
            "_export_to_file",
            "get_state"
        ],
        "classes": {
            "MetadataEditor": {
                "methods": [
                    "__init__",
                    "get_metadata",
                    "set_metadata"
                ],
                "docstring": "Widget for editing episode metadata.",
                "base_classes": [
                    "QWidget"
                ]
            },
            "EpisodePanel": {
                "methods": [
                    "__init__",
                    "_init_ui",
                    "_connect_signals",
                    "set_content",
                    "_update_word_count",
                    "_save_episode",
                    "_export_episode",
                    "_dispatch_episode",
                    "_save_to_file",
                    "_export_to_file",
                    "get_state"
                ],
                "docstring": "Episode Panel for content management and dispatching\n\nFeatures:\n- Content editing and formatting\n- Metadata management\n- Export options\n- Dispatch to various services",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 28
    },
    "chat_mate\\interfaces\\pyqt\\tabs\\components\\IngestPanel.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_init_ui",
            "_connect_signals",
            "_handle_clear",
            "_handle_send",
            "_validate_url",
            "_update_preview_content",
            "_switch_preview",
            "_update_preview",
            "get_state",
            "restore_state"
        ],
        "classes": {
            "IngestPanel": {
                "methods": [
                    "__init__",
                    "_init_ui",
                    "_connect_signals",
                    "_handle_clear",
                    "_handle_send",
                    "_validate_url",
                    "_update_preview_content",
                    "_switch_preview",
                    "_update_preview",
                    "get_state",
                    "restore_state"
                ],
                "docstring": "Web Scraper Control Panel\n\nFeatures:\n- URL input with validation\n- Scraping options (metadata, content selection)\n- Live HTML preview\n- Cleansed content preview\n- Token estimation",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 22
    },
    "chat_mate\\interfaces\\pyqt\\tabs\\components\\PromptPanel.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_create_format",
            "highlightBlock",
            "__init__",
            "_init_ui",
            "_connect_signals",
            "_on_model_changed",
            "set_content",
            "_load_templates",
            "_load_template",
            "_update_variables",
            "_update_preview",
            "_validate_prompt",
            "_resolve_model_key",
            "_send_prompt",
            "reload_template",
            "regenerate_prompt",
            "get_state",
            "restore_state"
        ],
        "classes": {
            "JinjaHighlighter": {
                "methods": [
                    "__init__",
                    "_create_format",
                    "highlightBlock"
                ],
                "docstring": "Syntax highlighter for Jinja2 templates.",
                "base_classes": [
                    "QSyntaxHighlighter"
                ]
            },
            "PromptPanel": {
                "methods": [
                    "__init__",
                    "_init_ui",
                    "_connect_signals",
                    "_on_model_changed",
                    "set_content",
                    "_load_templates",
                    "_load_template",
                    "_update_variables",
                    "_update_preview",
                    "_validate_prompt",
                    "_resolve_model_key",
                    "_send_prompt",
                    "reload_template",
                    "regenerate_prompt",
                    "get_state",
                    "restore_state"
                ],
                "docstring": "Prompt Template Panel\n\nFeatures:\n- Template selection and preview\n- Variable injection and validation\n- Rendered prompt preview\n- Token count estimation",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 38
    },
    "chat_mate\\interfaces\\pyqt\\tabs\\components\\SyncPanel.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start",
            "stop",
            "reset",
            "_update_time",
            "update_tokens",
            "__init__",
            "_init_ui",
            "_connect_signals",
            "set_prompt",
            "_execute_prompt",
            "_stop_execution",
            "_clear_response",
            "_handle_token",
            "_handle_complete",
            "_handle_error",
            "_reset_ui_state",
            "get_state"
        ],
        "classes": {
            "ExecutionMetrics": {
                "methods": [
                    "__init__",
                    "start",
                    "stop",
                    "reset",
                    "_update_time",
                    "update_tokens"
                ],
                "docstring": "Widget for displaying execution metrics.",
                "base_classes": [
                    "QWidget"
                ]
            },
            "SyncPanel": {
                "methods": [
                    "__init__",
                    "_init_ui",
                    "_connect_signals",
                    "set_prompt",
                    "_execute_prompt",
                    "_stop_execution",
                    "_clear_response",
                    "_handle_token",
                    "_handle_complete",
                    "_handle_error",
                    "_reset_ui_state",
                    "get_state"
                ],
                "docstring": "Sync Panel for prompt execution and monitoring\n\nFeatures:\n- Real-time execution status\n- Token usage tracking\n- Response streaming\n- Execution metrics",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 36
    },
    "chat_mate\\interfaces\\pyqt\\tabs\\components\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\interfaces\\pyqt\\tabs\\dreamscape\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\interfaces\\pyqt\\tabs\\dreamscape\\dreamscape_controller.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_all_chats",
            "generate_episode_for_chat",
            "get_context_summary",
            "get_context_prompt"
        ],
        "classes": {
            "DreamscapeController": {
                "methods": [
                    "__init__",
                    "get_all_chats",
                    "generate_episode_for_chat",
                    "get_context_summary",
                    "get_context_prompt"
                ],
                "docstring": "Mediator between the DreamscapeTab UI and the DreamscapeGenerationService.\nExposes high-level methods for episode generation, context retrieval, and chat metadata access.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "chat_mate\\interfaces\\pyqt\\tabs\\dreamscape\\DreamscapeTab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "init_ui",
            "load_available_chats",
            "load_episode_list",
            "generate_episode_from_selected_chat",
            "generate_episodes_for_all_chats",
            "update_status",
            "refresh_context",
            "refresh_chats",
            "__init__",
            "__init__",
            "__init__",
            "__init__"
        ],
        "classes": {
            "DreamscapeTab": {
                "methods": [
                    "__init__",
                    "init_ui",
                    "load_available_chats",
                    "load_episode_list",
                    "generate_episode_from_selected_chat",
                    "generate_episodes_for_all_chats",
                    "update_status",
                    "refresh_context",
                    "refresh_chats"
                ],
                "docstring": "UI tab for generating Digital Dreamscape episodes from chat history.\nProvides interface to select past chats, generate episodes, and view results.",
                "base_classes": [
                    "QWidget"
                ]
            },
            "EpisodeList": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": [
                    "QWidget"
                ]
            },
            "TemplateEditor": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": [
                    "QWidget"
                ]
            },
            "ContextViewer": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": [
                    "QWidget"
                ]
            },
            "DreamscapeController": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "chat_mate\\interfaces\\pyqt\\tabs\\dreamscape\\components\\EpisodeList.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "refresh",
            "generate_selected_episode"
        ],
        "classes": {
            "EpisodeList": {
                "methods": [
                    "__init__",
                    "refresh",
                    "generate_selected_episode"
                ],
                "docstring": "UI component for listing chats and triggering episode generation.",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "chat_mate\\interfaces\\pyqt\\tabs\\dreamscape\\components\\TemplateEditor.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "TemplateEditor": {
                "methods": [
                    "__init__"
                ],
                "docstring": "UI component for viewing and potentially editing Dreamscape templates.",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "chat_mate\\interfaces\\pyqt\\tabs\\dreamscape\\components\\ContextViewer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "refresh"
        ],
        "classes": {
            "ContextViewer": {
                "methods": [
                    "__init__",
                    "refresh"
                ],
                "docstring": "UI component for displaying the current Dreamscape context summary.",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "chat_mate\\interfaces\\pyqt\\tabs\\dreamscape\\components\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\interfaces\\pyqt\\tabs\\dreamscape_generation\\ContextManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_output_directory",
            "get_context_summary",
            "refresh_context_display",
            "send_context_to_chat",
            "get_preview_context",
            "save_context_schedule",
            "cleanup"
        ],
        "classes": {
            "ContextManager": {
                "methods": [
                    "__init__",
                    "_get_output_directory",
                    "get_context_summary",
                    "refresh_context_display",
                    "send_context_to_chat",
                    "get_preview_context",
                    "save_context_schedule",
                    "cleanup"
                ],
                "docstring": "UI adapter for the core ContextMemoryManager.\nHandles UI-specific context operations and display.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "chat_mate\\interfaces\\pyqt\\tabs\\dreamscape_generation\\DreamscapeEpisodeGenerator.py": {
        "language": ".py",
        "functions": [
            "get_base_template_dir",
            "__init__",
            "_load_context_memory",
            "_save_context_memory",
            "_extract_themes",
            "_update_context_with_episode",
            "get_context_summary",
            "get_episode_number",
            "shutdown",
            "get_chatgpt_context_prompt",
            "_generate_dreamscape_entry",
            "ensure_model_in_url",
            "_write_file",
            "_extract_protocols",
            "get_status",
            "cancel_generation",
            "_update_status",
            "_extract_episode_title",
            "generate_episodes",
            "append_log",
            "run_episode_generation"
        ],
        "classes": {
            "DreamscapeEpisodeGenerator": {
                "methods": [
                    "__init__",
                    "_load_context_memory",
                    "_save_context_memory",
                    "_extract_themes",
                    "_update_context_with_episode",
                    "get_context_summary",
                    "get_episode_number",
                    "shutdown",
                    "get_chatgpt_context_prompt",
                    "_generate_dreamscape_entry",
                    "ensure_model_in_url",
                    "_write_file",
                    "_extract_protocols",
                    "get_status",
                    "cancel_generation",
                    "_update_status",
                    "_extract_episode_title",
                    "generate_episodes",
                    "append_log"
                ],
                "docstring": "Digital Dreamscape Lore Automation \u2013 Generates creative narrative episodes from ChatGPT chats.\n\nThis class implements a scalable approach to:\n  - Interact with ChatGPT chats via Selenium WebDriver.\n  - Send a predefined Dreamscape prompt, enhanced with context (rendered via Jinja2).\n  - Wait for and capture a stabilized response.\n  - Update context memory with themes and recent episodes.\n  - Save generated narrative episodes to disk with sanitized filenames.\n  - Optionally post previews to Discord.",
                "base_classes": []
            },
            "PromptService": {
                "methods": [
                    "run_episode_generation"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 41
    },
    "chat_mate\\interfaces\\pyqt\\tabs\\dreamscape_generation\\ServiceInitializer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize_services",
            "initialize_all",
            "initialize_core_services",
            "initialize_config_service",
            "initialize_chat_manager",
            "initialize_component_managers",
            "initialize_template_manager",
            "wire_dependencies",
            "get_chat_manager",
            "get_template_manager",
            "get_dreamscape_generator",
            "_initialize_core_services",
            "_initialize_component_managers",
            "_get_output_directory",
            "_get_initialized_services"
        ],
        "classes": {
            "ServiceInitializer": {
                "methods": [
                    "__init__",
                    "initialize_services",
                    "initialize_all",
                    "initialize_core_services",
                    "initialize_config_service",
                    "initialize_chat_manager",
                    "initialize_component_managers",
                    "initialize_template_manager",
                    "wire_dependencies",
                    "get_chat_manager",
                    "get_template_manager",
                    "get_dreamscape_generator",
                    "_initialize_core_services",
                    "_initialize_component_managers",
                    "_get_output_directory",
                    "_get_initialized_services"
                ],
                "docstring": "ServiceInitializer encapsulates the initialization of all services required by\nthe DreamscapeGenerationTab. It handles:\n  - Injecting external services (or retrieving them from a ui_logic container).\n  - Initializing core services (CycleExecutionService, PromptResponseHandler, DiscordQueueProcessor,\n    TaskOrchestrator, DreamscapeEpisodeGenerator).\n  - Setting up component managers (TemplateManager, DreamscapeEpisodeGenerator, ContextManager, UIManager).\n  - Determining and ensuring the output directory exists.\n  \nAfter initialization, it returns a dictionary of initialized services and component managers.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 32
    },
    "chat_mate\\interfaces\\pyqt\\tabs\\dreamscape_generation\\EpisodeGenerator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_generation_status",
            "cancel_generation"
        ],
        "classes": {
            "EpisodeGenerator": {
                "methods": [
                    "__init__",
                    "get_generation_status",
                    "cancel_generation"
                ],
                "docstring": "UI adapter for the DreamscapeEpisodeGenerator.\nHandles UI-specific episode generation operations and state management.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "chat_mate\\interfaces\\pyqt\\tabs\\dreamscape_generation\\UIManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "refresh_episode_list",
            "update_episode_content",
            "load_templates",
            "render_template_preview",
            "save_rendered_output",
            "setup_auto_update_timer",
            "_on_auto_update_timer",
            "log_output",
            "stop_timers"
        ],
        "classes": {
            "UIManager": {
                "methods": [
                    "__init__",
                    "refresh_episode_list",
                    "update_episode_content",
                    "load_templates",
                    "render_template_preview",
                    "save_rendered_output",
                    "setup_auto_update_timer",
                    "_on_auto_update_timer",
                    "log_output",
                    "stop_timers"
                ],
                "docstring": "UIManager handles all UI-specific tasks for the Dreamscape Generation Tab.\n\nResponsibilities:\n  - Refresh and update the episode list.\n  - Update episode content when an episode is selected.\n  - Load and render templates.\n  - Set up auto-update timers for context updates.\n  - Log messages to the UI and to the central logger.\n  - Share generated episode content to Discord.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "chat_mate\\interfaces\\pyqt\\tabs\\dreamscape_generation\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\interfaces\\pyqt\\tabs\\prompt_sync\\PromptSyncTab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_init_ui",
            "_create_control_deck",
            "_connect_signals",
            "_update_service_status",
            "_update_status",
            "_handle_content_ready",
            "_handle_prompt_ready",
            "_handle_response_ready",
            "_handle_episode_saved",
            "_update_metrics",
            "_save_state",
            "_load_state",
            "closeEvent"
        ],
        "classes": {
            "PromptSyncTab": {
                "methods": [
                    "__init__",
                    "_init_ui",
                    "_create_control_deck",
                    "_connect_signals",
                    "_update_service_status",
                    "_update_status",
                    "_handle_content_ready",
                    "_handle_prompt_ready",
                    "_handle_response_ready",
                    "_handle_episode_saved",
                    "_update_metrics",
                    "_save_state",
                    "_load_state",
                    "closeEvent"
                ],
                "docstring": "Main tab for the Prompt Sync Engine\n\nFeatures:\n- Full prompt lifecycle management\n- Real-time status updates\n- Service dependency injection\n- State persistence",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 28
    },
    "chat_mate\\interfaces\\pyqt\\templates\\MultibotManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start_workers",
            "add_task",
            "wait_for_completion",
            "get_all_results",
            "shutdown",
            "mark_task_complete",
            "_update_progress",
            "_worker_status_update",
            "__enter__",
            "__exit__"
        ],
        "classes": {
            "MultibotManager": {
                "methods": [
                    "__init__",
                    "start_workers",
                    "add_task",
                    "wait_for_completion",
                    "get_all_results",
                    "shutdown",
                    "mark_task_complete",
                    "_update_progress",
                    "_worker_status_update",
                    "__enter__",
                    "__exit__"
                ],
                "docstring": "Manages a pool of BotWorker threads to process tasks asynchronously.\n\nUsage:\n    with MultibotManager(scanner, num_workers=4, status_callback=gui_callback) as manager:\n        manager.add_task(task)\n        manager.wait_for_completion()\n        results = manager.get_all_results()",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "chat_mate\\interfaces\\pyqt\\templates\\main_window.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "init_ui",
            "load_file_into_preview",
            "closeEvent"
        ],
        "classes": {
            "MainWindow": {
                "methods": [
                    "__init__",
                    "init_ui",
                    "load_file_into_preview",
                    "closeEvent"
                ],
                "docstring": null,
                "base_classes": [
                    "QtWidgets.QMainWindow"
                ]
            }
        },
        "routes": [],
        "complexity": 9
    },
    "chat_mate\\interfaces\\pyqt\\templates\\PluginManagerTab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "init_ui",
            "refresh_table",
            "toggle_plugin",
            "reload_plugin",
            "reload_all_plugins",
            "show_message"
        ],
        "classes": {
            "PluginManagerTab": {
                "methods": [
                    "__init__",
                    "init_ui",
                    "refresh_table",
                    "toggle_plugin",
                    "reload_plugin",
                    "reload_all_plugins",
                    "show_message"
                ],
                "docstring": null,
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 14
    },
    "chat_mate\\interfaces\\pyqt\\templates\\PreviewDialog.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "highlightBlock",
            "__init__",
            "save_override",
            "save_as",
            "backup_file",
            "copy_to_clipboard",
            "toggle_word_wrap",
            "show_message",
            "read_file",
            "show_diff"
        ],
        "classes": {
            "PythonSyntaxHighlighter": {
                "methods": [
                    "__init__",
                    "highlightBlock"
                ],
                "docstring": null,
                "base_classes": [
                    "QtGui.QSyntaxHighlighter"
                ]
            },
            "PreviewDialog": {
                "methods": [
                    "__init__",
                    "save_override",
                    "save_as",
                    "backup_file",
                    "copy_to_clipboard",
                    "toggle_word_wrap",
                    "show_message",
                    "read_file",
                    "show_diff"
                ],
                "docstring": null,
                "base_classes": [
                    "QDialog"
                ]
            }
        },
        "routes": [],
        "complexity": 22
    },
    "chat_mate\\interfaces\\pyqt\\templates\\preview_panel.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "init_ui",
            "load_file",
            "process_file",
            "self_heal_file",
            "run_tests"
        ],
        "classes": {
            "PreviewPanel": {
                "methods": [
                    "__init__",
                    "init_ui",
                    "load_file",
                    "process_file",
                    "self_heal_file",
                    "run_tests"
                ],
                "docstring": null,
                "base_classes": [
                    "QtWidgets.QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "chat_mate\\interfaces\\pyqt\\templates\\SelfHealRunner.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "run_and_validate",
            "read_file",
            "save_file",
            "__init__",
            "init_ui",
            "add_files",
            "start_self_heal",
            "cancel_self_heal",
            "log",
            "update_progress_bar",
            "__init__",
            "run",
            "_update_progress"
        ],
        "classes": {
            "SelfHealController": {
                "methods": [
                    "__init__",
                    "run_and_validate",
                    "read_file",
                    "save_file"
                ],
                "docstring": "Controller class encapsulating the self-healing logic.\nContains methods for running and validating a file, reading/saving files,\nand executing auto-retry logic.",
                "base_classes": []
            },
            "SelfHealRunner": {
                "methods": [
                    "__init__",
                    "init_ui",
                    "add_files",
                    "start_self_heal",
                    "cancel_self_heal",
                    "log",
                    "update_progress_bar"
                ],
                "docstring": null,
                "base_classes": [
                    "QtWidgets.QWidget"
                ]
            },
            "SelfHealWorker": {
                "methods": [
                    "__init__",
                    "run",
                    "_update_progress"
                ],
                "docstring": "QRunnable to process self-healing of a single file in the background.\nChecks for cancellation requests before and during processing.",
                "base_classes": [
                    "QtCore.QRunnable"
                ]
            }
        },
        "routes": [],
        "complexity": 28
    },
    "chat_mate\\interfaces\\pyqt\\templates\\TestAgent.py": {
        "language": ".py",
        "functions": [
            "validate_test_code",
            "__init__",
            "run_full_test_cycle",
            "generate_and_run",
            "create_tests_for_file",
            "validate_test_file",
            "run_tests",
            "repair_tests",
            "get_test_file_path",
            "find_project_root"
        ],
        "classes": {
            "TestAgent": {
                "methods": [
                    "__init__",
                    "run_full_test_cycle",
                    "generate_and_run",
                    "create_tests_for_file",
                    "validate_test_file",
                    "run_tests",
                    "repair_tests",
                    "get_test_file_path",
                    "find_project_root"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 19
    },
    "chat_mate\\interfaces\\pyqt\\templates\\Worker.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "run"
        ],
        "classes": {
            "Worker": {
                "methods": [
                    "__init__",
                    "run"
                ],
                "docstring": null,
                "base_classes": [
                    "QtCore.QThread"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "chat_mate\\interfaces\\pyqt\\templates\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\interfaces\\pyqt\\widgets\\assistant_mode_toggle_widget.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "init_ui",
            "toggle_assistant"
        ],
        "classes": {
            "AssistantModeToggleWidget": {
                "methods": [
                    "__init__",
                    "init_ui",
                    "toggle_assistant"
                ],
                "docstring": null,
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "chat_mate\\interfaces\\pyqt\\widgets\\FileTableWidget.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "dragEnterEvent",
            "dropEvent",
            "add_folder_files",
            "add_file",
            "preview_prompt",
            "get_selected_files",
            "get_all_files",
            "start_processing",
            "log"
        ],
        "classes": {
            "FileTableWidget": {
                "methods": [
                    "__init__",
                    "dragEnterEvent",
                    "dropEvent",
                    "add_folder_files",
                    "add_file",
                    "preview_prompt",
                    "get_selected_files",
                    "get_all_files",
                    "start_processing",
                    "log"
                ],
                "docstring": null,
                "base_classes": [
                    "QtWidgets.QTableWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 20
    },
    "chat_mate\\interfaces\\pyqt\\widgets\\file_browser_widget.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "startDrag",
            "__init__",
            "setup_ui",
            "populate_tree",
            "create_tree_item",
            "get_svg_icon_path",
            "get_file_icon_and_type",
            "add_placeholder",
            "on_item_expanded",
            "add_children",
            "on_item_double_clicked",
            "open_context_menu",
            "copy_path_to_clipboard",
            "reveal_in_explorer",
            "duplicate_file_or_folder",
            "create_new_file",
            "create_new_folder",
            "rename_item",
            "delete_item",
            "show_properties",
            "open_externally",
            "filter_tree",
            "show_status_message",
            "filter_item"
        ],
        "classes": {
            "FileTreeWidget": {
                "methods": [
                    "__init__",
                    "startDrag"
                ],
                "docstring": "A QTreeWidget subclass that supports internal drag-and-drop,\nmulti-selection, and folder dragging.",
                "base_classes": [
                    "QtWidgets.QTreeWidget"
                ]
            },
            "FileBrowserWidget": {
                "methods": [
                    "__init__",
                    "setup_ui",
                    "populate_tree",
                    "create_tree_item",
                    "get_svg_icon_path",
                    "get_file_icon_and_type",
                    "add_placeholder",
                    "on_item_expanded",
                    "add_children",
                    "on_item_double_clicked",
                    "open_context_menu",
                    "copy_path_to_clipboard",
                    "reveal_in_explorer",
                    "duplicate_file_or_folder",
                    "create_new_file",
                    "create_new_folder",
                    "rename_item",
                    "delete_item",
                    "show_properties",
                    "open_externally",
                    "filter_tree",
                    "show_status_message"
                ],
                "docstring": "Enhanced file browser widget with advanced filtering and context menu.",
                "base_classes": [
                    "QtWidgets.QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 49
    },
    "chat_mate\\interfaces\\pyqt\\widgets\\TestAgentWidget.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "init_ui",
            "browse_files",
            "on_files_dropped",
            "add_files",
            "run_tests",
            "log",
            "__init__",
            "dragEnterEvent",
            "dropEvent",
            "_has_valid_files"
        ],
        "classes": {
            "TestAgentWidget": {
                "methods": [
                    "__init__",
                    "init_ui",
                    "browse_files",
                    "on_files_dropped",
                    "add_files",
                    "run_tests",
                    "log"
                ],
                "docstring": "Widget to select one or more Python files (or folders), generate tests using ChatGPT (or LLM),\nand run those tests.\n\nNOW WITH MULTI-FILE & FOLDER DRAG-AND-DROP SUPPORT!",
                "base_classes": [
                    "QtWidgets.QWidget"
                ]
            },
            "FileDropListWidget": {
                "methods": [
                    "__init__",
                    "dragEnterEvent",
                    "dropEvent",
                    "_has_valid_files"
                ],
                "docstring": "QListWidget subclass that accepts drag-and-drop file/folder paths.\nEmits files_dropped signal with a list of the dropped paths.",
                "base_classes": [
                    "QtWidgets.QListWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 22
    },
    "chat_mate\\interfaces\\pyqt\\widgets\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\interfaces\\web\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\interfaces\\web\\routes\\chat_routes.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "ChatProcessingResponse": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "ChatProcessingRequest": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            }
        },
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\interfaces\\web\\app.py": {
        "language": ".py",
        "functions": [
            "create_app"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "chat_mate\\interfaces\\web\\routes\\memory_routes.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "MemoryStats": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "MemoryStatsResponse": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "Episode": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "RecentEpisodesResponse": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            }
        },
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\interfaces\\web\\routes\\system_routes.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "HealthResponse": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            }
        },
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\interfaces\\web\\routes\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\scripts\\check_context_updates.py": {
        "language": ".py",
        "functions": [
            "setup_logging",
            "parse_args",
            "is_update_due",
            "update_schedule_after_run",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "chat_mate\\scripts\\dispatch_all_prompts.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "chat_mate\\scripts\\run_dreamscape.py": {
        "language": ".py",
        "functions": [
            "setup_logging",
            "parse_args",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "chat_mate\\scripts\\run_full_sync_queue.py": {
        "language": ".py",
        "functions": [
            "run_cursor_queue",
            "run_all_queues",
            "run_queue",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "chat_mate\\scripts\\run_with_enhanced_driver.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "get"
        ],
        "classes": {
            "Config": {
                "methods": [
                    "__init__",
                    "get"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 5
    },
    "chat_mate\\scripts\\update_dreamscape_imports.py": {
        "language": ".py",
        "functions": [
            "find_files_with_old_import",
            "backup_file",
            "update_imports",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "chat_mate\\scripts\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\social\\AIChatAgent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "ask",
            "_ask_openai",
            "_ask_ollama",
            "_build_prompt",
            "_initialize_chat_thread",
            "append_to_chat_thread",
            "_log_interaction"
        ],
        "classes": {
            "AIChatAgent": {
                "methods": [
                    "__init__",
                    "ask",
                    "_ask_openai",
                    "_ask_ollama",
                    "_build_prompt",
                    "_initialize_chat_thread",
                    "append_to_chat_thread",
                    "_log_interaction"
                ],
                "docstring": "AIChatAgent: Unified AI assistant optimized for context-rich, personalized interactions in Victor's voice.\nSupports OpenAI, local LLMs (Ollama), automatic ChatGPT thread creation, persistent memory logging, and fine-tuning dataset preparation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "chat_mate\\social\\CommunityIntegrationManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_check_platform_credentials",
            "_initialize_platforms",
            "_load_strategies",
            "_load_platform_status",
            "_save_platform_status",
            "get_available_platforms",
            "get_platform",
            "get_all_platforms",
            "enable_platform",
            "disable_platform",
            "connect_platform",
            "disconnect_platform",
            "run_daily_community_management",
            "_connect_enabled_platforms",
            "_collect_metrics",
            "analyze_community_health",
            "generate_insights_and_recommendations",
            "create_community_building_plan",
            "post_content",
            "identify_advocates",
            "track_member_interactions"
        ],
        "classes": {
            "CommunityIntegrationManager": {
                "methods": [
                    "__init__",
                    "_check_platform_credentials",
                    "_initialize_platforms",
                    "_load_strategies",
                    "_load_platform_status",
                    "_save_platform_status",
                    "get_available_platforms",
                    "get_platform",
                    "get_all_platforms",
                    "enable_platform",
                    "disable_platform",
                    "connect_platform",
                    "disconnect_platform",
                    "run_daily_community_management",
                    "_connect_enabled_platforms",
                    "_collect_metrics",
                    "analyze_community_health",
                    "generate_insights_and_recommendations",
                    "create_community_building_plan",
                    "post_content",
                    "identify_advocates",
                    "track_member_interactions"
                ],
                "docstring": "Manages integrations with various social platforms, handles authentication,\nand provides a unified interface for community building.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 44
    },
    "chat_mate\\social\\community_integration.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_initialize_strategies",
            "_initialize_dashboard",
            "_initialize_post_manager",
            "analyze_community_health",
            "generate_insights_and_recommendations",
            "create_community_building_plan",
            "identify_advocates",
            "post_across_platforms",
            "track_member_interaction",
            "optimize_platform_strategies",
            "generate_visualizations",
            "run_daily_community_management"
        ],
        "classes": {
            "CommunityIntegrationManager": {
                "methods": [
                    "__init__",
                    "_initialize_strategies",
                    "_initialize_dashboard",
                    "_initialize_post_manager",
                    "analyze_community_health",
                    "generate_insights_and_recommendations",
                    "create_community_building_plan",
                    "identify_advocates",
                    "post_across_platforms",
                    "track_member_interaction",
                    "optimize_platform_strategies",
                    "generate_visualizations",
                    "run_daily_community_management"
                ],
                "docstring": "Integrates all social media platforms with the unified community dashboard.\n\nThis class serves as the main entry point for community management,\nconnecting platform-specific strategies with unified analytics and reporting.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "chat_mate\\social\\DriverSession.py": {
        "language": ".py",
        "functions": [
            "get_multi_driver_sessions",
            "__init__",
            "initialize_driver",
            "_build_chrome_options",
            "_apply_stealth_settings",
            "shutdown_driver",
            "cleanup_profile",
            "restart_driver",
            "_get_profile_dir"
        ],
        "classes": {
            "DriverSession": {
                "methods": [
                    "__init__",
                    "initialize_driver",
                    "_build_chrome_options",
                    "_apply_stealth_settings",
                    "shutdown_driver",
                    "cleanup_profile",
                    "restart_driver",
                    "_get_profile_dir"
                ],
                "docstring": "Manages a single Selenium WebDriver session.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 17
    },
    "chat_mate\\social\\platform_login_manager.py": {
        "language": ".py",
        "functions": [
            "load_cookies",
            "save_cookies",
            "wait_for_manual_login",
            "__init__",
            "login",
            "post",
            "__init__",
            "dispatch_all",
            "_process_platform",
            "_generate_content",
            "_shutdown_all_drivers"
        ],
        "classes": {
            "PlatformStrategy": {
                "methods": [
                    "__init__",
                    "login",
                    "post"
                ],
                "docstring": null,
                "base_classes": []
            },
            "SocialPlatformDispatcher": {
                "methods": [
                    "__init__",
                    "dispatch_all",
                    "_process_platform",
                    "_generate_content",
                    "_shutdown_all_drivers"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 19
    },
    "chat_mate\\social\\log_writer.py": {
        "language": ".py",
        "functions": [
            "write_json_log",
            "log_login",
            "log_post",
            "log_error"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "chat_mate\\social\\social_config.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_default_platform_urls",
            "get_platform_url",
            "chrome_profile_path",
            "within_rate_limit",
            "register_action",
            "_check_daily_reset",
            "_save_rate_limit_state",
            "_load_rate_limit_state"
        ],
        "classes": {
            "SocialConfig": {
                "methods": [
                    "__init__",
                    "_default_platform_urls",
                    "get_platform_url",
                    "chrome_profile_path",
                    "within_rate_limit",
                    "register_action",
                    "_check_daily_reset",
                    "_save_rate_limit_state",
                    "_load_rate_limit_state"
                ],
                "docstring": "FULL SYNC social_config with integrated rate limit and daily reset handling.",
                "base_classes": [
                    "ConfigBase"
                ]
            }
        },
        "routes": [],
        "complexity": 18
    },
    "chat_mate\\social\\social_config_wrapper.py": {
        "language": ".py",
        "functions": [
            "get_social_config"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "chat_mate\\social\\social_post_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "post_next",
            "post_all",
            "enqueue_post",
            "shutdown",
            "post_to_platform"
        ],
        "classes": {
            "SocialPostManager": {
                "methods": [
                    "__init__",
                    "post_next",
                    "post_all",
                    "enqueue_post",
                    "shutdown"
                ],
                "docstring": "Manages posting of social media content across multiple platforms.\nSupports multi-threading for faster execution and centralized error handling.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 11
    },
    "chat_mate\\social\\social_post_db.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load",
            "_save",
            "_load_memory",
            "_save_memory",
            "update_memory",
            "get_memory",
            "add_to_queue",
            "mark_posted",
            "mark_failed",
            "get_next_post",
            "get_queue_length"
        ],
        "classes": {
            "SocialPostDatabase": {
                "methods": [
                    "__init__",
                    "_load",
                    "_save",
                    "_load_memory",
                    "_save_memory",
                    "update_memory",
                    "get_memory",
                    "add_to_queue",
                    "mark_posted",
                    "mark_failed",
                    "get_next_post",
                    "get_queue_length"
                ],
                "docstring": "Manages the queue of social media posts.\nTracks pending, posted, and failed posts in a JSON database.\nAlso integrates with a persistent memory system to store global context.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "chat_mate\\social\\TaskQueueManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start",
            "stop",
            "add_task",
            "_worker",
            "queue_size",
            "status",
            "sample_task"
        ],
        "classes": {
            "TaskQueueManager": {
                "methods": [
                    "__init__",
                    "start",
                    "stop",
                    "add_task",
                    "_worker",
                    "queue_size",
                    "status"
                ],
                "docstring": "TaskQueueManager: A robust, priority-based task queue with threaded workers.\nThis manager supports:\n  - Prioritized task scheduling (lower value = higher priority)\n  - Delayed execution for rate-limiting or scheduling\n  - Configurable retries with exponential backoff\n  - Structured logging of task outcomes for feedback and reinforcement learning loops",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 15
    },
    "chat_mate\\social\\StrategyLoader.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_strategy",
            "_validate_strategy",
            "get_available_strategies",
            "reload_strategy",
            "register_strategy"
        ],
        "classes": {
            "StrategyLoader": {
                "methods": [
                    "__init__",
                    "load_strategy",
                    "_validate_strategy",
                    "get_available_strategies",
                    "reload_strategy",
                    "register_strategy"
                ],
                "docstring": "Dynamically loads platform-specific strategy classes.\nHandles strategy initialization and validation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "chat_mate\\social\\UnifiedCommunityDashboard.py": {
        "language": ".py",
        "functions": [
            "to_dict",
            "__init__",
            "_initialize_strategies",
            "_load_saved_data",
            "save_data",
            "update_metrics",
            "update_top_members",
            "generate_insights",
            "_calculate_trends",
            "_generate_platform_insights",
            "_generate_overall_insights",
            "get_metrics_history",
            "get_latest_metrics",
            "generate_metrics_chart",
            "get_platform_status",
            "get_community_building_plan",
            "_get_recommended_platforms_for_day"
        ],
        "classes": {
            "CommunityMetrics": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Data structure for standardized community metrics across platforms.",
                "base_classes": []
            },
            "UnifiedCommunityDashboard": {
                "methods": [
                    "__init__",
                    "_initialize_strategies",
                    "_load_saved_data",
                    "save_data",
                    "update_metrics",
                    "update_top_members",
                    "generate_insights",
                    "_calculate_trends",
                    "_generate_platform_insights",
                    "_generate_overall_insights",
                    "get_metrics_history",
                    "get_latest_metrics",
                    "generate_metrics_chart",
                    "get_platform_status",
                    "get_community_building_plan",
                    "_get_recommended_platforms_for_day"
                ],
                "docstring": "Provides a centralized dashboard for cross-platform community analytics and insights",
                "base_classes": [
                    "QObject"
                ]
            }
        },
        "routes": [],
        "complexity": 34
    },
    "chat_mate\\social\\UnifiedPostManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_post_history",
            "_save_post_history",
            "post_to_platform",
            "_adapt_content_for_platform",
            "schedule_post",
            "get_scheduled_posts",
            "cancel_scheduled_post",
            "get_post_analytics",
            "_get_current_metrics",
            "generate_content_ideas"
        ],
        "classes": {
            "UnifiedPostManager": {
                "methods": [
                    "__init__",
                    "_load_post_history",
                    "_save_post_history",
                    "post_to_platform",
                    "_adapt_content_for_platform",
                    "schedule_post",
                    "get_scheduled_posts",
                    "cancel_scheduled_post",
                    "get_post_analytics",
                    "_get_current_metrics",
                    "generate_content_ideas"
                ],
                "docstring": "Manages post creation, scheduling, and distribution across multiple social platforms.\nProvides a unified interface for content management and cross-platform posting.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "chat_mate\\social\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\social\\ai\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\social\\data\\post_history.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_history",
            "_save_history",
            "add_post",
            "get_posts",
            "clear_history"
        ],
        "classes": {
            "PostHistory": {
                "methods": [
                    "__init__",
                    "_load_history",
                    "_save_history",
                    "add_post",
                    "get_posts",
                    "clear_history"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "chat_mate\\social\\data\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\social\\strategies\\ai_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze_sentiment",
            "_build_response_prompt",
            "_get_response_template",
            "_get_fallback_response",
            "_summarize_recent_content",
            "_get_sentiment_label",
            "_load_templates",
            "_load_history",
            "_track_response",
            "get_response_analytics"
        ],
        "classes": {
            "AIStrategy": {
                "methods": [
                    "__init__",
                    "analyze_sentiment",
                    "_build_response_prompt",
                    "_get_response_template",
                    "_get_fallback_response",
                    "_summarize_recent_content",
                    "_get_sentiment_label",
                    "_load_templates",
                    "_load_history",
                    "_track_response",
                    "get_response_analytics"
                ],
                "docstring": "Enhanced AI strategy for community management and content generation.\nHandles all AI-related tasks including:\n- Content generation\n- Comment responses\n- Engagement prompts\n- Sentiment analysis\n- Content optimization",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "chat_mate\\social\\strategies\\BaseEngagementBot.py": {
        "language": ".py",
        "functions": [
            "retry_on_failure",
            "decorator_retry",
            "__init__",
            "get_driver",
            "get_random_user_agent",
            "_wait",
            "login",
            "is_logged_in",
            "_login_with_credentials",
            "post",
            "like_posts",
            "comment_on_posts",
            "follow_users",
            "unfollow_non_returners",
            "go_viral",
            "_log_followed_users",
            "_find_posts",
            "_find_like_button",
            "_find_comment_box",
            "_find_profile_url",
            "_find_follow_button",
            "_find_unfollow_button",
            "run_daily_session",
            "wrapper_retry"
        ],
        "classes": {
            "BaseEngagementBot": {
                "methods": [
                    "__init__",
                    "get_driver",
                    "get_random_user_agent",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "_login_with_credentials",
                    "post",
                    "like_posts",
                    "comment_on_posts",
                    "follow_users",
                    "unfollow_non_returners",
                    "go_viral",
                    "_log_followed_users",
                    "_find_posts",
                    "_find_like_button",
                    "_find_comment_box",
                    "_find_profile_url",
                    "_find_follow_button",
                    "_find_unfollow_button",
                    "run_daily_session"
                ],
                "docstring": "Base class for all social platform engagement bots.\nProvides unified methods for:\n  - Login (cookie and credential-based, with manual fallback)\n  - Community engagement actions (like, comment, follow, unfollow, viral actions)\n  - Daily session orchestration.\n\nPlatform-specific details are provided via abstract helper methods.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 45
    },
    "chat_mate\\social\\strategies\\base_platform_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_feedback_data",
            "_save_feedback_data",
            "analyze_engagement_metrics",
            "analyze_comment_sentiment",
            "reinforce_engagement",
            "reward_top_engagers",
            "cross_platform_feedback_loop",
            "run_feedback_loop",
            "initialize",
            "cleanup",
            "get_community_metrics",
            "get_top_members",
            "track_member_interaction"
        ],
        "classes": {
            "BasePlatformStrategy": {
                "methods": [
                    "__init__",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "analyze_comment_sentiment",
                    "reinforce_engagement",
                    "reward_top_engagers",
                    "cross_platform_feedback_loop",
                    "run_feedback_loop",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction"
                ],
                "docstring": "Base class for all platform-specific strategies.\nProvides common functionality for:\n- Feedback tracking and metrics\n- Sentiment analysis\n- Engagement reinforcement\n- Cross-platform data integration\n- Reward systems",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 28
    },
    "chat_mate\\social\\strategies\\community_scheduler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "schedule_task",
            "schedule_engagement_check",
            "schedule_ai_responses",
            "schedule_daily_report",
            "_check_engagement",
            "_load_schedules",
            "_save_schedules",
            "_is_comment_processed",
            "_mark_comment_processed",
            "start",
            "stop"
        ],
        "classes": {
            "CommunityScheduler": {
                "methods": [
                    "__init__",
                    "schedule_task",
                    "schedule_engagement_check",
                    "schedule_ai_responses",
                    "schedule_daily_report",
                    "_check_engagement",
                    "_load_schedules",
                    "_save_schedules",
                    "_is_comment_processed",
                    "_mark_comment_processed",
                    "start",
                    "stop"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "chat_mate\\social\\strategies\\config_loader.py": {
        "language": ".py",
        "functions": [
            "load_yaml_config",
            "load_json_config",
            "load_configs",
            "get_nested",
            "get_env_or_config",
            "reload_configs"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "chat_mate\\social\\strategies\\context_db.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_tables",
            "log_post",
            "fetch_recent_posts",
            "fetch_last_post_content",
            "log_engagement",
            "fetch_engagements_for_post",
            "get_rate_limit",
            "update_rate_limit",
            "update_sentiment",
            "close"
        ],
        "classes": {
            "UnifiedContextEngine": {
                "methods": [
                    "__init__",
                    "create_tables",
                    "log_post",
                    "fetch_recent_posts",
                    "fetch_last_post_content",
                    "log_engagement",
                    "fetch_engagements_for_post",
                    "get_rate_limit",
                    "update_rate_limit",
                    "update_sentiment",
                    "close"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "chat_mate\\social\\strategies\\facebook_strategy.py": {
        "language": ".py",
        "functions": [
            "retry_on_failure",
            "get_random_user_agent",
            "start_scheduler",
            "post_to_facebook",
            "decorator_retry",
            "__init__",
            "_wait",
            "get_driver",
            "is_logged_in",
            "login",
            "post",
            "like_posts",
            "comment_on_posts",
            "follow_users",
            "unfollow_non_returners",
            "_log_followed_users",
            "go_viral",
            "run_daily_session",
            "__init__",
            "initialize",
            "cleanup",
            "get_community_metrics",
            "get_top_members",
            "track_member_interaction",
            "_get_driver",
            "get_random_user_agent",
            "_wait",
            "login",
            "is_logged_in",
            "post_content",
            "run_daily_strategy_session",
            "_load_feedback_data",
            "_save_feedback_data",
            "analyze_engagement_metrics",
            "adaptive_posting_strategy",
            "analyze_comment_sentiment",
            "reinforce_engagement",
            "reward_top_followers",
            "cross_platform_feedback_loop",
            "run_feedback_loop",
            "wrapper_retry"
        ],
        "classes": {
            "FacebookBot": {
                "methods": [
                    "__init__",
                    "_wait",
                    "get_driver",
                    "is_logged_in",
                    "login",
                    "post"
                ],
                "docstring": "Automates Facebook login and posting.\nThis base class handles authentication and AI-powered post creation.",
                "base_classes": []
            },
            "FacebookEngagementBot": {
                "methods": [
                    "like_posts",
                    "comment_on_posts",
                    "follow_users",
                    "unfollow_non_returners",
                    "_log_followed_users",
                    "go_viral",
                    "run_daily_session"
                ],
                "docstring": "Extends FacebookBot with essential community building functions:\n  - Like posts, comment, follow/unfollow users, and viral engagement.\n  - Maintains a FOLLOW_DB to track engagements.\n  - Runs daily engagement sessions.",
                "base_classes": [
                    "FacebookBot"
                ]
            },
            "FacebookStrategy": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "get_random_user_agent",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "adaptive_posting_strategy",
                    "analyze_comment_sentiment",
                    "reinforce_engagement",
                    "reward_top_followers",
                    "cross_platform_feedback_loop",
                    "run_feedback_loop"
                ],
                "docstring": "Centralized strategy class for managing Facebook automation and community building.\nExtends BasePlatformStrategy with Facebook-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops using ChatGPT responses\n  - Reward system for top engaging followers\n  - Cross-platform feedback integration",
                "base_classes": [
                    "BasePlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 76
    },
    "chat_mate\\social\\strategies\\linkedin_strategy.py": {
        "language": ".py",
        "functions": [
            "retry_on_failure",
            "decorator_retry",
            "__init__",
            "_get_driver",
            "get_random_user_agent",
            "_wait",
            "login",
            "is_logged_in",
            "_login_with_credentials",
            "post",
            "like_posts",
            "comment_on_posts",
            "follow_users",
            "unfollow_non_returners",
            "go_viral",
            "_log_followed_users",
            "_find_posts",
            "_find_like_button",
            "_find_comment_box",
            "_find_profile_url",
            "_find_follow_button",
            "_find_unfollow_button",
            "run_daily_session",
            "__init__",
            "is_logged_in",
            "_login_with_credentials",
            "post",
            "_find_posts",
            "_find_like_button",
            "_find_comment_box",
            "_find_profile_url",
            "_find_follow_button",
            "_find_unfollow_button",
            "__init__",
            "initialize",
            "cleanup",
            "get_community_metrics",
            "get_top_members",
            "track_member_interaction",
            "_get_driver",
            "get_random_user_agent",
            "_wait",
            "login",
            "is_logged_in",
            "post_content",
            "run_daily_strategy_session",
            "wrapper_retry"
        ],
        "classes": {
            "BaseEngagementBot": {
                "methods": [
                    "__init__",
                    "_get_driver",
                    "get_random_user_agent",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "_login_with_credentials",
                    "post",
                    "like_posts",
                    "comment_on_posts",
                    "follow_users",
                    "unfollow_non_returners",
                    "go_viral",
                    "_log_followed_users",
                    "_find_posts",
                    "_find_like_button",
                    "_find_comment_box",
                    "_find_profile_url",
                    "_find_follow_button",
                    "_find_unfollow_button",
                    "run_daily_session"
                ],
                "docstring": "A universal base class for social media engagement bots.\nProvides core community building functions:\n  - Login (with cookie & credential fallback)\n  - Post content (AI-generated if needed)\n  - Like, comment, follow, unfollow, viral engagement, and DM functionalities\n  - Daily session orchestration",
                "base_classes": [
                    "ABC"
                ]
            },
            "LinkedInEngagementBot": {
                "methods": [
                    "__init__",
                    "is_logged_in",
                    "_login_with_credentials",
                    "post",
                    "_find_posts",
                    "_find_like_button",
                    "_find_comment_box",
                    "_find_profile_url",
                    "_find_follow_button",
                    "_find_unfollow_button"
                ],
                "docstring": "LinkedIn-specific implementation of BaseEngagementBot.\nImplements abstract methods using LinkedIn's DOM structure.",
                "base_classes": [
                    "BaseEngagementBot"
                ]
            },
            "LinkedinStrategy": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "get_random_user_agent",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session"
                ],
                "docstring": "Centralized strategy class for LinkedIn automation and community building.\nExtends BasePlatformStrategy with LinkedIn-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops using ChatGPT responses\n  - Reward system for top engaging followers\n  - Cross-platform feedback integration",
                "base_classes": [
                    "BasePlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 91
    },
    "chat_mate\\social\\strategies\\instagram_strategy.py": {
        "language": ".py",
        "functions": [
            "retry_on_failure",
            "get_random_mobile_user_agent",
            "start_scheduler",
            "post_to_instagram",
            "decorator_retry",
            "__init__",
            "get_driver",
            "_wait",
            "login",
            "is_logged_in",
            "create_post",
            "like_posts",
            "comment_on_posts",
            "_gather_post_links",
            "follow_users",
            "unfollow_user",
            "__init__",
            "run_daily_session",
            "generate_ai_comments",
            "like_posts",
            "comment_on_posts",
            "follow_users",
            "unfollow_non_returners",
            "_log_followed_users",
            "go_viral",
            "__init__",
            "initialize",
            "cleanup",
            "get_community_metrics",
            "get_top_members",
            "track_member_interaction",
            "_get_driver",
            "_wait",
            "login",
            "is_logged_in",
            "post_content",
            "run_daily_strategy_session",
            "_load_feedback_data",
            "_save_feedback_data",
            "analyze_engagement_metrics",
            "analyze_comment_sentiment",
            "reinforce_engagement",
            "reward_top_engagers",
            "cross_platform_feedback_loop",
            "run_feedback_loop",
            "wrapper_retry"
        ],
        "classes": {
            "InstagramBot": {
                "methods": [
                    "__init__",
                    "get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "create_post",
                    "like_posts",
                    "comment_on_posts",
                    "_gather_post_links",
                    "follow_users",
                    "unfollow_user"
                ],
                "docstring": "Automates Instagram login, posting, and engagement actions using Selenium.\nUses mobile emulation (Pixel 5) to enable posting via Instagram's mobile interface.",
                "base_classes": []
            },
            "InstagramEngagementBot": {
                "methods": [
                    "__init__",
                    "run_daily_session",
                    "generate_ai_comments",
                    "like_posts",
                    "comment_on_posts",
                    "follow_users",
                    "unfollow_non_returners",
                    "_log_followed_users",
                    "go_viral"
                ],
                "docstring": null,
                "base_classes": []
            },
            "InstagramStrategy": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "analyze_comment_sentiment",
                    "reinforce_engagement",
                    "reward_top_engagers",
                    "cross_platform_feedback_loop",
                    "run_feedback_loop"
                ],
                "docstring": "Centralized strategy class for Instagram automation and community building.\nExtends BasePlatformStrategy with Instagram-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops using ChatGPT responses\n  - Reward system for top engaging followers\n  - Cross-platform feedback integration",
                "base_classes": [
                    "BasePlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 86
    },
    "chat_mate\\social\\strategies\\stocktwits_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "login",
            "is_logged_in",
            "post",
            "engage_community",
            "_log_follow",
            "unfollow_non_returners",
            "run_daily_session",
            "__init__",
            "initialize",
            "cleanup",
            "get_community_metrics",
            "get_top_members",
            "track_member_interaction",
            "_get_driver",
            "_wait",
            "login",
            "is_logged_in",
            "post_content",
            "run_daily_strategy_session",
            "_load_feedback_data",
            "_save_feedback_data",
            "analyze_engagement_metrics",
            "run_feedback_loop",
            "adaptive_posting_strategy",
            "reinforce_engagement",
            "reward_top_engagers",
            "cross_platform_feedback_loop"
        ],
        "classes": {
            "StocktwitsCommunityArchitect": {
                "methods": [
                    "__init__",
                    "login",
                    "is_logged_in",
                    "post",
                    "engage_community",
                    "_log_follow",
                    "unfollow_non_returners",
                    "run_daily_session"
                ],
                "docstring": "Stocktwits Community Builder:\nAutomates posts, engagement, and follower interactions with AI-generated content in Victor's authentic tone.",
                "base_classes": []
            },
            "StocktwitsStrategy": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "run_feedback_loop",
                    "adaptive_posting_strategy",
                    "reinforce_engagement",
                    "reward_top_engagers",
                    "cross_platform_feedback_loop"
                ],
                "docstring": "Centralized strategy class for Stocktwits automation and community building.\nExtends BasePlatformStrategy with Stocktwits-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops using ChatGPT responses\n  - Reward system for top engaging followers\n  - Cross-platform feedback integration",
                "base_classes": [
                    "BasePlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 56
    },
    "chat_mate\\social\\strategies\\reddit_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "cleanup",
            "get_community_metrics",
            "get_top_members",
            "track_member_interaction",
            "_get_driver",
            "_wait",
            "login",
            "is_logged_in",
            "post_content",
            "run_daily_strategy_session",
            "_load_feedback_data",
            "_save_feedback_data",
            "analyze_engagement_metrics",
            "run_feedback_loop",
            "adaptive_posting_strategy"
        ],
        "classes": {
            "RedditStrategy": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "run_feedback_loop",
                    "adaptive_posting_strategy"
                ],
                "docstring": "Centralized strategy class for Reddit automation and community building.\nExtends BasePlatformStrategy with Reddit-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops using ChatGPT responses\n  - Reward system for top engaging followers\n  - Cross-platform feedback integration",
                "base_classes": [
                    "BasePlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 34
    },
    "chat_mate\\social\\strategies\\tiktok_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "cleanup",
            "get_community_metrics",
            "get_top_members",
            "track_member_interaction",
            "_get_driver",
            "_wait",
            "login",
            "is_logged_in",
            "post_video",
            "run_daily_strategy_session",
            "_load_feedback_data",
            "_save_feedback_data",
            "analyze_engagement_metrics",
            "run_feedback_loop",
            "adaptive_posting_strategy",
            "update_trending_hashtags",
            "reward_top_creators",
            "cross_platform_feedback_loop"
        ],
        "classes": {
            "TikTokStrategy": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_video",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "run_feedback_loop",
                    "adaptive_posting_strategy",
                    "update_trending_hashtags",
                    "reward_top_creators",
                    "cross_platform_feedback_loop"
                ],
                "docstring": "Centralized strategy class for TikTok automation and community building.\nExtends BasePlatformStrategy with TikTok-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Video content scheduling and posting\n  - Hashtag trend analysis and optimization\n  - Cross-platform content repurposing\n  - Engagement analytics and community growth tracking",
                "base_classes": [
                    "BasePlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 40
    },
    "chat_mate\\social\\strategies\\twitter_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "login",
            "is_logged_in",
            "post_tweet",
            "post_thread",
            "_extract_tweet_id",
            "engage_community",
            "_follow_author",
            "_log_follow",
            "unfollow_non_returners",
            "run_daily_session",
            "post_thread",
            "__init__",
            "_load_feedback_data",
            "_save_feedback_data",
            "analyze_engagement_metrics",
            "adaptive_posting_strategy",
            "analyze_comment_sentiment",
            "reinforce_engagement",
            "reward_top_engagers",
            "cross_platform_feedback_loop",
            "run_feedback_loop",
            "run_daily_strategy_session"
        ],
        "classes": {
            "TwitterCommunityArchitect": {
                "methods": [
                    "__init__",
                    "login",
                    "is_logged_in",
                    "post_tweet",
                    "post_thread",
                    "_extract_tweet_id",
                    "engage_community",
                    "_follow_author",
                    "_log_follow",
                    "unfollow_non_returners",
                    "run_daily_session",
                    "post_thread"
                ],
                "docstring": "Ultimate Twitter Engagement Bot.\nCombines posting, commenting, following, and adaptive AI-powered interactions.",
                "base_classes": []
            },
            "TwitterStrategy": {
                "methods": [
                    "__init__",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "adaptive_posting_strategy",
                    "analyze_comment_sentiment",
                    "reinforce_engagement",
                    "reward_top_engagers",
                    "cross_platform_feedback_loop",
                    "run_feedback_loop",
                    "run_daily_strategy_session"
                ],
                "docstring": "Centralized strategy class for Twitter automation and community building.\nExtends TwitterCommunityArchitect with:\n  - Dynamic feedback loops for engagement metrics analysis.\n  - AI sentiment analysis & reinforcement loops.\n  - Reward system for top engagers.\n  - Cross-platform feedback integration.",
                "base_classes": [
                    "TwitterCommunityArchitect"
                ]
            }
        },
        "routes": [],
        "complexity": 46
    },
    "chat_mate\\social\\strategies\\wordpress_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "cleanup",
            "sync_youtube_video",
            "moderate_comment",
            "get_community_metrics",
            "get_top_members",
            "_load_community_data",
            "_save_community_data",
            "generate_engagement_report",
            "track_member_interaction"
        ],
        "classes": {
            "WordPressCommunityStrategy": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "sync_youtube_video",
                    "moderate_comment",
                    "get_community_metrics",
                    "get_top_members",
                    "_load_community_data",
                    "_save_community_data",
                    "generate_engagement_report",
                    "track_member_interaction"
                ],
                "docstring": "WordPress community strategy that integrates with YouTube for automated community building.\nFeatures:\n- Auto-syncs YouTube videos as WordPress posts\n- Manages comments across both platforms\n- Generates engagement reports\n- Handles community moderation\n- Creates automated responses",
                "base_classes": [
                    "BasePlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 22
    },
    "chat_mate\\social\\strategies\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\social\\strategies\\youtube_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "cleanup",
            "get_community_metrics",
            "get_top_members",
            "track_member_interaction",
            "_get_driver",
            "_wait",
            "login",
            "is_logged_in",
            "post_video",
            "run_daily_strategy_session",
            "_load_feedback_data",
            "_save_feedback_data",
            "analyze_engagement_metrics",
            "run_feedback_loop",
            "adaptive_posting_strategy",
            "reward_top_creators",
            "cross_platform_feedback_loop"
        ],
        "classes": {
            "YouTubeStrategy": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_video",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "run_feedback_loop",
                    "adaptive_posting_strategy",
                    "reward_top_creators",
                    "cross_platform_feedback_loop"
                ],
                "docstring": "Centralized strategy class for YouTube automation and community building.\nExtends BasePlatformStrategy with YouTube-specific implementations.\nFeatures:\n  - Video content management and scheduling\n  - Shorts creation and optimization\n  - Community post engagement\n  - Analytics tracking and optimization\n  - Cross-platform content distribution",
                "base_classes": [
                    "BasePlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 38
    },
    "chat_mate\\sync_ops\\micro_factories\\sync_ops_factory.py": {
        "language": ".py",
        "functions": [
            "get_service",
            "reset_service"
        ],
        "classes": {
            "SyncOpsFactory": {
                "methods": [
                    "get_service",
                    "reset_service"
                ],
                "docstring": "A simple factory for creating and managing a singleton instance of SyncOpsService.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "chat_mate\\sync_ops\\micro_factories\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\sync_ops\\services\\sync_ops_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "clock_in",
            "clock_out",
            "start_pomodoro",
            "stop_pomodoro",
            "update_pomodoro",
            "log_event",
            "save_session"
        ],
        "classes": {
            "SyncOpsService": {
                "methods": [
                    "__init__",
                    "clock_in",
                    "clock_out",
                    "start_pomodoro",
                    "stop_pomodoro",
                    "update_pomodoro",
                    "log_event",
                    "save_session"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "chat_mate\\sync_ops\\services\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\tests\\core\\chatgpt_automation\\test_automation_engine.py": {
        "language": ".py",
        "functions": [
            "load_tests",
            "setUp",
            "tearDown",
            "test_integration_full_workflow",
            "test_integration_error_recovery",
            "test_integration_multibot_workflow",
            "test_integration_file_backup_restore",
            "test_integration_project_analysis_export"
        ],
        "classes": {
            "TestAutomationEngine": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_integration_full_workflow",
                    "test_integration_error_recovery",
                    "test_integration_multibot_workflow",
                    "test_integration_file_backup_restore",
                    "test_integration_project_analysis_export"
                ],
                "docstring": "Test cases for AutomationEngine core functionality.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 15
    },
    "chat_mate\\tests\\core\\chatgpt_automation\\test_model_registry.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_init_with_default_dir",
            "test_init_with_custom_dir",
            "test_init_with_nonexistent_dir",
            "test_reload_models_empty_dir",
            "test_reload_models_with_valid_model",
            "test_reload_models_with_multiple_valid_models",
            "test_reload_models_with_invalid_model",
            "test_reload_models_with_missing_register",
            "test_reload_models_with_invalid_registration",
            "test_reload_models_with_duplicate_names",
            "test_get_registry",
            "test_str_empty_registry",
            "test_str_with_models"
        ],
        "classes": {
            "TestModelRegistry": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_init_with_default_dir",
                    "test_init_with_custom_dir",
                    "test_init_with_nonexistent_dir",
                    "test_reload_models_empty_dir",
                    "test_reload_models_with_valid_model",
                    "test_reload_models_with_multiple_valid_models",
                    "test_reload_models_with_invalid_model",
                    "test_reload_models_with_missing_register",
                    "test_reload_models_with_invalid_registration",
                    "test_reload_models_with_duplicate_names",
                    "test_get_registry",
                    "test_str_empty_registry",
                    "test_str_with_models"
                ],
                "docstring": "Test suite for ModelRegistry class.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 30
    },
    "chat_mate\\tests\\core\\chatgpt_automation\\test_automation_engine\\test_automation_engine_core.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_get_chatgpt_response_local",
            "test_get_chatgpt_response_openai",
            "test_switch_model_local",
            "test_switch_model_openai",
            "test_shutdown_local",
            "test_shutdown_openai",
            "test_shutdown_openai_no_client_fallback",
            "test_select_model_empty_registry",
            "test_select_model_thresholds",
            "test_select_model_no_match_fallback",
            "test_self_heal_success_writeback_deploy",
            "test_self_heal_success_no_writeback",
            "test_self_heal_success_no_deploy",
            "test_self_heal_file_not_found",
            "test_self_heal_read_error",
            "test_self_heal_model_error",
            "test_self_heal_write_error",
            "test_self_heal_test_failure",
            "test_add_manual_model_success",
            "test_add_manual_model_write_error",
            "test_run_tests_placeholder_success",
            "test_run_tests_placeholder_not_exists",
            "test_run_tests_placeholder_empty_file",
            "test_run_tests_placeholder_os_error",
            "test_deploy_file_success",
            "test_deploy_file_copy_error",
            "test_deploy_file_move_error",
            "dummy_handler"
        ],
        "classes": {
            "TestAutomationEngineCore": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_get_chatgpt_response_local",
                    "test_get_chatgpt_response_openai",
                    "test_switch_model_local",
                    "test_switch_model_openai",
                    "test_shutdown_local",
                    "test_shutdown_openai",
                    "test_shutdown_openai_no_client_fallback",
                    "test_select_model_empty_registry",
                    "test_select_model_thresholds",
                    "test_select_model_no_match_fallback",
                    "test_self_heal_success_writeback_deploy",
                    "test_self_heal_success_no_writeback",
                    "test_self_heal_success_no_deploy",
                    "test_self_heal_file_not_found",
                    "test_self_heal_read_error",
                    "test_self_heal_model_error",
                    "test_self_heal_write_error",
                    "test_self_heal_test_failure",
                    "test_add_manual_model_success",
                    "test_add_manual_model_write_error",
                    "test_run_tests_placeholder_success",
                    "test_run_tests_placeholder_not_exists",
                    "test_run_tests_placeholder_empty_file",
                    "test_run_tests_placeholder_os_error",
                    "test_deploy_file_success",
                    "test_deploy_file_copy_error",
                    "test_deploy_file_move_error"
                ],
                "docstring": "Test cases for core AutomationEngine methods.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 59
    },
    "chat_mate\\tests\\core\\chatgpt_automation\\test_automation_engine\\test_bot_worker.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_worker_initialization",
            "test_process_task_success",
            "test_process_task_failure",
            "test_process_task_model_not_found",
            "test_process_task_empty_content",
            "test_process_task_missing_file_path",
            "test_process_task_invalid_task_format",
            "test_run_worker_thread",
            "test_run_worker_multiple_tasks",
            "test_run_worker_error_handling",
            "test_run_worker_graceful_shutdown",
            "test_process_task_with_retries",
            "test_process_task_max_retries_exceeded",
            "test_process_task_with_custom_timeout",
            "test_process_task_with_priority",
            "test_run_worker_scanner_exception",
            "test_run_worker_status_callback_exception",
            "process_side_effect",
            "process_side_effect"
        ],
        "classes": {
            "TestBotWorker": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_worker_initialization",
                    "test_process_task_success",
                    "test_process_task_failure",
                    "test_process_task_model_not_found",
                    "test_process_task_empty_content",
                    "test_process_task_missing_file_path",
                    "test_process_task_invalid_task_format",
                    "test_run_worker_thread",
                    "test_run_worker_multiple_tasks",
                    "test_run_worker_error_handling",
                    "test_run_worker_graceful_shutdown",
                    "test_process_task_with_retries",
                    "test_process_task_max_retries_exceeded",
                    "test_process_task_with_custom_timeout",
                    "test_process_task_with_priority",
                    "test_run_worker_scanner_exception",
                    "test_run_worker_status_callback_exception"
                ],
                "docstring": "Test cases for BotWorker functionality.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 40
    },
    "chat_mate\\tests\\core\\chatgpt_automation\\test_automation_engine\\test_file_processing.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_process_file_success",
            "test_process_nonexistent_file",
            "test_process_file_read_error",
            "test_process_file_model_fallback",
            "test_process_file_with_backup",
            "test_process_empty_file",
            "test_process_file_permission_error",
            "test_process_file_memory_error",
            "test_process_file_disk_full",
            "test_process_file_self_healing",
            "test_deploy_file_with_backup"
        ],
        "classes": {
            "TestAutomationEngineFileProcessing": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_process_file_success",
                    "test_process_nonexistent_file",
                    "test_process_file_read_error",
                    "test_process_file_model_fallback",
                    "test_process_file_with_backup",
                    "test_process_empty_file",
                    "test_process_file_permission_error",
                    "test_process_file_memory_error",
                    "test_process_file_disk_full",
                    "test_process_file_self_healing",
                    "test_deploy_file_with_backup"
                ],
                "docstring": "Test cases for AutomationEngine file processing.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 26
    },
    "chat_mate\\tests\\core\\chatgpt_automation\\test_automation_engine\\test_initialization.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_init_basic",
            "test_init_with_beta_mode",
            "test_init_with_splash_screen",
            "test_init_with_invalid_model",
            "test_init_with_empty_model_name",
            "test_init_with_none_model_name",
            "test_init_with_special_chars_model_name",
            "test_init_with_whitespace_model_name",
            "test_init_with_long_model_name",
            "test_init_with_unicode_model_name",
            "test_initialize_components_success",
            "test_initialize_components_failure",
            "test_initialize_components_local_model_creation",
            "test_initialize_components_with_custom_config",
            "test_initialize_components_with_invalid_config"
        ],
        "classes": {
            "TestAutomationEngineInit": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_init_basic",
                    "test_init_with_beta_mode",
                    "test_init_with_splash_screen",
                    "test_init_with_invalid_model",
                    "test_init_with_empty_model_name",
                    "test_init_with_none_model_name",
                    "test_init_with_special_chars_model_name",
                    "test_init_with_whitespace_model_name",
                    "test_init_with_long_model_name",
                    "test_init_with_unicode_model_name",
                    "test_initialize_components_success",
                    "test_initialize_components_failure",
                    "test_initialize_components_local_model_creation",
                    "test_initialize_components_with_custom_config",
                    "test_initialize_components_with_invalid_config"
                ],
                "docstring": "Test cases for AutomationEngine initialization.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 34
    },
    "chat_mate\\tests\\core\\chatgpt_automation\\test_automation_engine\\test_model_management.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_switch_model_local_success",
            "test_switch_model_non_local",
            "test_switch_model_error",
            "test_select_model_success",
            "test_select_model_complex_code",
            "test_select_model_with_comments",
            "test_select_model_empty_registry",
            "test_add_manual_model_success",
            "test_add_manual_model_file_error",
            "test_add_manual_model_invalid_name",
            "test_add_manual_model_invalid_threshold",
            "test_add_manual_model_none_handler",
            "test_add_manual_model_duplicate"
        ],
        "classes": {
            "TestModelManagement": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_switch_model_local_success",
                    "test_switch_model_non_local",
                    "test_switch_model_error",
                    "test_select_model_success",
                    "test_select_model_complex_code",
                    "test_select_model_with_comments",
                    "test_select_model_empty_registry",
                    "test_add_manual_model_success",
                    "test_add_manual_model_file_error",
                    "test_add_manual_model_invalid_name",
                    "test_add_manual_model_invalid_threshold",
                    "test_add_manual_model_none_handler",
                    "test_add_manual_model_duplicate"
                ],
                "docstring": "Tests related to model switching, selection, and management.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 30
    },
    "chat_mate\\tests\\core\\chatgpt_automation\\test_automation_engine\\test_project_analysis.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_scan_project_with_gui",
            "test_scan_project_no_analysis",
            "test_scan_project_file_read_error",
            "test_scan_project_invalid_json",
            "test_prioritize_files_by_complexity",
            "test_export_project_context",
            "test_export_project_context_write_error",
            "test_use_jinja_template",
            "test_jinja_import_error",
            "test_template_file_write_error",
            "test_custom_output_path",
            "test_empty_analysis",
            "test_invalid_template"
        ],
        "classes": {
            "TestAutomationEngineProjectAnalysis": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_scan_project_with_gui",
                    "test_scan_project_no_analysis",
                    "test_scan_project_file_read_error",
                    "test_scan_project_invalid_json",
                    "test_prioritize_files_by_complexity",
                    "test_export_project_context",
                    "test_export_project_context_write_error",
                    "test_use_jinja_template",
                    "test_jinja_import_error",
                    "test_template_file_write_error",
                    "test_custom_output_path",
                    "test_empty_analysis",
                    "test_invalid_template"
                ],
                "docstring": "Test cases for AutomationEngine project analysis.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 30
    },
    "chat_mate\\tests\\core\\chatgpt_automation\\test_automation_engine\\test_multibot_manager.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_manager_initialization",
            "test_start_workers",
            "test_stop_workers",
            "test_add_task",
            "test_add_multiple_tasks",
            "test_get_results_after_completion",
            "test_process_files",
            "test_process_files_with_errors",
            "process_side_effect"
        ],
        "classes": {
            "TestMultibotManager": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_manager_initialization",
                    "test_start_workers",
                    "test_stop_workers",
                    "test_add_task",
                    "test_add_multiple_tasks",
                    "test_get_results_after_completion",
                    "test_process_files",
                    "test_process_files_with_errors"
                ],
                "docstring": "Test cases for the MultibotManager class.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 21
    },
    "chat_mate\\tests\\core\\chatgpt_automation\\test_automation_engine\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\tests\\interfaces\\pyqt\\dream_os_window\\test_main_window.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "test_init",
            "test_run_startup_validation_success",
            "test_run_startup_validation_errors",
            "test_verify_services",
            "test_setup_ui",
            "test_setup_signals",
            "test_close_event",
            "test_setup_signal_handlers"
        ],
        "classes": {
            "TestDreamscapeMainWindow": {
                "methods": [
                    "setUp",
                    "test_init",
                    "test_run_startup_validation_success",
                    "test_run_startup_validation_errors",
                    "test_verify_services",
                    "test_setup_ui",
                    "test_setup_signals",
                    "test_close_event",
                    "test_setup_signal_handlers"
                ],
                "docstring": "Test suite for DreamscapeMainWindow class.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 18
    },
    "chat_mate\\tests\\interfaces\\pyqt\\dream_os_window\\test_assistant_handler.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "test_set_services",
            "test_handle_openai_login_success",
            "test_handle_openai_login_failure",
            "test_handle_openai_login_error",
            "test_handle_scan_success",
            "test_handle_scan_no_engine",
            "test_start_assistant_success",
            "test_start_assistant_no_controller",
            "test_stop_assistant",
            "test_send_message",
            "test_send_message_no_engine"
        ],
        "classes": {
            "TestAssistantHandler": {
                "methods": [
                    "setUp",
                    "test_set_services",
                    "test_handle_openai_login_success",
                    "test_handle_openai_login_failure",
                    "test_handle_openai_login_error",
                    "test_handle_scan_success",
                    "test_handle_scan_no_engine",
                    "test_start_assistant_success",
                    "test_start_assistant_no_controller",
                    "test_stop_assistant",
                    "test_send_message",
                    "test_send_message_no_engine"
                ],
                "docstring": "Test suite for AssistantHandler class.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 24
    },
    "chat_mate\\tests\\interfaces\\pyqt\\dream_os_window\\test_service_container.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "test_init",
            "test_init_openai_client_success",
            "test_init_openai_client_failure",
            "test_init_assistant_controller_success",
            "test_get_service",
            "test_shutdown_services",
            "test_validate_services"
        ],
        "classes": {
            "TestServiceContainer": {
                "methods": [
                    "setUp",
                    "test_init",
                    "test_init_openai_client_success",
                    "test_init_openai_client_failure",
                    "test_init_assistant_controller_success",
                    "test_get_service",
                    "test_shutdown_services",
                    "test_validate_services"
                ],
                "docstring": "Test suite for ServiceContainer class.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "chat_mate\\tests\\interfaces\\pyqt\\tabs\\test_social_setup_tab.py": {
        "language": ".py",
        "functions": [
            "app",
            "config_manager",
            "logger",
            "social_setup_tab",
            "test_init",
            "test_platform_selection",
            "test_navigation_buttons",
            "test_credential_fields",
            "test_save_credentials",
            "test_load_saved_credentials",
            "test_platform_status_update",
            "test_error_handling",
            "test_cleanup"
        ],
        "classes": {},
        "routes": [],
        "complexity": 13
    },
    "chat_mate\\utils\\ai_output_logger.py": {
        "language": ".py",
        "functions": [
            "log_ai_output"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "chat_mate\\utils\\cookie_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_cookie_path",
            "load_cookies",
            "save_cookies",
            "wait_for_manual_login"
        ],
        "classes": {
            "CookieManager": {
                "methods": [
                    "__init__",
                    "_get_cookie_path",
                    "load_cookies",
                    "save_cookies",
                    "wait_for_manual_login"
                ],
                "docstring": "Manages loading, saving, and validating cookies for different platforms.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "chat_mate\\utils\\driver_factory.py": {
        "language": ".py",
        "functions": [
            "create_driver"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "chat_mate\\utils\\emoji_cleaner.py": {
        "language": ".py",
        "functions": [
            "remove_emojis",
            "clean_file",
            "clean_directory"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "chat_mate\\utils\\git_utils.py": {
        "language": ".py",
        "functions": [
            "get_changed_directories"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "chat_mate\\utils\\filesystem.py": {
        "language": ".py",
        "functions": [
            "sanitize_filename",
            "get_project_root",
            "ensure_directory_exists"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "chat_mate\\utils\\helpers.py": {
        "language": ".py",
        "functions": [
            "sanitize_filename"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "chat_mate\\utils\\io.py": {
        "language": ".py",
        "functions": [
            "read_file",
            "write_file",
            "read_json",
            "write_json"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "chat_mate\\utils\\json_paths.py": {
        "language": ".py",
        "functions": [
            "get_path"
        ],
        "classes": {
            "JsonPaths": {
                "methods": [
                    "get_path"
                ],
                "docstring": "Centralized configuration for all JSON file paths in the application.\nUses PathManager to ensure consistent path resolution across the application.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "chat_mate\\utils\\logging_utils.py": {
        "language": ".py",
        "functions": [
            "get_utils_logger",
            "write_json_log",
            "log_success",
            "log_error",
            "setup_basic_logging"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "chat_mate\\utils\\prompt_tuner.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_reinforcement_feedback",
            "analyze_feedback",
            "tune_prompt"
        ],
        "classes": {
            "PromptTuner": {
                "methods": [
                    "__init__",
                    "load_reinforcement_feedback",
                    "analyze_feedback",
                    "tune_prompt"
                ],
                "docstring": "Class for tuning prompts based on reinforcement feedback.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "chat_mate\\utils\\nltk_init.py": {
        "language": ".py",
        "functions": [
            "ensure_nltk_data"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "chat_mate\\utils\\proxy_utils.py": {
        "language": ".py",
        "functions": [
            "get_random_proxy"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "chat_mate\\utils\\qasync_event_loop_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start",
            "schedule_task",
            "_shutdown_handler",
            "shutdown"
        ],
        "classes": {
            "QAsyncEventLoopManager": {
                "methods": [
                    "__init__",
                    "start",
                    "schedule_task",
                    "_shutdown_handler",
                    "shutdown"
                ],
                "docstring": "Manages the qasync event loop, providing async task handling for PyQt applications.\nHandles lifecycle: initialization, task scheduling, and graceful shutdown.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "chat_mate\\utils\\rate_limit_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_initialize_default_limits",
            "get_rate_limits",
            "adjust_rate_limit",
            "adjust_from_failures"
        ],
        "classes": {
            "RateLimitManager": {
                "methods": [
                    "__init__",
                    "_initialize_default_limits",
                    "get_rate_limits",
                    "adjust_rate_limit",
                    "adjust_from_failures"
                ],
                "docstring": "Manages rate limits for social media platforms.\nProvides functionality to adjust rate limits based on feedback.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "chat_mate\\utils\\reinforcement_trainer.py": {
        "language": ".py",
        "functions": [
            "process_feedback"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "chat_mate\\utils\\run_summary.py": {
        "language": ".py",
        "functions": [
            "generate_full_run_json",
            "sanitize_filename"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "chat_mate\\utils\\safe_json.py": {
        "language": ".py",
        "functions": [
            "repair_memory_files",
            "load_json_safe"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "chat_mate\\utils\\SentimentAnalyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_lexicon",
            "analyze",
            "analyze_batch",
            "analyze_with_context",
            "analyze_trend",
            "get_keyword_sentiment",
            "analyze_feedback_trends",
            "_generate_trend_visualization",
            "extract_topics",
            "add_custom_keywords",
            "load_custom_lexicon"
        ],
        "classes": {
            "SentimentAnalyzer": {
                "methods": [
                    "__init__",
                    "load_lexicon",
                    "analyze",
                    "analyze_batch",
                    "analyze_with_context",
                    "analyze_trend",
                    "get_keyword_sentiment",
                    "analyze_feedback_trends",
                    "_generate_trend_visualization",
                    "extract_topics",
                    "add_custom_keywords",
                    "load_custom_lexicon"
                ],
                "docstring": "Analyzes sentiment in text content, optimized for social media posts and comments.\nSupports both individual and batch processing.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "chat_mate\\utils\\signal_dispatcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "emit_log_output",
            "emit_prompt_executed",
            "emit_dreamscape_generated",
            "emit_discord_event",
            "emit_task_started",
            "emit_task_progress",
            "emit_task_completed",
            "emit_task_failed",
            "emit_status_update",
            "emit_append_output",
            "emit_discord_log",
            "emit_automation_result",
            "register_listener",
            "unregister_listener"
        ],
        "classes": {
            "SignalDispatcher": {
                "methods": [
                    "__init__",
                    "emit_log_output",
                    "emit_prompt_executed",
                    "emit_dreamscape_generated",
                    "emit_discord_event",
                    "emit_task_started",
                    "emit_task_progress",
                    "emit_task_completed",
                    "emit_task_failed",
                    "emit_status_update",
                    "emit_append_output",
                    "emit_discord_log",
                    "emit_automation_result",
                    "register_listener",
                    "unregister_listener"
                ],
                "docstring": "Centralized dispatcher for decoupled, scalable tab communication.",
                "base_classes": [
                    "QObject"
                ]
            }
        },
        "routes": [],
        "complexity": 30
    },
    "chat_mate\\utils\\ua_utils.py": {
        "language": ".py",
        "functions": [
            "get_random_user_agent"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "chat_mate\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\utils\\ai\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\utils\\web\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\web\\app.py": {
        "language": ".py",
        "functions": [
            "create_app",
            "start_flask_app",
            "index",
            "status"
        ],
        "classes": {},
        "routes": [
            {
                "function": "index",
                "method": "ROUTE",
                "path": "/"
            },
            {
                "function": "status",
                "method": "ROUTE",
                "path": "/api/status"
            }
        ],
        "complexity": 4
    },
    "chat_mate\\web\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "config\\config_singleton.py": {
        "language": ".py",
        "functions": [
            "__new__",
            "_initialize",
            "_setup_logging",
            "get_instance",
            "get",
            "set",
            "load_config",
            "save_config",
            "reset"
        ],
        "classes": {
            "ConfigurationSingleton": {
                "methods": [
                    "__new__",
                    "_initialize",
                    "_setup_logging",
                    "get_instance",
                    "get",
                    "set",
                    "load_config",
                    "save_config",
                    "reset"
                ],
                "docstring": "Singleton class for managing global configuration state.\nEnsures only one configuration instance exists throughout the application.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "config\\ConfigManager.py": {
        "language": ".py",
        "functions": [
            "__new__",
            "__init__",
            "_load_config",
            "_save_config",
            "get",
            "set",
            "delete",
            "get_all",
            "clear",
            "load_yaml_config",
            "_merge_config",
            "config_path",
            "merge_dicts"
        ],
        "classes": {
            "ConfigManager": {
                "methods": [
                    "__new__",
                    "__init__",
                    "_load_config",
                    "_save_config",
                    "get",
                    "set",
                    "delete",
                    "get_all",
                    "clear",
                    "load_yaml_config",
                    "_merge_config",
                    "config_path"
                ],
                "docstring": "Manages application configuration settings.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 25
    },
    "config\\driver_factory.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_driver",
            "_get_chrome_options",
            "_get_driver_service",
            "get_cached_driver",
            "cache_driver",
            "clear_cache",
            "__del__"
        ],
        "classes": {
            "DriverFactory": {
                "methods": [
                    "__init__",
                    "create_driver",
                    "_get_chrome_options",
                    "_get_driver_service",
                    "get_cached_driver",
                    "cache_driver",
                    "clear_cache",
                    "__del__"
                ],
                "docstring": "Factory class for creating and managing WebDriver instances.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "config\\default_config.py": {
        "language": ".py",
        "functions": [
            "get_default_config"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "config\\logger_utils.py": {
        "language": ".py",
        "functions": [
            "setup_logger",
            "get_logger",
            "clear_handlers"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "content\\AletheiaContentDispatcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "execute_full_dispatch"
        ],
        "classes": {
            "AletheiaContentDispatcher": {
                "methods": [
                    "__init__",
                    "execute_full_dispatch"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "content\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "config\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\AgentDispatcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_config",
            "add_task",
            "_start_workers",
            "_worker_loop",
            "_get_next_task",
            "_can_execute_task",
            "_execute_task",
            "_dispatch_to_agent",
            "_execute_social_task",
            "_execute_chat_task",
            "_execute_reinforcement_task",
            "_execute_refactor_task",
            "_execute_test_task",
            "_execute_doc_task",
            "_retry_task",
            "_allocate_resources",
            "_release_resources",
            "_update_performance_metrics",
            "get_task_status",
            "cancel_task",
            "get_performance_metrics",
            "shutdown",
            "__enter__",
            "__exit__"
        ],
        "classes": {
            "TaskPriority": {
                "methods": [],
                "docstring": "Task priority levels for intelligent dispatching.",
                "base_classes": [
                    "Enum"
                ]
            },
            "TaskStatus": {
                "methods": [],
                "docstring": "Possible states for a task in the system.",
                "base_classes": [
                    "Enum"
                ]
            },
            "Task": {
                "methods": [],
                "docstring": "Represents a task in the system with metadata.",
                "base_classes": []
            },
            "AgentDispatcher": {
                "methods": [
                    "__init__",
                    "_load_config",
                    "add_task",
                    "_start_workers",
                    "_worker_loop",
                    "_get_next_task",
                    "_can_execute_task",
                    "_execute_task",
                    "_dispatch_to_agent",
                    "_execute_social_task",
                    "_execute_chat_task",
                    "_execute_reinforcement_task",
                    "_execute_refactor_task",
                    "_execute_test_task",
                    "_execute_doc_task",
                    "_retry_task",
                    "_allocate_resources",
                    "_release_resources",
                    "_update_performance_metrics",
                    "get_task_status",
                    "cancel_task",
                    "get_performance_metrics",
                    "shutdown",
                    "__enter__",
                    "__exit__"
                ],
                "docstring": "Enhanced Agent Dispatcher that orchestrates tasks across different engines\nwith intelligent prioritization and task management.\n\nFeatures:\n- Priority-based task scheduling\n- Dependency resolution\n- Automatic retries with backoff\n- Resource management\n- Task batching and optimization\n- Real-time monitoring\n- Performance analytics",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 50
    },
    "core\\AletheiaFeedbackLoopManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate_feedback_loops",
            "_calculate_success_rate",
            "_get_top_tags",
            "_auto_adjust_rate_limits",
            "export_feedback_report",
            "process_feedback"
        ],
        "classes": {
            "AletheiaFeedbackLoopManager": {
                "methods": [
                    "__init__",
                    "generate_feedback_loops",
                    "_calculate_success_rate",
                    "_get_top_tags",
                    "_auto_adjust_rate_limits",
                    "export_feedback_report",
                    "process_feedback"
                ],
                "docstring": "FULL SYNC Feedback Loop Manager:\n- Reviews log summaries.\n- Detects failure clusters and reinforces actions.\n- Adjusts system configurations (rate limits, retries, etc).",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "core\\AIOutputLogAnalyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_log",
            "load_context_db",
            "save_context_db",
            "iterate_logs",
            "_validate_log",
            "extract_context_from_logs",
            "get_recent_context",
            "get_user_context",
            "get_platform_context",
            "identify_community_champions",
            "trigger_community_invites",
            "summarize",
            "export_summary_report",
            "send_discord_report_sync",
            "_parse_date"
        ],
        "classes": {
            "AIOutputLogAnalyzer": {
                "methods": [
                    "__init__",
                    "_log",
                    "load_context_db",
                    "save_context_db",
                    "iterate_logs",
                    "_validate_log",
                    "extract_context_from_logs",
                    "get_recent_context",
                    "get_user_context",
                    "get_platform_context",
                    "identify_community_champions",
                    "trigger_community_invites",
                    "summarize",
                    "export_summary_report",
                    "send_discord_report_sync",
                    "_parse_date"
                ],
                "docstring": "Analyzes AI output logs stored in JSONL format.\nNow integrated with UnifiedLoggingAgent for consistent log access.\n\nFeatures:\n  - Community champion identification\n  - Community digest reporting\n  - Persistent context memory for adaptive AI responses\n  - Discord integration for reports and updates",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 32
    },
    "core\\AletheiaPromptManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_all_memory_states",
            "save_all_memory_states",
            "start_conversation_cycle",
            "end_conversation_cycle",
            "record_conversation",
            "get_prompt",
            "load_conversation_memory",
            "save_conversation_memory",
            "load_cycle_memory",
            "save_cycle_memory",
            "_load_json_file",
            "_merge_cycle_memory_updates",
            "list_available_prompts",
            "load_memory_state",
            "save_memory_state",
            "parse_memory_updates",
            "_extract_memory_update_block",
            "_merge_memory_updates",
            "archive_episode",
            "_log_memory_diff",
            "review_memory_log",
            "_async_save",
            "save_task"
        ],
        "classes": {
            "AletheiaPromptManager": {
                "methods": [
                    "__init__",
                    "load_all_memory_states",
                    "save_all_memory_states",
                    "start_conversation_cycle",
                    "end_conversation_cycle",
                    "record_conversation",
                    "get_prompt",
                    "load_conversation_memory",
                    "save_conversation_memory",
                    "load_cycle_memory",
                    "save_cycle_memory",
                    "_load_json_file",
                    "_merge_cycle_memory_updates",
                    "list_available_prompts",
                    "load_memory_state",
                    "save_memory_state",
                    "parse_memory_updates",
                    "_extract_memory_update_block",
                    "_merge_memory_updates",
                    "archive_episode",
                    "_log_memory_diff",
                    "review_memory_log",
                    "_async_save"
                ],
                "docstring": "Aletheia - Autonomous Architect of Strategic Convergence.\n\nThis class handles:\n  - Template-based prompt generation using Jinja2\n  - Adaptive structured memory updates\n  - FULL SYNC integration with Victor.OS\n  - Auto-dispatch of Discord notifications on episode archiving\nManaged by Aletheia (Thea).",
                "base_classes": [
                    "IPromptManager"
                ]
            }
        },
        "routes": [],
        "complexity": 47
    },
    "core\\bootstrap.py": {
        "language": ".py",
        "functions": [
            "get_bootstrap_paths",
            "initialize_essential_directories",
            "register",
            "get_paths"
        ],
        "classes": {
            "_PathRegistry": {
                "methods": [
                    "register",
                    "get_paths"
                ],
                "docstring": "Internal path registry to avoid circular imports.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "core\\ChatManager.py": {
        "language": ".py",
        "functions": [
            "sanitize_filename",
            "__init__",
            "_load_chat_memory",
            "start",
            "send_prompt",
            "get_all_chat_titles",
            "execute_prompts_single_chat",
            "analyze_execution_response",
            "shutdown_driver",
            "send_chat_prompt",
            "switch_execution_mode",
            "generate_dreamscape_episode",
            "execute_prompt_cycle",
            "queue_prompts",
            "get_last_response",
            "inject_context",
            "get_chat_history"
        ],
        "classes": {
            "ChatManager": {
                "methods": [
                    "__init__",
                    "_load_chat_memory",
                    "start",
                    "send_prompt",
                    "get_all_chat_titles",
                    "execute_prompts_single_chat",
                    "analyze_execution_response",
                    "shutdown_driver",
                    "send_chat_prompt",
                    "switch_execution_mode",
                    "generate_dreamscape_episode",
                    "execute_prompt_cycle",
                    "queue_prompts",
                    "get_last_response",
                    "inject_context",
                    "get_chat_history"
                ],
                "docstring": null,
                "base_classes": [
                    "IChatManager"
                ]
            }
        },
        "routes": [],
        "complexity": 33
    },
    "core\\config.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\config_base.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_env",
            "get_env",
            "_validate_required_keys"
        ],
        "classes": {
            "ConfigBase": {
                "methods": [
                    "__init__",
                    "_load_env",
                    "get_env",
                    "_validate_required_keys"
                ],
                "docstring": "Base configuration class with shared functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "core\\ConsoleLogger.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "log",
            "log_error",
            "log_debug",
            "log_event",
            "log_system_event"
        ],
        "classes": {
            "ConsoleLogger": {
                "methods": [
                    "__init__",
                    "log",
                    "log_error",
                    "log_debug",
                    "log_event",
                    "log_system_event"
                ],
                "docstring": "Logger implementation for console output.",
                "base_classes": [
                    "ILoggingAgent"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "core\\CursorSessionManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_start_session_loop",
            "_session_loop",
            "_process_task_queue",
            "_execute_task",
            "_check_for_stalls",
            "_handle_failed_recovery",
            "start_new_chat",
            "execute_recovery_action",
            "queue_prompt",
            "get_active_sessions",
            "get_session_history",
            "get_task_queue",
            "clear_task_queue",
            "get_session_info"
        ],
        "classes": {
            "CursorSessionManager": {
                "methods": [
                    "__init__",
                    "_start_session_loop",
                    "_session_loop",
                    "_process_task_queue",
                    "_execute_task",
                    "_check_for_stalls",
                    "_handle_failed_recovery",
                    "start_new_chat",
                    "execute_recovery_action",
                    "queue_prompt",
                    "get_active_sessions",
                    "get_session_history",
                    "get_task_queue",
                    "clear_task_queue",
                    "get_session_info"
                ],
                "docstring": "Manages cursor sessions and provides recovery capabilities.\n\nResponsible for:\n- Chat session lifecycle management\n- Recovery action execution\n- Stall detection and handling\n- Task isolation and queuing",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 30
    },
    "core\\CycleExecutionService.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "run_cycle"
        ],
        "classes": {
            "CycleExecutionService": {
                "methods": [
                    "__init__",
                    "run_cycle"
                ],
                "docstring": "Handles prompt cycle execution and orchestration in a scalable way using dependency injection.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "core\\cursor_executor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "record_start",
            "record_end",
            "record_task_execution",
            "as_dict",
            "__str__",
            "__init__",
            "execute",
            "can_retry",
            "reset",
            "as_dict",
            "run_task",
            "__init__",
            "create_task",
            "execute_task",
            "execute_tasks",
            "get_task_result",
            "wait_for_task",
            "cancel_task",
            "cancel_all_tasks",
            "_execute_task_in_process",
            "_execute_task_in_thread",
            "_wait_for_task_result",
            "get_task_status",
            "get_stats",
            "reset_stats",
            "cleanup",
            "__enter__",
            "__exit__"
        ],
        "classes": {
            "TaskExecutionError": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Exception raised when task execution fails",
                "base_classes": [
                    "Exception"
                ]
            },
            "TaskTimeoutError": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Exception raised when task execution times out",
                "base_classes": [
                    "TaskExecutionError"
                ]
            },
            "TaskCancelledError": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Exception raised when task execution is cancelled",
                "base_classes": [
                    "TaskExecutionError"
                ]
            },
            "ExecutionStats": {
                "methods": [
                    "__init__",
                    "record_start",
                    "record_end",
                    "record_task_execution",
                    "as_dict",
                    "__str__"
                ],
                "docstring": "Statistics for task execution",
                "base_classes": []
            },
            "Task": {
                "methods": [
                    "__init__",
                    "execute",
                    "can_retry",
                    "reset",
                    "as_dict"
                ],
                "docstring": "Representation of a task to be executed",
                "base_classes": []
            },
            "_TaskWrapper": {
                "methods": [
                    "run_task"
                ],
                "docstring": "Wrapper for executing a task in a subprocess with timeout",
                "base_classes": []
            },
            "CursorExecutor": {
                "methods": [
                    "__init__",
                    "create_task",
                    "execute_task",
                    "execute_tasks",
                    "get_task_result",
                    "wait_for_task",
                    "cancel_task",
                    "cancel_all_tasks",
                    "_execute_task_in_process",
                    "_execute_task_in_thread",
                    "_wait_for_task_result",
                    "get_task_status",
                    "get_stats",
                    "reset_stats",
                    "cleanup",
                    "__enter__",
                    "__exit__"
                ],
                "docstring": "Executor for running tasks in parallel with isolation.\n\nFeatures:\n- Execute tasks in isolated processes\n- Support for parallel execution\n- Task lifecycle management\n- Result collection and error handling\n- Support for timeout and cancellation",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 64
    },
    "core\\DriverManager.py": {
        "language": ".py",
        "functions": [
            "setup_logger",
            "main",
            "__new__",
            "__init__",
            "__enter__",
            "__exit__",
            "_get_cached_driver_path",
            "_download_driver_if_needed",
            "_is_session_expired",
            "refresh_session",
            "get_session_info",
            "set_session_timeout",
            "_create_chrome_options",
            "get_driver",
            "quit_driver",
            "save_cookies",
            "load_cookies",
            "clear_cookies",
            "is_logged_in",
            "execute_with_retry",
            "scroll_into_view",
            "manual_scroll",
            "update_options",
            "shutdown_driver",
            "force_kill_browsers",
            "__del__"
        ],
        "classes": {
            "DriverManager": {
                "methods": [
                    "__new__",
                    "__init__",
                    "__enter__",
                    "__exit__",
                    "_get_cached_driver_path",
                    "_download_driver_if_needed",
                    "_is_session_expired",
                    "refresh_session",
                    "get_session_info",
                    "set_session_timeout",
                    "_create_chrome_options",
                    "get_driver",
                    "quit_driver",
                    "save_cookies",
                    "load_cookies",
                    "clear_cookies",
                    "is_logged_in",
                    "execute_with_retry",
                    "scroll_into_view",
                    "manual_scroll",
                    "update_options",
                    "shutdown_driver",
                    "force_kill_browsers",
                    "__del__"
                ],
                "docstring": "Unified DriverManager for Selenium-based browser automation.\n\nFeatures:\n  - Singleton pattern to ensure a single active driver instance\n  - Session management with automatic expiration (default 1 hour) and renewal\n  - Persistent profile support (or temporary profiles in headless mode)\n  - Cookie saving/loading for session persistence\n  - Support for headless mode, mobile emulation, and optional undetected mode\n  - Auto-downloading and caching of the ChromeDriver executable\n  - Robust retry mechanisms for resilient browser operations\n  - Utilities for waiting, scrolling, and option updates",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 50
    },
    "core\\EngagementAgent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "handle_mentions",
            "proactive_engagement",
            "_process_mention",
            "_process_proactive",
            "_log_interaction"
        ],
        "classes": {
            "EngagementAgent": {
                "methods": [
                    "__init__",
                    "handle_mentions",
                    "proactive_engagement",
                    "_process_mention",
                    "_process_proactive",
                    "_log_interaction"
                ],
                "docstring": "Manages intelligent, automated interactions leveraging AIChatAgent \nfor personalized, context-aware community engagement.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "core\\DriverSessionManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize_driver",
            "get_driver",
            "_is_session_expired",
            "shutdown_driver",
            "refresh_session",
            "execute_with_retry",
            "get_session_info",
            "set_session_timeout",
            "clear_cookies"
        ],
        "classes": {
            "DriverSessionManager": {
                "methods": [
                    "__init__",
                    "initialize_driver",
                    "get_driver",
                    "_is_session_expired",
                    "shutdown_driver",
                    "refresh_session",
                    "execute_with_retry",
                    "get_session_info",
                    "set_session_timeout",
                    "clear_cookies"
                ],
                "docstring": "Backward compatibility wrapper for the legacy DriverSessionManager.\nThis class maintains the same interface as the original DriverSessionManager \nbut delegates all functionality to the new unified DriverManager.\n\nDO NOT use this class for new code. Use DriverManager directly instead.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "core\\EventMessageBuilder.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "on_modified",
            "on_created",
            "on_deleted",
            "__init__",
            "_start_template_watcher",
            "build_message",
            "list_available_templates",
            "clear_cache"
        ],
        "classes": {
            "TemplateChangeHandler": {
                "methods": [
                    "__init__",
                    "on_modified",
                    "on_created",
                    "on_deleted"
                ],
                "docstring": "Watches the template directory for changes. When a template file is modified,\ncreated, or deleted, it will trigger a cache clear in the EventMessageBuilder.",
                "base_classes": [
                    "FileSystemEventHandler"
                ]
            },
            "EventMessageBuilder": {
                "methods": [
                    "__init__",
                    "_start_template_watcher",
                    "build_message",
                    "list_available_templates",
                    "clear_cache"
                ],
                "docstring": "Builds Discord messages using Jinja2 templates for various event types.\nPlace your templates (e.g., quest_complete.j2, protocol_unlock.j2, tier_up.j2)\nin your designated template directory.\n\nIf no template directory is provided, the default location is:\n  ../templates/message_templates relative to this file.\n  \nThis builder will automatically watch for changes in the template directory\nand clear its cache accordingly.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "core\\feedback.py": {
        "language": ".py",
        "functions": [
            "__new__",
            "get_instance",
            "add_feedback",
            "get_feedback",
            "get_context_stats",
            "analyze_feedback"
        ],
        "classes": {
            "FeedbackSingleton": {
                "methods": [
                    "__new__",
                    "get_instance",
                    "add_feedback",
                    "get_feedback",
                    "get_context_stats",
                    "analyze_feedback"
                ],
                "docstring": "Singleton class that provides global access to the UnifiedFeedbackMemory.\nEnsures only one instance of the feedback memory exists.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "core\\FileLogger.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_log_file",
            "_rotate_logs",
            "_write_log",
            "log",
            "log_error",
            "log_debug",
            "log_event",
            "log_system_event"
        ],
        "classes": {
            "FileLogger": {
                "methods": [
                    "__init__",
                    "_get_log_file",
                    "_rotate_logs",
                    "_write_log",
                    "log",
                    "log_error",
                    "log_debug",
                    "log_event",
                    "log_system_event"
                ],
                "docstring": "Logger implementation for file output with rotation.",
                "base_classes": [
                    "ILoggingAgent"
                ]
            }
        },
        "routes": [],
        "complexity": 18
    },
    "core\\FileManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "save_response",
            "save_memory_state",
            "save_log",
            "archive_file",
            "_save_file",
            "load_file",
            "sanitize_filename",
            "list_episode_files",
            "read_file"
        ],
        "classes": {
            "FileManager": {
                "methods": [
                    "__init__",
                    "save_response",
                    "save_memory_state",
                    "save_log",
                    "archive_file",
                    "_save_file",
                    "load_file",
                    "sanitize_filename",
                    "list_episode_files",
                    "read_file"
                ],
                "docstring": "Unified file management system for ChatMate.\nHandles all file operations using PathManager for consistent directory structure.\nSupports JSON, YAML, and plain text formats with thread-safe operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "core\\IChatManager.py": {
        "language": ".py",
        "functions": [
            "start",
            "send_prompt",
            "get_all_chat_titles",
            "execute_prompts_single_chat",
            "analyze_execution_response",
            "shutdown_driver",
            "send_chat_prompt",
            "execute_prompt_cycle",
            "queue_prompts",
            "get_last_response",
            "inject_context"
        ],
        "classes": {
            "IChatManager": {
                "methods": [
                    "start",
                    "send_prompt",
                    "get_all_chat_titles",
                    "execute_prompts_single_chat",
                    "analyze_execution_response",
                    "shutdown_driver",
                    "send_chat_prompt",
                    "execute_prompt_cycle",
                    "queue_prompts",
                    "get_last_response",
                    "inject_context"
                ],
                "docstring": "Interface for Chat Manager implementations with orchestration capabilities.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 22
    },
    "core\\LoggerFactory.py": {
        "language": ".py",
        "functions": [
            "get_logger"
        ],
        "classes": {
            "LoggerFactory": {
                "methods": [
                    "get_logger"
                ],
                "docstring": "Legacy bridge to the new logging system.\nProvides backward compatibility while redirecting to the new implementation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "core\\NarrativeAnalytics.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze",
            "_summarize",
            "_analyze_sentiment",
            "_extract_keywords"
        ],
        "classes": {
            "NarrativeAnalytics": {
                "methods": [
                    "__init__",
                    "analyze",
                    "_summarize",
                    "_analyze_sentiment",
                    "_extract_keywords"
                ],
                "docstring": "A simple narrative analytics engine placeholder.\nProvides basic summarization, sentiment analysis, and keyword extraction.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "core\\memory_utils.py": {
        "language": ".py",
        "functions": [
            "load_memory_file",
            "fix_memory_file"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "core\\PathManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_find_config",
            "_load_config",
            "get_path",
            "get_all_paths",
            "get_env_path",
            "get_relative_path",
            "get_rate_limit_state_path"
        ],
        "classes": {
            "PathManager": {
                "methods": [
                    "__init__",
                    "_find_config",
                    "_load_config",
                    "get_path",
                    "get_all_paths",
                    "get_env_path",
                    "get_relative_path",
                    "get_rate_limit_state_path"
                ],
                "docstring": "Manages paths for the Dream.OS application.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "core\\OpenAIPromptEngine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_is_driver_alive",
            "render_prompt",
            "_retry",
            "send_prompt",
            "_wait_for_response_completion",
            "_scrape_response",
            "log_interaction",
            "execute"
        ],
        "classes": {
            "OpenAIPromptEngine": {
                "methods": [
                    "__init__",
                    "_is_driver_alive",
                    "render_prompt",
                    "_retry",
                    "send_prompt",
                    "_wait_for_response_completion",
                    "_scrape_response",
                    "log_interaction",
                    "execute"
                ],
                "docstring": "OpenAIPromptEngine:\n  - Renders prompts using Jinja2 templates.\n  - Uses Selenium to interact with a custom GPT endpoint.\n  - Logs interactions for reinforcement learning.\n  - Optionally triggers voice automation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "core\\project_context_analyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_initialize_context_file",
            "update_project_context",
            "_scan_file_structure",
            "_identify_components",
            "_identify_services",
            "_identify_modules",
            "_analyze_dependencies",
            "get_project_context",
            "generate_prompt_blocks",
            "_identify_missing_services",
            "get_ai_recommendations",
            "_identify_project_patterns"
        ],
        "classes": {
            "ProjectContextAnalyzer": {
                "methods": [
                    "__init__",
                    "_initialize_context_file",
                    "update_project_context",
                    "_scan_file_structure",
                    "_identify_components",
                    "_identify_services",
                    "_identify_modules",
                    "_analyze_dependencies",
                    "get_project_context",
                    "generate_prompt_blocks",
                    "_identify_missing_services",
                    "get_ai_recommendations",
                    "_identify_project_patterns"
                ],
                "docstring": "Analyzes project structure and context to generate recommendations\nfor prompt blocks in the draggable prompt board.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "core\\project_context_analyzer_factory.py": {
        "language": ".py",
        "functions": [
            "create"
        ],
        "classes": {
            "ProjectContextAnalyzerFactory": {
                "methods": [
                    "create"
                ],
                "docstring": "Factory for creating ProjectContextAnalyzer instances with validated dependencies.\nFollows the factory pattern to ensure proper initialization.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "core\\project_context_scanner.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_context",
            "_save_context",
            "_trigger_callback",
            "scan",
            "_scan_with_project_scanner",
            "_extract_language_stats",
            "_scan_lightweight",
            "_update_project_structure",
            "_should_exclude_file",
            "get_context",
            "get_context_for_template",
            "_find_service_classes",
            "_find_ui_components",
            "_find_testable_components",
            "_find_factory_classes",
            "has_context_changed",
            "add_to_structure"
        ],
        "classes": {
            "ProjectContextScanner": {
                "methods": [
                    "__init__",
                    "_load_context",
                    "_save_context",
                    "_trigger_callback",
                    "scan",
                    "_scan_with_project_scanner",
                    "_extract_language_stats",
                    "_scan_lightweight",
                    "_update_project_structure",
                    "_should_exclude_file",
                    "get_context",
                    "get_context_for_template",
                    "_find_service_classes",
                    "_find_ui_components",
                    "_find_testable_components",
                    "_find_factory_classes",
                    "has_context_changed"
                ],
                "docstring": "Scans a project directory to extract context information for use in prompt generation.\n\nThis scanner focuses on extracting project metadata, structure, and key components\nto provide context for task generation and execution.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 35
    },
    "core\\PromptCycleOrchestrator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "set_chat_manager",
            "execute_single_cycle",
            "execute_multi_cycle",
            "get_available_prompts",
            "get_prompt",
            "save_prompt",
            "reset_prompts",
            "shutdown"
        ],
        "classes": {
            "PromptCycleOrchestrator": {
                "methods": [
                    "__init__",
                    "set_chat_manager",
                    "execute_single_cycle",
                    "execute_multi_cycle",
                    "get_available_prompts",
                    "get_prompt",
                    "save_prompt",
                    "reset_prompts",
                    "shutdown"
                ],
                "docstring": "Orchestrates prompt cycles and manages interactions with chat services.",
                "base_classes": [
                    "IPromptOrchestrator"
                ]
            }
        },
        "routes": [],
        "complexity": 18
    },
    "core\\PromptEngine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "send_prompt",
            "fetch_response",
            "wait_for_stable_response",
            "log_ai_response",
            "clean_response",
            "__init__",
            "_load_config",
            "execute_prompt",
            "_get_optimized_prompt",
            "_optimize_prompt",
            "_enhance_prompt",
            "_execute_with_retry",
            "_analyze_response",
            "_assess_creativity",
            "_assess_technical_accuracy",
            "_record_feedback",
            "_calculate_feedback_score",
            "_update_stats",
            "get_stats"
        ],
        "classes": {
            "PromptEngine": {
                "methods": [
                    "__init__",
                    "_load_config",
                    "execute_prompt",
                    "_get_optimized_prompt",
                    "_optimize_prompt",
                    "_enhance_prompt",
                    "_execute_with_retry",
                    "_analyze_response",
                    "_assess_creativity",
                    "_assess_technical_accuracy",
                    "_record_feedback",
                    "_calculate_feedback_score",
                    "_update_stats",
                    "get_stats"
                ],
                "docstring": "Centralized prompt execution engine that:\n  - Retrieves and optionally optimizes a prompt template.\n  - Executes the prompt via a lower-level PromptEngine with automatic retry and exponential backoff.\n  - Analyzes the response and records feedback.\n  - Maintains performance statistics.",
                "base_classes": []
            },
            "PromptExecutionError": {
                "methods": [],
                "docstring": "Raised when prompt execution fails.",
                "base_classes": [
                    "Exception"
                ]
            }
        },
        "routes": [],
        "complexity": 34
    },
    "core\\PromptResponseHandler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "process_response"
        ],
        "classes": {
            "PromptResponseHandler": {
                "methods": [
                    "__init__",
                    "process_response"
                ],
                "docstring": "Handles response validation, reinforcement, and logging.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "core\\PromptExecutionService.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_templates",
            "render_prompt",
            "execute_prompt",
            "_execute_task_via_automation",
            "_handle_requeue",
            "log_task_to_memory",
            "mark_task_complete",
            "update_task_in_memory",
            "get_queued_tasks",
            "get_executed_tasks",
            "get_all_tasks",
            "delete_task",
            "set_cursor_automation",
            "requeue_failed_tasks"
        ],
        "classes": {
            "PromptExecutionService": {
                "methods": [
                    "__init__",
                    "get_templates",
                    "render_prompt",
                    "execute_prompt",
                    "_execute_task_via_automation",
                    "_handle_requeue",
                    "log_task_to_memory",
                    "mark_task_complete",
                    "update_task_in_memory",
                    "get_queued_tasks",
                    "get_executed_tasks",
                    "get_all_tasks",
                    "delete_task",
                    "set_cursor_automation",
                    "requeue_failed_tasks"
                ],
                "docstring": "Service for executing prompts.\n\nIt loads a Jinja template, renders it with the provided context,\nand packages this into a task that is injected into Cursor's queued tasks.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 30
    },
    "core\\ReinforcementEngine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_memory",
            "save_memory",
            "detect_hallucination",
            "calculate_length_score",
            "detect_clarity_issues",
            "calculate_coherence_score",
            "analyze_response",
            "append_execution_log",
            "auto_tune_prompts",
            "append_tuning_log",
            "__init__",
            "initUI",
            "load_feedback",
            "display_feedback_details",
            "export_feedback",
            "clear_feedback",
            "auto_tune_prompts"
        ],
        "classes": {
            "ReinforcementEngine": {
                "methods": [
                    "__init__",
                    "load_memory",
                    "save_memory",
                    "detect_hallucination",
                    "calculate_length_score",
                    "detect_clarity_issues",
                    "calculate_coherence_score",
                    "analyze_response",
                    "append_execution_log",
                    "auto_tune_prompts",
                    "append_tuning_log"
                ],
                "docstring": null,
                "base_classes": []
            },
            "ReinforcementToolsDialog": {
                "methods": [
                    "__init__",
                    "initUI",
                    "load_feedback",
                    "display_feedback_details",
                    "export_feedback",
                    "clear_feedback",
                    "auto_tune_prompts"
                ],
                "docstring": "A dialog for managing reinforcement feedback, exporting logs,\nclearing feedback data, and auto-tuning prompts.",
                "base_classes": [
                    "QDialog"
                ]
            }
        },
        "routes": [],
        "complexity": 36
    },
    "core\\prompt_cycle_orchestrator.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "_initialize_components",
            "register_event_handler",
            "_trigger_event",
            "_on_scan_complete",
            "scan_project",
            "generate_tasks",
            "execute_tasks",
            "_simulate_task_execution",
            "_generate_simulated_output",
            "validate_and_requeue_tasks",
            "run_complete_cycle"
        ],
        "classes": {
            "PromptCycleOrchestrator": {
                "methods": [
                    "__init__",
                    "_initialize_components",
                    "register_event_handler",
                    "_trigger_event",
                    "_on_scan_complete",
                    "scan_project",
                    "generate_tasks",
                    "execute_tasks",
                    "_simulate_task_execution",
                    "_generate_simulated_output",
                    "validate_and_requeue_tasks",
                    "run_complete_cycle"
                ],
                "docstring": "High-level orchestrator for managing prompt execution cycles.\n\nThis class coordinates the complete prompt execution lifecycle, including\ncontext scanning, task generation, execution, validation, and feedback.\nIt supports both real execution and simulation mode for testing.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 25
    },
    "core\\ReinforcementEvaluator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_memory_data",
            "_create_default_memory",
            "_save_memory_data",
            "evaluate_response",
            "_calculate_score",
            "_generate_feedback",
            "_update_prompt_performance",
            "get_prompt_insights",
            "_calculate_score_trend",
            "get_memory_summary",
            "clear_memory"
        ],
        "classes": {
            "ReinforcementEvaluator": {
                "methods": [
                    "__init__",
                    "_load_memory_data",
                    "_create_default_memory",
                    "_save_memory_data",
                    "evaluate_response",
                    "_calculate_score",
                    "_generate_feedback",
                    "_update_prompt_performance",
                    "get_prompt_insights",
                    "_calculate_score_trend",
                    "get_memory_summary",
                    "clear_memory"
                ],
                "docstring": "Evaluates responses and provides reinforcement feedback.\nManages memory data and generates insights for prompt tuning.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "core\\ReportExporter.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "export_markdown",
            "export_html",
            "send_discord_report",
            "send_discord_report_sync"
        ],
        "classes": {
            "ReportExporter": {
                "methods": [
                    "__init__",
                    "export_markdown",
                    "export_html",
                    "send_discord_report",
                    "send_discord_report_sync"
                ],
                "docstring": "Handles exporting reports in various formats (Markdown, HTML, Discord).\nUses templates for consistent formatting.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "core\\reinforcement_tools.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_feedback",
            "show_feedback_details",
            "export_feedback",
            "clear_feedback",
            "auto_tune_prompts"
        ],
        "classes": {
            "ReinforcementToolsDialog": {
                "methods": [
                    "__init__",
                    "load_feedback",
                    "show_feedback_details",
                    "export_feedback",
                    "clear_feedback",
                    "auto_tune_prompts"
                ],
                "docstring": "Dialog UI for Reinforcement Engine analysis and feedback management.",
                "base_classes": [
                    "QDialog"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "core\\ResilientPromptExecutor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "execute_with_retry",
            "_execute_prompt",
            "_categorize_error",
            "_cache_response",
            "_get_cached_response",
            "_get_cache_key",
            "_log_execution_result",
            "get_execution_stats",
            "clear_history"
        ],
        "classes": {
            "ExecutionStatus": {
                "methods": [],
                "docstring": "Status of prompt execution.",
                "base_classes": [
                    "Enum"
                ]
            },
            "ResilientPromptExecutor": {
                "methods": [
                    "__init__",
                    "execute_with_retry",
                    "_execute_prompt",
                    "_categorize_error",
                    "_cache_response",
                    "_get_cached_response",
                    "_get_cache_key",
                    "_log_execution_result",
                    "get_execution_stats",
                    "clear_history"
                ],
                "docstring": "Enhanced prompt executor with automatic retries and error recovery.\nFeatures:\n- Automatic retries with exponential backoff\n- Error categorization and handling\n- Execution history tracking\n- Performance monitoring\n- Health checks",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "core\\ResponseHandler.py": {
        "language": ".py",
        "functions": [
            "setup_logging",
            "parse_hybrid_response",
            "__init__",
            "_init_driver",
            "save_cookies",
            "load_cookies",
            "is_logged_in",
            "send_prompt",
            "fetch_response",
            "wait_for_stable_response",
            "clean_response",
            "handle_hybrid_response",
            "execute_prompt_cycle",
            "execute_prompts_on_all_chats",
            "shutdown"
        ],
        "classes": {
            "HybridResponseHandler": {
                "methods": [
                    "parse_hybrid_response"
                ],
                "docstring": "Parses a hybrid response that includes both narrative text and a MEMORY_UPDATE JSON block.\nReturns a tuple of (text_part, memory_update_json).",
                "base_classes": []
            },
            "ResponseHandler": {
                "methods": [
                    "__init__",
                    "_init_driver",
                    "save_cookies",
                    "load_cookies",
                    "is_logged_in",
                    "send_prompt",
                    "fetch_response",
                    "wait_for_stable_response",
                    "clean_response",
                    "handle_hybrid_response",
                    "execute_prompt_cycle",
                    "execute_prompts_on_all_chats",
                    "shutdown"
                ],
                "docstring": "Handles sending prompts, fetching, and stabilizing ChatGPT responses.\nNow includes hybrid response processing: it will extract narrative text and MEMORY_UPDATE JSON.\nAlso hooks into the AI output logger for reinforcement training.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 29
    },
    "core\\service_container.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "ServiceContainer": {
                "methods": [],
                "docstring": "Container for service dependencies.",
                "base_classes": [
                    "containers.DeclarativeContainer"
                ]
            }
        },
        "routes": [],
        "complexity": 0
    },
    "core\\SystemHealthMonitor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start_monitoring",
            "stop_monitoring",
            "_monitoring_loop",
            "perform_health_checks",
            "_check_driver",
            "_check_memory",
            "_check_thread_pool",
            "_check_system_resources",
            "_store_metrics",
            "_check_alerts",
            "get_system_health",
            "get_historical_metrics"
        ],
        "classes": {
            "HealthStatus": {
                "methods": [],
                "docstring": "System component health status.",
                "base_classes": [
                    "Enum"
                ]
            },
            "HealthMetrics": {
                "methods": [],
                "docstring": "Health metrics for a system component.",
                "base_classes": []
            },
            "SystemHealthMonitor": {
                "methods": [
                    "__init__",
                    "start_monitoring",
                    "stop_monitoring",
                    "_monitoring_loop",
                    "perform_health_checks",
                    "_check_driver",
                    "_check_memory",
                    "_check_thread_pool",
                    "_check_system_resources",
                    "_store_metrics",
                    "_check_alerts",
                    "get_system_health",
                    "get_historical_metrics"
                ],
                "docstring": "Centralized system health monitoring.\nFeatures:\n- Component health checks\n- Resource utilization monitoring\n- Performance metrics tracking\n- Automatic alerts\n- Historical metrics",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "core\\structured_logger.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "log",
            "task_started",
            "task_completed",
            "task_failed",
            "model_request",
            "model_response",
            "file_modified",
            "test_result",
            "metric",
            "error",
            "warning",
            "info",
            "debug",
            "_write_log",
            "_log_to_console",
            "_rotate_logs_if_needed",
            "get_logs",
            "get_task_logs",
            "get_latest_errors"
        ],
        "classes": {
            "StructuredLogger": {
                "methods": [
                    "__init__",
                    "log",
                    "task_started",
                    "task_completed",
                    "task_failed",
                    "model_request",
                    "model_response",
                    "file_modified",
                    "test_result",
                    "metric",
                    "error",
                    "warning",
                    "info",
                    "debug",
                    "_write_log",
                    "_log_to_console",
                    "_rotate_logs_if_needed",
                    "get_logs",
                    "get_task_logs",
                    "get_latest_errors"
                ],
                "docstring": "Structured logger that outputs JSONL-formatted logs with consistent metadata.\n\nFeatures:\n- JSONL output format (one JSON object per line)\n- Consistent metadata for all log entries (timestamp, level, etc.)\n- Event-based logging for easy filtering and analysis\n- Thread-safe logging to prevent interleaved output\n- Automatic log rotation to prevent huge files",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 40
    },
    "core\\system_loader.py": {
        "language": ".py",
        "functions": [
            "initialize_system",
            "get_system_loader",
            "__init__",
            "boot",
            "_initialize_services",
            "__init__",
            "load_config",
            "register_service",
            "get_service",
            "has_service",
            "unregister_service",
            "initialize_cursor_ui_service",
            "initialize_service",
            "initialize_all_services",
            "get_registered_services",
            "shutdown"
        ],
        "classes": {
            "SystemLoader": {
                "methods": [
                    "__init__",
                    "boot",
                    "_initialize_services"
                ],
                "docstring": "Manages system initialization and service loading.",
                "base_classes": []
            },
            "DreamscapeSystemLoader": {
                "methods": [
                    "__init__",
                    "load_config",
                    "register_service",
                    "get_service",
                    "has_service",
                    "unregister_service",
                    "initialize_cursor_ui_service",
                    "initialize_service",
                    "initialize_all_services",
                    "get_registered_services",
                    "shutdown"
                ],
                "docstring": "System loader that handles registration and initialization of services.\n\nThis class implements a simple service registry pattern that allows different \ncomponents of the system to access shared services through dependency injection.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 30
    },
    "core\\TaskManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load",
            "_save",
            "add_task",
            "list_tasks",
            "complete_task",
            "delete_task",
            "clear_completed",
            "get_pending_count"
        ],
        "classes": {
            "TaskManager": {
                "methods": [
                    "__init__",
                    "_load",
                    "_save",
                    "add_task",
                    "list_tasks",
                    "complete_task",
                    "delete_task",
                    "clear_completed",
                    "get_pending_count"
                ],
                "docstring": "JSON-based Task / To-Do List Manager.\nManages tasks with support for adding, completing, deleting, and listing.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "core\\TaskOrchestrator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "set_cycle_service",
            "execute_task"
        ],
        "classes": {
            "TaskOrchestrator": {
                "methods": [
                    "__init__",
                    "set_cycle_service",
                    "execute_task"
                ],
                "docstring": "Coordinates task execution between agents and cycle services.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "core\\task_feedback.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "register_callback",
            "_trigger_callbacks",
            "validate_task_result",
            "register_task_execution",
            "get_failed_tasks_for_requeue",
            "_get_task_from_memory",
            "_update_task_in_memory",
            "_load_memory"
        ],
        "classes": {
            "TaskFeedbackManager": {
                "methods": [
                    "__init__",
                    "register_callback",
                    "_trigger_callbacks",
                    "validate_task_result",
                    "register_task_execution",
                    "get_failed_tasks_for_requeue",
                    "_get_task_from_memory",
                    "_update_task_in_memory",
                    "_load_memory"
                ],
                "docstring": "Manages feedback for task execution, validation, and re-execution.\n\nThis class tracks task execution status, validates results against predefined\ncriteria, and enables re-execution of tasks that didn't meet the criteria.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "core\\task_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_task",
            "validate_task",
            "update_task_status",
            "serialize_task",
            "deserialize_task"
        ],
        "classes": {
            "TaskManager": {
                "methods": [
                    "__init__",
                    "create_task",
                    "validate_task",
                    "update_task_status",
                    "serialize_task",
                    "deserialize_task"
                ],
                "docstring": "Manages the creation and validation of task objects with a unified schema.\nEnforces task object consistency throughout the system.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "core\\task_queue_manager.py": {
        "language": ".py",
        "functions": [
            "from_string",
            "__init__",
            "put",
            "get",
            "task_completed",
            "cancel_task",
            "update_priority",
            "get_task",
            "get_all_tasks",
            "get_status_counts",
            "save_queue",
            "load_queue",
            "_resolve_dependencies",
            "clear_completed",
            "__len__",
            "is_empty",
            "peek"
        ],
        "classes": {
            "TaskStatus": {
                "methods": [],
                "docstring": "Status of a task in the queue",
                "base_classes": [
                    "Enum"
                ]
            },
            "TaskPriority": {
                "methods": [
                    "from_string"
                ],
                "docstring": "Priority levels for tasks",
                "base_classes": [
                    "Enum"
                ]
            },
            "PriorityTaskQueue": {
                "methods": [
                    "__init__",
                    "put",
                    "get",
                    "task_completed",
                    "cancel_task",
                    "update_priority",
                    "get_task",
                    "get_all_tasks",
                    "get_status_counts",
                    "save_queue",
                    "load_queue",
                    "_resolve_dependencies",
                    "clear_completed",
                    "__len__",
                    "is_empty",
                    "peek"
                ],
                "docstring": "A priority queue for tasks with persistence and dependency management.\n\nFeatures:\n- Tasks are prioritized based on priority field\n- Queue can be saved to disk and loaded to recover state\n- Tasks with dependencies are blocked until dependencies complete\n- Supports task status tracking",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 34
    },
    "core\\task_schema.py": {
        "language": ".py",
        "functions": [
            "validate_task",
            "create_task_id",
            "create_task",
            "create_code_generation_task",
            "create_test_generation_task",
            "create_refactoring_task",
            "get_task_schema",
            "get_type_specific_schema",
            "is_valid_task_id",
            "get_dependencies_closure",
            "export_schema_to_json",
            "get_example_task",
            "__init__",
            "__str__"
        ],
        "classes": {
            "Priority": {
                "methods": [],
                "docstring": "Priority levels for tasks",
                "base_classes": [
                    "str",
                    "Enum"
                ]
            },
            "TaskStatus": {
                "methods": [],
                "docstring": "Status values for tasks",
                "base_classes": [
                    "str",
                    "Enum"
                ]
            },
            "TaskType": {
                "methods": [],
                "docstring": "Types of tasks that can be processed",
                "base_classes": [
                    "str",
                    "Enum"
                ]
            },
            "ValidationError": {
                "methods": [
                    "__init__",
                    "__str__"
                ],
                "docstring": "Exception raised for task validation errors",
                "base_classes": [
                    "Exception"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "core\\TemplateManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_base_template_dir",
            "_init_environment",
            "discover_templates",
            "load_templates",
            "get_available_templates",
            "change_template_dir",
            "load_template",
            "set_active_template",
            "render",
            "render_discord_template",
            "render_message_template",
            "render_general_template",
            "render_template",
            "validate_context",
            "save_rendered_output",
            "_log_template_render",
            "_on_template_modified",
            "get_template_content",
            "write_json_log",
            "load_json_filter",
            "tojson_filter",
            "visit_node"
        ],
        "classes": {
            "TemplateManager": {
                "methods": [
                    "__init__",
                    "get_base_template_dir",
                    "_init_environment",
                    "discover_templates",
                    "load_templates",
                    "get_available_templates",
                    "change_template_dir",
                    "load_template",
                    "set_active_template",
                    "render",
                    "render_discord_template",
                    "render_message_template",
                    "render_general_template",
                    "render_template",
                    "validate_context",
                    "save_rendered_output",
                    "_log_template_render",
                    "_on_template_modified",
                    "get_template_content"
                ],
                "docstring": "Centralized manager for Jinja2 templates across multiple categories.\nProvides hot-reloading, multi-environment support, context validation, and integration into a GUI.\n\nFeatures:\n  - Auto-loads environments for each template category.\n  - Supports dynamic directory switching and recursive template discovery.\n  - Emits signals on template updates, modifications, and render previews.\n  - Logs template activity for analytics.",
                "base_classes": [
                    "QObject"
                ]
            }
        },
        "routes": [],
        "complexity": 42
    },
    "core\\ThreadPoolManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "submit_task",
            "_task_scheduler",
            "_execute_task",
            "cancel_task",
            "get_task_status",
            "get_metrics",
            "shutdown",
            "wrapped_func"
        ],
        "classes": {
            "TaskPriority": {
                "methods": [],
                "docstring": "Task priority levels for the thread pool.",
                "base_classes": [
                    "Enum"
                ]
            },
            "Task": {
                "methods": [],
                "docstring": "Represents a task to be executed by the thread pool.",
                "base_classes": []
            },
            "ThreadPoolManager": {
                "methods": [
                    "__init__",
                    "submit_task",
                    "_task_scheduler",
                    "_execute_task",
                    "cancel_task",
                    "get_task_status",
                    "get_metrics",
                    "shutdown"
                ],
                "docstring": "Enhanced thread pool manager with priority queuing and task management.\nFeatures:\n- Priority-based task scheduling\n- Task timeout management\n- Automatic retries with exponential backoff\n- Resource monitoring\n- Task statistics and metrics",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 17
    },
    "core\\UnifiedDiscordService.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_register_events",
            "load_config",
            "save_config",
            "run",
            "stop",
            "send_message",
            "send_file",
            "send_template",
            "get_status",
            "set_log_callback",
            "_log",
            "run_bot"
        ],
        "classes": {
            "UnifiedDiscordService": {
                "methods": [
                    "__init__",
                    "_register_events",
                    "load_config",
                    "save_config",
                    "run",
                    "stop",
                    "send_message",
                    "send_file",
                    "send_template",
                    "get_status",
                    "set_log_callback",
                    "_log"
                ],
                "docstring": "UnifiedDiscordService - Centralized Discord integration service.\nHandles all Discord-related functionality including:\n- Bot lifecycle management\n- Message dispatching\n- Template rendering\n- Channel management\n- Status monitoring\n- Event notifications",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 25
    },
    "core\\UnifiedLoggingAgent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "log",
            "_setup_log_directories",
            "_setup_file_handler",
            "log_ai_output",
            "log_social",
            "log_system_event",
            "get_logs",
            "_matches_filters",
            "log_error",
            "log_debug",
            "log_event"
        ],
        "classes": {
            "UnifiedLoggingAgent": {
                "methods": [
                    "__init__",
                    "log",
                    "_setup_log_directories",
                    "_setup_file_handler",
                    "log_ai_output",
                    "log_social",
                    "log_system_event",
                    "get_logs",
                    "_matches_filters",
                    "log_error",
                    "log_debug",
                    "log_event"
                ],
                "docstring": "Centralized logging system for ChatMate that handles all logging operations.\nFeatures:\n- Thread-safe logging operations\n- Multiple output formats (text, JSON, JSONL)\n- Structured logging with metadata\n- Integration with FileManager for consistent file operations\n- Real-time logging with rotation support\n- Domain-specific logging (AI outputs, social interactions, system events)",
                "base_classes": [
                    "ILoggingAgent"
                ]
            }
        },
        "routes": [],
        "complexity": 24
    },
    "core\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\Agents\\AgentDispatcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start",
            "stop",
            "event_loop",
            "add_task",
            "_handle_task",
            "_execute_prompts_on_chat",
            "_review_memory"
        ],
        "classes": {
            "AgentDispatcher": {
                "methods": [
                    "__init__",
                    "start",
                    "stop",
                    "event_loop",
                    "add_task",
                    "_handle_task",
                    "_execute_prompts_on_chat",
                    "_review_memory"
                ],
                "docstring": "Orchestrates and manages all system agents. Handles task distribution,\nlifecycle management, and communication between agents.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "core\\UnifiedFeedbackMemory.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "to_dict",
            "from_dict",
            "__init__",
            "add_feedback",
            "get_feedback",
            "get_context_stats",
            "_update_stats",
            "_prune_memory",
            "load",
            "save",
            "analyze_feedback",
            "_filter_by_timeframe"
        ],
        "classes": {
            "FeedbackEntry": {
                "methods": [
                    "__init__",
                    "to_dict",
                    "from_dict"
                ],
                "docstring": "Structured feedback entry for reinforcement learning.",
                "base_classes": []
            },
            "UnifiedFeedbackMemory": {
                "methods": [
                    "__init__",
                    "add_feedback",
                    "get_feedback",
                    "get_context_stats",
                    "_update_stats",
                    "_prune_memory",
                    "load",
                    "save",
                    "analyze_feedback",
                    "_filter_by_timeframe"
                ],
                "docstring": "Centralized reinforcement learning memory system.\nFeatures:\n- Thread-safe operations\n- Memory segmentation by context\n- Real-time feedback processing\n- Automatic memory pruning\n- Score-based filtering\n- Context-aware learning",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "core\\Agents\\base_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "receive_task",
            "handle_task",
            "process_tasks",
            "run",
            "stop"
        ],
        "classes": {
            "BaseAgent": {
                "methods": [
                    "__init__",
                    "receive_task",
                    "handle_task",
                    "process_tasks",
                    "run",
                    "stop"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "core\\Agents\\chat.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "ChatAgent": {
                "methods": [],
                "docstring": "Agent for managing chat interactions with proper lifecycle.",
                "base_classes": [
                    "BaseAgent"
                ]
            }
        },
        "routes": [],
        "complexity": 0
    },
    "core\\Agents\\chat_scraper_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "handle_task",
            "get_all_chats",
            "filter_chats",
            "validate_login",
            "manual_login_flow"
        ],
        "classes": {
            "ChatScraperAgent": {
                "methods": [
                    "__init__",
                    "handle_task",
                    "get_all_chats",
                    "filter_chats",
                    "validate_login",
                    "manual_login_flow"
                ],
                "docstring": "ChatScraperAgent: Autonomous agent responsible for scraping chat metadata.",
                "base_classes": [
                    "BaseAgent"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "core\\Agents\\CursorAgentInterface.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "run_task",
            "_format_prompt",
            "_log_task_start",
            "_log_task_complete"
        ],
        "classes": {
            "CursorAgentInterface": {
                "methods": [
                    "__init__",
                    "run_task",
                    "_format_prompt",
                    "_log_task_start",
                    "_log_task_complete"
                ],
                "docstring": "Base interface for Cursor-based agents.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "core\\Agents\\DocAgent.py": {
        "language": ".py",
        "functions": [
            "run_task",
            "generate_docs"
        ],
        "classes": {
            "DocAgent": {
                "methods": [
                    "run_task",
                    "generate_docs"
                ],
                "docstring": "Agent for handling documentation generation tasks.",
                "base_classes": [
                    "CursorAgentInterface"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "core\\Agents\\engagement.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "EngagementAgent": {
                "methods": [],
                "docstring": "Agent for managing social engagement with proper lifecycle.",
                "base_classes": [
                    "BaseAgent"
                ]
            }
        },
        "routes": [],
        "complexity": 0
    },
    "core\\Agents\\RefactorAgent.py": {
        "language": ".py",
        "functions": [
            "run_task",
            "run_refactor"
        ],
        "classes": {
            "RefactorAgent": {
                "methods": [
                    "run_task",
                    "run_refactor"
                ],
                "docstring": "Agent for handling code refactoring tasks.",
                "base_classes": [
                    "CursorAgentInterface"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "core\\Agents\\main.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\Agents\\refactoring_utils.py": {
        "language": ".py",
        "functions": [
            "read_file",
            "write_file",
            "parse_code",
            "unparse_code",
            "get_function_bounds",
            "get_class_bounds",
            "get_variable_scope",
            "extract_method",
            "rename_variable",
            "inline_function",
            "format_code"
        ],
        "classes": {
            "CodeAnalyzer": {
                "methods": [
                    "get_function_bounds",
                    "get_class_bounds",
                    "get_variable_scope"
                ],
                "docstring": "Utility class for analyzing Python code.",
                "base_classes": []
            },
            "CodeTransformer": {
                "methods": [
                    "extract_method",
                    "rename_variable",
                    "inline_function"
                ],
                "docstring": "Utility class for transforming Python code.",
                "base_classes": []
            },
            "CodeFormatter": {
                "methods": [
                    "format_code"
                ],
                "docstring": "Utility class for formatting Python code.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "core\\Agents\\specialized_agents.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "handle_task",
            "__init__",
            "handle_task",
            "__init__",
            "handle_task"
        ],
        "classes": {
            "RefactorAgent": {
                "methods": [
                    "__init__",
                    "handle_task"
                ],
                "docstring": "Agent responsible for code refactoring tasks.",
                "base_classes": [
                    "BaseAgent"
                ]
            },
            "TestAgent": {
                "methods": [
                    "__init__",
                    "handle_task"
                ],
                "docstring": "Agent responsible for generating and running tests.",
                "base_classes": [
                    "BaseAgent"
                ]
            },
            "DocAgent": {
                "methods": [
                    "__init__",
                    "handle_task"
                ],
                "docstring": "Agent responsible for generating documentation.",
                "base_classes": [
                    "BaseAgent"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "core\\Agents\\ReinforcementEvaluator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "evaluate_task",
            "optimize_agent",
            "_calculate_code_quality",
            "_calculate_test_coverage",
            "_calculate_doc_coverage",
            "_calculate_performance",
            "_calculate_maintainability",
            "_generate_optimization_suggestions",
            "_update_agent_config"
        ],
        "classes": {
            "EvaluationMetrics": {
                "methods": [],
                "docstring": "Metrics for evaluating agent performance.",
                "base_classes": []
            },
            "ReinforcementEvaluator": {
                "methods": [
                    "__init__",
                    "evaluate_task",
                    "optimize_agent",
                    "_calculate_code_quality",
                    "_calculate_test_coverage",
                    "_calculate_doc_coverage",
                    "_calculate_performance",
                    "_calculate_maintainability",
                    "_generate_optimization_suggestions",
                    "_update_agent_config"
                ],
                "docstring": "Evaluates and optimizes agent performance through reinforcement learning.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "core\\Agents\\TestAgent.py": {
        "language": ".py",
        "functions": [
            "run_task",
            "run_tests"
        ],
        "classes": {
            "TestAgent": {
                "methods": [
                    "run_task",
                    "run_tests"
                ],
                "docstring": "Agent for handling test generation tasks.",
                "base_classes": [
                    "CursorAgentInterface"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "core\\Agents\\__init__.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_dependency",
            "get_dependency",
            "update_state",
            "record_operation",
            "__init__",
            "get_metrics",
            "get_state",
            "__init__",
            "get_agent",
            "get_all_agents"
        ],
        "classes": {
            "AgentState": {
                "methods": [],
                "docstring": "Possible states an agent can be in.",
                "base_classes": [
                    "Enum"
                ]
            },
            "AgentMetrics": {
                "methods": [],
                "docstring": "Metrics tracking for agent performance and health.",
                "base_classes": []
            },
            "AgentContext": {
                "methods": [
                    "__init__",
                    "add_dependency",
                    "get_dependency",
                    "update_state",
                    "record_operation"
                ],
                "docstring": "Context object for managing agent state and dependencies.",
                "base_classes": []
            },
            "BaseAgent": {
                "methods": [
                    "__init__",
                    "get_metrics",
                    "get_state"
                ],
                "docstring": "Base class for all agents with lifecycle management.",
                "base_classes": [
                    "ABC"
                ]
            },
            "AgentLifecycleManager": {
                "methods": [
                    "__init__",
                    "get_agent",
                    "get_all_agents"
                ],
                "docstring": "Manager for handling agent lifecycle and dependencies.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "core\\chat\\chat_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "send_message"
        ],
        "classes": {
            "ChatManager": {
                "methods": [
                    "__init__",
                    "send_message"
                ],
                "docstring": "Manager for chat interactions.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "core\\chat\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\chatgpt_automation\\bot_worker.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_login_with_retries",
            "run",
            "process_task",
            "_revalidate_session",
            "shutdown"
        ],
        "classes": {
            "BotWorker": {
                "methods": [
                    "__init__",
                    "_login_with_retries",
                    "run",
                    "process_task",
                    "_revalidate_session",
                    "shutdown"
                ],
                "docstring": "A threaded worker that processes tasks using OpenAIClient.\nHandles login sessions, periodic revalidation, and task execution.\n\nThis implementation supports:\n  - Robust login with retries\n  - Graceful handling of task exceptions\n  - Periodic session revalidation for long-running tasks\n  - Scalability for beta and production environments",
                "base_classes": [
                    "threading.Thread"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "core\\chatgpt_automation\\automation_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize_components",
            "scan_project_gui",
            "get_chatgpt_response",
            "switch_model",
            "shutdown",
            "process_file",
            "self_heal_file",
            "select_model",
            "run_tests",
            "deploy_file",
            "prioritize_files",
            "process_all_files",
            "export_chatgpt_context",
            "add_manual_model",
            "__init__",
            "run",
            "__init__",
            "add_task",
            "wait_for_completion",
            "stop_workers"
        ],
        "classes": {
            "AutomationEngine": {
                "methods": [
                    "__init__",
                    "initialize_components",
                    "scan_project_gui",
                    "get_chatgpt_response",
                    "switch_model",
                    "shutdown",
                    "process_file",
                    "self_heal_file",
                    "select_model",
                    "run_tests",
                    "deploy_file",
                    "prioritize_files",
                    "process_all_files",
                    "export_chatgpt_context",
                    "add_manual_model"
                ],
                "docstring": null,
                "base_classes": []
            },
            "BotWorker": {
                "methods": [
                    "__init__",
                    "run"
                ],
                "docstring": "A background worker that processes file tasks from a queue.",
                "base_classes": [
                    "threading.Thread"
                ]
            },
            "MultibotManager": {
                "methods": [
                    "__init__",
                    "add_task",
                    "wait_for_completion",
                    "stop_workers"
                ],
                "docstring": "Manages a pool of BotWorker threads.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 42
    },
    "core\\chatgpt_automation\\config.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\chatgpt_automation\\local_llm_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "set_model",
            "get_response"
        ],
        "classes": {
            "LocalLLMEngine": {
                "methods": [
                    "__init__",
                    "set_model",
                    "get_response"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "core\\chatgpt_automation\\driver_factory.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_driver"
        ],
        "classes": {
            "DriverFactory": {
                "methods": [
                    "__init__",
                    "create_driver"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "core\\chatgpt_automation\\ModelRegistry.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "find_project_root",
            "load_models",
            "_load_single_model",
            "reload_models",
            "get_registry",
            "__str__"
        ],
        "classes": {
            "ModelRegistry": {
                "methods": [
                    "__init__",
                    "find_project_root",
                    "load_models",
                    "_load_single_model",
                    "reload_models",
                    "get_registry",
                    "__str__"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "core\\chatgpt_automation\\PostProcessValidator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "run_test_coverage",
            "run_pylint",
            "extract_pylint_score",
            "run_mypy",
            "run_black_check",
            "run_full_validation"
        ],
        "classes": {
            "PostProcessValidator": {
                "methods": [
                    "__init__",
                    "run_test_coverage",
                    "run_pylint",
                    "extract_pylint_score",
                    "run_mypy",
                    "run_black_check",
                    "run_full_validation"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "core\\chatgpt_automation\\OpenAIClient.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "is_booted",
            "_load_config",
            "get_openai_driver",
            "save_openai_cookies",
            "load_openai_cookies",
            "is_logged_in",
            "boot",
            "_assert_ready",
            "login_openai",
            "send_prompt_smoothly",
            "get_chatgpt_response",
            "get_full_response",
            "process_prompt",
            "get_full_response_for_debug",
            "shutdown",
            "_force_kill_chromedriver",
            "closeEvent"
        ],
        "classes": {
            "OpenAIClient": {
                "methods": [
                    "__init__",
                    "is_booted",
                    "_load_config",
                    "get_openai_driver",
                    "save_openai_cookies",
                    "load_openai_cookies",
                    "is_logged_in",
                    "boot",
                    "_assert_ready",
                    "login_openai",
                    "send_prompt_smoothly",
                    "get_chatgpt_response",
                    "get_full_response",
                    "process_prompt",
                    "get_full_response_for_debug",
                    "shutdown",
                    "_force_kill_chromedriver",
                    "closeEvent"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 36
    },
    "core\\chatgpt_automation\\setup_chromedriver.py": {
        "language": ".py",
        "functions": [
            "get_chrome_version",
            "download_chromedriver",
            "update_config"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "core\\chatgpt_automation\\setup_logging.py": {
        "language": ".py",
        "functions": [
            "setup_logging"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "core\\chatgpt_automation\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\chatgpt_automation\\controllers\\assistant_mode_controller.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "set_input_source",
            "start",
            "stop",
            "is_active",
            "_run_loop"
        ],
        "classes": {
            "AssistantModeController": {
                "methods": [
                    "__init__",
                    "set_input_source",
                    "start",
                    "stop",
                    "is_active",
                    "_run_loop"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "core\\chatgpt_automation\\controllers\\assistant_orchestrator.py": {
        "language": ".py",
        "functions": [
            "dispatch_action"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "core\\chatgpt_automation\\controllers\\assistant_parser.py": {
        "language": ".py",
        "functions": [
            "_load_command_config",
            "parse_input"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "core\\chatgpt_automation\\controllers\\automation_controller.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "update_file",
            "heal_file",
            "run_tests",
            "shutdown"
        ],
        "classes": {
            "AutomationController": {
                "methods": [
                    "__init__",
                    "update_file",
                    "heal_file",
                    "run_tests",
                    "shutdown"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "core\\chatgpt_automation\\controllers\\cursor_dispatcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate_tests",
            "self_heal",
            "run_feedback_loop"
        ],
        "classes": {
            "CursorDispatcher": {
                "methods": [
                    "__init__",
                    "generate_tests",
                    "self_heal",
                    "run_feedback_loop"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "core\\chatgpt_automation\\controllers\\log_monitor_service.py": {
        "language": ".py",
        "functions": [
            "get_latest_log"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "core\\chatgpt_automation\\controllers\\prompt_loop_orchestrator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_context",
            "inject_context",
            "orchestrate_prompt_loop"
        ],
        "classes": {
            "PromptLoopOrchestrator": {
                "methods": [
                    "__init__",
                    "_load_context",
                    "inject_context",
                    "orchestrate_prompt_loop"
                ],
                "docstring": "Manages context injection into prompts and orchestrates a loop\nthat sends combined prompts to ChatGPT and handles the responses.\n\nThis layer is part of Full Sync Mode.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "core\\chatgpt_automation\\controllers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\chatgpt_automation\\models\\model_gpt4.py": {
        "language": ".py",
        "functions": [
            "process_with_gpt4",
            "register"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "core\\chatgpt_automation\\controllers\\speech_input_service.py": {
        "language": ".py",
        "functions": [
            "listen_and_transcribe"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "core\\chatgpt_automation\\models\\model_gpt4o.py": {
        "language": ".py",
        "functions": [
            "process_with_gpt4o",
            "register"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "core\\chatgpt_automation\\models\\model_gpt4o_mini.py": {
        "language": ".py",
        "functions": [
            "process_with_gpt4o_mini",
            "register"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "core\\chatgpt_automation\\models\\model_gpt4_5.py": {
        "language": ".py",
        "functions": [
            "process_with_gpt4_5",
            "register"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "core\\chatgpt_automation\\models\\model_mistral.py": {
        "language": ".py",
        "functions": [
            "register"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "core\\chatgpt_automation\\models\\model_o3_mini_high.py": {
        "language": ".py",
        "functions": [
            "process_with_o3_mini_high",
            "register"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "core\\chatgpt_automation\\models\\model_o1.py": {
        "language": ".py",
        "functions": [
            "process_with_o1",
            "register"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "core\\chatgpt_automation\\models\\model_o3_mini.py": {
        "language": ".py",
        "functions": [
            "process_with_o3mini",
            "register"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "core\\chatgpt_automation\\models\\model_template.py": {
        "language": ".py",
        "functions": [
            "process_with_template",
            "register"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "core\\chatgpt_automation\\models\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\chatgpt_automation\\performance\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\chatgpt_automation\\performance\\ModelPerformanceTracker.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "record_execution",
            "get_average_attempts",
            "rank_models",
            "choose_model",
            "print_metrics"
        ],
        "classes": {
            "ModelPerformanceTracker": {
                "methods": [
                    "__init__",
                    "record_execution",
                    "get_average_attempts",
                    "rank_models",
                    "choose_model",
                    "print_metrics"
                ],
                "docstring": "Tracks model performance based on the number of attempts needed to generate working tests.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "core\\chatgpt_automation\\views\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\chatgpt_automation\\watchers\\ModelFolderWatcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_debounced_reload",
            "_should_handle",
            "on_modified",
            "on_created",
            "on_deleted",
            "start",
            "_watch_loop",
            "stop",
            "reload_wrapper"
        ],
        "classes": {
            "ModelFolderWatcher": {
                "methods": [
                    "__init__",
                    "_debounced_reload",
                    "_should_handle",
                    "on_modified",
                    "on_created",
                    "on_deleted",
                    "start",
                    "_watch_loop",
                    "stop"
                ],
                "docstring": "Watches the models directory for changes and triggers a model registry reload,\ndebouncing rapid events to avoid redundant reloads.\n\nImprovements:\n  - Configurable file extensions (defaults to .py).\n  - Robust error handling when reloading models.\n  - Ready for beta/production with clear logging and thread management.",
                "base_classes": [
                    "FileSystemEventHandler"
                ]
            }
        },
        "routes": [],
        "complexity": 19
    },
    "core\\chatgpt_automation\\watchers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\chat_engine\\chat_cycle_controller.py": {
        "language": ".py",
        "functions": [
            "sanitize_filename",
            "__init__",
            "append_output",
            "start",
            "process_chat",
            "run_single_chat",
            "retrieve_project_context",
            "post_cycle_analysis",
            "_save_prompt_response",
            "_save_run_summary",
            "shutdown"
        ],
        "classes": {
            "ChatCycleController": {
                "methods": [
                    "__init__",
                    "append_output",
                    "start",
                    "process_chat",
                    "run_single_chat",
                    "retrieve_project_context",
                    "post_cycle_analysis",
                    "_save_prompt_response",
                    "_save_run_summary",
                    "shutdown"
                ],
                "docstring": "Master orchestrator for chat scraping, prompt cycles,\nmemory updates, and Discord dispatching.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 21
    },
    "core\\chat_engine\\chat_scraper_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_driver",
            "get_all_chats",
            "get_filtered_chats",
            "validate_login",
            "manual_login_flow"
        ],
        "classes": {
            "ChatScraperService": {
                "methods": [
                    "__init__",
                    "get_driver",
                    "get_all_chats",
                    "get_filtered_chats",
                    "validate_login",
                    "manual_login_flow"
                ],
                "docstring": "ChatScraperService retrieves available chat titles and links from the chat UI.\nIt handles exclusions and filtering for downstream execution cycles.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "core\\chat_engine\\chat_engine_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_memory",
            "start",
            "shutdown",
            "shutdown_driver",
            "send_prompt",
            "get_all_chat_titles",
            "execute_prompts_single_chat",
            "analyze_execution_response",
            "send_chat_prompt",
            "switch_execution_mode",
            "generate_dreamscape_episode",
            "execute_prompt_cycle",
            "queue_prompts",
            "get_last_response",
            "inject_context",
            "run_cycle"
        ],
        "classes": {
            "ChatEngineManager": {
                "methods": [
                    "__init__",
                    "_load_memory",
                    "start",
                    "shutdown",
                    "shutdown_driver",
                    "send_prompt",
                    "get_all_chat_titles",
                    "execute_prompts_single_chat",
                    "analyze_execution_response",
                    "send_chat_prompt",
                    "switch_execution_mode",
                    "generate_dreamscape_episode",
                    "execute_prompt_cycle",
                    "queue_prompts",
                    "get_last_response",
                    "inject_context",
                    "run_cycle"
                ],
                "docstring": "Facade for managing the chat engine services.\nThis class coordinates the various components of the chat engine.",
                "base_classes": [
                    "IChatManager"
                ]
            }
        },
        "routes": [],
        "complexity": 34
    },
    "core\\chat_engine\\discord_dispatcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_setup_events",
            "send_message",
            "dispatch_memory_update",
            "dispatch_dreamscape_episode",
            "dispatch_feedback_loop",
            "run_bot",
            "shutdown"
        ],
        "classes": {
            "DiscordDispatcher": {
                "methods": [
                    "__init__",
                    "_setup_events",
                    "send_message",
                    "dispatch_memory_update",
                    "dispatch_dreamscape_episode",
                    "dispatch_feedback_loop",
                    "run_bot",
                    "shutdown"
                ],
                "docstring": "DiscordDispatcher - Manages communication to a Discord server.\nSends updates on system events, memory updates, and AI output.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "core\\chat_engine\\feedback_engine.py": {
        "language": ".py",
        "functions": [
            "__new__",
            "__init__",
            "_load_memory",
            "_save_memory",
            "save_memory_async",
            "parse_and_update_memory",
            "apply_memory_updates",
            "log_feedback",
            "export_feedback_log",
            "analyze_feedback",
            "review_memory",
            "feedback_loop",
            "save_context_memory_async",
            "save_context_db",
            "review_context_memory"
        ],
        "classes": {
            "FeedbackEngine": {
                "methods": [
                    "__new__",
                    "__init__",
                    "_load_memory",
                    "_save_memory",
                    "save_memory_async",
                    "parse_and_update_memory",
                    "apply_memory_updates",
                    "log_feedback",
                    "export_feedback_log",
                    "analyze_feedback",
                    "review_memory",
                    "feedback_loop",
                    "save_context_memory_async",
                    "save_context_db",
                    "review_context_memory"
                ],
                "docstring": "FeedbackEngine - Parses AI responses, updates persistent memory,\ntracks reinforcement loops, and evolves Victor.OS intelligence.\n\nImplemented as a singleton to prevent multiple instantiations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 30
    },
    "core\\chat_engine\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\chat_engine\\gui_event_handler.py": {
        "language": ".py",
        "functions": [
            "run_gui",
            "__init__",
            "init_ui",
            "toggle_headless",
            "toggle_reverse",
            "toggle_archive",
            "start_dispatcher",
            "stop_dispatcher",
            "log",
            "closeEvent"
        ],
        "classes": {
            "GUIEventHandler": {
                "methods": [
                    "__init__",
                    "init_ui",
                    "toggle_headless",
                    "toggle_reverse",
                    "toggle_archive",
                    "start_dispatcher",
                    "stop_dispatcher",
                    "log",
                    "closeEvent"
                ],
                "docstring": "GUI Event Handler for ChatMate Agent Control Panel\n- Control Config Flags (Headless, Reverse Order, Archive)\n- Start/Stop the Agent Dispatcher\n- Display logs or status updates",
                "base_classes": [
                    "QMainWindow"
                ]
            }
        },
        "routes": [],
        "complexity": 19
    },
    "core\\config\\config_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get",
            "_ensure_valid_path",
            "set",
            "_load_config",
            "_save_config",
            "get_path"
        ],
        "classes": {
            "ConfigManager": {
                "methods": [
                    "__init__",
                    "get",
                    "_ensure_valid_path",
                    "set",
                    "_load_config",
                    "_save_config",
                    "get_path"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "core\\config\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\cycle\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\cycle\\cycle_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start_cycle",
            "add_step",
            "get_current_cycle",
            "end_cycle"
        ],
        "classes": {
            "CycleService": {
                "methods": [
                    "__init__",
                    "start_cycle",
                    "add_step",
                    "get_current_cycle",
                    "end_cycle"
                ],
                "docstring": "Service for managing task cycles.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "core\\dreamscape\\ContextMemoryManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_context",
            "save_context",
            "_initialize_new_context",
            "update_with_episode",
            "_extract_themes",
            "_update_skills",
            "_update_protocols",
            "_update_domains",
            "_update_architect_tier",
            "_update_quests",
            "get_context_summary"
        ],
        "classes": {
            "ContextMemoryManager": {
                "methods": [
                    "__init__",
                    "load_context",
                    "save_context",
                    "_initialize_new_context",
                    "update_with_episode",
                    "_extract_themes",
                    "_update_skills",
                    "_update_protocols",
                    "_update_domains",
                    "_update_architect_tier",
                    "_update_quests",
                    "get_context_summary"
                ],
                "docstring": "Manages the loading, saving, and updating of Dreamscape context memory.\nHandles episode themes, skills, protocols, domains, and architect tier progression.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "core\\dreamscape\\dreamscape_automation.py": {
        "language": ".py",
        "functions": [
            "parse_args",
            "main",
            "__init__",
            "initialize_services",
            "get_excluded_chats",
            "get_available_chats",
            "process_chat",
            "send_to_discord",
            "save_archive",
            "run",
            "shutdown"
        ],
        "classes": {
            "DigitalDreamscapeEpisodesPipeline": {
                "methods": [
                    "__init__",
                    "initialize_services",
                    "get_excluded_chats",
                    "get_available_chats",
                    "process_chat",
                    "send_to_discord",
                    "save_archive",
                    "run",
                    "shutdown"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "core\\dreamscape\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\dreamscape\\TemplateRenderer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_setup_jinja_env",
            "load_template",
            "render_template",
            "render_string_template",
            "validate_template_context"
        ],
        "classes": {
            "TemplateRenderer": {
                "methods": [
                    "__init__",
                    "_setup_jinja_env",
                    "load_template",
                    "render_template",
                    "render_string_template",
                    "validate_template_context"
                ],
                "docstring": "Handles all template rendering operations for Dreamscape episodes.\nUses Jinja2 to load and render templates with context data.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "core\\executors\\base_executor.py": {
        "language": ".py",
        "functions": [
            "shutdown"
        ],
        "classes": {
            "BaseExecutor": {
                "methods": [
                    "shutdown"
                ],
                "docstring": "Base interface for prompt executors.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "core\\executors\\chatgpt_executor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "shutdown"
        ],
        "classes": {
            "ChatGPTExecutor": {
                "methods": [
                    "__init__",
                    "shutdown"
                ],
                "docstring": "Executor for running prompts through ChatGPT web interface.",
                "base_classes": [
                    "BaseExecutor"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "core\\executors\\cursor_executor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_process_response",
            "shutdown"
        ],
        "classes": {
            "CursorExecutor": {
                "methods": [
                    "__init__",
                    "_process_response",
                    "shutdown"
                ],
                "docstring": "Executor for running prompts through Cursor's websocket interface.",
                "base_classes": [
                    "BaseExecutor"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "core\\executors\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\factories\\agent.py": {
        "language": ".py",
        "functions": [
            "register_agent_type",
            "create",
            "_setup_chat_dependencies",
            "_setup_engagement_dependencies"
        ],
        "classes": {
            "AgentFactory": {
                "methods": [
                    "register_agent_type",
                    "create",
                    "_setup_chat_dependencies",
                    "_setup_engagement_dependencies"
                ],
                "docstring": "Factory for creating agent-related services.",
                "base_classes": [
                    "BaseFactory"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "core\\factories\\agent_failure_hook_factory.py": {
        "language": ".py",
        "functions": [
            "create"
        ],
        "classes": {
            "AgentFailureHookFactory": {
                "methods": [
                    "create"
                ],
                "docstring": "Factory for creating AgentFailureHook instances.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "core\\factories\\chat.py": {
        "language": ".py",
        "functions": [
            "create"
        ],
        "classes": {
            "ChatFactory": {
                "methods": [
                    "create"
                ],
                "docstring": "Factory for creating chat-related services.",
                "base_classes": [
                    "BaseFactory"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "core\\factories\\cycle_factory.py": {
        "language": ".py",
        "functions": [
            "create"
        ],
        "classes": {
            "CycleFactory": {
                "methods": [
                    "create"
                ],
                "docstring": "Factory for creating Cycle Service instances.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "core\\factories\\dreamscape_generation_factory.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create",
            "_resolve_output_dir",
            "_resolve_memory_file",
            "_load_or_initialize_memory"
        ],
        "classes": {
            "DreamscapeGenerationFactory": {
                "methods": [
                    "__init__",
                    "create",
                    "_resolve_output_dir",
                    "_resolve_memory_file",
                    "_load_or_initialize_memory"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "core\\factories\\discord_factory.py": {
        "language": ".py",
        "functions": [
            "create"
        ],
        "classes": {
            "DiscordFactory": {
                "methods": [
                    "create"
                ],
                "docstring": "Factory for creating Discord service instances.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "core\\factories\\dreamscape.py": {
        "language": ".py",
        "functions": [
            "create",
            "_load_or_initialize_memory"
        ],
        "classes": {
            "DreamscapeFactory": {
                "methods": [
                    "create",
                    "_load_or_initialize_memory"
                ],
                "docstring": "Factory for creating dreamscape-related services.",
                "base_classes": [
                    "BaseFactory"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "core\\factories\\feedback_engine_factory.py": {
        "language": ".py",
        "functions": [
            "create"
        ],
        "classes": {
            "FeedbackEngineFactory": {
                "methods": [
                    "create"
                ],
                "docstring": "Factory for creating FeedbackEngine instances.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "core\\factories\\feedback_factory.py": {
        "language": ".py",
        "functions": [
            "create"
        ],
        "classes": {
            "FeedbackFactory": {
                "methods": [
                    "create"
                ],
                "docstring": "Factory for creating Feedback Engine instances.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "core\\factories\\memory_factory.py": {
        "language": ".py",
        "functions": [
            "create"
        ],
        "classes": {
            "MemoryFactory": {
                "methods": [
                    "create"
                ],
                "docstring": "Factory for creating Memory Manager instances.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "core\\factories\\merit_test_factory.py": {
        "language": ".py",
        "functions": [
            "create"
        ],
        "classes": {
            "MeritTestFactory": {
                "methods": [
                    "create"
                ],
                "docstring": "Factory for creating Merit Test related instances.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "core\\factories\\openai_client_factory.py": {
        "language": ".py",
        "functions": [
            "create_openai_client",
            "create"
        ],
        "classes": {
            "OpenAIClientFactory": {
                "methods": [
                    "create_openai_client",
                    "create"
                ],
                "docstring": "Factory for creating and configuring OpenAIClient instances.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "core\\factories\\orchestrator_factory.py": {
        "language": ".py",
        "functions": [
            "create"
        ],
        "classes": {
            "OrchestratorFactory": {
                "methods": [
                    "create"
                ],
                "docstring": "Factory for creating Orchestrator instances.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "core\\factories\\prompt_factory.py": {
        "language": ".py",
        "functions": [
            "create",
            "create_prompt_manager"
        ],
        "classes": {
            "PromptFactory": {
                "methods": [
                    "create",
                    "create_prompt_manager"
                ],
                "docstring": "Factory for creating PromptManager instances.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "core\\factories\\recovery_engine_factory.py": {
        "language": ".py",
        "functions": [
            "create"
        ],
        "classes": {
            "RecoveryEngineFactory": {
                "methods": [
                    "create"
                ],
                "docstring": "Factory for creating RecoveryEngine instances.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "core\\factories\\task_factory.py": {
        "language": ".py",
        "functions": [
            "create"
        ],
        "classes": {
            "TaskFactory": {
                "methods": [
                    "create"
                ],
                "docstring": "Factory for creating Task Orchestrator instances.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "core\\factories\\response_factory.py": {
        "language": ".py",
        "functions": [
            "create"
        ],
        "classes": {
            "ResponseFactory": {
                "methods": [
                    "create"
                ],
                "docstring": "Factory for creating Response Handler instances.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "core\\factories\\__init__.py": {
        "language": ".py",
        "functions": [
            "create",
            "get_dependencies",
            "__init__",
            "get_instance",
            "register_factory",
            "get_factory",
            "get_factories",
            "reset",
            "create_service"
        ],
        "classes": {
            "BaseFactory": {
                "methods": [
                    "create",
                    "get_dependencies"
                ],
                "docstring": "Base factory class that all service factories must inherit from.",
                "base_classes": [
                    "ABC"
                ]
            },
            "FactoryRegistry": {
                "methods": [
                    "__init__",
                    "get_instance",
                    "register_factory",
                    "get_factory",
                    "get_factories",
                    "reset",
                    "create_service"
                ],
                "docstring": "Central registry for managing service factories.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "core\\feedback\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\feedback\\feedback_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_feedback",
            "get_feedback",
            "get_all_feedback",
            "get_recovery_enhanced_score",
            "_get_prompt_recovery_metrics",
            "_calculate_recovery_factor",
            "_enrich_with_recovery_metrics",
            "_calculate_global_recovery_rate",
            "_load_feedback",
            "_save_feedback",
            "register_failure_hooks",
            "handle_feedback_error"
        ],
        "classes": {
            "FeedbackEngine": {
                "methods": [
                    "__init__",
                    "add_feedback",
                    "get_feedback",
                    "get_all_feedback",
                    "get_recovery_enhanced_score",
                    "_get_prompt_recovery_metrics",
                    "_calculate_recovery_factor",
                    "_enrich_with_recovery_metrics",
                    "_calculate_global_recovery_rate",
                    "_load_feedback",
                    "_save_feedback",
                    "register_failure_hooks"
                ],
                "docstring": "Engine for managing feedback.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 25
    },
    "core\\interfaces\\IDreamscapeService.py": {
        "language": ".py",
        "functions": [
            "load_context_from_file",
            "generate_context_from_memory",
            "render_episode",
            "save_episode",
            "generate_episode_from_template",
            "generate_episode_from_memory"
        ],
        "classes": {
            "IDreamscapeService": {
                "methods": [
                    "load_context_from_file",
                    "generate_context_from_memory",
                    "render_episode",
                    "save_episode",
                    "generate_episode_from_template",
                    "generate_episode_from_memory"
                ],
                "docstring": "Interface for Dreamscape generation services.\nDefines standard methods for episode generation and rendering.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "core\\interfaces\\IPromptManager.py": {
        "language": ".py",
        "functions": [
            "get_prompt",
            "list_available_prompts",
            "load_memory_state",
            "save_memory_state",
            "record_conversation",
            "start_conversation_cycle",
            "end_conversation_cycle"
        ],
        "classes": {
            "IPromptManager": {
                "methods": [
                    "get_prompt",
                    "list_available_prompts",
                    "load_memory_state",
                    "save_memory_state",
                    "record_conversation",
                    "start_conversation_cycle",
                    "end_conversation_cycle"
                ],
                "docstring": "Interface for prompt management services.\nDefines standard methods for prompt retrieval, storage and memory management.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 14
    },
    "core\\interfaces\\IPromptOrchestrator.py": {
        "language": ".py",
        "functions": [
            "set_chat_manager",
            "execute_single_cycle",
            "execute_multi_cycle",
            "get_available_prompts",
            "get_prompt",
            "save_prompt",
            "shutdown"
        ],
        "classes": {
            "IPromptOrchestrator": {
                "methods": [
                    "set_chat_manager",
                    "execute_single_cycle",
                    "execute_multi_cycle",
                    "get_available_prompts",
                    "get_prompt",
                    "save_prompt",
                    "shutdown"
                ],
                "docstring": "Interface for prompt cycle orchestration services.\nDefines standard methods for executing prompt cycles and managing prompts.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 14
    },
    "core\\llm_backends\\huggingface_backend.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_model",
            "generate"
        ],
        "classes": {
            "HuggingFaceBackend": {
                "methods": [
                    "__init__",
                    "load_model",
                    "generate"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "core\\llm_backends\\ollama_backend.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate"
        ],
        "classes": {
            "OllamaBackend": {
                "methods": [
                    "__init__",
                    "generate"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "core\\llm_backends\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\logging\\CompositeLogger.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_safe_log",
            "log",
            "log_error",
            "log_debug",
            "log_event",
            "log_system_event",
            "add_logger",
            "remove_logger",
            "shutdown"
        ],
        "classes": {
            "CompositeLogger": {
                "methods": [
                    "__init__",
                    "_safe_log",
                    "log",
                    "log_error",
                    "log_debug",
                    "log_event",
                    "log_system_event",
                    "add_logger",
                    "remove_logger",
                    "shutdown"
                ],
                "docstring": "Composite logger that manages multiple logging handlers.",
                "base_classes": [
                    "ILoggingAgent"
                ]
            }
        },
        "routes": [],
        "complexity": 20
    },
    "core\\logging\\ConsoleLogger.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_format_message",
            "debug",
            "info",
            "warning",
            "error",
            "critical",
            "log"
        ],
        "classes": {
            "ConsoleLogger": {
                "methods": [
                    "__init__",
                    "_format_message",
                    "debug",
                    "info",
                    "warning",
                    "error",
                    "critical",
                    "log"
                ],
                "docstring": "A logger that outputs messages to the console with color formatting.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "core\\logging\\LoggingService.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_add_console_handler",
            "_add_file_handler",
            "add_custom_handler",
            "debug",
            "info",
            "warning",
            "error",
            "critical",
            "exception",
            "log_system_event",
            "set_level"
        ],
        "classes": {
            "LoggingService": {
                "methods": [
                    "__init__",
                    "_add_console_handler",
                    "_add_file_handler",
                    "add_custom_handler",
                    "debug",
                    "info",
                    "warning",
                    "error",
                    "critical",
                    "exception",
                    "log_system_event",
                    "set_level"
                ],
                "docstring": "Centralized logging service that provides standardized logging capabilities\nacross the application. Supports multiple output destinations including\nconsole, file, and custom handlers.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "core\\logging\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\logging\\factories\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\logging\\handlers\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\logging\\factories\\LoggerFactory.py": {
        "language": ".py",
        "functions": [
            "create_standard_logger",
            "create_module_logger",
            "create_agent_logger",
            "get_logger",
            "apply_library_log_levels"
        ],
        "classes": {
            "LoggerFactory": {
                "methods": [
                    "create_standard_logger",
                    "create_module_logger",
                    "create_agent_logger",
                    "get_logger",
                    "apply_library_log_levels"
                ],
                "docstring": "Factory class for creating standardized loggers across the application.\nProvides methods to create different types of loggers with consistent \nconfiguration.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "core\\logging\\services\\ai_output_service.py": {
        "language": ".py",
        "functions": [
            "log_ai_output",
            "sanitize_filename"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "core\\logging\\services\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\logging\\utils\\AsyncDispatcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_start_worker",
            "_process_queue",
            "dispatch",
            "get_metrics",
            "shutdown"
        ],
        "classes": {
            "DispatcherMetrics": {
                "methods": [],
                "docstring": "Metrics for the AsyncDispatcher.",
                "base_classes": []
            },
            "AsyncDispatcher": {
                "methods": [
                    "__init__",
                    "_start_worker",
                    "_process_queue",
                    "dispatch",
                    "get_metrics",
                    "shutdown"
                ],
                "docstring": "Handles asynchronous dispatch of logging operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "core\\logging\\utils\\setup.py": {
        "language": ".py",
        "functions": [
            "setup_logging"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "core\\logging\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\memory\\context.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_ensure_output_dir",
            "save_context",
            "load_context",
            "update_context",
            "_deep_update",
            "delete_context",
            "list_contexts",
            "clear_all"
        ],
        "classes": {
            "ContextMemoryManager": {
                "methods": [
                    "__init__",
                    "_ensure_output_dir",
                    "save_context",
                    "load_context",
                    "update_context",
                    "_deep_update",
                    "delete_context",
                    "list_contexts",
                    "clear_all"
                ],
                "docstring": "Manages context-specific memory storage and retrieval, particularly for\nDreamscape episode generation and other context-dependent features.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "core\\memory\\database.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_initialize_db",
            "record_interaction",
            "initialize_conversation",
            "get_conversation",
            "get_user_interactions",
            "get_conversation_metadata",
            "clear_user_interactions",
            "close"
        ],
        "classes": {
            "DatabaseManager": {
                "methods": [
                    "__init__",
                    "_initialize_db",
                    "record_interaction",
                    "initialize_conversation",
                    "get_conversation",
                    "get_user_interactions",
                    "get_conversation_metadata",
                    "clear_user_interactions",
                    "close"
                ],
                "docstring": "DatabaseManager stores interactions and conversation metadata for\nlong-term retention using SQLite.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "core\\memory\\feedback.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "to_dict",
            "from_dict",
            "__new__",
            "__init__",
            "_load_feedback",
            "_save_feedback",
            "add_feedback",
            "get_feedback",
            "mark_processed",
            "add_tags",
            "update_metadata",
            "clear_all",
            "get_stats"
        ],
        "classes": {
            "FeedbackEntry": {
                "methods": [
                    "__init__",
                    "to_dict",
                    "from_dict"
                ],
                "docstring": "Represents a single feedback entry with metadata.",
                "base_classes": []
            },
            "UnifiedFeedbackMemory": {
                "methods": [
                    "__new__",
                    "__init__",
                    "_load_feedback",
                    "_save_feedback",
                    "add_feedback",
                    "get_feedback",
                    "mark_processed",
                    "add_tags",
                    "update_metadata",
                    "clear_all",
                    "get_stats"
                ],
                "docstring": "Singleton class that provides global access to the UnifiedFeedbackMemory.\nHandles storage, retrieval, and analysis of system feedback across components.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 28
    },
    "core\\memory\\MeritChainManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_schema",
            "validate_entry",
            "save",
            "query",
            "all",
            "get_by_username",
            "_load",
            "_write"
        ],
        "classes": {
            "MeritChainManager": {
                "methods": [
                    "__init__",
                    "_load_schema",
                    "validate_entry",
                    "save",
                    "query",
                    "all",
                    "get_by_username",
                    "_load",
                    "_write"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "core\\memory\\manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_register_failure_handlers",
            "_load_memory",
            "_create_initial_memory",
            "_save_memory",
            "set",
            "get",
            "delete",
            "clear_segment",
            "get_segment_keys",
            "get_segment_size",
            "optimize",
            "get_stats",
            "close",
            "handle_memory_corruption",
            "handle_cache_error"
        ],
        "classes": {
            "MemoryManager": {
                "methods": [
                    "__init__",
                    "_register_failure_handlers",
                    "_load_memory",
                    "_create_initial_memory",
                    "_save_memory",
                    "set",
                    "get",
                    "delete",
                    "clear_segment",
                    "get_segment_keys",
                    "get_segment_size",
                    "optimize",
                    "get_stats",
                    "close"
                ],
                "docstring": "MemoryManager combines:\n  - LRU caching + zlib compression for short-term memory\n  - JSON-based loading/saving with schema validation + backup on corruption\n  - SQLite-based long-term storage of interactions\n  - Conversation/interaction management\n  - Narrative generation via Jinja2 templates",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 30
    },
    "core\\memory\\utils.py": {
        "language": ".py",
        "functions": [
            "load_memory_file",
            "repair_memory_file",
            "create_backup",
            "fix_memory_file",
            "merge_memory_files",
            "validate_memory_structure",
            "_validate_type",
            "_validate_object"
        ],
        "classes": {},
        "routes": [],
        "complexity": 8
    },
    "core\\memory\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\meredith\\resonance_scorer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_all_models",
            "score_profile"
        ],
        "classes": {
            "ResonanceScorer": {
                "methods": [
                    "__init__",
                    "_load_all_models",
                    "score_profile"
                ],
                "docstring": "Loads multiple resonance models from a directory (e.g. romantic.json, friendship.json)\nand scores a given profile dict based on alignment with a selected model's criteria:\n  - required traits\n  - bonus traits\n  - frequency keywords\n  - deal breakers\n  - location preference (ZIP or keywords)",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "core\\meredith\\profile_scraper.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "scrape_profiles",
            "__init__",
            "scrape_profiles",
            "_safe_get_text",
            "__init__",
            "scrape_profiles",
            "__init__",
            "scrape_profiles",
            "__init__",
            "_init_driver",
            "register_scraper",
            "register_default_scrapers",
            "run_all",
            "close",
            "filter_by_location",
            "filter_by_gender"
        ],
        "classes": {
            "BaseScraper": {
                "methods": [
                    "__init__",
                    "scrape_profiles"
                ],
                "docstring": "Abstract base class that enforces a 'scrape_profiles' method.\nEach platform-specific scraper will inherit and implement its own logic.",
                "base_classes": [
                    "ABC"
                ]
            },
            "TwitterScraper": {
                "methods": [
                    "__init__",
                    "scrape_profiles",
                    "_safe_get_text"
                ],
                "docstring": "Scrapes Twitter user search results based on a text query.",
                "base_classes": [
                    "BaseScraper"
                ]
            },
            "InstagramScraper": {
                "methods": [
                    "__init__",
                    "scrape_profiles"
                ],
                "docstring": "Scrapes Instagram hashtag pages to find recent posts, used here as a proxy\nfor user profiles. Real user data might require additional steps or logins.",
                "base_classes": [
                    "BaseScraper"
                ]
            },
            "FacebookScraper": {
                "methods": [
                    "__init__",
                    "scrape_profiles"
                ],
                "docstring": "Scrapes public Facebook \"people\" search results. Facebook often requires\nlogin or advanced dynamic handling, so YMMV with purely anonymous scraping.",
                "base_classes": [
                    "BaseScraper"
                ]
            },
            "ScraperManager": {
                "methods": [
                    "__init__",
                    "_init_driver",
                    "register_scraper",
                    "register_default_scrapers",
                    "run_all",
                    "close"
                ],
                "docstring": "Orchestrates multiple platform scrapers, aggregates their results,\nand manages the Selenium WebDriver lifecycle.",
                "base_classes": []
            },
            "ProfileFilter": {
                "methods": [
                    "filter_by_location",
                    "filter_by_gender"
                ],
                "docstring": "A utility class to filter scraped profiles by location, gender, or any custom rules.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 35
    },
    "core\\meredith\\meredith_dispatcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "process_profile",
            "get_previous_matches",
            "find_match_by_username",
            "_extract_json"
        ],
        "classes": {
            "MeredithDispatcher": {
                "methods": [
                    "__init__",
                    "process_profile",
                    "get_previous_matches",
                    "find_match_by_username",
                    "_extract_json"
                ],
                "docstring": "Dispatches profiles to an LLM for analysis based on a template,\nparses the response, and optionally saves matches to MeritChain.\nRelies on injected services for dependencies.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "core\\meredith\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\merit\\merit_chain_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_chain",
            "add_link",
            "get_chain",
            "get_all_chains"
        ],
        "classes": {
            "MeritChainManager": {
                "methods": [
                    "__init__",
                    "create_chain",
                    "add_link",
                    "get_chain",
                    "get_all_chains"
                ],
                "docstring": "Manager for test merit chains.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "core\\merit\\test_coverage_analyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze_file",
            "get_file_coverage",
            "get_total_coverage"
        ],
        "classes": {
            "TestCoverageAnalyzer": {
                "methods": [
                    "__init__",
                    "analyze_file",
                    "get_file_coverage",
                    "get_total_coverage"
                ],
                "docstring": "Analyzer for test coverage using coverage.py data.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "core\\merit\\test_generator_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_read_file_content",
            "generate_test",
            "generate_test_suite"
        ],
        "classes": {
            "TestGeneratorService": {
                "methods": [
                    "__init__",
                    "_read_file_content",
                    "generate_test",
                    "generate_test_suite"
                ],
                "docstring": "Service for generating tests.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "core\\merit\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\meritchain\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\meritchain\\MeritChainManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_schema",
            "validate_entry",
            "save",
            "all",
            "query",
            "get_by_username",
            "_load",
            "_write"
        ],
        "classes": {
            "MeritChainManager": {
                "methods": [
                    "__init__",
                    "_load_schema",
                    "validate_entry",
                    "save",
                    "all",
                    "query",
                    "get_by_username",
                    "_load",
                    "_write"
                ],
                "docstring": "Manager for the merit chain, a persistent record of resonance matches.\nProvides validation via JSON Schema and data access methods.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "core\\micro_factories\\episode_generator_factory.py": {
        "language": ".py",
        "functions": [
            "create_episode_generator"
        ],
        "classes": {
            "EpisodeGeneratorFactory": {
                "methods": [
                    "create_episode_generator"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "core\\micro_factories\\context_manager_factory.py": {
        "language": ".py",
        "functions": [
            "create_context_manager"
        ],
        "classes": {
            "ContextManagerFactory": {
                "methods": [
                    "create_context_manager"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "core\\micro_factories\\feedback_factory.py": {
        "language": ".py",
        "functions": [
            "create",
            "create_with_explicit_deps"
        ],
        "classes": {
            "FeedbackFactory": {
                "methods": [
                    "create",
                    "create_with_explicit_deps"
                ],
                "docstring": "Micro-factory for creating FeedbackEngine instances.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "core\\micro_factories\\merit_test_factory.py": {
        "language": ".py",
        "functions": [
            "create_merit_chain_manager",
            "create_test_coverage_analyzer",
            "create_test_generator_service",
            "create"
        ],
        "classes": {
            "MeritTestFactory": {
                "methods": [
                    "create_merit_chain_manager",
                    "create_test_coverage_analyzer",
                    "create_test_generator_service",
                    "create"
                ],
                "docstring": "Factory for creating MeritChain and Test-related services with proper dependencies.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "core\\micro_factories\\openai_client_factory.py": {
        "language": ".py",
        "functions": [
            "create",
            "__init__",
            "get_client"
        ],
        "classes": {
            "OpenAIClientFactory": {
                "methods": [
                    "create"
                ],
                "docstring": "Factory for creating OpenAI clients.",
                "base_classes": [
                    "BaseFactory"
                ]
            },
            "OpenAIClient": {
                "methods": [
                    "__init__",
                    "get_client"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "core\\micro_factories\\orchestrator_factory.py": {
        "language": ".py",
        "functions": [
            "create",
            "create_cycle_orchestrator",
            "create_task_orchestrator",
            "create_with_explicit_deps"
        ],
        "classes": {
            "OrchestratorFactory": {
                "methods": [
                    "create",
                    "create_cycle_orchestrator",
                    "create_task_orchestrator",
                    "create_with_explicit_deps"
                ],
                "docstring": "Micro-factory for creating orchestrator services.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "core\\micro_factories\\template_manager_factory.py": {
        "language": ".py",
        "functions": [
            "create_template_manager"
        ],
        "classes": {
            "TemplateManagerFactory": {
                "methods": [
                    "create_template_manager"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "core\\micro_factories\\prompt_factory.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "register_prompt_type",
            "create",
            "create_from_template"
        ],
        "classes": {
            "PromptFactory": {
                "methods": [
                    "__init__",
                    "register_prompt_type",
                    "create",
                    "create_from_template"
                ],
                "docstring": "Factory for creating prompt-related services and components.",
                "base_classes": [
                    "BaseFactory"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "core\\micro_factories\\ui_manager_factory.py": {
        "language": ".py",
        "functions": [
            "create_dreamscape_ui_manager"
        ],
        "classes": {
            "UIManagerFactory": {
                "methods": [
                    "create_dreamscape_ui_manager"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "core\\micro_factories\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\monitoring\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\openai\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\monitoring\\metrics_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "update_task_metrics",
            "get_task_metrics",
            "get_global_metrics",
            "reset_metrics",
            "_update_recovery_action_stats",
            "_load_metrics",
            "_save_metrics"
        ],
        "classes": {
            "MetricsService": {
                "methods": [
                    "__init__",
                    "update_task_metrics",
                    "get_task_metrics",
                    "get_global_metrics",
                    "reset_metrics",
                    "_update_recovery_action_stats",
                    "_load_metrics",
                    "_save_metrics"
                ],
                "docstring": "Centralized service for collecting and analyzing application metrics.\n\nThis service tracks:\n- Task performance & status history\n- Recovery action success rates\n- Global application health metrics\n- Per-component performance data",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "core\\pipelines\\project_optimizer_agent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_optimization_plan",
            "create_prompts_from_plan",
            "_render_action_prompt"
        ],
        "classes": {
            "ProjectOptimizerAgent": {
                "methods": [
                    "__init__",
                    "load_optimization_plan",
                    "create_prompts_from_plan",
                    "_render_action_prompt"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "core\\pipelines\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\prompt_cycle\\audit.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "perform_audit",
            "_generate_audit_prompt",
            "_process_audit_response",
            "_generate_audit_report",
            "get_audit_history",
            "get_latest_audit"
        ],
        "classes": {
            "AuditManager": {
                "methods": [
                    "__init__",
                    "perform_audit",
                    "_generate_audit_prompt",
                    "_process_audit_response",
                    "_generate_audit_report",
                    "get_audit_history",
                    "get_latest_audit"
                ],
                "docstring": "Manages AI audits and audit reporting for the prompt cycle system.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "core\\prompts\\__init__.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate"
        ],
        "classes": {
            "BasePrompt": {
                "methods": [
                    "__init__",
                    "generate"
                ],
                "docstring": "Base class for all prompts.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "core\\prompt_cycle\\dialog.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initUI",
            "start_cycle"
        ],
        "classes": {
            "PromptCycleDialog": {
                "methods": [
                    "__init__",
                    "initUI",
                    "start_cycle"
                ],
                "docstring": "Dialog for selecting prompts to include in the cycle.",
                "base_classes": [
                    "QDialog"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "core\\prompt_cycle\\memory.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_memory",
            "_save_memory",
            "store_insights",
            "get_insights",
            "update",
            "search_memory",
            "generate_memory_report"
        ],
        "classes": {
            "MemoryManager": {
                "methods": [
                    "__init__",
                    "_load_memory",
                    "_save_memory",
                    "store_insights",
                    "get_insights",
                    "update",
                    "search_memory",
                    "generate_memory_report"
                ],
                "docstring": "Manages memory for the prompt cycle system.\nHandles storing, retrieving, and updating insights from interactions.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "core\\prompt_cycle\\narrative.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_setup_template_env",
            "extract_narrative_elements",
            "process_response",
            "broadcast_update",
            "_format_narrative_message",
            "generate_narrative_report",
            "add_event"
        ],
        "classes": {
            "NarrativeManager": {
                "methods": [
                    "__init__",
                    "_setup_template_env",
                    "extract_narrative_elements",
                    "process_response",
                    "broadcast_update",
                    "_format_narrative_message",
                    "generate_narrative_report",
                    "add_event"
                ],
                "docstring": "Manages narrative tracking and updates for the prompt cycle system.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "core\\prompt_cycle\\state.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_state",
            "_save_state",
            "get_state",
            "update_state",
            "_deep_merge",
            "increment_metric",
            "add_event",
            "update_configuration",
            "get_metrics",
            "get_events",
            "get_configuration",
            "reset_state",
            "generate_system_report"
        ],
        "classes": {
            "SystemState": {
                "methods": [
                    "__init__",
                    "_load_state",
                    "_save_state",
                    "get_state",
                    "update_state",
                    "_deep_merge",
                    "increment_metric",
                    "add_event",
                    "update_configuration",
                    "get_metrics",
                    "get_events",
                    "get_configuration",
                    "reset_state",
                    "generate_system_report"
                ],
                "docstring": "Manages the state of the prompt cycle system.\nTracks system metrics, events, and configuration.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 28
    },
    "core\\prompt_cycle\\scraping.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "scrape_conversations",
            "_scrape_thread",
            "_get_contextual_prompt",
            "_manual_login",
            "_wait_for_page_load",
            "_handle_rate_limiting"
        ],
        "classes": {
            "ConversationScraper": {
                "methods": [
                    "__init__",
                    "scrape_conversations",
                    "_scrape_thread",
                    "_get_contextual_prompt",
                    "_manual_login",
                    "_wait_for_page_load",
                    "_handle_rate_limiting"
                ],
                "docstring": "Manages conversation scraping and processing.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "core\\prompt_cycle\\utils.py": {
        "language": ".py",
        "functions": [
            "sanitize",
            "get_timestamp",
            "ensure_directory"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "core\\prompt_cycle\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\recovery\\agent_failure_hooks.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "register_handler",
            "handle_failure",
            "_update_failure_patterns",
            "_get_matching_handlers",
            "_fallback_recovery",
            "_log_successful_recovery"
        ],
        "classes": {
            "AgentFailureHook": {
                "methods": [
                    "__init__",
                    "register_handler",
                    "handle_failure",
                    "_update_failure_patterns",
                    "_get_matching_handlers",
                    "_fallback_recovery",
                    "_log_successful_recovery"
                ],
                "docstring": "Bridge between agents and the recovery engine that allows agents to:\n- Register failure handlers\n- Trigger recovery actions\n- Log failure patterns\n- Update recovery metrics",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "core\\recovery\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\recovery\\recovery_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "handle_stall",
            "execute_recovery_action",
            "get_recovery_stats",
            "_load_strategies",
            "_select_recovery_action",
            "_get_valid_strategies",
            "_update_performance_metrics",
            "_update_strategy_weight",
            "_calculate_avg_time",
            "_update_task_metrics",
            "_log_failure_trace",
            "_update_failure_patterns",
            "_update_strategy_performance",
            "_get_strategy_performance",
            "_get_active_recoveries",
            "_generate_recommendations",
            "_handle_max_retries_exceeded",
            "start_auto_tuning_loop",
            "tune_strategies",
            "_prune_low_weight_strategies",
            "_generate_new_strategies",
            "_identify_error_sequences",
            "_categorize_error",
            "_save_strategies",
            "suggest_new_strategies",
            "prune_low_performing_strategies",
            "get_performance_stats",
            "tuning_loop"
        ],
        "classes": {
            "RecoveryEngine": {
                "methods": [
                    "__init__",
                    "handle_stall",
                    "execute_recovery_action",
                    "get_recovery_stats",
                    "_load_strategies",
                    "_select_recovery_action",
                    "_get_valid_strategies",
                    "_update_performance_metrics",
                    "_update_strategy_weight",
                    "_calculate_avg_time",
                    "_update_task_metrics",
                    "_log_failure_trace",
                    "_update_failure_patterns",
                    "_update_strategy_performance",
                    "_get_strategy_performance",
                    "_get_active_recoveries",
                    "_generate_recommendations",
                    "_handle_max_retries_exceeded",
                    "start_auto_tuning_loop",
                    "tune_strategies",
                    "_prune_low_weight_strategies",
                    "_generate_new_strategies",
                    "_identify_error_sequences",
                    "_categorize_error",
                    "_save_strategies",
                    "suggest_new_strategies",
                    "prune_low_performing_strategies",
                    "get_performance_stats"
                ],
                "docstring": "Centralized engine for handling task recovery and stall detection.\n\nThis class encapsulates all recovery logic, making it reusable across different\nparts of the application. It handles:\n- Stall detection and recovery\n- Recovery strategy selection and optimization\n- Metrics tracking and analysis\n- Recovery action execution",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 57
    },
    "core\\refactor\\CursorSessionManager.py": {
        "language": ".py",
        "functions": [
            "_demo",
            "__init__",
            "_load_or_calibrate_coords",
            "_calibrate",
            "_save_calibrated_coords",
            "queue_task",
            "cancel_task",
            "update_task_priority",
            "accept_next_task",
            "toggle_auto_accept",
            "set_on_update_callback",
            "build_prompt_batch",
            "run_overnight_mode",
            "start_loop",
            "stop_loop",
            "_task_loop",
            "_execute_task",
            "_record_task_failure",
            "_capture_response_from_clipboard",
            "_handle_test_generation",
            "_sort_task_queue",
            "_priority_rank",
            "_get_queue_snapshot",
            "_focus_cursor_window",
            "_click_coordinate",
            "_type_prompt_and_send",
            "_wait_for_response",
            "shutdown",
            "_configure_default_hooks",
            "_inject_automatic_context_hook_wrapper",
            "_inject_automatic_context",
            "_format_prompt_with_context",
            "_demo",
            "demo_callback",
            "simple_approval_hook",
            "simple_dispatch_hook"
        ],
        "classes": {
            "CursorSessionManager": {
                "methods": [
                    "__init__",
                    "_load_or_calibrate_coords",
                    "_calibrate",
                    "_save_calibrated_coords",
                    "queue_task",
                    "cancel_task",
                    "update_task_priority",
                    "accept_next_task",
                    "toggle_auto_accept",
                    "set_on_update_callback",
                    "build_prompt_batch",
                    "run_overnight_mode",
                    "start_loop",
                    "stop_loop",
                    "_task_loop",
                    "_execute_task",
                    "_record_task_failure",
                    "_capture_response_from_clipboard",
                    "_handle_test_generation",
                    "_sort_task_queue",
                    "_priority_rank",
                    "_get_queue_snapshot",
                    "_focus_cursor_window",
                    "_click_coordinate",
                    "_type_prompt_and_send",
                    "_wait_for_response",
                    "shutdown",
                    "_configure_default_hooks",
                    "_inject_automatic_context_hook_wrapper",
                    "_inject_automatic_context",
                    "_format_prompt_with_context",
                    "_demo"
                ],
                "docstring": "A unified manager for:\n  1) UI calibration for Cursor (prompt box + accept button)\n  2) Task queueing with auto/manual acceptance\n  3) Batch prompt building (optional)\n  4) Dynamic wait for 'Accept' button detection\n  5) Execution history (success/failure tracking)\n  6) Lifecycle hooks for validate/inject/approve/dispatch\n  7) Optional test generation & coverage analysis\n  8) Overnight/batch mode for direct prompt processing\n  9) Dry-run mode for safe UI testing",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 68
    },
    "core\\refactor\\cursor_dispatcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_create_timestamp",
            "load_and_render",
            "run_prompt",
            "send_to_cursor",
            "wait_for_cursor_edit",
            "wait_for_cursor_edit_with_timeout",
            "send_and_wait",
            "run_tests",
            "_find_or_generate_test_file",
            "git_commit_changes",
            "execute_prompt_sequence",
            "install_git_hook"
        ],
        "classes": {
            "CursorDispatcher": {
                "methods": [
                    "__init__",
                    "_create_timestamp",
                    "load_and_render",
                    "run_prompt",
                    "send_to_cursor",
                    "wait_for_cursor_edit",
                    "wait_for_cursor_edit_with_timeout",
                    "send_and_wait",
                    "run_tests",
                    "_find_or_generate_test_file",
                    "git_commit_changes",
                    "execute_prompt_sequence",
                    "install_git_hook"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "core\\refactor\\refactor_and_polish.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "core\\refactor\\task_refactor_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_tasks",
            "run",
            "_handle_extract",
            "_handle_replace",
            "_apply_changes"
        ],
        "classes": {
            "TaskRefactorEngine": {
                "methods": [
                    "__init__",
                    "_load_tasks",
                    "run",
                    "_handle_extract",
                    "_handle_replace",
                    "_apply_changes"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "core\\scraping\\web_chat_scraper.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_driver",
            "navigate_to_chatgpt",
            "scrape_chat_list",
            "navigate_to_chat",
            "load_all_chat_messages",
            "extract_message_content",
            "scrape_chat_by_title"
        ],
        "classes": {
            "WebChatScraper": {
                "methods": [
                    "__init__",
                    "get_driver",
                    "navigate_to_chatgpt",
                    "scrape_chat_list",
                    "navigate_to_chat",
                    "load_all_chat_messages",
                    "extract_message_content",
                    "scrape_chat_by_title"
                ],
                "docstring": "WebChatScraper extracts chat data directly from the ChatGPT web interface.\nIt uses Selenium to navigate the DOM and extract chat titles and message content.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "core\\rendering\\template_engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_check_dependencies",
            "_install_dependencies",
            "_ensure_template_dirs",
            "_create_default_templates",
            "render_from_template",
            "get_available_templates"
        ],
        "classes": {
            "TemplateEngine": {
                "methods": [
                    "__init__",
                    "_check_dependencies",
                    "_install_dependencies",
                    "_ensure_template_dirs",
                    "_create_default_templates",
                    "render_from_template",
                    "get_available_templates"
                ],
                "docstring": "Template rendering engine using Jinja2.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "core\\refactor\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\services\\chat_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_chat_manager",
            "shutdown",
            "is_running",
            "get_chat_manager",
            "get_chat_history",
            "send_message",
            "get_response",
            "get_model",
            "get_config",
            "_get_driver_options",
            "get_driver",
            "_get_driver_service"
        ],
        "classes": {
            "ChatService": {
                "methods": [
                    "__init__",
                    "create_chat_manager",
                    "shutdown",
                    "is_running",
                    "get_chat_manager",
                    "get_chat_history",
                    "send_message",
                    "get_response",
                    "get_model",
                    "get_config",
                    "_get_driver_options",
                    "get_driver",
                    "_get_driver_service"
                ],
                "docstring": "Manages the lifecycle of the ChatManager and Selenium WebDriver\nfor chat execution. Provides helper methods to interact with\nthe chat interface, retrieve responses, and manage driver options.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "core\\services\\config_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_config",
            "_create_default_config",
            "_save_config",
            "get",
            "set",
            "reset_to_defaults"
        ],
        "classes": {
            "ConfigService": {
                "methods": [
                    "__init__",
                    "_load_config",
                    "_create_default_config",
                    "_save_config",
                    "get",
                    "set",
                    "reset_to_defaults"
                ],
                "docstring": "Service for managing application configuration.\nHandles loading, saving, and accessing configuration values.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "core\\services\\cursor_ui_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_trigger_callback",
            "take_screenshot",
            "start_browser",
            "locate_on_screen",
            "click_image",
            "type_text",
            "trigger_hotkey",
            "get_clipboard_content",
            "set_clipboard_content",
            "execute_task",
            "validate_task_result",
            "create"
        ],
        "classes": {
            "ExecutionStatus": {
                "methods": [],
                "docstring": "Status values for task execution.",
                "base_classes": [
                    "Enum"
                ]
            },
            "CursorUIService": {
                "methods": [
                    "__init__",
                    "_trigger_callback",
                    "take_screenshot",
                    "start_browser",
                    "locate_on_screen",
                    "click_image",
                    "type_text",
                    "trigger_hotkey",
                    "get_clipboard_content",
                    "set_clipboard_content",
                    "execute_task",
                    "validate_task_result"
                ],
                "docstring": "Provides modular UI interaction for Cursor automation.\n\nThis service extracts and modularizes the core functionality from the old\ncursor_automation.py script, making it more reusable and maintainable.",
                "base_classes": []
            },
            "CursorUIServiceFactory": {
                "methods": [
                    "create"
                ],
                "docstring": "Factory for creating properly configured CursorUIService instances.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "core\\services\\discord_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "launch_bot",
            "stop_bot",
            "send_message",
            "send_file",
            "send_template",
            "get_status",
            "is_running"
        ],
        "classes": {
            "DiscordService": {
                "methods": [
                    "__init__",
                    "launch_bot",
                    "stop_bot",
                    "send_message",
                    "send_file",
                    "send_template",
                    "get_status",
                    "is_running"
                ],
                "docstring": "Service layer for Discord integration.\nProvides a Qt-friendly interface to the UnifiedDiscordService.",
                "base_classes": [
                    "QObject"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "core\\services\\debug_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start_debug_session",
            "get_debug_info",
            "_save_debug_info",
            "_get_current_timestamp"
        ],
        "classes": {
            "DebugService": {
                "methods": [
                    "__init__",
                    "start_debug_session",
                    "get_debug_info",
                    "_save_debug_info",
                    "_get_current_timestamp"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "core\\services\\DynamicContainer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "register",
            "get",
            "has",
            "_create_empty_service",
            "__init__",
            "__getattr__",
            "method"
        ],
        "classes": {
            "DynamicContainer": {
                "methods": [
                    "__init__",
                    "register",
                    "get",
                    "has",
                    "_create_empty_service"
                ],
                "docstring": "A dynamic service container that supports lazy loading and dependency injection.",
                "base_classes": []
            },
            "EmptyService": {
                "methods": [
                    "__init__",
                    "__getattr__"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 15
    },
    "core\\services\\fix_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "apply_fix",
            "fix_issue",
            "_log_fix",
            "_get_current_timestamp"
        ],
        "classes": {
            "FixService": {
                "methods": [
                    "__init__",
                    "apply_fix",
                    "fix_issue",
                    "_log_fix",
                    "_get_current_timestamp"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "core\\services\\full_sync_pipeline_runner.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "FullSyncPipelineRunner": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "core\\services\\git_integration_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_repo"
        ],
        "classes": {
            "GitIntegrationService": {
                "methods": [
                    "__init__",
                    "_get_repo"
                ],
                "docstring": "Service for handling Git operations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "core\\services\\output_handler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "output",
            "add_callback",
            "remove_callback",
            "info",
            "warning",
            "error",
            "debug"
        ],
        "classes": {
            "OutputHandler": {
                "methods": [
                    "__init__",
                    "output",
                    "add_callback",
                    "remove_callback",
                    "info",
                    "warning",
                    "error",
                    "debug"
                ],
                "docstring": "Centralized service for handling output across the system.\nSupports console output, logging, and optional GUI callbacks.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "core\\services\\rollback_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "rollback",
            "create_backup",
            "_find_backup"
        ],
        "classes": {
            "RollbackService": {
                "methods": [
                    "__init__",
                    "rollback",
                    "create_backup",
                    "_find_backup"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "core\\services\\PromptLifecycleHooksService.py": {
        "language": ".py",
        "functions": [
            "basic_validation_hook",
            "priority_normalization_hook",
            "sanitize_prompt_hook",
            "__init__",
            "register_queue_hook",
            "register_inject_hook",
            "register_validate_hook",
            "register_approve_hook",
            "register_dispatch_hook",
            "process_on_queue",
            "process_on_inject",
            "process_on_validate",
            "process_on_approve",
            "process_on_dispatch",
            "process_lifecycle",
            "_run_hooks",
            "_is_task_modified",
            "get_stats",
            "reset_stats"
        ],
        "classes": {
            "PromptLifecycleHooksService": {
                "methods": [
                    "__init__",
                    "register_queue_hook",
                    "register_inject_hook",
                    "register_validate_hook",
                    "register_approve_hook",
                    "register_dispatch_hook",
                    "process_on_queue",
                    "process_on_inject",
                    "process_on_validate",
                    "process_on_approve",
                    "process_on_dispatch",
                    "process_lifecycle",
                    "_run_hooks",
                    "_is_task_modified",
                    "get_stats",
                    "reset_stats"
                ],
                "docstring": "Manages the prompt/task lifecycle with hook points for validation, enrichment,\nand approval before execution.\n\nThe lifecycle stages are:\n1. on_queue - When a task is first added to the queue\n2. on_inject - When system context is injected before processing\n3. on_validate - Validation of task content/structure before execution\n4. on_approve - Final approval check before dispatch\n5. on_dispatch - Just before execution\n\nEach stage can modify the task or reject it (by returning None).",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 35
    },
    "core\\services\\prompt_execution_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_executor",
            "execute_prompt_cycle",
            "execute_prompts_single_chat",
            "execute_prompts_concurrently",
            "_execute_single_prompt_thread",
            "_determine_wait_time",
            "_post_process_jawbone_response",
            "send_prompt",
            "_fetch_response",
            "wait_for_stable_response",
            "get_prompt_insights",
            "get_memory_summary",
            "save_prompt",
            "reset_prompts",
            "get_available_prompts",
            "get_prompt",
            "_load_project_context",
            "load_project_context",
            "archive_files",
            "clear_context_cache",
            "shutdown"
        ],
        "classes": {
            "ModelType": {
                "methods": [],
                "docstring": "Supported model types for prompt execution.",
                "base_classes": [
                    "Enum"
                ]
            },
            "PromptService": {
                "methods": [
                    "__init__",
                    "_get_executor",
                    "execute_prompt_cycle",
                    "execute_prompts_single_chat",
                    "execute_prompts_concurrently",
                    "_execute_single_prompt_thread",
                    "_determine_wait_time",
                    "_post_process_jawbone_response",
                    "send_prompt",
                    "_fetch_response",
                    "wait_for_stable_response",
                    "get_prompt_insights",
                    "get_memory_summary",
                    "save_prompt",
                    "reset_prompts",
                    "get_available_prompts",
                    "get_prompt",
                    "_load_project_context",
                    "load_project_context",
                    "archive_files",
                    "clear_context_cache",
                    "shutdown"
                ],
                "docstring": "A unified prompt service that combines:\n  - Asynchronous prompt execution via ChatGPT and Cursor executors,\n  - Synchronous prompt cycles using Selenium (with both sequential and concurrent flows),\n  - Orchestration for multi\u2013prompt async execution, Discord feedback, and reinforcement evaluation,\n  - Prompt management (caching, saving, resetting),\n  - Project context loading and file archiving,\n  - Coordinated shutdown of all components.",
                "base_classes": [
                    "QObject"
                ]
            }
        },
        "routes": [],
        "complexity": 44
    },
    "core\\services\\service_registry.py": {
        "language": ".py",
        "functions": [
            "create_config_service",
            "create_prompt_service",
            "create_chat_service",
            "create_discord_service",
            "create_cursor_service",
            "create_reinforcement_service",
            "create_cycle_service",
            "create_response_handler",
            "create_task_orchestrator",
            "create_dreamscape_generator",
            "create_memory_service",
            "create_template_manager",
            "create_cursor_dispatcher",
            "register_all_services",
            "get_service",
            "_create_empty_service",
            "info",
            "warning",
            "error",
            "debug",
            "get",
            "set",
            "load",
            "save",
            "get_prompt",
            "save_prompt",
            "get_model",
            "reset_to_defaults",
            "load",
            "save",
            "get",
            "set",
            "clear",
            "execute_prompts_single_chat",
            "get_all_chat_titles",
            "shutdown_driver",
            "run",
            "stop",
            "send_message",
            "send_file",
            "send_template",
            "get_status",
            "auto_tune_prompts",
            "apply_fix",
            "rollback_changes",
            "execute_prompt",
            "debug_code",
            "shutdown_all",
            "__init__",
            "get_instance",
            "register",
            "unregister",
            "get",
            "has_service",
            "get_all_services",
            "reset",
            "create_prompt_manager_safely",
            "__init__",
            "__getattr__"
        ],
        "classes": {
            "LoggingService": {
                "methods": [
                    "info",
                    "warning",
                    "error",
                    "debug"
                ],
                "docstring": null,
                "base_classes": [
                    "Protocol"
                ]
            },
            "ConfigService": {
                "methods": [
                    "get",
                    "set",
                    "load",
                    "save"
                ],
                "docstring": null,
                "base_classes": [
                    "Protocol"
                ]
            },
            "PromptService": {
                "methods": [
                    "get_prompt",
                    "save_prompt",
                    "get_model",
                    "reset_to_defaults"
                ],
                "docstring": null,
                "base_classes": [
                    "Protocol"
                ]
            },
            "MemoryService": {
                "methods": [
                    "load",
                    "save",
                    "get",
                    "set",
                    "clear"
                ],
                "docstring": null,
                "base_classes": [
                    "Protocol"
                ]
            },
            "ChatService": {
                "methods": [
                    "execute_prompts_single_chat",
                    "get_all_chat_titles",
                    "shutdown_driver"
                ],
                "docstring": null,
                "base_classes": [
                    "Protocol"
                ]
            },
            "DiscordService": {
                "methods": [
                    "run",
                    "stop",
                    "send_message",
                    "send_file",
                    "send_template",
                    "get_status"
                ],
                "docstring": null,
                "base_classes": [
                    "Protocol"
                ]
            },
            "ReinforcementService": {
                "methods": [
                    "auto_tune_prompts",
                    "apply_fix",
                    "rollback_changes"
                ],
                "docstring": null,
                "base_classes": [
                    "Protocol"
                ]
            },
            "CursorService": {
                "methods": [
                    "execute_prompt",
                    "debug_code",
                    "shutdown_all"
                ],
                "docstring": null,
                "base_classes": [
                    "Protocol"
                ]
            },
            "ServiceRegistration": {
                "methods": [],
                "docstring": "Data class for storing service registration details.",
                "base_classes": []
            },
            "ServiceRegistry": {
                "methods": [
                    "__init__",
                    "get_instance",
                    "register",
                    "unregister",
                    "get",
                    "has_service",
                    "get_all_services",
                    "reset"
                ],
                "docstring": "Central registry for managing and validating services with dependency tracking.",
                "base_classes": []
            },
            "EmptyService": {
                "methods": [
                    "__init__",
                    "__getattr__"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 101
    },
    "core\\services\\TestCoverageAnalyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_coverage_history",
            "_save_coverage_history",
            "run_coverage_analysis",
            "_find_test_file",
            "_run_test_file",
            "_analyze_function_coverage",
            "_add_function_coverage",
            "_update_coverage_history",
            "get_coverage_report",
            "generate_coverage_diff",
            "recommend_test_improvements",
            "analyze_uncovered_code",
            "_determine_uncovered_reason",
            "_identify_uncovered_patterns",
            "_recommend_test_approach",
            "_recommend_test_approach_for_partial",
            "_generate_overall_assessment"
        ],
        "classes": {
            "TestCoverageAnalyzer": {
                "methods": [
                    "__init__",
                    "_load_coverage_history",
                    "_save_coverage_history",
                    "run_coverage_analysis",
                    "_find_test_file",
                    "_run_test_file",
                    "_analyze_function_coverage",
                    "_add_function_coverage",
                    "_update_coverage_history",
                    "get_coverage_report",
                    "generate_coverage_diff",
                    "recommend_test_improvements",
                    "analyze_uncovered_code",
                    "_determine_uncovered_reason",
                    "_identify_uncovered_patterns",
                    "_recommend_test_approach",
                    "_recommend_test_approach_for_partial",
                    "_generate_overall_assessment"
                ],
                "docstring": "Analyzes code test coverage, tracks coverage changes over time,\nand provides recommendations for additional tests to write.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 36
    },
    "core\\services\\web_scraper.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_check_dependencies",
            "_parse_html",
            "_extract_metadata",
            "_generate_basic_prompt",
            "get_status"
        ],
        "classes": {
            "WebScraper": {
                "methods": [
                    "__init__",
                    "_check_dependencies",
                    "_parse_html",
                    "_extract_metadata",
                    "_generate_basic_prompt",
                    "get_status"
                ],
                "docstring": "Intelligent web scraping agent that transforms web content into ChatGPT prompts.\n\nThis class is a core part of the Dream.OS prompt pipeline, responsible for:\n- Fetching and cleaning web content\n- Structuring data through templates\n- Generating context-aware prompts for ChatGPT\n- Maintaining scraping history and context\n\nDependencies:\n    - TemplateEngine: For rendering prompts from templates\n    - PromptService: For executing generated prompts",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "core\\services\\TestGeneratorService.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate_tests",
            "regenerate_tests_based_on_feedback",
            "_generate_tdd_tests",
            "_generate_post_implementation_tests",
            "_generate_coverage_driven_tests",
            "_update_generation_history",
            "_apply_test_feedback",
            "_augment_passing_tests",
            "_fix_python_tests",
            "_fix_js_tests",
            "_generate_python_coverage_tests",
            "_generate_js_coverage_tests",
            "_extract_python_failed_tests",
            "_extract_js_failed_tests",
            "_fix_python_test_case",
            "_fix_js_test_case",
            "_get_test_file_path"
        ],
        "classes": {
            "TestGeneratorService": {
                "methods": [
                    "__init__",
                    "generate_tests",
                    "regenerate_tests_based_on_feedback",
                    "_generate_tdd_tests",
                    "_generate_post_implementation_tests",
                    "_generate_coverage_driven_tests",
                    "_update_generation_history",
                    "_apply_test_feedback",
                    "_augment_passing_tests",
                    "_fix_python_tests",
                    "_fix_js_tests",
                    "_generate_python_coverage_tests",
                    "_generate_js_coverage_tests",
                    "_extract_python_failed_tests",
                    "_extract_js_failed_tests",
                    "_fix_python_test_case",
                    "_fix_js_test_case",
                    "_get_test_file_path"
                ],
                "docstring": "Service for generating and regenerating tests with coverage enhancement.\n\nThis service can:\n- Generate initial test skeletons for a target file\n- Analyze coverage and generate targeted tests for uncovered functions\n- Regenerate or augment tests based on execution feedback\n- Maintain a history of test generation",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 36
    },
    "core\\services\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\services\\discord\\DiscordBatchDispatcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start",
            "stop",
            "queue_message",
            "queue_batch",
            "_dispatch_loop",
            "_process_batch",
            "_send_channel_messages",
            "get_queue_size",
            "clear_queue"
        ],
        "classes": {
            "DiscordBatchDispatcher": {
                "methods": [
                    "__init__",
                    "start",
                    "stop",
                    "queue_message",
                    "queue_batch",
                    "_dispatch_loop",
                    "_process_batch",
                    "_send_channel_messages",
                    "get_queue_size",
                    "clear_queue"
                ],
                "docstring": "Handles queuing and batching of Discord messages for efficient delivery.\nManages rate limits and provides feedback on message delivery status.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "core\\services\\discord\\DiscordLogger.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_format_message",
            "log",
            "log_error",
            "log_debug",
            "log_event",
            "log_system_event",
            "enable",
            "disable"
        ],
        "classes": {
            "DiscordLogger": {
                "methods": [
                    "__init__",
                    "_format_message",
                    "log",
                    "log_error",
                    "log_debug",
                    "log_event",
                    "log_system_event",
                    "enable",
                    "disable"
                ],
                "docstring": "Discord-based logging implementation that sends log messages to Discord channels.",
                "base_classes": [
                    "ILoggingAgent"
                ]
            }
        },
        "routes": [],
        "complexity": 18
    },
    "core\\services\\discord\\DiscordManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "set_log_callback",
            "_log",
            "load_config",
            "save_config",
            "update_credentials",
            "map_prompt_to_channel",
            "unmap_prompt_channel",
            "get_channel_for_prompt",
            "_register_events",
            "_register_commands",
            "_build_status_message",
            "run_bot",
            "_run_bot_loop",
            "stop_bot",
            "send_message",
            "send_file",
            "send_dreamscape_episode",
            "send_prompt_response",
            "send_event_notification",
            "update_status",
            "test_connection",
            "get_loop",
            "get_status",
            "__init__",
            "initUI",
            "load_prompt_types",
            "update_credentials",
            "map_prompt_to_channel",
            "unmap_selected_prompt",
            "refresh_prompt_channel_list"
        ],
        "classes": {
            "DiscordManager": {
                "methods": [
                    "__init__",
                    "set_log_callback",
                    "_log",
                    "load_config",
                    "save_config",
                    "update_credentials",
                    "map_prompt_to_channel",
                    "unmap_prompt_channel",
                    "get_channel_for_prompt",
                    "_register_events",
                    "_register_commands",
                    "_build_status_message",
                    "run_bot",
                    "_run_bot_loop",
                    "stop_bot",
                    "send_message",
                    "send_file",
                    "send_dreamscape_episode",
                    "send_prompt_response",
                    "send_event_notification",
                    "update_status",
                    "test_connection",
                    "get_loop",
                    "get_status"
                ],
                "docstring": null,
                "base_classes": []
            },
            "DiscordSettingsDialog": {
                "methods": [
                    "__init__",
                    "initUI",
                    "load_prompt_types",
                    "update_credentials",
                    "map_prompt_to_channel",
                    "unmap_selected_prompt",
                    "refresh_prompt_channel_list"
                ],
                "docstring": null,
                "base_classes": [
                    "QDialog"
                ]
            }
        },
        "routes": [],
        "complexity": 62
    },
    "core\\services\\discord\\DiscordQueueProcessor.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "queue_response"
        ],
        "classes": {
            "DiscordQueueProcessor": {
                "methods": [
                    "__init__",
                    "queue_response"
                ],
                "docstring": "Queues processed responses for Discord or other destinations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "core\\services\\discord\\DiscordTemplateManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_resolve_template_dir",
            "render_message",
            "list_templates"
        ],
        "classes": {
            "DiscordTemplateManager": {
                "methods": [
                    "__init__",
                    "_resolve_template_dir",
                    "render_message",
                    "list_templates"
                ],
                "docstring": "Manages Discord templates using Jinja2.\n\nTemplate directory resolution order:\n1. Environment variable DISCORD_TEMPLATE_DIR\n2. New config system key: discord.template_dir\n3. Hard-coded fallback: \"templates/discord\"",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "core\\services\\dreamscape\\engine.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_context_from_file",
            "generate_context_from_memory",
            "render_episode",
            "save_episode",
            "generate_episode_from_template",
            "generate_episode_from_memory",
            "generate_episode_from_history",
            "_update_memory_and_chain",
            "_extract_episode_title",
            "_generate_summary",
            "_extract_protocols",
            "_slugify",
            "_archive_episode"
        ],
        "classes": {
            "DreamscapeGenerationService": {
                "methods": [
                    "__init__",
                    "load_context_from_file",
                    "generate_context_from_memory",
                    "render_episode",
                    "save_episode",
                    "generate_episode_from_template",
                    "generate_episode_from_memory",
                    "generate_episode_from_history",
                    "_update_memory_and_chain",
                    "_extract_episode_title",
                    "_generate_summary",
                    "_extract_protocols",
                    "_slugify",
                    "_archive_episode"
                ],
                "docstring": "Backend-only service for generating Dreamscape episodes.\nSupports rendering from templates or raw memory injection.",
                "base_classes": [
                    "IDreamscapeService"
                ]
            }
        },
        "routes": [],
        "complexity": 28
    },
    "core\\services\\dreamscape\\chain.py": {
        "language": ".py",
        "functions": [
            "_extract_section_list",
            "writeback_to_memory",
            "parse_last_episode_summary",
            "update_episode_chain",
            "get_context_from_chain",
            "_extract_with_pattern"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "core\\services\\requirements\\requirements_generator_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "run",
            "_get_target_directories",
            "_get_requirements_for_directory",
            "_filter_requirements",
            "_write_requirements_file"
        ],
        "classes": {
            "RequirementsGeneratorService": {
                "methods": [
                    "__init__",
                    "run",
                    "_get_target_directories",
                    "_get_requirements_for_directory",
                    "_filter_requirements",
                    "_write_requirements_file"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "core\\services\\dreamscape\\prompt_context_synthesizer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "synthesize_context",
            "_load_memory_context_with_confidence",
            "_load_chain_context_with_confidence",
            "_load_conversation_memory_with_confidence",
            "_process_chat_history_with_confidence",
            "_process_web_content_with_confidence",
            "_generate_weighted_summary",
            "_generate_llm_semantic_summary",
            "_map_source_to_type",
            "update_memory_with_synthesized_context",
            "_update_conversation_memory",
            "_update_structured_memory"
        ],
        "classes": {
            "PromptContextSynthesizer": {
                "methods": [
                    "__init__",
                    "synthesize_context",
                    "_load_memory_context_with_confidence",
                    "_load_chain_context_with_confidence",
                    "_load_conversation_memory_with_confidence",
                    "_process_chat_history_with_confidence",
                    "_process_web_content_with_confidence",
                    "_generate_weighted_summary",
                    "_generate_llm_semantic_summary",
                    "_map_source_to_type",
                    "update_memory_with_synthesized_context",
                    "_update_conversation_memory",
                    "_update_structured_memory"
                ],
                "docstring": "Combines multiple context sources into a unified context object for\ngenerating coherent Dreamscape episodes with narrative continuity.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "core\\social\\AIChatAgent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "ask",
            "_ask_openai",
            "_ask_ollama",
            "_build_prompt",
            "_initialize_chat_thread",
            "append_to_chat_thread",
            "_log_interaction"
        ],
        "classes": {
            "AIChatAgent": {
                "methods": [
                    "__init__",
                    "ask",
                    "_ask_openai",
                    "_ask_ollama",
                    "_build_prompt",
                    "_initialize_chat_thread",
                    "append_to_chat_thread",
                    "_log_interaction"
                ],
                "docstring": "AIChatAgent: Unified AI assistant optimized for context-rich, personalized interactions in Victor's voice.\nSupports OpenAI, local LLMs (Ollama), automatic ChatGPT thread creation, persistent memory logging, and fine-tuning dataset preparation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "core\\social\\CommunityIntegrationManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_check_platform_credentials",
            "_initialize_platforms",
            "_load_strategies",
            "_load_platform_status",
            "_save_platform_status",
            "get_available_platforms",
            "get_platform",
            "get_all_platforms",
            "enable_platform",
            "disable_platform",
            "connect_platform",
            "disconnect_platform",
            "run_daily_community_management",
            "_connect_enabled_platforms",
            "_collect_metrics",
            "analyze_community_health",
            "generate_insights_and_recommendations",
            "create_community_building_plan",
            "post_content",
            "identify_advocates",
            "track_member_interactions"
        ],
        "classes": {
            "CommunityIntegrationManager": {
                "methods": [
                    "__init__",
                    "_check_platform_credentials",
                    "_initialize_platforms",
                    "_load_strategies",
                    "_load_platform_status",
                    "_save_platform_status",
                    "get_available_platforms",
                    "get_platform",
                    "get_all_platforms",
                    "enable_platform",
                    "disable_platform",
                    "connect_platform",
                    "disconnect_platform",
                    "run_daily_community_management",
                    "_connect_enabled_platforms",
                    "_collect_metrics",
                    "analyze_community_health",
                    "generate_insights_and_recommendations",
                    "create_community_building_plan",
                    "post_content",
                    "identify_advocates",
                    "track_member_interactions"
                ],
                "docstring": "Manages integrations with various social platforms, handles authentication,\nand provides a unified interface for community building.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 44
    },
    "core\\social\\community_integration.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_initialize_strategies",
            "_initialize_dashboard",
            "_initialize_post_manager",
            "analyze_community_health",
            "generate_insights_and_recommendations",
            "create_community_building_plan",
            "identify_advocates",
            "post_across_platforms",
            "track_member_interaction",
            "optimize_platform_strategies",
            "generate_visualizations",
            "run_daily_community_management"
        ],
        "classes": {
            "CommunityIntegrationManager": {
                "methods": [
                    "__init__",
                    "_initialize_strategies",
                    "_initialize_dashboard",
                    "_initialize_post_manager",
                    "analyze_community_health",
                    "generate_insights_and_recommendations",
                    "create_community_building_plan",
                    "identify_advocates",
                    "post_across_platforms",
                    "track_member_interaction",
                    "optimize_platform_strategies",
                    "generate_visualizations",
                    "run_daily_community_management"
                ],
                "docstring": "Integrates all social media platforms with the unified community dashboard.\n\nThis class serves as the main entry point for community management,\nconnecting platform-specific strategies with unified analytics and reporting.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "core\\social\\log_writer.py": {
        "language": ".py",
        "functions": [
            "write_json_log",
            "log_login",
            "log_post",
            "log_error"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "core\\social\\platform_login_manager.py": {
        "language": ".py",
        "functions": [
            "load_cookies",
            "save_cookies",
            "wait_for_manual_login",
            "__init__",
            "login",
            "post",
            "__init__",
            "dispatch_all",
            "_process_platform",
            "_generate_content",
            "_shutdown_all_drivers"
        ],
        "classes": {
            "PlatformStrategy": {
                "methods": [
                    "__init__",
                    "login",
                    "post"
                ],
                "docstring": null,
                "base_classes": []
            },
            "SocialPlatformDispatcher": {
                "methods": [
                    "__init__",
                    "dispatch_all",
                    "_process_platform",
                    "_generate_content",
                    "_shutdown_all_drivers"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 19
    },
    "core\\social\\social_config.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_env",
            "_validate_required_keys",
            "_default_platform_urls",
            "get_platform_url",
            "chrome_profile_path",
            "_default_rate_limits",
            "within_rate_limit",
            "register_action",
            "_check_daily_reset",
            "_save_rate_limit_state",
            "_load_rate_limit_state",
            "register_rate_limit"
        ],
        "classes": {
            "SocialConfig": {
                "methods": [
                    "__init__",
                    "get_env",
                    "_validate_required_keys",
                    "_default_platform_urls",
                    "get_platform_url",
                    "chrome_profile_path",
                    "_default_rate_limits",
                    "within_rate_limit",
                    "register_action",
                    "_check_daily_reset",
                    "_save_rate_limit_state",
                    "_load_rate_limit_state",
                    "register_rate_limit"
                ],
                "docstring": "FULL SYNC social_config with integrated rate limit and daily reset handling.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "core\\social\\social_config_wrapper.py": {
        "language": ".py",
        "functions": [
            "get_social_config"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "core\\social\\social_post_db.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load",
            "_save",
            "_load_memory",
            "_save_memory",
            "update_memory",
            "get_memory",
            "add_to_queue",
            "mark_posted",
            "mark_failed",
            "get_next_post",
            "get_queue_length"
        ],
        "classes": {
            "SocialPostDatabase": {
                "methods": [
                    "__init__",
                    "_load",
                    "_save",
                    "_load_memory",
                    "_save_memory",
                    "update_memory",
                    "get_memory",
                    "add_to_queue",
                    "mark_posted",
                    "mark_failed",
                    "get_next_post",
                    "get_queue_length"
                ],
                "docstring": "Manages the queue of social media posts.\nTracks pending, posted, and failed posts in a JSON database.\nAlso integrates with a persistent memory system to store global context.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "core\\social\\StrategyLoader.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_strategy",
            "_validate_strategy",
            "get_available_strategies",
            "reload_strategy",
            "register_strategy"
        ],
        "classes": {
            "StrategyLoader": {
                "methods": [
                    "__init__",
                    "load_strategy",
                    "_validate_strategy",
                    "get_available_strategies",
                    "reload_strategy",
                    "register_strategy"
                ],
                "docstring": "Dynamically loads platform-specific strategy classes.\nHandles strategy initialization and validation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "core\\social\\social_post_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "post_next",
            "post_all",
            "enqueue_post",
            "shutdown",
            "post_to_platform"
        ],
        "classes": {
            "SocialPostManager": {
                "methods": [
                    "__init__",
                    "post_next",
                    "post_all",
                    "enqueue_post",
                    "shutdown"
                ],
                "docstring": "Manages posting of social media content across multiple platforms.\nSupports multi-threading for faster execution and centralized error handling.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 11
    },
    "core\\social\\TaskQueueManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start",
            "stop",
            "add_task",
            "_worker",
            "queue_size",
            "status",
            "sample_task"
        ],
        "classes": {
            "TaskQueueManager": {
                "methods": [
                    "__init__",
                    "start",
                    "stop",
                    "add_task",
                    "_worker",
                    "queue_size",
                    "status"
                ],
                "docstring": "TaskQueueManager: A robust, priority-based task queue with threaded workers.\nThis manager supports:\n  - Prioritized task scheduling (lower value = higher priority)\n  - Delayed execution for rate-limiting or scheduling\n  - Configurable retries with exponential backoff\n  - Structured logging of task outcomes for feedback and reinforcement learning loops",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 15
    },
    "core\\social\\UnifiedCommunityDashboard.py": {
        "language": ".py",
        "functions": [
            "to_dict",
            "__init__",
            "_initialize_strategies",
            "_load_saved_data",
            "save_data",
            "update_metrics",
            "update_top_members",
            "generate_insights",
            "_calculate_trends",
            "_generate_platform_insights",
            "_generate_overall_insights",
            "get_metrics_history",
            "get_latest_metrics",
            "generate_metrics_chart",
            "get_platform_status",
            "get_community_building_plan",
            "_get_recommended_platforms_for_day"
        ],
        "classes": {
            "CommunityMetrics": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Data structure for standardized community metrics across platforms.",
                "base_classes": []
            },
            "CommunityDashboard": {
                "methods": [
                    "__init__",
                    "_initialize_strategies",
                    "_load_saved_data",
                    "save_data",
                    "update_metrics",
                    "update_top_members",
                    "generate_insights",
                    "_calculate_trends",
                    "_generate_platform_insights",
                    "_generate_overall_insights",
                    "get_metrics_history",
                    "get_latest_metrics",
                    "generate_metrics_chart",
                    "get_platform_status",
                    "get_community_building_plan",
                    "_get_recommended_platforms_for_day"
                ],
                "docstring": "Provides a centralized dashboard for cross-platform community analytics and insights",
                "base_classes": [
                    "QObject"
                ]
            }
        },
        "routes": [],
        "complexity": 34
    },
    "core\\social\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\social\\UnifiedPostManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_post_history",
            "_save_post_history",
            "post_to_platform",
            "_adapt_content_for_platform",
            "schedule_post",
            "get_scheduled_posts",
            "cancel_scheduled_post",
            "get_post_analytics",
            "_get_current_metrics",
            "generate_content_ideas"
        ],
        "classes": {
            "UnifiedPostManager": {
                "methods": [
                    "__init__",
                    "_load_post_history",
                    "_save_post_history",
                    "post_to_platform",
                    "_adapt_content_for_platform",
                    "schedule_post",
                    "get_scheduled_posts",
                    "cancel_scheduled_post",
                    "get_post_analytics",
                    "_get_current_metrics",
                    "generate_content_ideas"
                ],
                "docstring": "Manages post creation, scheduling, and distribution across multiple social platforms.\nProvides a unified interface for content management and cross-platform posting.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "core\\social\\ai\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\social\\data\\post_history.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_history",
            "_save_history",
            "add_post",
            "get_posts",
            "clear_history"
        ],
        "classes": {
            "PostHistory": {
                "methods": [
                    "__init__",
                    "_load_history",
                    "_save_history",
                    "add_post",
                    "get_posts",
                    "clear_history"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "core\\social\\data\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\social\\logs\\DriverSession.py": {
        "language": ".py",
        "functions": [
            "get_multi_driver_sessions",
            "__init__",
            "initialize_driver",
            "_build_chrome_options",
            "_apply_stealth_settings",
            "shutdown_driver",
            "cleanup_profile",
            "restart_driver",
            "_get_profile_dir"
        ],
        "classes": {
            "DriverSession": {
                "methods": [
                    "__init__",
                    "initialize_driver",
                    "_build_chrome_options",
                    "_apply_stealth_settings",
                    "shutdown_driver",
                    "cleanup_profile",
                    "restart_driver",
                    "_get_profile_dir"
                ],
                "docstring": "Manages a single Selenium WebDriver session.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 17
    },
    "core\\social\\logs\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\social\\strategies\\ai_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze_sentiment",
            "_build_response_prompt",
            "_get_response_template",
            "_get_fallback_response",
            "_summarize_recent_content",
            "_get_sentiment_label",
            "_load_templates",
            "_load_history",
            "_track_response",
            "get_response_analytics"
        ],
        "classes": {
            "AIStrategy": {
                "methods": [
                    "__init__",
                    "analyze_sentiment",
                    "_build_response_prompt",
                    "_get_response_template",
                    "_get_fallback_response",
                    "_summarize_recent_content",
                    "_get_sentiment_label",
                    "_load_templates",
                    "_load_history",
                    "_track_response",
                    "get_response_analytics"
                ],
                "docstring": "Enhanced AI strategy for community management and content generation.\nHandles all AI-related tasks including:\n- Content generation\n- Comment responses\n- Engagement prompts\n- Sentiment analysis\n- Content optimization",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "core\\social\\strategies\\BaseEngagementBot.py": {
        "language": ".py",
        "functions": [
            "retry_on_failure",
            "decorator_retry",
            "__init__",
            "get_driver",
            "get_random_user_agent",
            "_wait",
            "login",
            "is_logged_in",
            "_login_with_credentials",
            "post",
            "like_posts",
            "comment_on_posts",
            "follow_users",
            "unfollow_non_returners",
            "go_viral",
            "_log_followed_users",
            "_find_posts",
            "_find_like_button",
            "_find_comment_box",
            "_find_profile_url",
            "_find_follow_button",
            "_find_unfollow_button",
            "run_daily_session",
            "wrapper_retry"
        ],
        "classes": {
            "BaseEngagementBot": {
                "methods": [
                    "__init__",
                    "get_driver",
                    "get_random_user_agent",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "_login_with_credentials",
                    "post",
                    "like_posts",
                    "comment_on_posts",
                    "follow_users",
                    "unfollow_non_returners",
                    "go_viral",
                    "_log_followed_users",
                    "_find_posts",
                    "_find_like_button",
                    "_find_comment_box",
                    "_find_profile_url",
                    "_find_follow_button",
                    "_find_unfollow_button",
                    "run_daily_session"
                ],
                "docstring": "Base class for all social platform engagement bots.\nProvides unified methods for:\n  - Login (cookie and credential-based, with manual fallback)\n  - Community engagement actions (like, comment, follow, unfollow, viral actions)\n  - Daily session orchestration.\n\nPlatform-specific details are provided via abstract helper methods.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 45
    },
    "core\\social\\strategies\\base_platform_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_feedback_data",
            "_save_feedback_data",
            "analyze_engagement_metrics",
            "analyze_comment_sentiment",
            "reinforce_engagement",
            "reward_top_engagers",
            "cross_platform_feedback_loop",
            "run_feedback_loop",
            "initialize",
            "cleanup",
            "get_community_metrics",
            "get_top_members",
            "track_member_interaction"
        ],
        "classes": {
            "BasePlatformStrategy": {
                "methods": [
                    "__init__",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "analyze_comment_sentiment",
                    "reinforce_engagement",
                    "reward_top_engagers",
                    "cross_platform_feedback_loop",
                    "run_feedback_loop",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction"
                ],
                "docstring": "Base class for all platform-specific strategies.\nProvides common functionality for:\n- Feedback tracking and metrics\n- Sentiment analysis\n- Engagement reinforcement\n- Cross-platform data integration\n- Reward systems",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 28
    },
    "core\\social\\strategies\\community_scheduler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "schedule_task",
            "schedule_engagement_check",
            "schedule_ai_responses",
            "schedule_daily_report",
            "_check_engagement",
            "_load_schedules",
            "_save_schedules",
            "_is_comment_processed",
            "_mark_comment_processed",
            "start",
            "stop"
        ],
        "classes": {
            "CommunityScheduler": {
                "methods": [
                    "__init__",
                    "schedule_task",
                    "schedule_engagement_check",
                    "schedule_ai_responses",
                    "schedule_daily_report",
                    "_check_engagement",
                    "_load_schedules",
                    "_save_schedules",
                    "_is_comment_processed",
                    "_mark_comment_processed",
                    "start",
                    "stop"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "core\\social\\strategies\\config_loader.py": {
        "language": ".py",
        "functions": [
            "load_yaml_config",
            "load_json_config",
            "load_configs",
            "get_nested",
            "get_env_or_config",
            "reload_configs"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "core\\social\\strategies\\context_db.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_tables",
            "log_post",
            "fetch_recent_posts",
            "fetch_last_post_content",
            "log_engagement",
            "fetch_engagements_for_post",
            "get_rate_limit",
            "update_rate_limit",
            "update_sentiment",
            "close"
        ],
        "classes": {
            "UnifiedContextEngine": {
                "methods": [
                    "__init__",
                    "create_tables",
                    "log_post",
                    "fetch_recent_posts",
                    "fetch_last_post_content",
                    "log_engagement",
                    "fetch_engagements_for_post",
                    "get_rate_limit",
                    "update_rate_limit",
                    "update_sentiment",
                    "close"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "core\\social\\strategies\\linkedin_strategy.py": {
        "language": ".py",
        "functions": [
            "retry_on_failure",
            "decorator_retry",
            "__init__",
            "_get_driver",
            "get_random_user_agent",
            "_wait",
            "login",
            "is_logged_in",
            "_login_with_credentials",
            "post",
            "like_posts",
            "comment_on_posts",
            "follow_users",
            "unfollow_non_returners",
            "go_viral",
            "_log_followed_users",
            "_find_posts",
            "_find_like_button",
            "_find_comment_box",
            "_find_profile_url",
            "_find_follow_button",
            "_find_unfollow_button",
            "run_daily_session",
            "__init__",
            "is_logged_in",
            "_login_with_credentials",
            "post",
            "_find_posts",
            "_find_like_button",
            "_find_comment_box",
            "_find_profile_url",
            "_find_follow_button",
            "_find_unfollow_button",
            "__init__",
            "initialize",
            "cleanup",
            "get_community_metrics",
            "get_top_members",
            "track_member_interaction",
            "_get_driver",
            "get_random_user_agent",
            "_wait",
            "login",
            "is_logged_in",
            "post_content",
            "run_daily_strategy_session",
            "_load_feedback_data",
            "wrapper_retry"
        ],
        "classes": {
            "BaseEngagementBot": {
                "methods": [
                    "__init__",
                    "_get_driver",
                    "get_random_user_agent",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "_login_with_credentials",
                    "post",
                    "like_posts",
                    "comment_on_posts",
                    "follow_users",
                    "unfollow_non_returners",
                    "go_viral",
                    "_log_followed_users",
                    "_find_posts",
                    "_find_like_button",
                    "_find_comment_box",
                    "_find_profile_url",
                    "_find_follow_button",
                    "_find_unfollow_button",
                    "run_daily_session"
                ],
                "docstring": "A universal base class for social media engagement bots.\nProvides core community building functions:\n  - Login (with cookie & credential fallback)\n  - Post content (AI-generated if needed)\n  - Like, comment, follow, unfollow, viral engagement, and DM functionalities\n  - Daily session orchestration",
                "base_classes": [
                    "ABC"
                ]
            },
            "LinkedInEngagementBot": {
                "methods": [
                    "__init__",
                    "is_logged_in",
                    "_login_with_credentials",
                    "post",
                    "_find_posts",
                    "_find_like_button",
                    "_find_comment_box",
                    "_find_profile_url",
                    "_find_follow_button",
                    "_find_unfollow_button"
                ],
                "docstring": "LinkedIn-specific implementation of BaseEngagementBot.\nImplements abstract methods using LinkedIn's DOM structure.",
                "base_classes": [
                    "BaseEngagementBot"
                ]
            },
            "LinkedinStrategy": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "get_random_user_agent",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session",
                    "_load_feedback_data"
                ],
                "docstring": "Centralized strategy class for LinkedIn automation and community building.\nExtends BasePlatformStrategy with LinkedIn-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops using ChatGPT responses\n  - Reward system for top engaging followers\n  - Cross-platform feedback integration",
                "base_classes": [
                    "BasePlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 93
    },
    "core\\social\\strategies\\facebook_strategy.py": {
        "language": ".py",
        "functions": [
            "retry_on_failure",
            "get_random_user_agent",
            "start_scheduler",
            "post_to_facebook",
            "decorator_retry",
            "__init__",
            "_wait",
            "get_driver",
            "is_logged_in",
            "login",
            "post",
            "like_posts",
            "comment_on_posts",
            "follow_users",
            "unfollow_non_returners",
            "_log_followed_users",
            "go_viral",
            "run_daily_session",
            "__init__",
            "initialize",
            "cleanup",
            "get_community_metrics",
            "get_top_members",
            "track_member_interaction",
            "_get_driver",
            "get_random_user_agent",
            "_wait",
            "login",
            "is_logged_in",
            "post_content",
            "run_daily_strategy_session",
            "_load_feedback_data",
            "_save_feedback_data",
            "analyze_engagement_metrics",
            "adaptive_posting_strategy",
            "analyze_comment_sentiment",
            "reinforce_engagement",
            "reward_top_followers",
            "cross_platform_feedback_loop",
            "run_feedback_loop",
            "wrapper_retry"
        ],
        "classes": {
            "FacebookBot": {
                "methods": [
                    "__init__",
                    "_wait",
                    "get_driver",
                    "is_logged_in",
                    "login",
                    "post"
                ],
                "docstring": "Automates Facebook login and posting.\nThis base class handles authentication and AI-powered post creation.",
                "base_classes": []
            },
            "FacebookEngagementBot": {
                "methods": [
                    "like_posts",
                    "comment_on_posts",
                    "follow_users",
                    "unfollow_non_returners",
                    "_log_followed_users",
                    "go_viral",
                    "run_daily_session"
                ],
                "docstring": "Extends FacebookBot with essential community building functions:\n  - Like posts, comment, follow/unfollow users, and viral engagement.\n  - Maintains a FOLLOW_DB to track engagements.\n  - Runs daily engagement sessions.",
                "base_classes": [
                    "FacebookBot"
                ]
            },
            "FacebookStrategy": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "get_random_user_agent",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "adaptive_posting_strategy",
                    "analyze_comment_sentiment",
                    "reinforce_engagement",
                    "reward_top_followers",
                    "cross_platform_feedback_loop",
                    "run_feedback_loop"
                ],
                "docstring": "Centralized strategy class for Facebook automation, community building,\nand dynamic feedback loops, leveraging StrategyConfigLoader.\nExtends BasePlatformStrategy with specific Facebook logic and integrates\nfeedback mechanisms.",
                "base_classes": [
                    "BasePlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 76
    },
    "core\\social\\strategies\\stocktwits_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "login",
            "is_logged_in",
            "post",
            "engage_community",
            "_log_follow",
            "unfollow_non_returners",
            "run_daily_session",
            "__init__",
            "initialize",
            "cleanup",
            "get_community_metrics",
            "get_top_members",
            "track_member_interaction",
            "_get_driver",
            "_wait",
            "login",
            "is_logged_in",
            "post_content",
            "run_daily_strategy_session",
            "_load_feedback_data",
            "_save_feedback_data",
            "analyze_engagement_metrics",
            "run_feedback_loop",
            "adaptive_posting_strategy",
            "reinforce_engagement",
            "reward_top_engagers",
            "cross_platform_feedback_loop"
        ],
        "classes": {
            "StocktwitsCommunityArchitect": {
                "methods": [
                    "__init__",
                    "login",
                    "is_logged_in",
                    "post",
                    "engage_community",
                    "_log_follow",
                    "unfollow_non_returners",
                    "run_daily_session"
                ],
                "docstring": "Stocktwits Community Builder:\nAutomates posts, engagement, and follower interactions with AI-generated content in Victor's authentic tone.",
                "base_classes": []
            },
            "StocktwitsStrategy": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "run_feedback_loop",
                    "adaptive_posting_strategy",
                    "reinforce_engagement",
                    "reward_top_engagers",
                    "cross_platform_feedback_loop"
                ],
                "docstring": "Centralized strategy class for Stocktwits automation and community building.\nExtends BasePlatformStrategy with Stocktwits-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops using ChatGPT responses\n  - Reward system for top engaging followers\n  - Cross-platform feedback integration",
                "base_classes": [
                    "BasePlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 56
    },
    "core\\social\\strategies\\reddit_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "cleanup",
            "get_community_metrics",
            "get_top_members",
            "track_member_interaction",
            "_get_driver",
            "_wait",
            "login",
            "is_logged_in",
            "post_content",
            "run_daily_strategy_session",
            "_load_feedback_data",
            "_save_feedback_data",
            "analyze_engagement_metrics",
            "adaptive_posting_strategy",
            "analyze_comment_sentiment",
            "reinforce_engagement",
            "run_feedback_loop"
        ],
        "classes": {
            "RedditStrategy": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "adaptive_posting_strategy",
                    "analyze_comment_sentiment",
                    "reinforce_engagement",
                    "run_feedback_loop"
                ],
                "docstring": "Centralized strategy class for Reddit automation and community building,\nleveraging StrategyConfigLoader.\nExtends BasePlatformStrategy with Reddit-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops using ChatGPT responses\n  - Reward system for top engaging users/subreddits\n  - Cross-platform feedback integration (stubbed)",
                "base_classes": [
                    "BasePlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 38
    },
    "core\\social\\strategies\\tiktok_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "cleanup",
            "get_community_metrics",
            "get_top_members",
            "track_member_interaction",
            "_get_driver",
            "_wait",
            "login",
            "is_logged_in",
            "post_video",
            "run_daily_strategy_session",
            "_load_feedback_data",
            "_save_feedback_data",
            "analyze_engagement_metrics",
            "adaptive_posting_strategy",
            "update_trending_hashtags",
            "reward_top_creators",
            "cross_platform_feedback_loop",
            "run_feedback_loop"
        ],
        "classes": {
            "TikTokStrategy": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_video",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "adaptive_posting_strategy",
                    "update_trending_hashtags",
                    "reward_top_creators",
                    "cross_platform_feedback_loop",
                    "run_feedback_loop"
                ],
                "docstring": "Centralized strategy class for TikTok automation and community building,\nleveraging StrategyConfigLoader.\nExtends BasePlatformStrategy with TikTok-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Video content scheduling and posting\n  - Hashtag trend analysis and optimization\n  - Cross-platform content repurposing (stubbed)\n  - Engagement analytics and community growth tracking",
                "base_classes": [
                    "BasePlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 40
    },
    "core\\social\\strategies\\twitter_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "cleanup",
            "_get_driver",
            "_wait",
            "login",
            "is_logged_in",
            "post_tweet",
            "post_thread",
            "engage_community",
            "_log_follow",
            "unfollow_non_returners",
            "_load_feedback_data",
            "_save_feedback_data",
            "analyze_engagement_metrics",
            "adaptive_posting_strategy",
            "analyze_comment_sentiment",
            "reinforce_engagement",
            "reward_top_engagers",
            "cross_platform_feedback_loop",
            "run_feedback_loop",
            "run_daily_strategy_session",
            "get_community_metrics",
            "get_top_members",
            "track_member_interaction"
        ],
        "classes": {
            "TwitterStrategy": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_tweet",
                    "post_thread",
                    "engage_community",
                    "_log_follow",
                    "unfollow_non_returners",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "adaptive_posting_strategy",
                    "analyze_comment_sentiment",
                    "reinforce_engagement",
                    "reward_top_engagers",
                    "cross_platform_feedback_loop",
                    "run_feedback_loop",
                    "run_daily_strategy_session",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction"
                ],
                "docstring": "Centralized strategy class for Twitter automation and community building,\nleveraging StrategyConfigLoader.\nExtends BasePlatformStrategy with Twitter-specific implementations.\nFeatures:\n  - Posting tweets and threads\n  - Community engagement (like, comment, follow/unfollow)\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops\n  - Reward system for top engagers\n  - Cross-platform feedback integration (stubbed)",
                "base_classes": [
                    "BasePlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 50
    },
    "core\\social\\strategies\\wordpress_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "cleanup",
            "sync_youtube_video",
            "moderate_comment",
            "get_community_metrics",
            "get_top_members",
            "_load_community_data",
            "_save_community_data",
            "generate_engagement_report",
            "track_member_interaction"
        ],
        "classes": {
            "WordPressCommunityStrategy": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "sync_youtube_video",
                    "moderate_comment",
                    "get_community_metrics",
                    "get_top_members",
                    "_load_community_data",
                    "_save_community_data",
                    "generate_engagement_report",
                    "track_member_interaction"
                ],
                "docstring": "WordPress community strategy that integrates with YouTube for automated community building.\nFeatures:\n- Auto-syncs YouTube videos as WordPress posts\n- Manages comments across both platforms\n- Generates engagement reports\n- Handles community moderation\n- Creates automated responses",
                "base_classes": [
                    "BasePlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 22
    },
    "core\\social\\strategies\\youtube_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "cleanup",
            "get_community_metrics",
            "get_top_members",
            "track_member_interaction",
            "_get_driver",
            "_wait",
            "login",
            "is_logged_in",
            "post_video",
            "run_daily_strategy_session",
            "_load_feedback_data",
            "_save_feedback_data",
            "analyze_engagement_metrics",
            "run_feedback_loop",
            "adaptive_posting_strategy",
            "reward_top_creators",
            "cross_platform_feedback_loop"
        ],
        "classes": {
            "YouTubeStrategy": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_video",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "run_feedback_loop",
                    "adaptive_posting_strategy",
                    "reward_top_creators",
                    "cross_platform_feedback_loop"
                ],
                "docstring": "Centralized strategy class for YouTube automation and community building.\nExtends BasePlatformStrategy with YouTube-specific implementations.\nFeatures:\n  - Video content management and scheduling\n  - Shorts creation and optimization\n  - Community post engagement\n  - Analytics tracking and optimization\n  - Cross-platform content distribution",
                "base_classes": [
                    "BasePlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 38
    },
    "core\\social\\strategies\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\sync_ops\\micro_factories\\sync_ops_factory.py": {
        "language": ".py",
        "functions": [
            "get_service",
            "reset_service"
        ],
        "classes": {
            "SyncOpsFactory": {
                "methods": [
                    "get_service",
                    "reset_service"
                ],
                "docstring": "A simple factory for creating and managing a singleton instance of SyncOpsService.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "core\\sync_ops\\micro_factories\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\sync_ops\\services\\sync_ops_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "clock_in",
            "clock_out",
            "start_pomodoro",
            "stop_pomodoro",
            "update_pomodoro",
            "log_event",
            "save_session"
        ],
        "classes": {
            "SyncOpsService": {
                "methods": [
                    "__init__",
                    "clock_in",
                    "clock_out",
                    "start_pomodoro",
                    "stop_pomodoro",
                    "update_pomodoro",
                    "log_event",
                    "save_session"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "core\\sync_ops\\services\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\system\\startup_validator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "run_all_checks",
            "check_env_vars",
            "check_paths",
            "check_memory_files",
            "check_template_dir"
        ],
        "classes": {
            "StartupValidator": {
                "methods": [
                    "__init__",
                    "run_all_checks",
                    "check_env_vars",
                    "check_paths",
                    "check_memory_files",
                    "check_template_dir"
                ],
                "docstring": "Validates core system requirements during startup.\nChecks paths, configs, memory files, and environment variables.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "core\\system\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\system_loaders\\dreamscape_system_loader.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load"
        ],
        "classes": {
            "DreamscapeSystemLoader": {
                "methods": [
                    "__init__",
                    "load"
                ],
                "docstring": "Handles the initialization and wiring of all components required \nfor the Dreamscape generation subsystem.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "core\\task\\task_orchestrator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_task",
            "get_task",
            "update_task_status",
            "get_all_tasks"
        ],
        "classes": {
            "TaskOrchestrator": {
                "methods": [
                    "__init__",
                    "create_task",
                    "get_task",
                    "update_task_status",
                    "get_all_tasks"
                ],
                "docstring": "Orchestrator for managing tasks.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "core\\task\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\utils\\path_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_find_project_root",
            "_ensure_directories",
            "get_memory_path",
            "get_config_path",
            "get_logs_path",
            "get_file_path"
        ],
        "classes": {
            "PathManager": {
                "methods": [
                    "__init__",
                    "_find_project_root",
                    "_ensure_directories",
                    "get_memory_path",
                    "get_config_path",
                    "get_logs_path",
                    "get_file_path"
                ],
                "docstring": "Manages application paths and directories.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "core\\utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\voice\\voice_io_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_event_handler",
            "listen",
            "speak",
            "get_available_voices",
            "update_config",
            "_emit_event",
            "_handle_error",
            "_start_event_processor",
            "__del__",
            "process_events"
        ],
        "classes": {
            "VoiceConfig": {
                "methods": [],
                "docstring": "Configuration for voice I/O settings.",
                "base_classes": [
                    "BaseModel"
                ]
            },
            "VoiceEvent": {
                "methods": [],
                "docstring": "Voice event data model.",
                "base_classes": [
                    "BaseModel"
                ]
            },
            "VoiceIOService": {
                "methods": [
                    "__init__",
                    "add_event_handler",
                    "listen",
                    "speak",
                    "get_available_voices",
                    "update_config",
                    "_emit_event",
                    "_handle_error",
                    "_start_event_processor",
                    "__del__"
                ],
                "docstring": "Handles voice input/output operations for Dream.OS.\n\nFeatures:\n- Real-time speech recognition\n- Text-to-speech synthesis\n- Event-based status updates\n- Background processing\n- Error recovery",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 21
    },
    "coverage_report\\coverage_html_cb_497bf287.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "cursor_prompts\\ollama_tests\\test_chat_mate.py": {
        "language": ".py",
        "functions": [
            "test_placeholder"
        ],
        "classes": {
            "PlaceholderTest": {
                "methods": [
                    "test_placeholder"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "cursor_prompts\\ollama_tests\\test_extract_unused_code_safely.py": {
        "language": ".py",
        "functions": [
            "test_placeholder"
        ],
        "classes": {
            "PlaceholderTest": {
                "methods": [
                    "test_placeholder"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "cursor_prompts\\ollama_tests\\test_generate_dependency_graph.py": {
        "language": ".py",
        "functions": [
            "test_placeholder"
        ],
        "classes": {
            "PlaceholderTest": {
                "methods": [
                    "test_placeholder"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "cursor_prompts\\ollama_tests\\test_ProjectScanner.py": {
        "language": ".py",
        "functions": [
            "test_placeholder"
        ],
        "classes": {
            "PlaceholderTest": {
                "methods": [
                    "test_placeholder"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "cursor_prompts\\outputs\\generated_test.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "discord\\discord_integration.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_register_events",
            "load_config",
            "save_config",
            "run",
            "stop",
            "send_message",
            "send_file",
            "send_template",
            "get_status",
            "set_log_callback",
            "_log",
            "__init__",
            "launch_bot",
            "stop_bot",
            "send_message",
            "send_file",
            "send_template",
            "get_status",
            "is_running",
            "run_bot"
        ],
        "classes": {
            "UnifiedDiscordService": {
                "methods": [
                    "__init__",
                    "_register_events",
                    "load_config",
                    "save_config",
                    "run",
                    "stop",
                    "send_message",
                    "send_file",
                    "send_template",
                    "get_status",
                    "set_log_callback",
                    "_log"
                ],
                "docstring": "UnifiedDiscordService - Centralized Discord integration service.\nHandles all Discord-related functionality including:\n  - Bot lifecycle management\n  - Message dispatching\n  - Template rendering\n  - Channel management\n  - Status monitoring\n  - Event notifications",
                "base_classes": []
            },
            "DiscordService": {
                "methods": [
                    "__init__",
                    "launch_bot",
                    "stop_bot",
                    "send_message",
                    "send_file",
                    "send_template",
                    "get_status",
                    "is_running"
                ],
                "docstring": "DiscordService provides a Qt-friendly interface to the UnifiedDiscordService.\nIt exposes signals for logging and status changes and wraps the backend service methods.",
                "base_classes": [
                    "QObject"
                ]
            }
        },
        "routes": [],
        "complexity": 41
    },
    "discord\\DreamscapeDiscordBot.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_setup_commands",
            "run_bot"
        ],
        "classes": {
            "DreamscapeDiscordBot": {
                "methods": [
                    "__init__",
                    "_setup_commands",
                    "run_bot"
                ],
                "docstring": "Discord bot specialized for interacting with Dreamscape episodes.",
                "base_classes": [
                    "commands.Bot"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "dream_modules\\check_modules.py": {
        "language": ".py",
        "functions": [
            "setup_test_dirs",
            "check_character_model",
            "check_clan_model",
            "check_character_manager",
            "check_clan_manager",
            "check_service_container",
            "main",
            "get_name"
        ],
        "classes": {
            "TestService": {
                "methods": [
                    "get_name"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 9
    },
    "dream_modules\\command_invoker.py": {
        "language": ".py",
        "functions": [
            "__str__",
            "__init__",
            "get_option",
            "response",
            "__init__"
        ],
        "classes": {
            "MockUser": {
                "methods": [
                    "__str__"
                ],
                "docstring": "Mock Discord user for testing.",
                "base_classes": []
            },
            "MockGuild": {
                "methods": [],
                "docstring": "Mock Discord guild for testing.",
                "base_classes": []
            },
            "MockInteraction": {
                "methods": [
                    "__init__",
                    "get_option",
                    "response"
                ],
                "docstring": "Mock Discord interaction for testing slash commands.",
                "base_classes": []
            },
            "CommandInvoker": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Test invoker for Discord slash commands.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "dream_modules\\example_bot.py": {
        "language": ".py",
        "functions": [
            "setup_directories",
            "create_example_clans",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "dream_modules\\factory.py": {
        "language": ".py",
        "functions": [
            "create_character_system",
            "create_clan_system",
            "create_character_commands",
            "setup_rpg_systems",
            "shutdown_all_systems"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "dream_modules\\test_runner.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "_setup_logging",
            "run_test",
            "run_all_tests",
            "generate_report",
            "save_report",
            "cleanup"
        ],
        "classes": {
            "TestResult": {
                "methods": [],
                "docstring": "Container for test results.",
                "base_classes": []
            },
            "TestRunner": {
                "methods": [
                    "__init__",
                    "_setup_logging",
                    "run_test",
                    "run_all_tests",
                    "generate_report",
                    "save_report",
                    "cleanup"
                ],
                "docstring": "Test runner for dream modules.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 15
    },
    "dream_modules\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "dream_modules\\core\\service_container.py": {
        "language": ".py",
        "functions": [
            "get_container",
            "__init__",
            "register",
            "register_factory",
            "get",
            "has",
            "remove",
            "clear"
        ],
        "classes": {
            "ServiceContainer": {
                "methods": [
                    "__init__",
                    "register",
                    "register_factory",
                    "get",
                    "has",
                    "remove",
                    "clear"
                ],
                "docstring": "Container for managing services and dependencies.\n\nThis class provides methods for registering and retrieving services,\nsupporting dependency injection patterns.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 15
    },
    "dream_modules\\core\\module_interface.py": {
        "language": ".py",
        "functions": [
            "initialize",
            "shutdown",
            "name",
            "version",
            "description",
            "get_status",
            "register_dependency",
            "get_service_interface",
            "update_config",
            "get_config",
            "validate_config"
        ],
        "classes": {
            "ModuleInterface": {
                "methods": [
                    "initialize",
                    "shutdown",
                    "name",
                    "version",
                    "description",
                    "get_status"
                ],
                "docstring": "Base interface that all Dream.OS modules must implement.",
                "base_classes": [
                    "ABC"
                ]
            },
            "ServiceInterface": {
                "methods": [
                    "register_dependency",
                    "get_service_interface"
                ],
                "docstring": "Interface for modules that provide services to other modules.",
                "base_classes": [
                    "ModuleInterface"
                ]
            },
            "ConfigurableModule": {
                "methods": [
                    "update_config",
                    "get_config",
                    "validate_config"
                ],
                "docstring": "Interface for modules that support runtime configuration changes.",
                "base_classes": [
                    "ModuleInterface"
                ]
            }
        },
        "routes": [],
        "complexity": 22
    },
    "dream_modules\\modules\\character\\character_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "shutdown",
            "name",
            "version",
            "description",
            "get_status",
            "register_dependency",
            "get_service_interface",
            "create_character",
            "get_character",
            "update_character",
            "delete_character",
            "get_all_characters",
            "save_character",
            "load_character",
            "_load_characters",
            "_save_all_characters",
            "_create_backup"
        ],
        "classes": {
            "CharacterManager": {
                "methods": [
                    "__init__",
                    "initialize",
                    "shutdown",
                    "name",
                    "version",
                    "description",
                    "get_status",
                    "register_dependency",
                    "get_service_interface",
                    "create_character",
                    "get_character",
                    "update_character",
                    "delete_character",
                    "get_all_characters",
                    "save_character",
                    "load_character",
                    "_load_characters",
                    "_save_all_characters",
                    "_create_backup"
                ],
                "docstring": "Character management service.\n\nThis service provides methods for managing characters, including\ncreation, retrieval, updating, and deletion.",
                "base_classes": [
                    "ServiceInterface"
                ]
            }
        },
        "routes": [],
        "complexity": 38
    },
    "dream_modules\\modules\\character\\character_model.py": {
        "language": ".py",
        "functions": [
            "__post_init__",
            "stats",
            "to_dict",
            "from_dict",
            "to_json",
            "from_json",
            "add_exp",
            "add_item",
            "remove_item",
            "learn_jutsu",
            "forget_jutsu",
            "add_status",
            "remove_status",
            "heal",
            "damage",
            "restore_chakra",
            "use_chakra"
        ],
        "classes": {
            "Character": {
                "methods": [
                    "__post_init__",
                    "stats",
                    "to_dict",
                    "from_dict",
                    "to_json",
                    "from_json",
                    "add_exp",
                    "add_item",
                    "remove_item",
                    "learn_jutsu",
                    "forget_jutsu",
                    "add_status",
                    "remove_status",
                    "heal",
                    "damage",
                    "restore_chakra",
                    "use_chakra"
                ],
                "docstring": "Character model for the RPG system.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 34
    },
    "dream_modules\\modules\\clan\\clan_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "shutdown",
            "name",
            "version",
            "description",
            "get_status",
            "register_dependency",
            "get_service_interface",
            "get_clan",
            "get_all_clans",
            "get_clans_by_rarity",
            "get_clan_bonuses",
            "get_clan_jutsu",
            "create_clan",
            "update_clan",
            "delete_clan",
            "_load_clans",
            "_save_all_clans"
        ],
        "classes": {
            "ClanManager": {
                "methods": [
                    "__init__",
                    "initialize",
                    "shutdown",
                    "name",
                    "version",
                    "description",
                    "get_status",
                    "register_dependency",
                    "get_service_interface",
                    "get_clan",
                    "get_all_clans",
                    "get_clans_by_rarity",
                    "get_clan_bonuses",
                    "get_clan_jutsu",
                    "create_clan",
                    "update_clan",
                    "delete_clan",
                    "_load_clans",
                    "_save_all_clans"
                ],
                "docstring": "Clan management service.\n\nThis service provides methods for managing clan data,\nincluding retrieval and updating of clan information.",
                "base_classes": [
                    "ServiceInterface"
                ]
            }
        },
        "routes": [],
        "complexity": 38
    },
    "dream_modules\\modules\\clan\\clan_model.py": {
        "language": ".py",
        "functions": [
            "to_dict",
            "from_dict",
            "to_json",
            "from_json",
            "get_stat_bonus",
            "set_stat_bonus",
            "add_starting_jutsu",
            "remove_starting_jutsu",
            "add_special_technique",
            "remove_special_technique"
        ],
        "classes": {
            "Clan": {
                "methods": [
                    "to_dict",
                    "from_dict",
                    "to_json",
                    "from_json",
                    "get_stat_bonus",
                    "set_stat_bonus",
                    "add_starting_jutsu",
                    "remove_starting_jutsu",
                    "add_special_technique",
                    "remove_special_technique"
                ],
                "docstring": "Clan model for the RPG system.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "dream_os\\social\\feedback\\db_setup.py": {
        "language": ".py",
        "functions": [
            "setup_database"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "dream_modules\\modules\\discord\\character_commands.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__init__",
            "__init__",
            "initialize",
            "shutdown",
            "name",
            "version",
            "description",
            "get_status",
            "register_dependency",
            "get_service_interface",
            "register_commands",
            "_create_character_embed",
            "__init__"
        ],
        "classes": {
            "DeleteConfirmationView": {
                "methods": [
                    "__init__"
                ],
                "docstring": "View for confirming character deletion.",
                "base_classes": [
                    "ui.View"
                ]
            },
            "CharacterNameModal": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Modal for entering character name during creation.",
                "base_classes": [
                    "ui.Modal"
                ]
            },
            "CharacterCommands": {
                "methods": [
                    "__init__",
                    "initialize",
                    "shutdown",
                    "name",
                    "version",
                    "description",
                    "get_status",
                    "register_dependency",
                    "get_service_interface",
                    "register_commands",
                    "_create_character_embed"
                ],
                "docstring": "Discord commands for character management.\n\nThis service provides Discord commands for managing characters,\nintegrating with the character and clan services.",
                "base_classes": [
                    "ServiceInterface"
                ]
            },
            "CreateOptionsView": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": [
                    "ui.View"
                ]
            }
        },
        "routes": [],
        "complexity": 28
    },
    "dream_os\\social\\feedback\\engagement_analyzer.py": {
        "language": ".py",
        "functions": [
            "calculate_engagement_rate",
            "calculate_velocity",
            "calculate_decay",
            "calculate_cross_platform_resonance",
            "calculate_composite_score",
            "suggest_tweaks",
            "analyze_post"
        ],
        "classes": {
            "EngagementAnalyzer": {
                "methods": [
                    "calculate_engagement_rate",
                    "calculate_velocity",
                    "calculate_decay",
                    "calculate_cross_platform_resonance",
                    "calculate_composite_score",
                    "suggest_tweaks",
                    "analyze_post"
                ],
                "docstring": "Analyzes normalized engagement metrics to calculate rates, velocity,\nscores, and suggest potential strategy tweaks.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "dream_os\\social\\feedback\\feedback_runner.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_posts_for_feedback",
            "close_db",
            "__del__",
            "__init__",
            "run_loop",
            "close_services",
            "__del__"
        ],
        "classes": {
            "DBRecentPostRegistry": {
                "methods": [
                    "__init__",
                    "get_posts_for_feedback",
                    "close_db",
                    "__del__"
                ],
                "docstring": "Registry that fetches recent posts from the FeedbackDB.",
                "base_classes": []
            },
            "FeedbackLoopRunner": {
                "methods": [
                    "__init__",
                    "run_loop",
                    "close_services",
                    "__del__"
                ],
                "docstring": "Orchestrates the Feedback Optimization Loop.\nFetches posts (via DBRegistry), runs feedback analysis via FeedbackService,\nand triggers strategy updates (via StrategyUpdater).",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "dream_os\\social\\feedback\\feedback_db.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_create_table",
            "save_post_feedback",
            "fetch_recent_feedback",
            "get_post_score",
            "get_platform_avg_score",
            "get_top_n_posts",
            "get_bottom_n_posts",
            "_get_posts_ordered_by_score",
            "close",
            "__del__"
        ],
        "classes": {
            "FeedbackDB": {
                "methods": [
                    "__init__",
                    "_create_table",
                    "save_post_feedback",
                    "fetch_recent_feedback",
                    "get_post_score",
                    "get_platform_avg_score",
                    "get_top_n_posts",
                    "get_bottom_n_posts",
                    "_get_posts_ordered_by_score",
                    "close",
                    "__del__"
                ],
                "docstring": "Manages persistence of post feedback data in an SQLite database.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "dream_os\\social\\feedback\\feedback_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_fetch_raw_metrics",
            "normalize_metrics",
            "score_post_performance",
            "update_feedback_db",
            "recommend_adjustments",
            "run_single_post_feedback",
            "close_db",
            "__del__"
        ],
        "classes": {
            "FeedbackService": {
                "methods": [
                    "__init__",
                    "_fetch_raw_metrics",
                    "normalize_metrics",
                    "score_post_performance",
                    "update_feedback_db",
                    "recommend_adjustments",
                    "run_single_post_feedback",
                    "close_db",
                    "__del__"
                ],
                "docstring": "Core engine for the Feedback Optimization Loop (FOL).\nIngests metrics, normalizes, scores, stores (via FeedbackDB),\nand recommends adjustments.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "dream_os\\social\\feedback\\fetchers.py": {
        "language": ".py",
        "functions": [
            "get_fetcher_for_platform",
            "__init__",
            "fetch_metrics",
            "__init__",
            "fetch_metrics",
            "__init__",
            "fetch_metrics"
        ],
        "classes": {
            "BaseFeedbackFetcher": {
                "methods": [
                    "__init__",
                    "fetch_metrics"
                ],
                "docstring": "Abstract base class for platform-specific feedback fetchers.",
                "base_classes": [
                    "ABC"
                ]
            },
            "MockTwitterFetcher": {
                "methods": [
                    "__init__",
                    "fetch_metrics"
                ],
                "docstring": "Mock fetcher for Twitter feedback data.",
                "base_classes": [
                    "BaseFeedbackFetcher"
                ]
            },
            "MockInstagramFetcher": {
                "methods": [
                    "__init__",
                    "fetch_metrics"
                ],
                "docstring": "Mock fetcher for Instagram feedback data.",
                "base_classes": [
                    "BaseFeedbackFetcher"
                ]
            }
        },
        "routes": [],
        "complexity": 13
    },
    "dream_os\\social\\feedback\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "examples\\context_synthesis_example.py": {
        "language": ".py",
        "functions": [
            "load_config",
            "simulate_web_scraping",
            "simulate_chat_history",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "examples\\task_queue_demo.py": {
        "language": ".py",
        "functions": [
            "create_demo_hooks",
            "example_task_success",
            "example_task_failure",
            "example_task_long_running",
            "run_demo"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "examples\\test_generation_example.py": {
        "language": ".py",
        "functions": [
            "setup_test_environment",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "interfaces\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "htmlcov\\coverage_html_cb_497bf287.js": {
        "language": ".js",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "interfaces\\pyqt\\bootstrap.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initUI",
            "closeEvent"
        ],
        "classes": {
            "DreamscapeGUI": {
                "methods": [
                    "__init__",
                    "initUI",
                    "closeEvent"
                ],
                "docstring": null,
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "interfaces\\pyqt\\DreamOsMainWindow.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_init_ui",
            "_enable_button_debugging",
            "_connect_tab_signals",
            "_create_menu_bar",
            "_reset_layout",
            "_show_about",
            "closeEvent",
            "_handle_queued_task",
            "_gather_task_context",
            "_gather_conversation_context",
            "_gather_project_context",
            "_build_task_prompt",
            "_build_action_specific_fallback",
            "_get_task_metrics",
            "_get_cursor_rules",
            "_on_recovery_dashboard_refresh"
        ],
        "classes": {
            "DreamOsMainWindow": {
                "methods": [
                    "__init__",
                    "_init_ui",
                    "_enable_button_debugging",
                    "_connect_tab_signals",
                    "_create_menu_bar",
                    "_reset_layout",
                    "_show_about",
                    "closeEvent",
                    "_handle_queued_task",
                    "_gather_task_context",
                    "_gather_conversation_context",
                    "_gather_project_context",
                    "_build_task_prompt",
                    "_build_action_specific_fallback",
                    "_get_task_metrics",
                    "_get_cursor_rules",
                    "_on_recovery_dashboard_refresh"
                ],
                "docstring": "Main window for the Dream.OS interface.",
                "base_classes": [
                    "QMainWindow"
                ]
            }
        },
        "routes": [],
        "complexity": 34
    },
    "interfaces\\pyqt\\dreamscape_gui.py": {
        "language": ".py",
        "functions": [
            "initialize_services",
            "initialize_community_manager",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "interfaces\\pyqt\\dreamscape_ui_logic.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "set_output_signal",
            "set_discord_log_signal",
            "set_status_update_signal",
            "_output",
            "_discord_log",
            "_update_status",
            "get_service",
            "is_service_available",
            "execute_prompt",
            "save_prompts",
            "reset_prompts",
            "execute_single_prompt",
            "run_single_chat_mode",
            "run_multi_chat_mode",
            "start_prompt_cycle",
            "load_prompt",
            "save_prompt",
            "launch_discord_bot",
            "stop_discord_bot",
            "run_prompt_tuning",
            "analyze_execution_response",
            "shutdown",
            "worker",
            "worker"
        ],
        "classes": {
            "DreamscapeUILogic": {
                "methods": [
                    "__init__",
                    "set_output_signal",
                    "set_discord_log_signal",
                    "set_status_update_signal",
                    "_output",
                    "_discord_log",
                    "_update_status",
                    "get_service",
                    "is_service_available",
                    "execute_prompt",
                    "save_prompts",
                    "reset_prompts",
                    "execute_single_prompt",
                    "run_single_chat_mode",
                    "run_multi_chat_mode",
                    "start_prompt_cycle",
                    "load_prompt",
                    "save_prompt",
                    "launch_discord_bot",
                    "stop_discord_bot",
                    "run_prompt_tuning",
                    "analyze_execution_response",
                    "shutdown"
                ],
                "docstring": "Bridges UI interactions with backend services.\nProvides async support and emits signals for UI updates.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 48
    },
    "interfaces\\pyqt\\dreamscape_services.py": {
        "language": ".py",
        "functions": [
            "find_project_root",
            "__init__",
            "_init_service",
            "_init_discord_service",
            "_init_task_orchestrator",
            "_create_empty_service",
            "_map_service_dependencies",
            "get_service",
            "set_service",
            "_log_initialization_status",
            "service_health_check",
            "shutdown",
            "create_chat_manager",
            "execute_prompt",
            "start_prompt_cycle",
            "load_prompt",
            "save_prompt",
            "reset_prompts",
            "launch_discord_bot",
            "stop_discord_bot",
            "send_discord_message",
            "send_discord_file",
            "send_discord_template",
            "get_discord_status",
            "get_dreamscape_context",
            "send_context_to_chatgpt",
            "schedule_context_updates",
            "analyze_execution_response",
            "discord",
            "discord",
            "bootstrap_services",
            "shutdown_all",
            "_initialize_dreamscape_generator",
            "__init__",
            "__getattr__",
            "is_empty_service",
            "method"
        ],
        "classes": {
            "DreamscapeService": {
                "methods": [
                    "__init__",
                    "_init_service",
                    "_init_discord_service",
                    "_init_task_orchestrator",
                    "_create_empty_service",
                    "_map_service_dependencies",
                    "get_service",
                    "set_service",
                    "_log_initialization_status",
                    "service_health_check",
                    "shutdown",
                    "create_chat_manager",
                    "execute_prompt",
                    "start_prompt_cycle",
                    "load_prompt",
                    "save_prompt",
                    "reset_prompts",
                    "launch_discord_bot",
                    "stop_discord_bot",
                    "send_discord_message",
                    "send_discord_file",
                    "send_discord_template",
                    "get_discord_status",
                    "get_dreamscape_context",
                    "send_context_to_chatgpt",
                    "schedule_context_updates",
                    "analyze_execution_response",
                    "discord",
                    "discord",
                    "bootstrap_services",
                    "shutdown_all",
                    "_initialize_dreamscape_generator"
                ],
                "docstring": "Central service class that encapsulates all core business logic.\nThis module has zero dependencies on any UI framework.\n\nDesign rationale:\n- Centralizes all business logic and service creation\n- Provides robust error handling for all service initialization\n- Implements fallback mechanisms with EmptyService implementations\n- Supports runtime service creation and health checks",
                "base_classes": []
            },
            "EmptyService": {
                "methods": [
                    "__init__",
                    "__getattr__",
                    "is_empty_service"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 72
    },
    "interfaces\\pyqt\\feedback_dashboard.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initUI",
            "refresh_dashboard",
            "update_display"
        ],
        "classes": {
            "FeedbackDashboard": {
                "methods": [
                    "__init__",
                    "initUI",
                    "refresh_dashboard",
                    "update_display"
                ],
                "docstring": null,
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "interfaces\\pyqt\\IntegratedMainWindow.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_wire_ui_actions",
            "on_execute_prompt",
            "on_save_prompt",
            "on_reset_prompts",
            "on_launch_discord_bot",
            "on_stop_discord_bot",
            "on_launch_dashboard",
            "append_output",
            "append_discord_log",
            "update_discord_status",
            "task"
        ],
        "classes": {
            "IntegratedMainWindow": {
                "methods": [
                    "__init__",
                    "_wire_ui_actions",
                    "on_execute_prompt",
                    "on_save_prompt",
                    "on_reset_prompts",
                    "on_launch_discord_bot",
                    "on_stop_discord_bot",
                    "on_launch_dashboard",
                    "append_output",
                    "append_discord_log",
                    "update_discord_status"
                ],
                "docstring": null,
                "base_classes": [
                    "DreamOsMainWindow"
                ]
            }
        },
        "routes": [],
        "complexity": 23
    },
    "interfaces\\pyqt\\GuiHelpers.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "setup_status_bar",
            "update_status_bar",
            "log_to_output",
            "read_file",
            "save_file",
            "show_info",
            "show_warning",
            "show_error",
            "confirm_action"
        ],
        "classes": {
            "GuiHelpers": {
                "methods": [
                    "__init__",
                    "setup_status_bar",
                    "update_status_bar",
                    "log_to_output",
                    "read_file",
                    "save_file",
                    "show_info",
                    "show_warning",
                    "show_error",
                    "confirm_action"
                ],
                "docstring": "Utility class for managing GUI-related helpers.\nHandles status bars, file operations, logging, and dialogs.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "interfaces\\pyqt\\orchestrator_bridge.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_register_event_handlers",
            "requeue_task",
            "execute_task",
            "refresh_tasks",
            "validate_task"
        ],
        "classes": {
            "OrchestratorBridge": {
                "methods": [
                    "__init__",
                    "_register_event_handlers",
                    "requeue_task",
                    "execute_task",
                    "refresh_tasks",
                    "validate_task"
                ],
                "docstring": "Bridge between PromptCycleOrchestrator events and Qt signals.\n\nThis class provides Qt signals that UI components can connect to, and\nregisters event handlers with the orchestrator to emit those signals.",
                "base_classes": [
                    "QObject"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "interfaces\\pyqt\\sip_patcher.py": {
        "language": ".py",
        "functions": [
            "patch_sip_imports",
            "patched_import"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "interfaces\\pyqt\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "interfaces\\pyqt\\__main__.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "interfaces\\pyqt\\components\\discord_tab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_connect_signals",
            "initUI",
            "_create_discord_group",
            "update_status",
            "append_log",
            "get_bot_config",
            "_on_task_done",
            "handle_discord_event",
            "handle_dreamscape_generated",
            "handle_prompt_executed"
        ],
        "classes": {
            "DiscordTab": {
                "methods": [
                    "__init__",
                    "_connect_signals",
                    "initUI",
                    "_create_discord_group",
                    "update_status",
                    "append_log",
                    "get_bot_config",
                    "_on_task_done",
                    "handle_discord_event",
                    "handle_dreamscape_generated",
                    "handle_prompt_executed"
                ],
                "docstring": null,
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 22
    },
    "interfaces\\pyqt\\components\\community_dashboard_tab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "setup_ui",
            "setup_overview_tab",
            "setup_insights_tab",
            "setup_community_tab",
            "setup_planning_tab",
            "refresh_data",
            "generate_insights",
            "generate_plan",
            "on_platform_changed",
            "on_focus_changed",
            "update_metrics_view",
            "update_insights_view",
            "update_members_view",
            "update_platform_status",
            "update_plan_view",
            "generate_content_strategy",
            "add_activity_log"
        ],
        "classes": {
            "CommunityDashboardTab": {
                "methods": [
                    "__init__",
                    "setup_ui",
                    "setup_overview_tab",
                    "setup_insights_tab",
                    "setup_community_tab",
                    "setup_planning_tab",
                    "refresh_data",
                    "generate_insights",
                    "generate_plan",
                    "on_platform_changed",
                    "on_focus_changed",
                    "update_metrics_view",
                    "update_insights_view",
                    "update_members_view",
                    "update_platform_status",
                    "update_plan_view",
                    "generate_content_strategy",
                    "add_activity_log"
                ],
                "docstring": "Provides a comprehensive dashboard for monitoring social media community metrics\nand insights across all platforms.",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 36
    },
    "interfaces\\pyqt\\components\\logs_panel.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initUI",
            "append_log",
            "clear_logs",
            "export_logs",
            "get_logs"
        ],
        "classes": {
            "LogsPanel": {
                "methods": [
                    "__init__",
                    "initUI",
                    "append_log",
                    "clear_logs",
                    "export_logs",
                    "get_logs"
                ],
                "docstring": null,
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "interfaces\\pyqt\\components\\prompt_panel.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "setup_ui",
            "load_sample_prompts",
            "_add_prompt_to_list",
            "on_prompt_selected",
            "save_prompt",
            "use_prompt",
            "add_custom_prompt",
            "remove_custom_prompt",
            "get_prompt_text",
            "set_prompt_text"
        ],
        "classes": {
            "PromptPanel": {
                "methods": [
                    "__init__",
                    "setup_ui",
                    "load_sample_prompts",
                    "_add_prompt_to_list",
                    "on_prompt_selected",
                    "save_prompt",
                    "use_prompt",
                    "add_custom_prompt",
                    "remove_custom_prompt",
                    "get_prompt_text",
                    "set_prompt_text"
                ],
                "docstring": "Panel for managing and executing prompts",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 22
    },
    "interfaces\\pyqt\\components\\logs_tab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initUI",
            "append_log",
            "clear_logs",
            "get_logs"
        ],
        "classes": {
            "LogsTab": {
                "methods": [
                    "__init__",
                    "initUI",
                    "append_log",
                    "clear_logs",
                    "get_logs"
                ],
                "docstring": null,
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "interfaces\\pyqt\\components\\prompt_execution_tab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initUI",
            "_create_exclusion_group",
            "_create_prompt_controls_group",
            "add_exclusion",
            "remove_exclusion",
            "get_excluded_chats",
            "update_execution_mode",
            "load_prompt"
        ],
        "classes": {
            "PromptExecutionTab": {
                "methods": [
                    "__init__",
                    "initUI",
                    "_create_exclusion_group",
                    "_create_prompt_controls_group",
                    "add_exclusion",
                    "remove_exclusion",
                    "get_excluded_chats",
                    "update_execution_mode",
                    "load_prompt"
                ],
                "docstring": null,
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 18
    },
    "interfaces\\pyqt\\components\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "interfaces\\pyqt\\components\\dialogs\\discord_settings.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initUI",
            "save_credentials",
            "map_prompt_to_channel",
            "unmap_selected_prompt",
            "refresh_prompt_channel_list"
        ],
        "classes": {
            "DiscordSettingsDialog": {
                "methods": [
                    "__init__",
                    "initUI",
                    "save_credentials",
                    "map_prompt_to_channel",
                    "unmap_selected_prompt",
                    "refresh_prompt_channel_list"
                ],
                "docstring": "Dialog window for configuring Discord bot settings and prompt channel mappings.",
                "base_classes": [
                    "QDialog"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "interfaces\\pyqt\\components\\dialogs\\exclusions_dialog.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initUI",
            "refresh_list",
            "add_exclusion",
            "remove_selected",
            "get_exclusions"
        ],
        "classes": {
            "ExclusionsDialog": {
                "methods": [
                    "__init__",
                    "initUI",
                    "refresh_list",
                    "add_exclusion",
                    "remove_selected",
                    "get_exclusions"
                ],
                "docstring": "Dialog window for managing excluded items (chats, users, etc.)",
                "base_classes": [
                    "QDialog"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "interfaces\\pyqt\\components\\dialogs\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "interfaces\\pyqt\\components\\digital_dreamscape\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "interfaces\\pyqt\\components\\dialogs\\reinforcement_dialog.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initUI",
            "load_feedback",
            "display_feedback_details",
            "export_feedback",
            "clear_feedback",
            "auto_tune_prompts"
        ],
        "classes": {
            "ReinforcementToolsDialog": {
                "methods": [
                    "__init__",
                    "initUI",
                    "load_feedback",
                    "display_feedback_details",
                    "export_feedback",
                    "clear_feedback",
                    "auto_tune_prompts"
                ],
                "docstring": "Dialog window for reinforcement learning tools.\nProvides prompt feedback review, tuning, and export functionality.",
                "base_classes": [
                    "QDialog"
                ]
            }
        },
        "routes": [],
        "complexity": 14
    },
    "interfaces\\pyqt\\services\\AdaptiveRecoveryService.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_strategies",
            "_save_strategies",
            "_update_performance_metrics",
            "_update_strategy_weight",
            "_calculate_action_avg_time",
            "get_next_recovery_action",
            "_get_valid_strategies",
            "update_strategy_performance",
            "get_strategy_insights",
            "_generate_recommendations"
        ],
        "classes": {
            "AdaptiveRecoveryService": {
                "methods": [
                    "__init__",
                    "_load_strategies",
                    "_save_strategies",
                    "_update_performance_metrics",
                    "_update_strategy_weight",
                    "_calculate_action_avg_time",
                    "get_next_recovery_action",
                    "_get_valid_strategies",
                    "update_strategy_performance",
                    "get_strategy_insights",
                    "_generate_recommendations"
                ],
                "docstring": "Service for optimizing recovery strategies based on historical performance.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "interfaces\\pyqt\\services\\GitManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_run_git_command",
            "get_status",
            "stage_file",
            "commit",
            "get_current_branch",
            "create_branch",
            "checkout_branch"
        ],
        "classes": {
            "GitManager": {
                "methods": [
                    "__init__",
                    "_run_git_command",
                    "get_status",
                    "stage_file",
                    "commit",
                    "get_current_branch",
                    "create_branch",
                    "checkout_branch"
                ],
                "docstring": "Service for managing Git operations and repository state.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "interfaces\\pyqt\\services\\MetricsService.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_metrics",
            "_save_metrics",
            "get_task_metrics",
            "update_task_metrics",
            "get_global_metrics",
            "_get_tasks_by_status",
            "_get_hourly_stats"
        ],
        "classes": {
            "MetricsService": {
                "methods": [
                    "__init__",
                    "_load_metrics",
                    "_save_metrics",
                    "get_task_metrics",
                    "update_task_metrics",
                    "get_global_metrics",
                    "_get_tasks_by_status",
                    "_get_hourly_stats"
                ],
                "docstring": "Service for tracking and analyzing task execution metrics.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "interfaces\\pyqt\\services\\ProjectScanner.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "scan_project",
            "load_cache",
            "_save_cache",
            "_scan_directory_structure",
            "_extract_classes",
            "_extract_functions",
            "_extract_imports",
            "get_analysis_summary"
        ],
        "classes": {
            "ProjectScanner": {
                "methods": [
                    "__init__",
                    "scan_project",
                    "load_cache",
                    "_save_cache",
                    "_scan_directory_structure",
                    "_extract_classes",
                    "_extract_functions",
                    "_extract_imports",
                    "get_analysis_summary"
                ],
                "docstring": "Service for analyzing the project structure and code to provide context\nfor AI prompts. Can scan the project or load cached results.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "interfaces\\pyqt\\services\\TabValidatorService.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "validate_all_tabs",
            "_validate_tab_factory",
            "get_validation_status",
            "get_error_details"
        ],
        "classes": {
            "TabValidatorService": {
                "methods": [
                    "__init__",
                    "validate_all_tabs",
                    "_validate_tab_factory",
                    "get_validation_status",
                    "get_error_details"
                ],
                "docstring": "Service for validating tab constructors and dependencies.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "interfaces\\pyqt\\services\\TestRunner.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "run_tests",
            "run_specific_test",
            "get_test_coverage"
        ],
        "classes": {
            "TestRunner": {
                "methods": [
                    "__init__",
                    "run_tests",
                    "run_specific_test",
                    "get_test_coverage"
                ],
                "docstring": "Service for running tests and managing test results.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "interfaces\\pyqt\\services\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "interfaces\\pyqt\\tabs\\AIDE.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_init_ui",
            "_connect_signals",
            "load_file_into_preview",
            "process_file",
            "self_heal",
            "run_tests",
            "on_scan_project",
            "send_prompt",
            "process_batch_files",
            "on_run_debug",
            "on_apply_fix",
            "on_rollback_fix",
            "on_cursor_execute",
            "on_add_task",
            "clear_task_form",
            "on_accept_next_task",
            "on_toggle_auto_accept",
            "_handle_cursor_manager_update",
            "_get_status_prefix",
            "_update_task_queue_display",
            "_update_task_item_status",
            "on_task_double_clicked",
            "_show_task_details",
            "_handle_context_menu",
            "on_automation_result",
            "on_cursor_code_generated",
            "append_output",
            "show_task_context_menu",
            "_extract_task_id",
            "_get_task_data",
            "_add_task_to_queue",
            "_requeue_task",
            "_cancel_task",
            "_boost_task_priority",
            "_improve_test_coverage",
            "progress_callback"
        ],
        "classes": {
            "AIDE": {
                "methods": [
                    "__init__",
                    "_init_ui",
                    "_connect_signals",
                    "load_file_into_preview",
                    "process_file",
                    "self_heal",
                    "run_tests",
                    "on_scan_project",
                    "send_prompt",
                    "process_batch_files",
                    "on_run_debug",
                    "on_apply_fix",
                    "on_rollback_fix",
                    "on_cursor_execute",
                    "on_add_task",
                    "clear_task_form",
                    "on_accept_next_task",
                    "on_toggle_auto_accept",
                    "_handle_cursor_manager_update",
                    "_get_status_prefix",
                    "_update_task_queue_display",
                    "_update_task_item_status",
                    "on_task_double_clicked",
                    "_show_task_details",
                    "_handle_context_menu",
                    "on_automation_result",
                    "on_cursor_code_generated",
                    "append_output",
                    "show_task_context_menu",
                    "_extract_task_id",
                    "_get_task_data",
                    "_add_task_to_queue",
                    "_requeue_task",
                    "_cancel_task",
                    "_boost_task_priority",
                    "_improve_test_coverage"
                ],
                "docstring": null,
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 73
    },
    "interfaces\\pyqt\\tabs\\ConfigurationTab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initUI",
            "_create_section_group",
            "open_exclusions_dialog",
            "open_discord_settings_dialog",
            "open_reinforcement_tools_dialog",
            "_retry_loading_dialogs",
            "log_action",
            "_show_error"
        ],
        "classes": {
            "ConfigurationTab": {
                "methods": [
                    "__init__",
                    "initUI",
                    "_create_section_group",
                    "open_exclusions_dialog",
                    "open_discord_settings_dialog",
                    "open_reinforcement_tools_dialog",
                    "_retry_loading_dialogs",
                    "log_action",
                    "_show_error"
                ],
                "docstring": "Configuration & Discord Settings tab.\nManages dialogs for exclusions, Discord setup, and reinforcement tools.",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 18
    },
    "interfaces\\pyqt\\tabs\\cursor_execution_tab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "run",
            "__init__",
            "init_ui",
            "_create_prompt_tab",
            "_create_sequence_tab",
            "_create_test_tab",
            "_create_git_tab",
            "_create_cursor_task_tab",
            "_create_task_history_tab",
            "load_templates",
            "load_sequences",
            "load_sequence_info",
            "execute_prompt",
            "run_sequence",
            "browse_test_file",
            "generate_tests",
            "run_tests",
            "install_git_hooks",
            "commit_changes",
            "log_message",
            "log_sequence_message",
            "log_test_message",
            "log_git_message",
            "update_progress",
            "execution_finished",
            "sequence_finished",
            "tests_generated",
            "tests_run",
            "git_operation_finished",
            "_load_cursor_templates",
            "_browse_cursor_target",
            "_create_cursor_task",
            "_refresh_cursor_tasks",
            "_delete_cursor_task",
            "_refresh_task_history",
            "_apply_task_filters",
            "_update_template_filter",
            "_view_task_details",
            "_delete_history_task",
            "_mark_task_complete",
            "__init__",
            "closeEvent",
            "execute_task",
            "execute_sequence_task",
            "generate_tests_task",
            "run_tests_task",
            "install_hooks_task",
            "commit_task"
        ],
        "classes": {
            "WorkerThread": {
                "methods": [
                    "__init__",
                    "run"
                ],
                "docstring": "Worker thread for executing tasks without blocking the UI.",
                "base_classes": [
                    "QThread"
                ]
            },
            "CursorExecutionTab": {
                "methods": [
                    "__init__",
                    "init_ui",
                    "_create_prompt_tab",
                    "_create_sequence_tab",
                    "_create_test_tab",
                    "_create_git_tab",
                    "_create_cursor_task_tab",
                    "_create_task_history_tab",
                    "load_templates",
                    "load_sequences",
                    "load_sequence_info",
                    "execute_prompt",
                    "run_sequence",
                    "browse_test_file",
                    "generate_tests",
                    "run_tests",
                    "install_git_hooks",
                    "commit_changes",
                    "log_message",
                    "log_sequence_message",
                    "log_test_message",
                    "log_git_message",
                    "update_progress",
                    "execution_finished",
                    "sequence_finished",
                    "tests_generated",
                    "tests_run",
                    "git_operation_finished",
                    "_load_cursor_templates",
                    "_browse_cursor_target",
                    "_create_cursor_task",
                    "_refresh_cursor_tasks",
                    "_delete_cursor_task",
                    "_refresh_task_history",
                    "_apply_task_filters",
                    "_update_template_filter",
                    "_view_task_details",
                    "_delete_history_task",
                    "_mark_task_complete"
                ],
                "docstring": "PyQt5 tab for executing and managing Cursor dispatching operations.\n\nProvides a GUI interface for:\n- Selecting and rendering templates (prompt execution)\n- Running prompt sequences\n- Generating and running tests\n- Performing Git operations (install hooks, commit changes)\n- *NEW* Direct Cursor Task Injection for automated processing",
                "base_classes": [
                    "QWidget"
                ]
            },
            "CursorExecutionWindow": {
                "methods": [
                    "__init__",
                    "closeEvent"
                ],
                "docstring": "Main window wrapper for CursorExecutionTab with proper close event handling.",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 92
    },
    "interfaces\\pyqt\\tabs\\cursor_prompt_preview_tab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "highlightBlock",
            "__init__",
            "setup_ui",
            "load_templates",
            "load_queued_tasks",
            "on_template_selected",
            "on_task_selected",
            "refresh_all",
            "render_preview",
            "save_changes",
            "execute_selected_task",
            "_extract_variables",
            "_clear_variables_form",
            "_add_variable_to_form",
            "_collect_variables_from_form",
            "_render_with_variables",
            "create"
        ],
        "classes": {
            "PromptSyntaxHighlighter": {
                "methods": [
                    "__init__",
                    "highlightBlock"
                ],
                "docstring": "Syntax highlighter for prompt templates and variables.",
                "base_classes": [
                    "QSyntaxHighlighter"
                ]
            },
            "CursorPromptPreviewTab": {
                "methods": [
                    "__init__",
                    "setup_ui",
                    "load_templates",
                    "load_queued_tasks",
                    "on_template_selected",
                    "on_task_selected",
                    "refresh_all",
                    "render_preview",
                    "save_changes",
                    "execute_selected_task",
                    "_extract_variables",
                    "_clear_variables_form",
                    "_add_variable_to_form",
                    "_collect_variables_from_form",
                    "_render_with_variables"
                ],
                "docstring": "Tab for previewing and modifying prompt templates and queued tasks.",
                "base_classes": [
                    "QWidget"
                ]
            },
            "CursorPromptPreviewTabFactory": {
                "methods": [
                    "create"
                ],
                "docstring": "Factory for creating CursorPromptPreviewTab instances.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 36
    },
    "interfaces\\pyqt\\tabs\\cursor_execution_tab_factory.py": {
        "language": ".py",
        "functions": [
            "create"
        ],
        "classes": {
            "CursorExecutionTabFactory": {
                "methods": [
                    "create"
                ],
                "docstring": "Factory class responsible for creating instances of CursorExecutionTab\nwith validated dependencies and proper initialization.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "interfaces\\pyqt\\tabs\\DependencyMapTab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "init_ui",
            "load_graph",
            "_on_load_finished",
            "generate_graph_html"
        ],
        "classes": {
            "DependencyMapTab": {
                "methods": [
                    "__init__",
                    "init_ui",
                    "load_graph",
                    "_on_load_finished",
                    "generate_graph_html"
                ],
                "docstring": null,
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "interfaces\\pyqt\\tabs\\dream_os_tab_factory.py": {
        "language": ".py",
        "functions": [
            "create",
            "create",
            "create"
        ],
        "classes": {
            "TaskStatusIntegrationFactory": {
                "methods": [
                    "create"
                ],
                "docstring": "Factory for creating task status tabs integrated with the orchestration system.",
                "base_classes": []
            },
            "PromptPreviewIntegrationFactory": {
                "methods": [
                    "create"
                ],
                "docstring": "Factory for creating prompt preview tabs integrated with the orchestration system.",
                "base_classes": []
            },
            "SuccessDashboardIntegrationFactory": {
                "methods": [
                    "create"
                ],
                "docstring": "Factory for creating success dashboard tabs integrated with the orchestration system.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "interfaces\\pyqt\\tabs\\draggable_prompt_board_tab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "init_ui",
            "setup_styling",
            "lighten_color",
            "mousePressEvent",
            "mouseMoveEvent",
            "edit_block",
            "__init__",
            "init_ui",
            "get_block_data",
            "__init__",
            "add_block",
            "clear_blocks",
            "get_sequence_data",
            "load_sequence_data",
            "dragEnterEvent",
            "dragMoveEvent",
            "dropEvent",
            "get_drop_position",
            "__init__",
            "_init_ui",
            "_init_subtab_ui",
            "_create_board_ui",
            "add_new_block",
            "add_template_block",
            "clear_board",
            "update_block_count",
            "load_sequence",
            "save_sequence",
            "save_sequence_as",
            "_save_to_file",
            "generate_from_context",
            "execute_sequence",
            "_simulate_block_execution",
            "create"
        ],
        "classes": {
            "PromptBlock": {
                "methods": [
                    "__init__",
                    "init_ui",
                    "setup_styling",
                    "lighten_color",
                    "mousePressEvent",
                    "mouseMoveEvent",
                    "edit_block"
                ],
                "docstring": "Draggable block representing a prompt component or action.",
                "base_classes": [
                    "QFrame"
                ]
            },
            "BlockEditDialog": {
                "methods": [
                    "__init__",
                    "init_ui",
                    "get_block_data"
                ],
                "docstring": "Dialog for editing a prompt block's properties.",
                "base_classes": [
                    "QDialog"
                ]
            },
            "PromptSequenceBoard": {
                "methods": [
                    "__init__",
                    "add_block",
                    "clear_blocks",
                    "get_sequence_data",
                    "load_sequence_data",
                    "dragEnterEvent",
                    "dragMoveEvent",
                    "dropEvent",
                    "get_drop_position"
                ],
                "docstring": "A board for arranging prompt blocks in sequence.",
                "base_classes": [
                    "QScrollArea"
                ]
            },
            "DraggablePromptBoardTab": {
                "methods": [
                    "__init__",
                    "_init_ui",
                    "_init_subtab_ui",
                    "_create_board_ui",
                    "add_new_block",
                    "add_template_block",
                    "clear_board",
                    "update_block_count",
                    "load_sequence",
                    "save_sequence",
                    "save_sequence_as",
                    "_save_to_file",
                    "generate_from_context",
                    "execute_sequence",
                    "_simulate_block_execution"
                ],
                "docstring": "Tab for managing and organizing prompts with drag and drop functionality.",
                "base_classes": [
                    "QWidget"
                ]
            },
            "DraggablePromptBoardTabFactory": {
                "methods": [
                    "create"
                ],
                "docstring": "Factory for creating DraggablePromptBoardTab with dependencies.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 70
    },
    "interfaces\\pyqt\\tabs\\LogsTab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initUI",
            "load_log_files",
            "load_selected_log",
            "filter_logs",
            "append_log",
            "append_output",
            "clear_logs"
        ],
        "classes": {
            "LogsTab": {
                "methods": [
                    "__init__",
                    "initUI",
                    "load_log_files",
                    "load_selected_log",
                    "filter_logs",
                    "append_log",
                    "append_output",
                    "clear_logs"
                ],
                "docstring": "Provides a unified interface for viewing, filtering, and managing logs.",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "interfaces\\pyqt\\tabs\\MainTabs.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "init_tabs",
            "cleanup",
            "_init_tabs",
            "_connect_signals",
            "_on_prompt_executed",
            "_on_dreamscape_generated",
            "_on_discord_event",
            "_on_debug_completed",
            "_on_cursor_code_generated",
            "_on_automation_result",
            "append_output",
            "broadcast_message"
        ],
        "classes": {
            "MainTabs": {
                "methods": [
                    "__init__",
                    "init_tabs",
                    "cleanup",
                    "_init_tabs",
                    "_connect_signals",
                    "_on_prompt_executed",
                    "_on_dreamscape_generated",
                    "_on_discord_event",
                    "_on_debug_completed",
                    "_on_cursor_code_generated",
                    "_on_automation_result",
                    "append_output",
                    "broadcast_message"
                ],
                "docstring": "Manages all tabs in the Dreamscape application, providing central control\nvia dependency injection and a SignalDispatcher for decoupled interactions.\n\nThis implementation uses a data-driven approach to initialize tabs,\nwhich improves readability and extensibility while retaining all original features.",
                "base_classes": [
                    "QTabWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 26
    },
    "interfaces\\pyqt\\tabs\\main_tab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_append_log",
            "_show_error",
            "setup_ui",
            "setup_log_handler",
            "closeEvent",
            "refresh_status",
            "restart_services",
            "clear_logs",
            "_process_task_queue",
            "_start_status_updates",
            "_update_status_display",
            "__init__",
            "emit"
        ],
        "classes": {
            "MainTab": {
                "methods": [
                    "__init__",
                    "_append_log",
                    "_show_error",
                    "setup_ui",
                    "setup_log_handler",
                    "closeEvent",
                    "refresh_status",
                    "restart_services",
                    "clear_logs",
                    "_process_task_queue",
                    "_start_status_updates",
                    "_update_status_display"
                ],
                "docstring": "Main tab for the Dream.OS interface.",
                "base_classes": [
                    "QWidget"
                ]
            },
            "QTextEditHandler": {
                "methods": [
                    "__init__",
                    "emit"
                ],
                "docstring": null,
                "base_classes": [
                    "logging.Handler"
                ]
            }
        },
        "routes": [],
        "complexity": 28
    },
    "interfaces\\pyqt\\tabs\\meredith_tab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "cancel",
            "run",
            "__init__",
            "init_ui",
            "load_entries",
            "on_entry_selected",
            "delete_selected_entry",
            "__init__",
            "init_ui",
            "populate_model_selector",
            "switch_model",
            "view_meritchain",
            "log",
            "run_full_scan",
            "stop_scan",
            "on_scan_completed",
            "populate_results_table",
            "open_profile_in_browser",
            "analyze_profile",
            "show_analysis_details",
            "export_results",
            "clear_results",
            "_reset_ui_for_new_scan",
            "toggle_visibility"
        ],
        "classes": {
            "ScraperThread": {
                "methods": [
                    "__init__",
                    "cancel",
                    "run"
                ],
                "docstring": "A separate QThread to perform the Meredith scraping process off the main UI thread.\nThis prevents UI blocking while ScraperManager runs.\n\nSignals:\n    scan_completed (list): Emitted when scraping+filtering completes or is canceled/errored.\n    log_update (str): Emitted for logging messages to the UI.\n    progress_update (int): Emitted for updating a progress bar (0-100).",
                "base_classes": [
                    "QThread"
                ]
            },
            "MeritChainViewDialog": {
                "methods": [
                    "__init__",
                    "init_ui",
                    "load_entries",
                    "on_entry_selected",
                    "delete_selected_entry"
                ],
                "docstring": "Dialog for viewing MeritChain entries.\nProvides a list of saved matches and a detailed view of the selected match.",
                "base_classes": [
                    "QDialog"
                ]
            },
            "MeredithTab": {
                "methods": [
                    "__init__",
                    "init_ui",
                    "populate_model_selector",
                    "switch_model",
                    "view_meritchain",
                    "log",
                    "run_full_scan",
                    "stop_scan",
                    "on_scan_completed",
                    "populate_results_table",
                    "open_profile_in_browser",
                    "analyze_profile",
                    "show_analysis_details",
                    "export_results",
                    "clear_results",
                    "_reset_ui_for_new_scan",
                    "toggle_visibility"
                ],
                "docstring": "A private PyQt5 tab that orchestrates:\n  - Running the Meredith scraping (in a background thread).\n  - Displaying progress logs and a progress bar.\n  - Showing the final filtered profiles in a QTableWidget.\n  - Exporting or clearing results.\n  - Providing a 'Message' button that opens each profile in your default browser.\n  - Displaying a \"Resonance Score\" computed via the ResonanceScorer.\n  - Dynamically loading available resonance models from a directory.\n  - Integrates the MeredithDispatcher to analyze profiles.\n  - Can be toggled visible/invisible if running in \"private mode.\"\n  - Provides access to view MeritChain entries.\n\nArgs:\n    services (Dict[str, Any]): Dictionary of shared services.\n    parent (QWidget): Parent widget, if any.\n    private_mode (bool): If True, the tab is hidden by default.",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 50
    },
    "interfaces\\pyqt\\tabs\\PromptExecutionTab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate",
            "__init__",
            "_init_ui",
            "_connect_signals",
            "log_output",
            "ensure_local_llm_loaded",
            "on_prompt_loaded",
            "_on_task_done",
            "__init__",
            "_init_ui",
            "log",
            "cancel_sync",
            "_on_sync_completed"
        ],
        "classes": {
            "LocalLLMWrapper": {
                "methods": [
                    "__init__",
                    "generate"
                ],
                "docstring": "Example local LLM wrapper for demonstration purposes.\nReplace the model name or adapt for other frameworks as needed.",
                "base_classes": []
            },
            "PromptExecutionTab": {
                "methods": [
                    "__init__",
                    "_init_ui",
                    "_connect_signals",
                    "log_output",
                    "ensure_local_llm_loaded",
                    "on_prompt_loaded",
                    "_on_task_done"
                ],
                "docstring": "Tab for executing prompts through various services.\nProvides a unified interface for prompt selection, editing, and execution.\nSupports both online and offline (local LLM) modes.",
                "base_classes": [
                    "QWidget"
                ]
            },
            "FullSyncTab": {
                "methods": [
                    "__init__",
                    "_init_ui",
                    "log",
                    "cancel_sync",
                    "_on_sync_completed"
                ],
                "docstring": "Tab interface for running and monitoring full sync operations.\nProvides visual feedback and control over the sync process.",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 28
    },
    "interfaces\\pyqt\\tabs\\settings_tab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_settings",
            "initUI",
            "_create_appearance_section",
            "_create_performance_section",
            "_create_advanced_section",
            "_choose_accent_color",
            "_update_accent_button_color",
            "save_settings",
            "reset_settings",
            "log_action",
            "_show_error"
        ],
        "classes": {
            "SettingsTab": {
                "methods": [
                    "__init__",
                    "_load_settings",
                    "initUI",
                    "_create_appearance_section",
                    "_create_performance_section",
                    "_create_advanced_section",
                    "_choose_accent_color",
                    "_update_accent_button_color",
                    "save_settings",
                    "reset_settings",
                    "log_action",
                    "_show_error"
                ],
                "docstring": "Settings tab for configuring application-wide preferences.\nManages themes, performance settings, and general configurations.",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 24
    },
    "interfaces\\pyqt\\tabs\\SocialDashboardTab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_defaults_from_env",
            "_load_defaults_from_config",
            "init_ui",
            "_create_platform_group",
            "test_platform_connection",
            "save_platform_credentials",
            "save_all_credentials",
            "_save_credentials_to_storage",
            "refresh_from_config",
            "_log_output"
        ],
        "classes": {
            "SocialDashboardTab": {
                "methods": [
                    "__init__",
                    "_load_defaults_from_env",
                    "_load_defaults_from_config",
                    "init_ui",
                    "_create_platform_group",
                    "test_platform_connection",
                    "save_platform_credentials",
                    "save_all_credentials",
                    "_save_credentials_to_storage",
                    "refresh_from_config",
                    "_log_output"
                ],
                "docstring": "A PyQt5 tab for managing social platform credentials (Discord, Twitter, etc).\nLoads defaults from environment variables and allows editing & saving.",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 22
    },
    "interfaces\\pyqt\\tabs\\success_dashboard_tab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "setup_ui",
            "create_summary_cards",
            "create_metric_card",
            "create_chart_widgets",
            "create_chart_container",
            "load_task_data",
            "on_task_execution_completed",
            "refresh_dashboard",
            "filter_tasks_by_period",
            "update_summary_metrics",
            "update_charts",
            "_update_success_rate_chart",
            "_update_exec_time_chart",
            "_update_error_types_chart",
            "_update_task_volume_chart",
            "update_details_table",
            "create"
        ],
        "classes": {
            "SuccessDashboardTab": {
                "methods": [
                    "__init__",
                    "setup_ui",
                    "create_summary_cards",
                    "create_metric_card",
                    "create_chart_widgets",
                    "create_chart_container",
                    "load_task_data",
                    "on_task_execution_completed",
                    "refresh_dashboard",
                    "filter_tasks_by_period",
                    "update_summary_metrics",
                    "update_charts",
                    "_update_success_rate_chart",
                    "_update_exec_time_chart",
                    "_update_error_types_chart",
                    "_update_task_volume_chart",
                    "update_details_table"
                ],
                "docstring": "Tab for visualizing task execution metrics and success rates.",
                "base_classes": [
                    "QWidget"
                ]
            },
            "SuccessDashboardTabFactory": {
                "methods": [
                    "create"
                ],
                "docstring": "Factory for creating SuccessDashboardTab instances.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 36
    },
    "interfaces\\pyqt\\tabs\\SyncOpsTab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_init_ui",
            "toggle_clock",
            "toggle_pomodoro",
            "update_pomodoro_timer",
            "_log_event",
            "save_session"
        ],
        "classes": {
            "SyncOpsTab": {
                "methods": [
                    "__init__",
                    "_init_ui",
                    "toggle_clock",
                    "toggle_pomodoro",
                    "update_pomodoro_timer",
                    "_log_event",
                    "save_session"
                ],
                "docstring": null,
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 14
    },
    "interfaces\\pyqt\\tabs\\task_history_modal.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_init_ui"
        ],
        "classes": {
            "TaskDetailsModal": {
                "methods": [
                    "__init__",
                    "_init_ui"
                ],
                "docstring": "Modal dialog for viewing task details from the task history.",
                "base_classes": [
                    "QDialog"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "interfaces\\pyqt\\tabs\\task_status_tab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "setup_ui",
            "update_task_data",
            "view_output_file",
            "requeue_task",
            "__init__",
            "_init_ui",
            "_init_subtab_ui",
            "_create_status_ui",
            "create"
        ],
        "classes": {
            "TaskStatusWidget": {
                "methods": [
                    "__init__",
                    "setup_ui",
                    "update_task_data",
                    "view_output_file",
                    "requeue_task"
                ],
                "docstring": "Widget for displaying a single task's status and details.",
                "base_classes": [
                    "QWidget"
                ]
            },
            "TaskStatusTab": {
                "methods": [
                    "__init__",
                    "_init_ui",
                    "_init_subtab_ui",
                    "_create_status_ui"
                ],
                "docstring": "Tab for displaying task statuses and management.",
                "base_classes": [
                    "QWidget"
                ]
            },
            "TaskStatusTabFactory": {
                "methods": [
                    "create"
                ],
                "docstring": "Factory for creating TaskStatusTab instances.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "interfaces\\pyqt\\tabs\\voice_mode_tab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_init_ui",
            "update_status",
            "log_event",
            "__init__",
            "_init_ui",
            "_populate_voices",
            "_apply_config",
            "__init__",
            "_init_ui",
            "_toggle_listening",
            "_start_listening",
            "_stop_listening",
            "_handle_voice_input",
            "_speak_last_reply",
            "_handle_voice_event",
            "_update_voice_config",
            "closeEvent",
            "listen_thread"
        ],
        "classes": {
            "VoiceStatusWidget": {
                "methods": [
                    "__init__",
                    "_init_ui",
                    "update_status",
                    "log_event"
                ],
                "docstring": "Widget displaying voice I/O status and events.",
                "base_classes": [
                    "QFrame"
                ]
            },
            "VoiceConfigWidget": {
                "methods": [
                    "__init__",
                    "_init_ui",
                    "_populate_voices",
                    "_apply_config"
                ],
                "docstring": "Widget for configuring voice I/O settings.",
                "base_classes": [
                    "QFrame"
                ]
            },
            "VoiceModeTab": {
                "methods": [
                    "__init__",
                    "_init_ui",
                    "_toggle_listening",
                    "_start_listening",
                    "_stop_listening",
                    "_handle_voice_input",
                    "_speak_last_reply",
                    "_handle_voice_event",
                    "_update_voice_config",
                    "closeEvent"
                ],
                "docstring": "Tab interface for voice-based interaction with Dream.OS.\n\nFeatures:\n- Voice input/output controls\n- Real-time status display\n- Voice configuration\n- Chat history view",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 37
    },
    "interfaces\\pyqt\\tabs\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "interfaces\\pyqt\\tabs\\aide\\debug_operations.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "on_run_debug",
            "on_apply_fix",
            "on_rollback_fix",
            "on_cursor_execute",
            "append_output"
        ],
        "classes": {
            "DebugOperationsHandler": {
                "methods": [
                    "__init__",
                    "on_run_debug",
                    "on_apply_fix",
                    "on_rollback_fix",
                    "on_cursor_execute",
                    "append_output"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "interfaces\\pyqt\\tabs\\aide\\file_operations.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_preview_widget",
            "load_file_into_preview",
            "process_file",
            "self_heal",
            "run_tests",
            "on_scan_project",
            "append_output",
            "progress_callback"
        ],
        "classes": {
            "FileOperationsHandler": {
                "methods": [
                    "__init__",
                    "create_preview_widget",
                    "load_file_into_preview",
                    "process_file",
                    "self_heal",
                    "run_tests",
                    "on_scan_project",
                    "append_output"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 17
    },
    "interfaces\\pyqt\\tabs\\aide\\main.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_init_ui",
            "_connect_signals",
            "on_automation_result",
            "on_cursor_code_generated",
            "append_output"
        ],
        "classes": {
            "AIDE": {
                "methods": [
                    "__init__",
                    "_init_ui",
                    "_connect_signals",
                    "on_automation_result",
                    "on_cursor_code_generated",
                    "append_output"
                ],
                "docstring": null,
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "interfaces\\pyqt\\tabs\\aide\\prompt_operations.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_prompt_widget",
            "send_prompt",
            "process_batch_files",
            "append_output"
        ],
        "classes": {
            "PromptOperationsHandler": {
                "methods": [
                    "__init__",
                    "create_prompt_widget",
                    "send_prompt",
                    "process_batch_files",
                    "append_output"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "interfaces\\pyqt\\tabs\\aide\\task_queue.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_task_queue_widget",
            "on_add_task",
            "clear_task_form",
            "on_accept_next_task",
            "on_toggle_auto_accept"
        ],
        "classes": {
            "TaskQueueHandler": {
                "methods": [
                    "__init__",
                    "create_task_queue_widget",
                    "on_add_task",
                    "clear_task_form",
                    "on_accept_next_task",
                    "on_toggle_auto_accept"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "interfaces\\pyqt\\tabs\\aide\\task_queue_operations.py": {
        "language": ".py",
        "functions": [
            "handle_cursor_manager_update",
            "get_status_prefix",
            "update_task_queue_display",
            "_update_task_item_status",
            "on_task_double_clicked",
            "_show_task_details",
            "show_task_context_menu",
            "_handle_context_menu",
            "_add_task_to_queue",
            "_requeue_task",
            "_cancel_task",
            "_boost_task_priority",
            "_improve_test_coverage",
            "_get_task_data",
            "append_output"
        ],
        "classes": {},
        "routes": [],
        "complexity": 15
    },
    "interfaces\\pyqt\\tabs\\aide\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "interfaces\\pyqt\\tabs\\chat_tab\\ChatTab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "setup_ui"
        ],
        "classes": {
            "ChatTab": {
                "methods": [
                    "__init__",
                    "setup_ui"
                ],
                "docstring": "Tab for chat interactions.",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "interfaces\\pyqt\\tabs\\chat_tab\\ChatTabManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_tab",
            "close_tab",
            "get_tabs"
        ],
        "classes": {
            "ChatTabManager": {
                "methods": [
                    "__init__",
                    "create_tab",
                    "close_tab",
                    "get_tabs"
                ],
                "docstring": "Manager for chat tabs.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "interfaces\\pyqt\\tabs\\chat_tab\\ChatTabWidget.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "add_tab",
            "_on_tab_close"
        ],
        "classes": {
            "ChatTabWidget": {
                "methods": [
                    "__init__",
                    "add_tab",
                    "_on_tab_close"
                ],
                "docstring": "Widget for managing chat tabs.",
                "base_classes": [
                    "QTabWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "interfaces\\pyqt\\tabs\\chat_tab\\ChatTabWidgetManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_new_tab",
            "get_widget"
        ],
        "classes": {
            "ChatTabWidgetManager": {
                "methods": [
                    "__init__",
                    "create_new_tab",
                    "get_widget"
                ],
                "docstring": "Manager for chat tab widgets.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "interfaces\\pyqt\\tabs\\chat_tab\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "interfaces\\pyqt\\tabs\\contextual_chat\\ContextualChatTab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_nested_service",
            "_setup_ui",
            "_connect_signals",
            "_load_initial_data",
            "_on_conversation_selected",
            "_load_conversation_history",
            "_on_send_clicked",
            "_on_auto_mode_toggled",
            "_run_automated_step",
            "_gather_local_context",
            "_build_prompt",
            "_on_cursor_task_update",
            "_append_llm_response",
            "_update_status_log",
            "closeEvent"
        ],
        "classes": {
            "ContextualChatTab": {
                "methods": [
                    "__init__",
                    "_get_nested_service",
                    "_setup_ui",
                    "_connect_signals",
                    "_load_initial_data",
                    "_on_conversation_selected",
                    "_load_conversation_history",
                    "_on_send_clicked",
                    "_on_auto_mode_toggled",
                    "_run_automated_step",
                    "_gather_local_context",
                    "_build_prompt",
                    "_on_cursor_task_update",
                    "_append_llm_response",
                    "_update_status_log",
                    "closeEvent"
                ],
                "docstring": "Main widget for the Contextual Chat Tab.\nOrchestrates conversation selection, history display, action execution,\nand optional automation\u2014now using CursorSessionManager for UI automation,\nand optionally ProjectScanner for project context.",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 32
    },
    "interfaces\\pyqt\\tabs\\contextual_chat\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "interfaces\\pyqt\\tabs\\dreamscape\\DreamscapeGenerationTab.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "DreamscapeTab": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Main tab for managing Dreamscape generation and interactions. (Merged Logic)",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "interfaces\\pyqt\\tabs\\dreamscape\\DreamscapeTab.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "DreamscapeTab": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Main tab for managing Dreamscape generation and interactions.",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "interfaces\\pyqt\\tabs\\dreamscape\\ServiceInitializer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize_services"
        ],
        "classes": {
            "ServiceInitializer": {
                "methods": [
                    "__init__",
                    "initialize_services"
                ],
                "docstring": "Handles initialization of services and components for the Dreamscape Generation tab.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "interfaces\\pyqt\\tabs\\dreamscape\\components\\ContextTree.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "setup_ui",
            "update_context",
            "_add_dict_to_tree",
            "_filter_tree",
            "_filter_item",
            "_set_item_visible",
            "clear"
        ],
        "classes": {
            "ContextTree": {
                "methods": [
                    "__init__",
                    "setup_ui",
                    "update_context",
                    "_add_dict_to_tree",
                    "_filter_tree",
                    "_filter_item",
                    "_set_item_visible",
                    "clear"
                ],
                "docstring": "Widget for displaying episode context in a tree structure.",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "interfaces\\pyqt\\tabs\\dreamscape\\components\\EpisodeList.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "setup_ui",
            "add_episode",
            "_on_episode_selected",
            "clear",
            "get_selected_episode"
        ],
        "classes": {
            "EpisodeList": {
                "methods": [
                    "__init__",
                    "setup_ui",
                    "add_episode",
                    "_on_episode_selected",
                    "clear",
                    "get_selected_episode"
                ],
                "docstring": "Widget for displaying and managing generated episodes.",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "interfaces\\pyqt\\tabs\\dreamscape\\components\\GenerationControls.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "setup_ui",
            "_connect_signals",
            "_on_generate_clicked",
            "_on_cancel_clicked",
            "_reset_buttons",
            "set_templates",
            "disable_feature",
            "_resolve_model_key"
        ],
        "classes": {
            "GenerationControls": {
                "methods": [
                    "__init__",
                    "setup_ui",
                    "_connect_signals",
                    "_on_generate_clicked",
                    "_on_cancel_clicked",
                    "_reset_buttons",
                    "set_templates",
                    "disable_feature",
                    "_resolve_model_key"
                ],
                "docstring": "Widget containing all controls for episode generation.",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 18
    },
    "interfaces\\pyqt\\tabs\\dreamscape\\components\\MemoryViewer.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "MemoryViewer": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "interfaces\\pyqt\\tabs\\dreamscape\\components\\OutputDisplay.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_initialize_ui_elements",
            "_build_ui",
            "bind_events",
            "append_log",
            "set_content",
            "get_content",
            "clear",
            "save_content"
        ],
        "classes": {
            "OutputDisplay": {
                "methods": [
                    "__init__",
                    "_initialize_ui_elements",
                    "_build_ui",
                    "bind_events",
                    "append_log",
                    "set_content",
                    "get_content",
                    "clear",
                    "save_content"
                ],
                "docstring": "Widget for displaying and managing generated episode output.",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 18
    },
    "interfaces\\pyqt\\tabs\\dreamscape\\components\\TemplateEditor.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "TemplateEditor": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "interfaces\\pyqt\\tabs\\dreamscape\\components\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "interfaces\\pyqt\\tabs\\metrics_viewer\\MetricsViewerTab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "plot_line",
            "plot_bar",
            "plot_heatmap",
            "__init__",
            "_init_ui",
            "refresh_data",
            "_update_performance_chart",
            "_update_distribution_chart",
            "_update_actions_table",
            "_update_tasks_table",
            "_update_insights"
        ],
        "classes": {
            "MetricsChart": {
                "methods": [
                    "__init__",
                    "plot_line",
                    "plot_bar",
                    "plot_heatmap"
                ],
                "docstring": "Widget for displaying metrics charts.",
                "base_classes": [
                    "QWidget"
                ]
            },
            "MetricsViewerTab": {
                "methods": [
                    "__init__",
                    "_init_ui",
                    "refresh_data",
                    "_update_performance_chart",
                    "_update_distribution_chart",
                    "_update_actions_table",
                    "_update_tasks_table",
                    "_update_insights"
                ],
                "docstring": "Tab for displaying and analyzing metrics.",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 24
    },
    "interfaces\\pyqt\\tabs\\prompt_sync\\PromptSyncTab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_init_ui",
            "_create_control_deck",
            "_connect_signals",
            "_update_service_status",
            "_update_status",
            "_handle_content_ready",
            "_handle_prompt_ready",
            "_handle_response_ready",
            "_handle_episode_saved",
            "_update_metrics",
            "_save_state",
            "_load_state",
            "closeEvent"
        ],
        "classes": {
            "PromptSyncTab": {
                "methods": [
                    "__init__",
                    "_init_ui",
                    "_create_control_deck",
                    "_connect_signals",
                    "_update_service_status",
                    "_update_status",
                    "_handle_content_ready",
                    "_handle_prompt_ready",
                    "_handle_response_ready",
                    "_handle_episode_saved",
                    "_update_metrics",
                    "_save_state",
                    "_load_state",
                    "closeEvent"
                ],
                "docstring": "Main tab for the Prompt Sync Engine\n\nFeatures:\n- Full prompt lifecycle management\n- Real-time status updates\n- Service dependency injection\n- State persistence",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 28
    },
    "interfaces\\pyqt\\tabs\\prompt_sync\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "interfaces\\pyqt\\tabs\\prompt_sync\\components\\EpisodePanel.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_metadata",
            "set_metadata",
            "__init__",
            "_init_ui",
            "_connect_signals",
            "set_content",
            "_update_word_count",
            "_save_episode",
            "_export_episode",
            "_dispatch_episode",
            "_save_to_file",
            "_export_to_file",
            "get_state"
        ],
        "classes": {
            "MetadataEditor": {
                "methods": [
                    "__init__",
                    "get_metadata",
                    "set_metadata"
                ],
                "docstring": "Widget for editing episode metadata.",
                "base_classes": [
                    "QWidget"
                ]
            },
            "EpisodePanel": {
                "methods": [
                    "__init__",
                    "_init_ui",
                    "_connect_signals",
                    "set_content",
                    "_update_word_count",
                    "_save_episode",
                    "_export_episode",
                    "_dispatch_episode",
                    "_save_to_file",
                    "_export_to_file",
                    "get_state"
                ],
                "docstring": "Episode Panel for content management and dispatching\n\nFeatures:\n- Content editing and formatting\n- Metadata management\n- Export options\n- Dispatch to various services",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 28
    },
    "interfaces\\pyqt\\tabs\\prompt_sync\\components\\IngestPanel.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_init_ui",
            "_connect_signals",
            "_handle_clear",
            "_handle_send",
            "_validate_url",
            "_update_preview_content",
            "_switch_preview",
            "_update_preview",
            "get_state",
            "restore_state"
        ],
        "classes": {
            "IngestPanel": {
                "methods": [
                    "__init__",
                    "_init_ui",
                    "_connect_signals",
                    "_handle_clear",
                    "_handle_send",
                    "_validate_url",
                    "_update_preview_content",
                    "_switch_preview",
                    "_update_preview",
                    "get_state",
                    "restore_state"
                ],
                "docstring": "Web Scraper Control Panel\n\nFeatures:\n- URL input with validation\n- Scraping options (metadata, content selection)\n- Live HTML preview\n- Cleansed content preview\n- Token estimation",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 22
    },
    "interfaces\\pyqt\\tabs\\prompt_sync\\components\\PromptPanel.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_create_format",
            "highlightBlock",
            "__init__",
            "_init_ui",
            "_connect_signals",
            "_on_model_changed",
            "set_content",
            "_load_templates",
            "_load_template",
            "_update_variables",
            "_update_preview",
            "_validate_prompt",
            "_resolve_model_key",
            "_send_prompt",
            "reload_template",
            "regenerate_prompt",
            "get_state",
            "restore_state"
        ],
        "classes": {
            "JinjaHighlighter": {
                "methods": [
                    "__init__",
                    "_create_format",
                    "highlightBlock"
                ],
                "docstring": "Syntax highlighter for Jinja2 templates.",
                "base_classes": [
                    "QSyntaxHighlighter"
                ]
            },
            "PromptPanel": {
                "methods": [
                    "__init__",
                    "_init_ui",
                    "_connect_signals",
                    "_on_model_changed",
                    "set_content",
                    "_load_templates",
                    "_load_template",
                    "_update_variables",
                    "_update_preview",
                    "_validate_prompt",
                    "_resolve_model_key",
                    "_send_prompt",
                    "reload_template",
                    "regenerate_prompt",
                    "get_state",
                    "restore_state"
                ],
                "docstring": "Prompt Template Panel\n\nFeatures:\n- Template selection and preview\n- Variable injection and validation\n- Rendered prompt preview\n- Token count estimation",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 38
    },
    "interfaces\\pyqt\\tabs\\prompt_sync\\components\\SyncPanel.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start",
            "stop",
            "reset",
            "_update_time",
            "update_tokens",
            "__init__",
            "_init_ui",
            "_connect_signals",
            "set_prompt",
            "_execute_prompt",
            "_stop_execution",
            "_clear_response",
            "_handle_token",
            "_handle_complete",
            "_handle_error",
            "_reset_ui_state",
            "get_state"
        ],
        "classes": {
            "ExecutionMetrics": {
                "methods": [
                    "__init__",
                    "start",
                    "stop",
                    "reset",
                    "_update_time",
                    "update_tokens"
                ],
                "docstring": "Widget for displaying execution metrics.",
                "base_classes": [
                    "QWidget"
                ]
            },
            "SyncPanel": {
                "methods": [
                    "__init__",
                    "_init_ui",
                    "_connect_signals",
                    "set_prompt",
                    "_execute_prompt",
                    "_stop_execution",
                    "_clear_response",
                    "_handle_token",
                    "_handle_complete",
                    "_handle_error",
                    "_reset_ui_state",
                    "get_state"
                ],
                "docstring": "Sync Panel for prompt execution and monitoring\n\nFeatures:\n- Real-time execution status\n- Token usage tracking\n- Response streaming\n- Execution metrics",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 36
    },
    "interfaces\\pyqt\\tabs\\prompt_sync\\components\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "interfaces\\pyqt\\tabs\\task_board\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "interfaces\\pyqt\\tabs\\task_board\\TaskBoardTab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_setup_ui",
            "upload_context",
            "scan_project",
            "add_sample_task",
            "queue_tasks"
        ],
        "classes": {
            "TaskBoardTab": {
                "methods": [
                    "__init__",
                    "_setup_ui",
                    "upload_context",
                    "scan_project",
                    "add_sample_task",
                    "queue_tasks"
                ],
                "docstring": "A tab widget for managing autonomous development tasks.\n\nThis tab provides functionality to:\n- Upload and display project context\n- Manage a sortable list of development tasks\n- Queue tasks for autonomous execution",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "interfaces\\pyqt\\tabs\\unified_dashboard\\UnifiedDashboardTab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_init_ui",
            "_setup_timer",
            "refresh_data",
            "_refresh_task_summary",
            "_refresh_metrics",
            "_refresh_insights",
            "_refresh_logs",
            "create",
            "_validate_services"
        ],
        "classes": {
            "UnifiedDashboardTab": {
                "methods": [
                    "__init__",
                    "_init_ui",
                    "_setup_timer",
                    "refresh_data",
                    "_refresh_task_summary",
                    "_refresh_metrics",
                    "_refresh_insights",
                    "_refresh_logs"
                ],
                "docstring": null,
                "base_classes": [
                    "QWidget"
                ]
            },
            "UnifiedDashboardTabFactory": {
                "methods": [
                    "create",
                    "_validate_services"
                ],
                "docstring": "Factory for creating UnifiedDashboardTab instances with validated dependencies.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "interfaces\\pyqt\\templates\\MultibotManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start_workers",
            "add_task",
            "wait_for_completion",
            "get_all_results",
            "shutdown",
            "mark_task_complete",
            "_update_progress",
            "_worker_status_update",
            "__enter__",
            "__exit__"
        ],
        "classes": {
            "MultibotManager": {
                "methods": [
                    "__init__",
                    "start_workers",
                    "add_task",
                    "wait_for_completion",
                    "get_all_results",
                    "shutdown",
                    "mark_task_complete",
                    "_update_progress",
                    "_worker_status_update",
                    "__enter__",
                    "__exit__"
                ],
                "docstring": "Manages a pool of BotWorker threads to process tasks asynchronously.\n\nUsage:\n    with MultibotManager(scanner, num_workers=4, status_callback=gui_callback) as manager:\n        manager.add_task(task)\n        manager.wait_for_completion()\n        results = manager.get_all_results()",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "interfaces\\pyqt\\templates\\main_window.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "init_ui",
            "load_file_into_preview",
            "closeEvent"
        ],
        "classes": {
            "MainWindow": {
                "methods": [
                    "__init__",
                    "init_ui",
                    "load_file_into_preview",
                    "closeEvent"
                ],
                "docstring": null,
                "base_classes": [
                    "QtWidgets.QMainWindow"
                ]
            }
        },
        "routes": [],
        "complexity": 9
    },
    "interfaces\\pyqt\\templates\\PluginManagerTab.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "init_ui",
            "refresh_table",
            "toggle_plugin",
            "reload_plugin",
            "reload_all_plugins",
            "show_message"
        ],
        "classes": {
            "PluginManagerTab": {
                "methods": [
                    "__init__",
                    "init_ui",
                    "refresh_table",
                    "toggle_plugin",
                    "reload_plugin",
                    "reload_all_plugins",
                    "show_message"
                ],
                "docstring": null,
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 14
    },
    "interfaces\\pyqt\\templates\\PreviewDialog.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "highlightBlock",
            "__init__",
            "save_override",
            "save_as",
            "backup_file",
            "copy_to_clipboard",
            "toggle_word_wrap",
            "show_message",
            "read_file",
            "show_diff"
        ],
        "classes": {
            "PythonSyntaxHighlighter": {
                "methods": [
                    "__init__",
                    "highlightBlock"
                ],
                "docstring": null,
                "base_classes": [
                    "QtGui.QSyntaxHighlighter"
                ]
            },
            "PreviewDialog": {
                "methods": [
                    "__init__",
                    "save_override",
                    "save_as",
                    "backup_file",
                    "copy_to_clipboard",
                    "toggle_word_wrap",
                    "show_message",
                    "read_file",
                    "show_diff"
                ],
                "docstring": null,
                "base_classes": [
                    "QDialog"
                ]
            }
        },
        "routes": [],
        "complexity": 22
    },
    "interfaces\\pyqt\\templates\\preview_panel.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "init_ui",
            "load_file",
            "process_file",
            "self_heal_file",
            "run_tests"
        ],
        "classes": {
            "PreviewPanel": {
                "methods": [
                    "__init__",
                    "init_ui",
                    "load_file",
                    "process_file",
                    "self_heal_file",
                    "run_tests"
                ],
                "docstring": null,
                "base_classes": [
                    "QtWidgets.QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "interfaces\\pyqt\\templates\\SelfHealRunner.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "run_and_validate",
            "read_file",
            "save_file",
            "__init__",
            "init_ui",
            "add_files",
            "start_self_heal",
            "cancel_self_heal",
            "log",
            "update_progress_bar",
            "__init__",
            "run",
            "_update_progress"
        ],
        "classes": {
            "SelfHealController": {
                "methods": [
                    "__init__",
                    "run_and_validate",
                    "read_file",
                    "save_file"
                ],
                "docstring": "Controller class encapsulating the self-healing logic.\nContains methods for running and validating a file, reading/saving files,\nand executing auto-retry logic.",
                "base_classes": []
            },
            "SelfHealRunner": {
                "methods": [
                    "__init__",
                    "init_ui",
                    "add_files",
                    "start_self_heal",
                    "cancel_self_heal",
                    "log",
                    "update_progress_bar"
                ],
                "docstring": null,
                "base_classes": [
                    "QtWidgets.QWidget"
                ]
            },
            "SelfHealWorker": {
                "methods": [
                    "__init__",
                    "run",
                    "_update_progress"
                ],
                "docstring": "QRunnable to process self-healing of a single file in the background.\nChecks for cancellation requests before and during processing.",
                "base_classes": [
                    "QtCore.QRunnable"
                ]
            }
        },
        "routes": [],
        "complexity": 28
    },
    "interfaces\\pyqt\\templates\\TestAgent.py": {
        "language": ".py",
        "functions": [
            "validate_test_code",
            "__init__",
            "run_full_test_cycle",
            "generate_and_run",
            "create_tests_for_file",
            "validate_test_file",
            "run_tests",
            "repair_tests",
            "get_test_file_path",
            "find_project_root"
        ],
        "classes": {
            "TestAgent": {
                "methods": [
                    "__init__",
                    "run_full_test_cycle",
                    "generate_and_run",
                    "create_tests_for_file",
                    "validate_test_file",
                    "run_tests",
                    "repair_tests",
                    "get_test_file_path",
                    "find_project_root"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 19
    },
    "interfaces\\pyqt\\templates\\Worker.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "run"
        ],
        "classes": {
            "Worker": {
                "methods": [
                    "__init__",
                    "run"
                ],
                "docstring": null,
                "base_classes": [
                    "QtCore.QThread"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "interfaces\\pyqt\\utils\\logging_config.py": {
        "language": ".py",
        "functions": [
            "configure_logging"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "interfaces\\pyqt\\templates\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "interfaces\\pyqt\\widgets\\assistant_mode_toggle_widget.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "init_ui",
            "toggle_assistant"
        ],
        "classes": {
            "AssistantModeToggleWidget": {
                "methods": [
                    "__init__",
                    "init_ui",
                    "toggle_assistant"
                ],
                "docstring": null,
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "interfaces\\pyqt\\widgets\\FileTableWidget.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "dragEnterEvent",
            "dropEvent",
            "add_folder_files",
            "add_file",
            "preview_prompt",
            "get_selected_files",
            "get_all_files",
            "start_processing",
            "log"
        ],
        "classes": {
            "FileTableWidget": {
                "methods": [
                    "__init__",
                    "dragEnterEvent",
                    "dropEvent",
                    "add_folder_files",
                    "add_file",
                    "preview_prompt",
                    "get_selected_files",
                    "get_all_files",
                    "start_processing",
                    "log"
                ],
                "docstring": null,
                "base_classes": [
                    "QtWidgets.QTableWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 20
    },
    "interfaces\\pyqt\\widgets\\TestAgentWidget.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "init_ui",
            "browse_files",
            "on_files_dropped",
            "add_files",
            "run_tests",
            "log",
            "__init__",
            "dragEnterEvent",
            "dropEvent",
            "_has_valid_files"
        ],
        "classes": {
            "TestAgentWidget": {
                "methods": [
                    "__init__",
                    "init_ui",
                    "browse_files",
                    "on_files_dropped",
                    "add_files",
                    "run_tests",
                    "log"
                ],
                "docstring": "Widget to select one or more Python files (or folders), generate tests using ChatGPT (or LLM),\nand run those tests.\n\nNOW WITH MULTI-FILE & FOLDER DRAG-AND-DROP SUPPORT!",
                "base_classes": [
                    "QtWidgets.QWidget"
                ]
            },
            "FileDropListWidget": {
                "methods": [
                    "__init__",
                    "dragEnterEvent",
                    "dropEvent",
                    "_has_valid_files"
                ],
                "docstring": "QListWidget subclass that accepts drag-and-drop file/folder paths.\nEmits files_dropped signal with a list of the dropped paths.",
                "base_classes": [
                    "QtWidgets.QListWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 22
    },
    "interfaces\\pyqt\\widgets\\RecoveryDashboardWidget.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "paintEvent",
            "__init__",
            "_init_ui",
            "_create_stat_box",
            "refresh_data",
            "_get_active_recovery_tasks",
            "_update_recovery_actions_table",
            "_update_stalled_tasks_table",
            "_get_action_trend_data",
            "_calculate_action_avg_time",
            "_get_action_last_used"
        ],
        "classes": {
            "SparklineWidget": {
                "methods": [
                    "__init__",
                    "paintEvent"
                ],
                "docstring": "Widget for displaying mini trend graphs.",
                "base_classes": [
                    "QWidget"
                ]
            },
            "RecoveryDashboardWidget": {
                "methods": [
                    "__init__",
                    "_init_ui",
                    "_create_stat_box",
                    "refresh_data",
                    "_get_active_recovery_tasks",
                    "_update_recovery_actions_table",
                    "_update_stalled_tasks_table",
                    "_get_action_trend_data",
                    "_calculate_action_avg_time",
                    "_get_action_last_used"
                ],
                "docstring": "Widget for displaying real-time recovery metrics and stall patterns.",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 24
    },
    "interfaces\\pyqt\\widgets\\file_browser_widget.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "startDrag",
            "__init__",
            "setup_ui",
            "populate_tree",
            "create_tree_item",
            "get_svg_icon_path",
            "get_file_icon_and_type",
            "add_placeholder",
            "on_item_expanded",
            "add_children",
            "on_item_double_clicked",
            "open_context_menu",
            "copy_path_to_clipboard",
            "reveal_in_explorer",
            "duplicate_file_or_folder",
            "create_new_file",
            "create_new_folder",
            "rename_item",
            "delete_item",
            "show_properties",
            "open_externally",
            "filter_tree",
            "show_status_message",
            "filter_item"
        ],
        "classes": {
            "FileTreeWidget": {
                "methods": [
                    "__init__",
                    "startDrag"
                ],
                "docstring": "A QTreeWidget subclass that supports internal drag-and-drop,\nmulti-selection, and folder dragging.",
                "base_classes": [
                    "QtWidgets.QTreeWidget"
                ]
            },
            "FileBrowserWidget": {
                "methods": [
                    "__init__",
                    "setup_ui",
                    "populate_tree",
                    "create_tree_item",
                    "get_svg_icon_path",
                    "get_file_icon_and_type",
                    "add_placeholder",
                    "on_item_expanded",
                    "add_children",
                    "on_item_double_clicked",
                    "open_context_menu",
                    "copy_path_to_clipboard",
                    "reveal_in_explorer",
                    "duplicate_file_or_folder",
                    "create_new_file",
                    "create_new_folder",
                    "rename_item",
                    "delete_item",
                    "show_properties",
                    "open_externally",
                    "filter_tree",
                    "show_status_message"
                ],
                "docstring": "Enhanced file browser widget with advanced filtering and context menu.",
                "base_classes": [
                    "QtWidgets.QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 49
    },
    "interfaces\\pyqt\\widgets\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "interfaces\\web\\dependencies.py": {
        "language": ".py",
        "functions": [
            "get_chat_agent",
            "get_memory_manager"
        ],
        "classes": {
            "Dependencies": {
                "methods": [
                    "get_chat_agent",
                    "get_memory_manager"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "interfaces\\web\\app.py": {
        "language": ".py",
        "functions": [
            "create_app"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "interfaces\\web\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "interfaces\\web\\routes\\chat_routes.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "ChatProcessingResponse": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "ChatProcessingRequest": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            }
        },
        "routes": [],
        "complexity": 0
    },
    "interfaces\\web\\routes\\memory_routes.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "MemoryStats": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "MemoryStatsResponse": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "Episode": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            },
            "RecentEpisodesResponse": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            }
        },
        "routes": [],
        "complexity": 0
    },
    "interfaces\\web\\routes\\system_routes.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "HealthResponse": {
                "methods": [],
                "docstring": null,
                "base_classes": [
                    "BaseModel"
                ]
            }
        },
        "routes": [],
        "complexity": 0
    },
    "interfaces\\web\\routes\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "micro_factories\\cursor_execution_tab_factory.py": {
        "language": ".py",
        "functions": [
            "create",
            "_validate_services"
        ],
        "classes": {
            "CursorExecutionTabFactory": {
                "methods": [
                    "create",
                    "_validate_services"
                ],
                "docstring": "Factory for creating CursorExecutionTab instances with validated dependencies.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 4
    },
    "scripts\\check_context_updates.py": {
        "language": ".py",
        "functions": [
            "setup_logging",
            "parse_args",
            "is_update_due",
            "update_schedule_after_run",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "scripts\\cursor_automation.py": {
        "language": ".py",
        "functions": [
            "execute_prompt",
            "__init__",
            "execute_task",
            "validate_task_result",
            "start_browser",
            "click_image",
            "take_screenshot",
            "type_text",
            "get_clipboard_content"
        ],
        "classes": {
            "CursorAutomation": {
                "methods": [
                    "__init__",
                    "execute_task",
                    "validate_task_result",
                    "start_browser",
                    "click_image",
                    "take_screenshot",
                    "type_text",
                    "get_clipboard_content"
                ],
                "docstring": "DEPRECATED: Compatibility wrapper for CursorUIService.\n\nThis class is maintained for backward compatibility. New code should use\ncore.services.cursor_ui_service.CursorUIService directly.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 17
    },
    "scripts\\dispatch_all_prompts.py": {
        "language": ".py",
        "functions": [
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "scripts\\orchestration_flow.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "_on_scan_complete",
            "scan_project",
            "generate_tasks_from_context",
            "execute_tasks",
            "validate_and_requeue_tasks",
            "run_complete_flow"
        ],
        "classes": {
            "OrchestrationFlow": {
                "methods": [
                    "__init__",
                    "_on_scan_complete",
                    "scan_project",
                    "generate_tasks_from_context",
                    "execute_tasks",
                    "validate_and_requeue_tasks",
                    "run_complete_flow"
                ],
                "docstring": "Implements the complete prompt orchestration flow by integrating the\nProjectContextScanner, PromptExecutionService, and CursorUIService components.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 15
    },
    "scripts\\run_dreamscape.py": {
        "language": ".py",
        "functions": [
            "setup_logging",
            "parse_args",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "scripts\\run_dreamscape_integration_test.py": {
        "language": ".py",
        "functions": [
            "run_tests"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "scripts\\run_full_sync_queue.py": {
        "language": ".py",
        "functions": [
            "run_cursor_queue",
            "run_all_queues",
            "run_queue",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "scripts\\setup.py": {
        "language": ".py",
        "functions": [
            "create_directories",
            "create_empty_init_files",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "scripts\\run_with_enhanced_driver.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "get"
        ],
        "classes": {
            "Config": {
                "methods": [
                    "__init__",
                    "get"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 5
    },
    "scripts\\task_inspector.py": {
        "language": ".py",
        "functions": [
            "load_tasks",
            "display_task_summary",
            "display_task_details",
            "save_task_output",
            "delete_task",
            "repair_memory_file",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 7
    },
    "scripts\\task_watcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "run",
            "check_for_tasks",
            "process_task",
            "update_task_in_memory"
        ],
        "classes": {
            "TaskWatcher": {
                "methods": [
                    "__init__",
                    "run",
                    "check_for_tasks",
                    "process_task",
                    "update_task_in_memory"
                ],
                "docstring": "Watches for Cursor tasks and manages auto-execution.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "scripts\\update_dreamscape_imports.py": {
        "language": ".py",
        "functions": [
            "find_files_with_old_import",
            "backup_file",
            "update_imports",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "scripts\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "scripts\\refactor\\project_scanner.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "scan_project",
            "_collect_python_files",
            "_analyze_file",
            "_extract_imports",
            "_extract_classes",
            "_extract_functions",
            "_get_name",
            "_determine_file_type",
            "_build_dependency_graph",
            "_map_tests_to_implementations",
            "_generate_analysis_json",
            "save_analysis"
        ],
        "classes": {
            "ImportInfo": {
                "methods": [],
                "docstring": "Information about module imports.",
                "base_classes": []
            },
            "FunctionInfo": {
                "methods": [],
                "docstring": "Information about function definitions.",
                "base_classes": []
            },
            "ClassInfo": {
                "methods": [],
                "docstring": "Information about class definitions.",
                "base_classes": []
            },
            "FileAnalysis": {
                "methods": [],
                "docstring": "Complete analysis of a Python file.",
                "base_classes": []
            },
            "ProjectScanner": {
                "methods": [
                    "__init__",
                    "scan_project",
                    "_collect_python_files",
                    "_analyze_file",
                    "_extract_imports",
                    "_extract_classes",
                    "_extract_functions",
                    "_get_name",
                    "_determine_file_type",
                    "_build_dependency_graph",
                    "_map_tests_to_implementations",
                    "_generate_analysis_json",
                    "save_analysis"
                ],
                "docstring": "Analyzes Dream.OS codebase to generate intelligence maps.\n\nFeatures:\n- AST-based code analysis\n- Import dependency tracking\n- Test coverage mapping\n- File categorization\n- Usage pattern detection",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 27
    },
    "scripts\\refactor\\setup.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "scripts\\refactor\\examples\\scan_dream_os.py": {
        "language": ".py",
        "functions": [
            "analyze_dream_os",
            "display_summary",
            "display_test_analysis",
            "display_agent_analysis",
            "display_dependency_analysis",
            "display_quality_analysis"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "scripts\\refactor\\scanner\\cli.py": {
        "language": ".py",
        "functions": [
            "setup_logging",
            "parse_args",
            "display_summary",
            "display_focused_results",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "scripts\\refactor\\scanner\\models.py": {
        "language": ".py",
        "functions": [],
        "classes": {
            "ImportInfo": {
                "methods": [],
                "docstring": "Information about module imports.",
                "base_classes": []
            },
            "FunctionInfo": {
                "methods": [],
                "docstring": "Detailed information about function definitions.",
                "base_classes": []
            },
            "ClassInfo": {
                "methods": [],
                "docstring": "Detailed information about class definitions.",
                "base_classes": []
            },
            "FileAnalysis": {
                "methods": [],
                "docstring": "Complete analysis of a source file.",
                "base_classes": []
            },
            "DependencyNode": {
                "methods": [],
                "docstring": "Node in the dependency graph.",
                "base_classes": []
            },
            "ProjectMetrics": {
                "methods": [],
                "docstring": "Project-wide metrics and statistics.",
                "base_classes": []
            },
            "ScannerCache": {
                "methods": [],
                "docstring": "Cache for incremental scanning.",
                "base_classes": []
            },
            "ProjectContext": {
                "methods": [],
                "docstring": "Complete project context for LLM interactions.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 0
    },
    "scripts\\refactor\\scanner\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "scripts\\refactor\\scanner\\core\\agent_map.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "map_agents",
            "_is_agent_class",
            "_create_agent_profile",
            "_determine_agent_type",
            "_identify_capabilities",
            "_calculate_complexity",
            "_calculate_documentation_score",
            "_determine_maturity",
            "_analyze_agent_relationships",
            "get_agent_metrics",
            "suggest_improvements"
        ],
        "classes": {
            "AgentType": {
                "methods": [],
                "docstring": "Classification of agent types in the system.",
                "base_classes": [
                    "Enum"
                ]
            },
            "AgentMaturity": {
                "methods": [],
                "docstring": "Maturity level of an agent implementation.",
                "base_classes": [
                    "Enum"
                ]
            },
            "AgentProfile": {
                "methods": [],
                "docstring": "Detailed profile of an agent in the system.",
                "base_classes": []
            },
            "AgentMapper": {
                "methods": [
                    "__init__",
                    "map_agents",
                    "_is_agent_class",
                    "_create_agent_profile",
                    "_determine_agent_type",
                    "_identify_capabilities",
                    "_calculate_complexity",
                    "_calculate_documentation_score",
                    "_determine_maturity",
                    "_analyze_agent_relationships",
                    "get_agent_metrics",
                    "suggest_improvements"
                ],
                "docstring": "Maps and analyzes agent-related code in the project.\nProvides insights into agent architecture and suggests improvements.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "scripts\\refactor\\scanner\\core\\deep_ast.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "enrich_analysis",
            "_extract_imports",
            "_extract_functions",
            "_extract_classes",
            "_format_annotation",
            "_format_decorator",
            "_calculate_complexity",
            "_calculate_function_complexity",
            "_determine_file_type"
        ],
        "classes": {
            "DeepASTAnalyzer": {
                "methods": [
                    "__init__",
                    "enrich_analysis",
                    "_extract_imports",
                    "_extract_functions",
                    "_extract_classes",
                    "_format_annotation",
                    "_format_decorator",
                    "_calculate_complexity",
                    "_calculate_function_complexity",
                    "_determine_file_type"
                ],
                "docstring": "Enhanced AST analyzer that extracts detailed metadata from Python source files.\nIntegrates with existing analysis to provide deeper insights.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "scripts\\refactor\\scanner\\core\\dependency_map.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "build_graph",
            "_resolve_import_path",
            "_detect_cycles",
            "get_node_metrics",
            "get_high_risk_imports",
            "suggest_refactors",
            "strongconnect"
        ],
        "classes": {
            "DependencyMapper": {
                "methods": [
                    "__init__",
                    "build_graph",
                    "_resolve_import_path",
                    "_detect_cycles",
                    "get_node_metrics",
                    "get_high_risk_imports",
                    "suggest_refactors"
                ],
                "docstring": "Builds and analyzes the project's import dependency graph.\nDetects circular dependencies and provides import path resolution.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 15
    },
    "scripts\\refactor\\scanner\\core\\test_mapper.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "map_tests",
            "_find_implementation",
            "_create_test_mapping",
            "_update_metrics",
            "get_test_metrics",
            "suggest_missing_tests"
        ],
        "classes": {
            "TestMapping": {
                "methods": [],
                "docstring": "Mapping between test and implementation.",
                "base_classes": []
            },
            "TestMapper": {
                "methods": [
                    "__init__",
                    "map_tests",
                    "_find_implementation",
                    "_create_test_mapping",
                    "_update_metrics",
                    "get_test_metrics",
                    "suggest_missing_tests"
                ],
                "docstring": "Maps relationships between test files and their implementations.\nAnalyzes test coverage and suggests missing tests.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "scripts\\refactor\\scanner\\core\\scanner.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "scan_project",
            "_perform_ast_analysis",
            "_is_cached",
            "_generate_insights",
            "_analyze_code_quality",
            "_identify_optimizations",
            "_find_duplicate_patterns",
            "_find_complex_inheritance",
            "_find_underutilized_code",
            "_prepare_report",
            "_compile_suggestions",
            "save_report",
            "get_file_analysis",
            "get_summary_stats"
        ],
        "classes": {
            "IntelligenceScanner": {
                "methods": [
                    "__init__",
                    "scan_project",
                    "_perform_ast_analysis",
                    "_is_cached",
                    "_generate_insights",
                    "_analyze_code_quality",
                    "_identify_optimizations",
                    "_find_duplicate_patterns",
                    "_find_complex_inheritance",
                    "_find_underutilized_code",
                    "_prepare_report",
                    "_compile_suggestions",
                    "save_report",
                    "get_file_analysis",
                    "get_summary_stats"
                ],
                "docstring": "Core scanner that orchestrates the analysis of the Dream.OS codebase.\nCoordinates specialized mappers and aggregates their insights.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 30
    },
    "scripts\\refactor\\scanner\\exporters\\high_value_target_writer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "process_report",
            "_process_test_insights",
            "_process_dependency_insights",
            "_process_agent_insights",
            "_process_quality_insights",
            "_add_or_update_target",
            "save_targets",
            "get_top_targets"
        ],
        "classes": {
            "HighValueTarget": {
                "methods": [],
                "docstring": "A file that needs attention with reasons and suggestions.",
                "base_classes": []
            },
            "HighValueTargetWriter": {
                "methods": [
                    "__init__",
                    "process_report",
                    "_process_test_insights",
                    "_process_dependency_insights",
                    "_process_agent_insights",
                    "_process_quality_insights",
                    "_add_or_update_target",
                    "save_targets",
                    "get_top_targets"
                ],
                "docstring": "Analyzes scanner results to identify high-value targets for improvement.\nOutputs prioritized list of files that need attention.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "scripts\\refactor\\scanner\\postprocessors\\prompt_task_generator.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate_tasks",
            "_generate_test_tasks",
            "_generate_dependency_tasks",
            "_generate_agent_tasks",
            "_generate_quality_tasks",
            "save_tasks",
            "_get_untested_functions",
            "_get_test_file_path",
            "_get_dependency_recommendation"
        ],
        "classes": {
            "CursorTask": {
                "methods": [],
                "docstring": "Structured task for Cursor prompt generation.",
                "base_classes": []
            },
            "PromptTaskGenerator": {
                "methods": [
                    "__init__",
                    "generate_tasks",
                    "_generate_test_tasks",
                    "_generate_dependency_tasks",
                    "_generate_agent_tasks",
                    "_generate_quality_tasks",
                    "save_tasks",
                    "_get_untested_functions",
                    "_get_test_file_path",
                    "_get_dependency_recommendation"
                ],
                "docstring": "Generates Cursor prompt tasks from scanner insights.\nTasks are saved as JSON files in .cursor/queued_tasks/.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 20
    },
    "scripts\\refactor\\tests\\scanner\\test_agent_map.py": {
        "language": ".py",
        "functions": [
            "mapper",
            "test_project",
            "test_identify_agent_files",
            "test_extract_agent_class",
            "test_analyze_agent_capabilities",
            "test_determine_agent_maturity",
            "test_analyze_agent_interactions",
            "test_identify_missing_capabilities",
            "test_validate_agent_interface",
            "test_analyze_error_handling",
            "test_analyze_async_patterns",
            "test_generate_agent_profile",
            "test_analyze_project",
            "test_suggest_improvements",
            "test_export_agent_documentation"
        ],
        "classes": {},
        "routes": [],
        "complexity": 15
    },
    "scripts\\refactor\\tests\\scanner\\test_deep_ast.py": {
        "language": ".py",
        "functions": [
            "analyzer",
            "test_analyze_simple_function",
            "test_analyze_class_with_methods",
            "test_analyze_complex_file",
            "test_calculate_complexity",
            "test_determine_file_type",
            "test_format_annotation",
            "test_format_decorator",
            "test_enrich_analysis"
        ],
        "classes": {},
        "routes": [],
        "complexity": 9
    },
    "scripts\\refactor\\tests\\scanner\\test_dependency_map.py": {
        "language": ".py",
        "functions": [
            "mapper",
            "test_project",
            "test_extract_imports",
            "test_resolve_relative_import",
            "test_build_dependency_graph",
            "test_detect_circular_dependencies",
            "test_calculate_coupling_metrics",
            "test_identify_high_risk_imports",
            "test_analyze_project",
            "test_filter_stdlib_imports",
            "test_get_module_dependencies",
            "test_export_graph"
        ],
        "classes": {},
        "routes": [],
        "complexity": 12
    },
    "scripts\\refactor\\tests\\scanner\\test_scanner.py": {
        "language": ".py",
        "functions": [
            "scanner",
            "test_project",
            "test_initialize_scanner",
            "test_scan_project",
            "test_incremental_scanning",
            "test_perform_ast_analysis",
            "test_is_cached",
            "test_generate_insights",
            "test_analyze_code_quality",
            "test_identify_optimizations",
            "test_prepare_report",
            "test_save_report",
            "test_get_file_analysis",
            "test_get_summary_stats",
            "test_error_handling",
            "test_concurrent_scanning"
        ],
        "classes": {},
        "routes": [],
        "complexity": 16
    },
    "scripts\\refactor\\tests\\scanner\\test_test_mapper.py": {
        "language": ".py",
        "functions": [
            "mapper",
            "test_project",
            "test_identify_test_files",
            "test_extract_test_functions",
            "test_map_tests_to_implementation",
            "test_analyze_test_quality",
            "test_identify_untested_elements",
            "test_calculate_coverage",
            "test_run_tests",
            "test_analyze_async_tests",
            "test_analyze_fixtures",
            "test_generate_missing_test_template",
            "test_analyze_project",
            "test_suggest_test_improvements",
            "test_export_coverage_report"
        ],
        "classes": {},
        "routes": [],
        "complexity": 15
    },
    "social\\AIChatAgent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "ask",
            "_ask_openai",
            "_ask_ollama",
            "_build_prompt",
            "_initialize_chat_thread",
            "append_to_chat_thread",
            "_log_interaction"
        ],
        "classes": {
            "AIChatAgent": {
                "methods": [
                    "__init__",
                    "ask",
                    "_ask_openai",
                    "_ask_ollama",
                    "_build_prompt",
                    "_initialize_chat_thread",
                    "append_to_chat_thread",
                    "_log_interaction"
                ],
                "docstring": "AIChatAgent: Unified AI assistant optimized for context-rich, personalized interactions in Victor's voice.\nSupports OpenAI, local LLMs (Ollama), automatic ChatGPT thread creation, persistent memory logging, and fine-tuning dataset preparation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "social\\CommunityIntegrationManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_check_platform_credentials",
            "_initialize_platforms",
            "_load_strategies",
            "_load_platform_status",
            "_save_platform_status",
            "get_available_platforms",
            "get_platform",
            "get_all_platforms",
            "enable_platform",
            "disable_platform",
            "connect_platform",
            "disconnect_platform",
            "run_daily_community_management",
            "_connect_enabled_platforms",
            "_collect_metrics",
            "analyze_community_health",
            "generate_insights_and_recommendations",
            "create_community_building_plan",
            "post_content",
            "identify_advocates",
            "track_member_interactions"
        ],
        "classes": {
            "CommunityIntegrationManager": {
                "methods": [
                    "__init__",
                    "_check_platform_credentials",
                    "_initialize_platforms",
                    "_load_strategies",
                    "_load_platform_status",
                    "_save_platform_status",
                    "get_available_platforms",
                    "get_platform",
                    "get_all_platforms",
                    "enable_platform",
                    "disable_platform",
                    "connect_platform",
                    "disconnect_platform",
                    "run_daily_community_management",
                    "_connect_enabled_platforms",
                    "_collect_metrics",
                    "analyze_community_health",
                    "generate_insights_and_recommendations",
                    "create_community_building_plan",
                    "post_content",
                    "identify_advocates",
                    "track_member_interactions"
                ],
                "docstring": "Manages integrations with various social platforms, handles authentication,\nand provides a unified interface for community building.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 44
    },
    "social\\community_integration.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_initialize_strategies",
            "_initialize_dashboard",
            "_initialize_post_manager",
            "analyze_community_health",
            "generate_insights_and_recommendations",
            "create_community_building_plan",
            "identify_advocates",
            "post_across_platforms",
            "track_member_interaction",
            "optimize_platform_strategies",
            "generate_visualizations",
            "run_daily_community_management"
        ],
        "classes": {
            "CommunityIntegrationManager": {
                "methods": [
                    "__init__",
                    "_initialize_strategies",
                    "_initialize_dashboard",
                    "_initialize_post_manager",
                    "analyze_community_health",
                    "generate_insights_and_recommendations",
                    "create_community_building_plan",
                    "identify_advocates",
                    "post_across_platforms",
                    "track_member_interaction",
                    "optimize_platform_strategies",
                    "generate_visualizations",
                    "run_daily_community_management"
                ],
                "docstring": "Integrates all social media platforms with the unified community dashboard.\n\nThis class serves as the main entry point for community management,\nconnecting platform-specific strategies with unified analytics and reporting.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "social\\DriverSession.py": {
        "language": ".py",
        "functions": [
            "get_multi_driver_sessions",
            "__init__",
            "initialize_driver",
            "_build_chrome_options",
            "_apply_stealth_settings",
            "shutdown_driver",
            "cleanup_profile",
            "restart_driver",
            "_get_profile_dir"
        ],
        "classes": {
            "DriverSession": {
                "methods": [
                    "__init__",
                    "initialize_driver",
                    "_build_chrome_options",
                    "_apply_stealth_settings",
                    "shutdown_driver",
                    "cleanup_profile",
                    "restart_driver",
                    "_get_profile_dir"
                ],
                "docstring": "Manages a single Selenium WebDriver session.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 17
    },
    "social\\platform_login_manager.py": {
        "language": ".py",
        "functions": [
            "load_cookies",
            "save_cookies",
            "wait_for_manual_login",
            "__init__",
            "login",
            "post",
            "__init__",
            "dispatch_all",
            "_process_platform",
            "_generate_content",
            "_shutdown_all_drivers"
        ],
        "classes": {
            "PlatformStrategy": {
                "methods": [
                    "__init__",
                    "login",
                    "post"
                ],
                "docstring": null,
                "base_classes": []
            },
            "SocialPlatformDispatcher": {
                "methods": [
                    "__init__",
                    "dispatch_all",
                    "_process_platform",
                    "_generate_content",
                    "_shutdown_all_drivers"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 19
    },
    "social\\log_writer.py": {
        "language": ".py",
        "functions": [
            "get_social_logger",
            "get_json_logger",
            "write_json_log",
            "log_login",
            "log_post",
            "log_error",
            "send_discord_alert",
            "format"
        ],
        "classes": {
            "JSONFormatter": {
                "methods": [
                    "format"
                ],
                "docstring": "Custom JSON formatter for structured log entries.",
                "base_classes": [
                    "logging.Formatter"
                ]
            }
        },
        "routes": [],
        "complexity": 9
    },
    "social\\social_config.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_default_platform_urls",
            "get_platform_url",
            "chrome_profile_path",
            "within_rate_limit",
            "register_action",
            "_check_daily_reset",
            "_save_rate_limit_state",
            "_load_rate_limit_state"
        ],
        "classes": {
            "SocialConfig": {
                "methods": [
                    "__init__",
                    "_default_platform_urls",
                    "get_platform_url",
                    "chrome_profile_path",
                    "within_rate_limit",
                    "register_action",
                    "_check_daily_reset",
                    "_save_rate_limit_state",
                    "_load_rate_limit_state"
                ],
                "docstring": "FULL SYNC social_config with integrated rate limit and daily reset handling.",
                "base_classes": [
                    "ConfigBase"
                ]
            }
        },
        "routes": [],
        "complexity": 18
    },
    "social\\social_config_wrapper.py": {
        "language": ".py",
        "functions": [
            "get_social_config"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "social\\social_post_db.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load",
            "_save",
            "_load_memory",
            "_save_memory",
            "update_memory",
            "get_memory",
            "add_to_queue",
            "mark_posted",
            "mark_failed",
            "get_next_post",
            "get_queue_length"
        ],
        "classes": {
            "SocialPostDatabase": {
                "methods": [
                    "__init__",
                    "_load",
                    "_save",
                    "_load_memory",
                    "_save_memory",
                    "update_memory",
                    "get_memory",
                    "add_to_queue",
                    "mark_posted",
                    "mark_failed",
                    "get_next_post",
                    "get_queue_length"
                ],
                "docstring": "Manages the queue of social media posts.\nTracks pending, posted, and failed posts in a JSON database.\nAlso integrates with a persistent memory system to store global context.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "social\\social_post_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "post_next",
            "post_all",
            "enqueue_post",
            "shutdown",
            "post_to_platform"
        ],
        "classes": {
            "SocialPostManager": {
                "methods": [
                    "__init__",
                    "post_next",
                    "post_all",
                    "enqueue_post",
                    "shutdown"
                ],
                "docstring": "Manages posting of social media content across multiple platforms.\nSupports multi-threading for faster execution and centralized error handling.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 11
    },
    "social\\StrategyLoader.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_strategy",
            "_validate_strategy",
            "get_available_strategies",
            "reload_strategy",
            "register_strategy"
        ],
        "classes": {
            "StrategyLoader": {
                "methods": [
                    "__init__",
                    "load_strategy",
                    "_validate_strategy",
                    "get_available_strategies",
                    "reload_strategy",
                    "register_strategy"
                ],
                "docstring": "Dynamically loads platform-specific strategy classes.\nHandles strategy initialization and validation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "social\\TaskQueueManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start",
            "stop",
            "add_task",
            "_worker",
            "queue_size",
            "status",
            "sample_task"
        ],
        "classes": {
            "TaskQueueManager": {
                "methods": [
                    "__init__",
                    "start",
                    "stop",
                    "add_task",
                    "_worker",
                    "queue_size",
                    "status"
                ],
                "docstring": "TaskQueueManager: A robust, priority-based task queue with threaded workers.\nThis manager supports:\n  - Prioritized task scheduling (lower value = higher priority)\n  - Delayed execution for rate-limiting or scheduling\n  - Configurable retries with exponential backoff\n  - Structured logging of task outcomes for feedback and reinforcement learning loops",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 15
    },
    "social\\UnifiedCommunityDashboard.py": {
        "language": ".py",
        "functions": [
            "to_dict",
            "__init__",
            "_initialize_strategies",
            "_load_saved_data",
            "save_data",
            "update_metrics",
            "update_top_members",
            "generate_insights",
            "_calculate_trends",
            "_generate_platform_insights",
            "_generate_overall_insights",
            "get_metrics_history",
            "get_latest_metrics",
            "generate_metrics_chart",
            "get_platform_status",
            "get_community_building_plan",
            "_get_recommended_platforms_for_day"
        ],
        "classes": {
            "CommunityMetrics": {
                "methods": [
                    "to_dict"
                ],
                "docstring": "Data structure for standardized community metrics across platforms.",
                "base_classes": []
            },
            "UnifiedCommunityDashboard": {
                "methods": [
                    "__init__",
                    "_initialize_strategies",
                    "_load_saved_data",
                    "save_data",
                    "update_metrics",
                    "update_top_members",
                    "generate_insights",
                    "_calculate_trends",
                    "_generate_platform_insights",
                    "_generate_overall_insights",
                    "get_metrics_history",
                    "get_latest_metrics",
                    "generate_metrics_chart",
                    "get_platform_status",
                    "get_community_building_plan",
                    "_get_recommended_platforms_for_day"
                ],
                "docstring": "Provides a centralized dashboard for cross-platform community analytics and insights",
                "base_classes": [
                    "QObject"
                ]
            }
        },
        "routes": [],
        "complexity": 34
    },
    "social\\UnifiedPostManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_post_history",
            "_save_post_history",
            "post_to_platform",
            "_adapt_content_for_platform",
            "schedule_post",
            "get_scheduled_posts",
            "cancel_scheduled_post",
            "get_post_analytics",
            "_get_current_metrics",
            "generate_content_ideas"
        ],
        "classes": {
            "UnifiedPostManager": {
                "methods": [
                    "__init__",
                    "_load_post_history",
                    "_save_post_history",
                    "post_to_platform",
                    "_adapt_content_for_platform",
                    "schedule_post",
                    "get_scheduled_posts",
                    "cancel_scheduled_post",
                    "get_post_analytics",
                    "_get_current_metrics",
                    "generate_content_ideas"
                ],
                "docstring": "Manages post creation, scheduling, and distribution across multiple social platforms.\nProvides a unified interface for content management and cross-platform posting.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "social\\ai\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\data\\post_history.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_history",
            "_save_history",
            "add_post",
            "get_posts",
            "clear_history"
        ],
        "classes": {
            "PostHistory": {
                "methods": [
                    "__init__",
                    "_load_history",
                    "_save_history",
                    "add_post",
                    "get_posts",
                    "clear_history"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "social\\data\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\strategies\\ai_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "analyze_sentiment",
            "_build_response_prompt",
            "_get_response_template",
            "_get_fallback_response",
            "_summarize_recent_content",
            "_get_sentiment_label",
            "_load_templates",
            "_load_history",
            "_track_response",
            "get_response_analytics"
        ],
        "classes": {
            "AIStrategy": {
                "methods": [
                    "__init__",
                    "analyze_sentiment",
                    "_build_response_prompt",
                    "_get_response_template",
                    "_get_fallback_response",
                    "_summarize_recent_content",
                    "_get_sentiment_label",
                    "_load_templates",
                    "_load_history",
                    "_track_response",
                    "get_response_analytics"
                ],
                "docstring": "Enhanced AI strategy for community management and content generation.\nHandles all AI-related tasks including:\n- Content generation\n- Comment responses\n- Engagement prompts\n- Sentiment analysis\n- Content optimization",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "social\\strategies\\BaseEngagementBot.py": {
        "language": ".py",
        "functions": [
            "retry_on_failure",
            "decorator_retry",
            "__init__",
            "get_driver",
            "get_random_user_agent",
            "_wait",
            "login",
            "is_logged_in",
            "_login_with_credentials",
            "post",
            "like_posts",
            "comment_on_posts",
            "follow_users",
            "unfollow_non_returners",
            "go_viral",
            "_log_followed_users",
            "_find_posts",
            "_find_like_button",
            "_find_comment_box",
            "_find_profile_url",
            "_find_follow_button",
            "_find_unfollow_button",
            "run_daily_session",
            "wrapper_retry"
        ],
        "classes": {
            "BaseEngagementBot": {
                "methods": [
                    "__init__",
                    "get_driver",
                    "get_random_user_agent",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "_login_with_credentials",
                    "post",
                    "like_posts",
                    "comment_on_posts",
                    "follow_users",
                    "unfollow_non_returners",
                    "go_viral",
                    "_log_followed_users",
                    "_find_posts",
                    "_find_like_button",
                    "_find_comment_box",
                    "_find_profile_url",
                    "_find_follow_button",
                    "_find_unfollow_button",
                    "run_daily_session"
                ],
                "docstring": "Base class for all social platform engagement bots.\nProvides unified methods for:\n  - Login (cookie and credential-based, with manual fallback)\n  - Community engagement actions (like, comment, follow, unfollow, viral actions)\n  - Daily session orchestration.\n\nPlatform-specific details are provided via abstract helper methods.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 45
    },
    "social\\strategies\\base_platform_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_feedback_data",
            "_save_feedback_data",
            "analyze_engagement_metrics",
            "analyze_comment_sentiment",
            "reinforce_engagement",
            "reward_top_engagers",
            "cross_platform_feedback_loop",
            "run_feedback_loop",
            "initialize",
            "cleanup",
            "get_community_metrics",
            "get_top_members",
            "track_member_interaction"
        ],
        "classes": {
            "BasePlatformStrategy": {
                "methods": [
                    "__init__",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "analyze_comment_sentiment",
                    "reinforce_engagement",
                    "reward_top_engagers",
                    "cross_platform_feedback_loop",
                    "run_feedback_loop",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction"
                ],
                "docstring": "Base class for all platform-specific strategies.\nProvides common functionality for:\n- Feedback tracking and metrics\n- Sentiment analysis\n- Engagement reinforcement\n- Cross-platform data integration\n- Reward systems",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 28
    },
    "social\\strategies\\community_scheduler.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "schedule_task",
            "schedule_engagement_check",
            "schedule_ai_responses",
            "schedule_daily_report",
            "_check_engagement",
            "_load_schedules",
            "_save_schedules",
            "_is_comment_processed",
            "_mark_comment_processed",
            "start",
            "stop"
        ],
        "classes": {
            "CommunityScheduler": {
                "methods": [
                    "__init__",
                    "schedule_task",
                    "schedule_engagement_check",
                    "schedule_ai_responses",
                    "schedule_daily_report",
                    "_check_engagement",
                    "_load_schedules",
                    "_save_schedules",
                    "_is_comment_processed",
                    "_mark_comment_processed",
                    "start",
                    "stop"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "social\\strategies\\config_loader.py": {
        "language": ".py",
        "functions": [
            "load_yaml_config",
            "load_json_config",
            "load_configs",
            "get_nested",
            "get_env_or_config",
            "reload_configs"
        ],
        "classes": {},
        "routes": [],
        "complexity": 6
    },
    "social\\strategies\\context_db.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "create_tables",
            "log_post",
            "fetch_recent_posts",
            "fetch_last_post_content",
            "log_engagement",
            "fetch_engagements_for_post",
            "get_rate_limit",
            "update_rate_limit",
            "update_sentiment",
            "close"
        ],
        "classes": {
            "UnifiedContextEngine": {
                "methods": [
                    "__init__",
                    "create_tables",
                    "log_post",
                    "fetch_recent_posts",
                    "fetch_last_post_content",
                    "log_engagement",
                    "fetch_engagements_for_post",
                    "get_rate_limit",
                    "update_rate_limit",
                    "update_sentiment",
                    "close"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 22
    },
    "social\\strategies\\facebook_strategy.py": {
        "language": ".py",
        "functions": [
            "retry_on_failure",
            "get_random_user_agent",
            "start_scheduler",
            "post_to_facebook",
            "decorator_retry",
            "__init__",
            "_wait",
            "get_driver",
            "is_logged_in",
            "login",
            "post",
            "like_posts",
            "comment_on_posts",
            "follow_users",
            "unfollow_non_returners",
            "_log_followed_users",
            "go_viral",
            "run_daily_session",
            "__init__",
            "initialize",
            "cleanup",
            "get_community_metrics",
            "get_top_members",
            "track_member_interaction",
            "_get_driver",
            "get_random_user_agent",
            "_wait",
            "login",
            "is_logged_in",
            "post_content",
            "run_daily_strategy_session",
            "_load_feedback_data",
            "_save_feedback_data",
            "analyze_engagement_metrics",
            "adaptive_posting_strategy",
            "analyze_comment_sentiment",
            "reinforce_engagement",
            "reward_top_followers",
            "cross_platform_feedback_loop",
            "run_feedback_loop",
            "wrapper_retry"
        ],
        "classes": {
            "FacebookBot": {
                "methods": [
                    "__init__",
                    "_wait",
                    "get_driver",
                    "is_logged_in",
                    "login",
                    "post"
                ],
                "docstring": "Automates Facebook login and posting.\nThis base class handles authentication and AI-powered post creation.",
                "base_classes": []
            },
            "FacebookEngagementBot": {
                "methods": [
                    "like_posts",
                    "comment_on_posts",
                    "follow_users",
                    "unfollow_non_returners",
                    "_log_followed_users",
                    "go_viral",
                    "run_daily_session"
                ],
                "docstring": "Extends FacebookBot with essential community building functions:\n  - Like posts, comment, follow/unfollow users, and viral engagement.\n  - Maintains a FOLLOW_DB to track engagements.\n  - Runs daily engagement sessions.",
                "base_classes": [
                    "FacebookBot"
                ]
            },
            "FacebookStrategy": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "get_random_user_agent",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "adaptive_posting_strategy",
                    "analyze_comment_sentiment",
                    "reinforce_engagement",
                    "reward_top_followers",
                    "cross_platform_feedback_loop",
                    "run_feedback_loop"
                ],
                "docstring": "Centralized strategy class for managing Facebook automation and community building.\nExtends BasePlatformStrategy with Facebook-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops using ChatGPT responses\n  - Reward system for top engaging followers\n  - Cross-platform feedback integration",
                "base_classes": [
                    "BasePlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 76
    },
    "social\\strategies\\instagram_strategy.py": {
        "language": ".py",
        "functions": [
            "retry_on_failure",
            "get_random_mobile_user_agent",
            "start_scheduler",
            "post_to_instagram",
            "decorator_retry",
            "__init__",
            "get_driver",
            "_wait",
            "login",
            "is_logged_in",
            "create_post",
            "like_posts",
            "comment_on_posts",
            "_gather_post_links",
            "follow_users",
            "unfollow_user",
            "__init__",
            "run_daily_session",
            "generate_ai_comments",
            "like_posts",
            "comment_on_posts",
            "follow_users",
            "unfollow_non_returners",
            "_log_followed_users",
            "go_viral",
            "__init__",
            "initialize",
            "cleanup",
            "get_community_metrics",
            "get_top_members",
            "track_member_interaction",
            "_get_driver",
            "_wait",
            "login",
            "is_logged_in",
            "post_content",
            "run_daily_strategy_session",
            "_load_feedback_data",
            "_save_feedback_data",
            "analyze_engagement_metrics",
            "analyze_comment_sentiment",
            "reinforce_engagement",
            "reward_top_engagers",
            "cross_platform_feedback_loop",
            "run_feedback_loop",
            "wrapper_retry"
        ],
        "classes": {
            "InstagramBot": {
                "methods": [
                    "__init__",
                    "get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "create_post",
                    "like_posts",
                    "comment_on_posts",
                    "_gather_post_links",
                    "follow_users",
                    "unfollow_user"
                ],
                "docstring": "Automates Instagram login, posting, and engagement actions using Selenium.\nUses mobile emulation (Pixel 5) to enable posting via Instagram's mobile interface.",
                "base_classes": []
            },
            "InstagramEngagementBot": {
                "methods": [
                    "__init__",
                    "run_daily_session",
                    "generate_ai_comments",
                    "like_posts",
                    "comment_on_posts",
                    "follow_users",
                    "unfollow_non_returners",
                    "_log_followed_users",
                    "go_viral"
                ],
                "docstring": null,
                "base_classes": []
            },
            "InstagramStrategy": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "analyze_comment_sentiment",
                    "reinforce_engagement",
                    "reward_top_engagers",
                    "cross_platform_feedback_loop",
                    "run_feedback_loop"
                ],
                "docstring": "Centralized strategy class for Instagram automation and community building.\nExtends BasePlatformStrategy with Instagram-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops using ChatGPT responses\n  - Reward system for top engaging followers\n  - Cross-platform feedback integration",
                "base_classes": [
                    "BasePlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 86
    },
    "social\\strategies\\reddit_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "cleanup",
            "get_community_metrics",
            "get_top_members",
            "track_member_interaction",
            "_get_driver",
            "_wait",
            "login",
            "is_logged_in",
            "post_content",
            "run_daily_strategy_session",
            "_load_feedback_data",
            "_save_feedback_data",
            "analyze_engagement_metrics",
            "run_feedback_loop",
            "adaptive_posting_strategy"
        ],
        "classes": {
            "RedditStrategy": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "run_feedback_loop",
                    "adaptive_posting_strategy"
                ],
                "docstring": "Centralized strategy class for Reddit automation and community building.\nExtends BasePlatformStrategy with Reddit-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops using ChatGPT responses\n  - Reward system for top engaging followers\n  - Cross-platform feedback integration",
                "base_classes": [
                    "BasePlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 34
    },
    "social\\strategies\\stocktwits_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "login",
            "is_logged_in",
            "post",
            "engage_community",
            "_log_follow",
            "unfollow_non_returners",
            "run_daily_session",
            "__init__",
            "initialize",
            "cleanup",
            "get_community_metrics",
            "get_top_members",
            "track_member_interaction",
            "_get_driver",
            "_wait",
            "login",
            "is_logged_in",
            "post_content",
            "run_daily_strategy_session",
            "_load_feedback_data",
            "_save_feedback_data",
            "analyze_engagement_metrics",
            "run_feedback_loop",
            "adaptive_posting_strategy",
            "reinforce_engagement",
            "reward_top_engagers",
            "cross_platform_feedback_loop"
        ],
        "classes": {
            "StocktwitsCommunityArchitect": {
                "methods": [
                    "__init__",
                    "login",
                    "is_logged_in",
                    "post",
                    "engage_community",
                    "_log_follow",
                    "unfollow_non_returners",
                    "run_daily_session"
                ],
                "docstring": "Stocktwits Community Builder:\nAutomates posts, engagement, and follower interactions with AI-generated content in Victor's authentic tone.",
                "base_classes": []
            },
            "StocktwitsStrategy": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "run_feedback_loop",
                    "adaptive_posting_strategy",
                    "reinforce_engagement",
                    "reward_top_engagers",
                    "cross_platform_feedback_loop"
                ],
                "docstring": "Centralized strategy class for Stocktwits automation and community building.\nExtends BasePlatformStrategy with Stocktwits-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops using ChatGPT responses\n  - Reward system for top engaging followers\n  - Cross-platform feedback integration",
                "base_classes": [
                    "BasePlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 56
    },
    "social\\strategies\\linkedin_strategy.py": {
        "language": ".py",
        "functions": [
            "retry_on_failure",
            "decorator_retry",
            "__init__",
            "_get_ai_agent",
            "_get_driver",
            "get_random_user_agent",
            "_wait",
            "login",
            "is_logged_in",
            "_login_with_credentials",
            "post",
            "like_posts",
            "comment_on_posts",
            "follow_users",
            "unfollow_non_returners",
            "go_viral",
            "_log_followed_users",
            "_find_posts",
            "_find_like_button",
            "_find_comment_box",
            "_find_profile_url",
            "_find_follow_button",
            "_find_unfollow_button",
            "run_daily_session",
            "__init__",
            "is_logged_in",
            "_login_with_credentials",
            "post",
            "_find_posts",
            "_find_like_button",
            "_find_comment_box",
            "_find_profile_url",
            "_find_follow_button",
            "_find_unfollow_button",
            "__init__",
            "initialize",
            "cleanup",
            "get_community_metrics",
            "get_top_members",
            "track_member_interaction",
            "_get_driver",
            "get_random_user_agent",
            "_wait",
            "login",
            "is_logged_in",
            "post_content",
            "run_daily_strategy_session",
            "wrapper_retry"
        ],
        "classes": {
            "BaseEngagementBot": {
                "methods": [
                    "__init__",
                    "_get_ai_agent",
                    "_get_driver",
                    "get_random_user_agent",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "_login_with_credentials",
                    "post",
                    "like_posts",
                    "comment_on_posts",
                    "follow_users",
                    "unfollow_non_returners",
                    "go_viral",
                    "_log_followed_users",
                    "_find_posts",
                    "_find_like_button",
                    "_find_comment_box",
                    "_find_profile_url",
                    "_find_follow_button",
                    "_find_unfollow_button",
                    "run_daily_session"
                ],
                "docstring": "A universal base class for social media engagement bots.\nProvides core community building functions:\n  - Login (with cookie & credential fallback)\n  - Post content (AI-generated if needed)\n  - Like, comment, follow, unfollow, viral engagement, and DM functionalities\n  - Daily session orchestration",
                "base_classes": [
                    "ABC"
                ]
            },
            "LinkedInEngagementBot": {
                "methods": [
                    "__init__",
                    "is_logged_in",
                    "_login_with_credentials",
                    "post",
                    "_find_posts",
                    "_find_like_button",
                    "_find_comment_box",
                    "_find_profile_url",
                    "_find_follow_button",
                    "_find_unfollow_button"
                ],
                "docstring": "LinkedIn-specific implementation of BaseEngagementBot.\nImplements abstract methods using LinkedIn's DOM structure.",
                "base_classes": [
                    "BaseEngagementBot"
                ]
            },
            "LinkedinStrategy": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "get_random_user_agent",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_content",
                    "run_daily_strategy_session"
                ],
                "docstring": "Centralized strategy class for LinkedIn automation and community building.\nExtends BasePlatformStrategy with LinkedIn-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Reinforcement loops using ChatGPT responses\n  - Reward system for top engaging followers\n  - Cross-platform feedback integration",
                "base_classes": [
                    "BasePlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 93
    },
    "social\\strategies\\twitter_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "login",
            "is_logged_in",
            "post_tweet",
            "post_thread",
            "_extract_tweet_id",
            "engage_community",
            "_follow_author",
            "_log_follow",
            "unfollow_non_returners",
            "run_daily_session",
            "post_thread",
            "__init__",
            "_load_feedback_data",
            "_save_feedback_data",
            "analyze_engagement_metrics",
            "adaptive_posting_strategy",
            "analyze_comment_sentiment",
            "reinforce_engagement",
            "reward_top_engagers",
            "cross_platform_feedback_loop",
            "run_feedback_loop",
            "run_daily_strategy_session"
        ],
        "classes": {
            "TwitterCommunityArchitect": {
                "methods": [
                    "__init__",
                    "login",
                    "is_logged_in",
                    "post_tweet",
                    "post_thread",
                    "_extract_tweet_id",
                    "engage_community",
                    "_follow_author",
                    "_log_follow",
                    "unfollow_non_returners",
                    "run_daily_session",
                    "post_thread"
                ],
                "docstring": "Ultimate Twitter Engagement Bot.\nCombines posting, commenting, following, and adaptive AI-powered interactions.",
                "base_classes": []
            },
            "TwitterStrategy": {
                "methods": [
                    "__init__",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "adaptive_posting_strategy",
                    "analyze_comment_sentiment",
                    "reinforce_engagement",
                    "reward_top_engagers",
                    "cross_platform_feedback_loop",
                    "run_feedback_loop",
                    "run_daily_strategy_session"
                ],
                "docstring": "Centralized strategy class for Twitter automation and community building.\nExtends TwitterCommunityArchitect with:\n  - Dynamic feedback loops for engagement metrics analysis.\n  - AI sentiment analysis & reinforcement loops.\n  - Reward system for top engagers.\n  - Cross-platform feedback integration.",
                "base_classes": [
                    "TwitterCommunityArchitect"
                ]
            }
        },
        "routes": [],
        "complexity": 46
    },
    "social\\strategies\\tiktok_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "cleanup",
            "get_community_metrics",
            "get_top_members",
            "track_member_interaction",
            "_get_driver",
            "_wait",
            "login",
            "is_logged_in",
            "post_video",
            "run_daily_strategy_session",
            "_load_feedback_data",
            "_save_feedback_data",
            "analyze_engagement_metrics",
            "run_feedback_loop",
            "adaptive_posting_strategy",
            "update_trending_hashtags",
            "reward_top_creators",
            "cross_platform_feedback_loop"
        ],
        "classes": {
            "TikTokStrategy": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_video",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "run_feedback_loop",
                    "adaptive_posting_strategy",
                    "update_trending_hashtags",
                    "reward_top_creators",
                    "cross_platform_feedback_loop"
                ],
                "docstring": "Centralized strategy class for TikTok automation and community building.\nExtends BasePlatformStrategy with TikTok-specific implementations.\nFeatures:\n  - Dynamic feedback loops with AI sentiment analysis\n  - Video content scheduling and posting\n  - Hashtag trend analysis and optimization\n  - Cross-platform content repurposing\n  - Engagement analytics and community growth tracking",
                "base_classes": [
                    "BasePlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 40
    },
    "social\\strategies\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "social\\strategies\\wordpress_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "cleanup",
            "sync_youtube_video",
            "moderate_comment",
            "get_community_metrics",
            "get_top_members",
            "_load_community_data",
            "_save_community_data",
            "generate_engagement_report",
            "track_member_interaction"
        ],
        "classes": {
            "WordPressCommunityStrategy": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "sync_youtube_video",
                    "moderate_comment",
                    "get_community_metrics",
                    "get_top_members",
                    "_load_community_data",
                    "_save_community_data",
                    "generate_engagement_report",
                    "track_member_interaction"
                ],
                "docstring": "WordPress community strategy that integrates with YouTube for automated community building.\nFeatures:\n- Auto-syncs YouTube videos as WordPress posts\n- Manages comments across both platforms\n- Generates engagement reports\n- Handles community moderation\n- Creates automated responses",
                "base_classes": [
                    "BasePlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 22
    },
    "social\\strategies\\youtube_strategy.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "initialize",
            "cleanup",
            "get_community_metrics",
            "get_top_members",
            "track_member_interaction",
            "_get_driver",
            "_wait",
            "login",
            "is_logged_in",
            "post_video",
            "run_daily_strategy_session",
            "_load_feedback_data",
            "_save_feedback_data",
            "analyze_engagement_metrics",
            "run_feedback_loop",
            "adaptive_posting_strategy",
            "reward_top_creators",
            "cross_platform_feedback_loop"
        ],
        "classes": {
            "YouTubeStrategy": {
                "methods": [
                    "__init__",
                    "initialize",
                    "cleanup",
                    "get_community_metrics",
                    "get_top_members",
                    "track_member_interaction",
                    "_get_driver",
                    "_wait",
                    "login",
                    "is_logged_in",
                    "post_video",
                    "run_daily_strategy_session",
                    "_load_feedback_data",
                    "_save_feedback_data",
                    "analyze_engagement_metrics",
                    "run_feedback_loop",
                    "adaptive_posting_strategy",
                    "reward_top_creators",
                    "cross_platform_feedback_loop"
                ],
                "docstring": "Centralized strategy class for YouTube automation and community building.\nExtends BasePlatformStrategy with YouTube-specific implementations.\nFeatures:\n  - Video content management and scheduling\n  - Shorts creation and optimization\n  - Community post engagement\n  - Analytics tracking and optimization\n  - Cross-platform content distribution",
                "base_classes": [
                    "BasePlatformStrategy"
                ]
            }
        },
        "routes": [],
        "complexity": 38
    },
    "SOS\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "SOS\\data_ingestion\\IngestManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "ingest",
            "_load_files",
            "_process_files",
            "start_watcher",
            "on_created",
            "_get_handler",
            "_read_txt",
            "_read_md",
            "_read_pdf",
            "_read_json",
            "_clean_text"
        ],
        "classes": {
            "IngestManager": {
                "methods": [
                    "__init__",
                    "ingest",
                    "_load_files",
                    "_process_files",
                    "start_watcher",
                    "on_created",
                    "_get_handler",
                    "_read_txt",
                    "_read_md",
                    "_read_pdf",
                    "_read_json",
                    "_clean_text"
                ],
                "docstring": "Unified Ingest Manager and File System Watcher.\nSupports batch ingestion and real-time ingestion.\nHandles TXT, MD, PDF, and JSON formats.",
                "base_classes": [
                    "FileSystemEventHandler"
                ]
            }
        },
        "routes": [],
        "complexity": 24
    },
    "SOS\\data_ingestion\\OrchestratorAgent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "run_batch_pipeline",
            "run_realtime_pipeline",
            "_archive_file",
            "_save_cleaned_file"
        ],
        "classes": {
            "OrchestratorAgent": {
                "methods": [
                    "__init__",
                    "run_batch_pipeline",
                    "run_realtime_pipeline",
                    "_archive_file",
                    "_save_cleaned_file"
                ],
                "docstring": "Orchestrates the complete SOS ingestion, preprocessing, embedding, and vector storage pipeline.\nSupports batch and real-time execution.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "SOS\\data_ingestion\\LocalEmbeddingsGeneratorAgent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "generate_embeddings",
            "_generate_embedding_from_ollama"
        ],
        "classes": {
            "LocalEmbeddingsGeneratorAgent": {
                "methods": [
                    "__init__",
                    "generate_embeddings",
                    "_generate_embedding_from_ollama"
                ],
                "docstring": "Generates embeddings for document chunks using a local LLM via Ollama.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "SOS\\data_ingestion\\PreprocessorAgent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "preprocess_documents",
            "clean_text",
            "chunk_text"
        ],
        "classes": {
            "PreprocessorAgent": {
                "methods": [
                    "__init__",
                    "preprocess_documents",
                    "clean_text",
                    "chunk_text"
                ],
                "docstring": "Preprocesses ingested documents for embedding, parsing, or analysis.\nCleans, normalizes, and chunks raw text with overlap.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "SOS\\data_ingestion\\VectorStoreAgent.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_or_create_collection",
            "add_embeddings",
            "query_similar",
            "delete_embedding",
            "persist"
        ],
        "classes": {
            "VectorStoreAgent": {
                "methods": [
                    "__init__",
                    "_get_or_create_collection",
                    "add_embeddings",
                    "query_similar",
                    "delete_embedding",
                    "persist"
                ],
                "docstring": "Manages vector storage, retrieval, and similarity search.\nDefault backend: ChromaDB (local setup).",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "SOS\\data_ingestion\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "sync_ops\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "sync_ops\\services\\sync_ops_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start_sync",
            "stop_sync",
            "get_status"
        ],
        "classes": {
            "SyncOpsService": {
                "methods": [
                    "__init__",
                    "start_sync",
                    "stop_sync",
                    "get_status"
                ],
                "docstring": "Placeholder SyncOpsService class.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "sync_ops\\services\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\conftest.py": {
        "language": ".py",
        "functions": [
            "test_client",
            "mock_prompt_service",
            "mock_discord_service",
            "sample_prompt_request",
            "sample_cycle_request",
            "sample_bot_config",
            "setup_test_env",
            "mock_openai",
            "test_video_data",
            "test_comment_data",
            "test_context_data",
            "qapp",
            "mock_services",
            "test_env",
            "event_loop",
            "mock_chat_manager",
            "mock_response_handler",
            "mock_discord_manager",
            "__init__",
            "connect",
            "disconnect",
            "send_message",
            "__init__",
            "__init__"
        ],
        "classes": {
            "MockCursorDispatcher": {
                "methods": [
                    "__init__",
                    "connect",
                    "disconnect",
                    "send_message"
                ],
                "docstring": null,
                "base_classes": []
            },
            "MockUnifiedPromptService": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "MockDiscordService": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 30
    },
    "tests\\run_coverage.py": {
        "language": ".py",
        "functions": [
            "parse_args",
            "run_coverage",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "tests\\run_tests.py": {
        "language": ".py",
        "functions": [
            "run_tests"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "tests\\standalone_test_merit_test_services.py": {
        "language": ".py",
        "functions": [
            "setup_test_environment",
            "test_merit_chain_manager"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "tests\\test_agent_dispatcher.py": {
        "language": ".py",
        "functions": [
            "dispatcher",
            "dummy_task",
            "test_dispatcher_initialization",
            "test_add_task_to_queue",
            "test_get_next_task_ready",
            "test_get_next_task_blocked_dependency",
            "test_can_execute_task_dependency_check",
            "test_can_execute_task_scheduled_time",
            "test_execute_task_success",
            "test_execute_task_retry",
            "test_retry_task",
            "test_allocate_and_release_resources",
            "test_cancel_task",
            "test_cancel_task_failure",
            "test_get_task_status",
            "test_update_performance_metrics",
            "test_shutdown",
            "test_context_manager"
        ],
        "classes": {},
        "routes": [],
        "complexity": 18
    },
    "tests\\test_agent_dispatcher_integration.py": {
        "language": ".py",
        "functions": [
            "dispatcher",
            "test_add_and_execute_tasks",
            "test_task_dependencies",
            "test_scheduled_task",
            "test_task_retry_mechanism",
            "test_concurrent_task_execution",
            "test_shutdown_during_execution",
            "test_performance_metrics",
            "mock_task_execution",
            "failing_task",
            "mock_parallel_execution",
            "long_running_task"
        ],
        "classes": {},
        "routes": [],
        "complexity": 12
    },
    "tests\\test_ai_chat_agent.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_02_conversation_history_should_maintain_correct_order",
            "test_03_context_management_should_update_and_retrieve_correctly",
            "test_04_response_cache_should_store_and_retrieve_correctly",
            "test_05_conversation_analytics_should_track_correctly",
            "test_06_prompt_templates_should_manage_correctly",
            "test_07_error_handling_should_handle_invalid_inputs",
            "test_08_persistence_should_save_and_load_state"
        ],
        "classes": {
            "TestAIChatAgent": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_02_conversation_history_should_maintain_correct_order",
                    "test_03_context_management_should_update_and_retrieve_correctly",
                    "test_04_response_cache_should_store_and_retrieve_correctly",
                    "test_05_conversation_analytics_should_track_correctly",
                    "test_06_prompt_templates_should_manage_correctly",
                    "test_07_error_handling_should_handle_invalid_inputs",
                    "test_08_persistence_should_save_and_load_state"
                ],
                "docstring": "Unit tests for AIChatAgent class.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 18
    },
    "tests\\test_ai_output_log_analyzer.py": {
        "language": ".py",
        "functions": [
            "mock_unified_logger",
            "mock_file_manager",
            "mock_discord_manager",
            "analyzer",
            "test_init",
            "test_validate_log_valid_entry",
            "test_validate_log_invalid_entry",
            "test_iterate_logs",
            "test_extract_context_from_logs",
            "test_get_recent_context",
            "test_get_user_context",
            "test_summarize",
            "test_export_summary_report",
            "test_send_discord_report_sync"
        ],
        "classes": {},
        "routes": [],
        "complexity": 14
    },
    "tests\\test_ai_strategy.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_analyze_sentiment",
            "test_response_templates",
            "test_fallback_responses",
            "test_response_tracking",
            "test_error_handling"
        ],
        "classes": {
            "TestAIStrategy": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_analyze_sentiment",
                    "test_response_templates",
                    "test_fallback_responses",
                    "test_response_tracking",
                    "test_error_handling"
                ],
                "docstring": "Unit tests for AIStrategy class.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 14
    },
    "tests\\test_aletheia_feedback_loop_manager.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "test_initialization",
            "test_store_feedback",
            "test_get_feedback",
            "test_update_feedback",
            "test_delete_feedback",
            "test_list_feedback",
            "test_filter_feedback",
            "test_analyze_feedback",
            "test_generate_feedback_report",
            "test_cleanup_old_feedback",
            "test_feedback_aggregation",
            "test_feedback_export",
            "test_feedback_import",
            "tearDown"
        ],
        "classes": {
            "TestAletheiaFeedbackLoopManager": {
                "methods": [
                    "setUp",
                    "test_initialization",
                    "test_store_feedback",
                    "test_get_feedback",
                    "test_update_feedback",
                    "test_delete_feedback",
                    "test_list_feedback",
                    "test_filter_feedback",
                    "test_analyze_feedback",
                    "test_generate_feedback_report",
                    "test_cleanup_old_feedback",
                    "test_feedback_aggregation",
                    "test_feedback_export",
                    "test_feedback_import",
                    "tearDown"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 30
    },
    "tests\\test_aletheia_prompt_manager.py": {
        "language": ".py",
        "functions": [
            "send_message",
            "setUp",
            "tearDown",
            "test_start_conversation_cycle",
            "test_end_conversation_cycle",
            "test_record_conversation",
            "test_get_prompt",
            "test_list_available_prompts",
            "test_load_and_save_memory_state",
            "test_parse_memory_updates_and_archive_episode",
            "test_extract_memory_update_block_valid",
            "test_extract_memory_update_block_invalid",
            "test_merge_memory_updates",
            "test_archive_episode",
            "sync_save"
        ],
        "classes": {
            "DummyDiscordManager": {
                "methods": [
                    "send_message"
                ],
                "docstring": null,
                "base_classes": []
            },
            "TestAletheiaPromptManager": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_start_conversation_cycle",
                    "test_end_conversation_cycle",
                    "test_record_conversation",
                    "test_get_prompt",
                    "test_list_available_prompts",
                    "test_load_and_save_memory_state",
                    "test_parse_memory_updates_and_archive_episode",
                    "test_extract_memory_update_block_valid",
                    "test_extract_memory_update_block_invalid",
                    "test_merge_memory_updates",
                    "test_archive_episode"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 29
    },
    "tests\\test_async_event_flow.py": {
        "language": ".py",
        "functions": [
            "dispatcher",
            "dreamscape_tab",
            "discord_tab",
            "__init__",
            "log_output",
            "handle_discord_event",
            "__init__",
            "log_output",
            "handle_dreamscape_generated",
            "on_task_failed"
        ],
        "classes": {
            "MockDreamscapeTab": {
                "methods": [
                    "__init__",
                    "log_output",
                    "handle_discord_event"
                ],
                "docstring": "Mock DreamscapeGenerationTab for testing async event flows.",
                "base_classes": [
                    "QObject"
                ]
            },
            "MockDiscordTab": {
                "methods": [
                    "__init__",
                    "log_output",
                    "handle_dreamscape_generated"
                ],
                "docstring": "Mock DiscordTab for testing async event flows.",
                "base_classes": [
                    "QObject"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "tests\\test_app_buttons.py": {
        "language": ".py",
        "functions": [
            "execution_tab",
            "test_run_prompt_button",
            "test_generate_tests_button",
            "test_git_commit_button",
            "config_tab",
            "test_exclusions_manager_button",
            "test_discord_settings_button",
            "test_reinforcement_tools_button",
            "logs_tab",
            "test_clear_logs_button",
            "prompt_panel",
            "test_add_custom_prompt_button",
            "test_remove_custom_prompt_button",
            "dashboard_tab",
            "test_refresh_data_button",
            "test_generate_insights_button",
            "test_platform_selector_change"
        ],
        "classes": {
            "TestCursorExecutionTab": {
                "methods": [
                    "execution_tab",
                    "test_run_prompt_button",
                    "test_generate_tests_button",
                    "test_git_commit_button"
                ],
                "docstring": "Test suite for CursorExecutionTab button functionality.",
                "base_classes": []
            },
            "TestConfigurationTab": {
                "methods": [
                    "config_tab",
                    "test_exclusions_manager_button",
                    "test_discord_settings_button",
                    "test_reinforcement_tools_button"
                ],
                "docstring": "Test suite for ConfigurationTab button functionality.",
                "base_classes": []
            },
            "TestLogsTab": {
                "methods": [
                    "logs_tab",
                    "test_clear_logs_button"
                ],
                "docstring": "Test suite for LogsTab button functionality.",
                "base_classes": []
            },
            "TestPromptPanel": {
                "methods": [
                    "prompt_panel",
                    "test_add_custom_prompt_button",
                    "test_remove_custom_prompt_button"
                ],
                "docstring": "Test suite for PromptPanel button functionality.",
                "base_classes": []
            },
            "TestCommunityDashboardTab": {
                "methods": [
                    "dashboard_tab",
                    "test_refresh_data_button",
                    "test_generate_insights_button",
                    "test_platform_selector_change"
                ],
                "docstring": "Test suite for CommunityDashboardTab button functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 34
    },
    "tests\\test_ChatManager.py": {
        "language": ".py",
        "functions": [
            "test_is_logged_in_true",
            "test_is_logged_in_false",
            "test_ensure_model_in_url_appends_correctly",
            "test_ensure_model_in_url_with_existing_params",
            "test_ensure_model_in_url_with_model_already_present",
            "test_get_all_chat_titles_scrolls_and_filters",
            "create_mock_chat"
        ],
        "classes": {
            "TestChatManager": {
                "methods": [
                    "test_is_logged_in_true",
                    "test_is_logged_in_false",
                    "test_ensure_model_in_url_appends_correctly",
                    "test_ensure_model_in_url_with_existing_params",
                    "test_ensure_model_in_url_with_model_already_present",
                    "test_get_all_chat_titles_scrolls_and_filters",
                    "create_mock_chat"
                ],
                "docstring": "Unit tests for the ChatManager class.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 14
    },
    "tests\\test_community_integration_manager.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_01_sync_content_should_distribute_across_platforms",
            "test_02_process_interactions_should_handle_all_platforms",
            "test_03_get_analytics_should_combine_platform_metrics",
            "test_04_engagement_tracking_should_track_across_platforms",
            "test_05_member_management_should_track_across_platforms",
            "test_06_content_optimization_should_apply_to_all_platforms",
            "test_07_error_handling_should_manage_platform_failures",
            "test_08_persistence_should_maintain_cross_platform_state",
            "test_09_scheduling_should_coordinate_across_platforms"
        ],
        "classes": {
            "TestCommunityIntegrationManager": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_01_sync_content_should_distribute_across_platforms",
                    "test_02_process_interactions_should_handle_all_platforms",
                    "test_03_get_analytics_should_combine_platform_metrics",
                    "test_04_engagement_tracking_should_track_across_platforms",
                    "test_05_member_management_should_track_across_platforms",
                    "test_06_content_optimization_should_apply_to_all_platforms",
                    "test_07_error_handling_should_manage_platform_failures",
                    "test_08_persistence_should_maintain_cross_platform_state",
                    "test_09_scheduling_should_coordinate_across_platforms"
                ],
                "docstring": "Unit tests for CommunityIntegrationManager class.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 22
    },
    "tests\\test_chat_manager.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_invalid_model_raises_value_error",
            "test_set_model_valid",
            "test_set_model_invalid",
            "test_ensure_model_in_url_adds_model",
            "test_is_logged_in_success",
            "test_is_logged_in_failure",
            "test_get_all_chat_titles_no_chats",
            "test_execute_prompts_single_chat_login_required",
            "test_execute_prompts_single_chat_success",
            "test_execute_prompt_cycle_login_required",
            "test_execute_prompt_cycle_success",
            "test_execute_prompt_to_chat_no_link",
            "test_execute_prompt_to_chat_success",
            "test_execute_prompts_on_all_chats",
            "test_cycle_prompts_through_all_chats",
            "test_generate_dreamscape_episodes",
            "test_analyze_execution_response",
            "test_sanitize_filename"
        ],
        "classes": {
            "TestChatManager": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_invalid_model_raises_value_error",
                    "test_set_model_valid",
                    "test_set_model_invalid",
                    "test_ensure_model_in_url_adds_model",
                    "test_is_logged_in_success",
                    "test_is_logged_in_failure",
                    "test_get_all_chat_titles_no_chats",
                    "test_execute_prompts_single_chat_login_required",
                    "test_execute_prompts_single_chat_success",
                    "test_execute_prompt_cycle_login_required",
                    "test_execute_prompt_cycle_success",
                    "test_execute_prompt_to_chat_no_link",
                    "test_execute_prompt_to_chat_success",
                    "test_execute_prompts_on_all_chats",
                    "test_cycle_prompts_through_all_chats",
                    "test_generate_dreamscape_episodes",
                    "test_analyze_execution_response",
                    "test_sanitize_filename"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 40
    },
    "tests\\test_chat_cycle_controller.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "test_start_cycle",
            "test_shutdown_cycle"
        ],
        "classes": {
            "TestChatCycleController": {
                "methods": [
                    "setUp",
                    "test_start_cycle",
                    "test_shutdown_cycle"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "tests\\test_community_scheduler.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_schedule_task",
            "test_cancel_task",
            "test_schedule_engagement_check",
            "test_schedule_daily_report",
            "test_error_handling",
            "test_persistence",
            "test_scheduler_lifecycle"
        ],
        "classes": {
            "TestCommunityScheduler": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_schedule_task",
                    "test_cancel_task",
                    "test_schedule_engagement_check",
                    "test_schedule_daily_report",
                    "test_error_handling",
                    "test_persistence",
                    "test_scheduler_lifecycle"
                ],
                "docstring": "Unit tests for CommunityScheduler class.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 18
    },
    "tests\\test_context_synthesizer.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "_create_test_memory_files",
            "test_initialization",
            "test_load_memory_context",
            "test_load_chain_context",
            "test_load_conversation_memory",
            "test_synthesize_context_with_chat_history",
            "test_synthesize_context_with_web_content",
            "test_synthesize_context_with_custom_weights",
            "test_update_memory_with_context"
        ],
        "classes": {
            "TestPromptContextSynthesizer": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "_create_test_memory_files",
                    "test_initialization",
                    "test_load_memory_context",
                    "test_load_chain_context",
                    "test_load_conversation_memory",
                    "test_synthesize_context_with_chat_history",
                    "test_synthesize_context_with_web_content",
                    "test_synthesize_context_with_custom_weights",
                    "test_update_memory_with_context"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 22
    },
    "tests\\test_cursor_execution_tab.py": {
        "language": ".py",
        "functions": [
            "app",
            "mock_services",
            "test_create_with_valid_services",
            "test_create_with_missing_services",
            "test_init_creates_ui_elements",
            "test_execute_prompt_validates_template",
            "test_execute_prompt_validates_context_json",
            "test_recovery_hooks_are_callable",
            "test_worker_thread_error_handling",
            "failing_task"
        ],
        "classes": {
            "TestCursorExecutionTabFactory": {
                "methods": [
                    "test_create_with_valid_services",
                    "test_create_with_missing_services"
                ],
                "docstring": "Test suite for CursorExecutionTabFactory.",
                "base_classes": []
            },
            "TestCursorExecutionTab": {
                "methods": [
                    "test_init_creates_ui_elements",
                    "test_execute_prompt_validates_template",
                    "test_execute_prompt_validates_context_json",
                    "test_recovery_hooks_are_callable",
                    "test_worker_thread_error_handling"
                ],
                "docstring": "Test suite for CursorExecutionTab functionality.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 17
    },
    "tests\\test_cursor_session_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "clear",
            "send_keys",
            "setUp",
            "test_switch_mode_valid",
            "test_switch_mode_invalid",
            "test_generate_prompt_full_sync",
            "test_generate_prompt_tdd",
            "test_execute_prompt_success",
            "test_execute_prompt_failure"
        ],
        "classes": {
            "DummyElement": {
                "methods": [
                    "__init__",
                    "clear",
                    "send_keys"
                ],
                "docstring": null,
                "base_classes": []
            },
            "TestCursorSessionManager": {
                "methods": [
                    "setUp",
                    "test_switch_mode_valid",
                    "test_switch_mode_invalid",
                    "test_generate_prompt_full_sync",
                    "test_generate_prompt_tdd",
                    "test_execute_prompt_success",
                    "test_execute_prompt_failure"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 20
    },
    "tests\\test_cursor_ui_service.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_initialization",
            "test_take_screenshot",
            "test_trigger_callback",
            "test_start_browser_with_path",
            "test_start_browser_default",
            "test_locate_on_screen_success",
            "test_locate_on_screen_timeout",
            "test_click_image_success",
            "test_click_image_not_found",
            "test_type_text_clipboard",
            "test_type_text_direct",
            "test_trigger_hotkey",
            "test_clipboard_operations",
            "test_execute_task_success",
            "test_execute_task_browser_failure",
            "test_execute_task_input_area_not_found",
            "test_validate_task_result",
            "test_validate_task_result_failure",
            "test_factory_creation",
            "test_factory_with_registry"
        ],
        "classes": {
            "TestCursorUIService": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_initialization",
                    "test_take_screenshot",
                    "test_trigger_callback",
                    "test_start_browser_with_path",
                    "test_start_browser_default",
                    "test_locate_on_screen_success",
                    "test_locate_on_screen_timeout",
                    "test_click_image_success",
                    "test_click_image_not_found",
                    "test_type_text_clipboard",
                    "test_type_text_direct",
                    "test_trigger_hotkey",
                    "test_clipboard_operations",
                    "test_execute_task_success",
                    "test_execute_task_browser_failure",
                    "test_execute_task_input_area_not_found",
                    "test_validate_task_result",
                    "test_validate_task_result_failure",
                    "test_factory_creation",
                    "test_factory_with_registry"
                ],
                "docstring": "Test cases for CursorUIService.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 44
    },
    "tests\\test_discord_template_manager.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "test_resolve_template_dir_env",
            "test_resolve_template_dir_json",
            "test_resolve_template_dir_fallback",
            "test_init_creates_directory_if_not_exist",
            "test_init_does_not_create_directory_if_exists",
            "test_render_message_successful",
            "test_render_message_template_not_found",
            "test_render_message_general_exception",
            "test_list_templates_success",
            "test_list_templates_error"
        ],
        "classes": {
            "TestDiscordTemplateManager": {
                "methods": [
                    "setUp",
                    "test_resolve_template_dir_env",
                    "test_resolve_template_dir_json",
                    "test_resolve_template_dir_fallback",
                    "test_init_creates_directory_if_not_exist",
                    "test_init_does_not_create_directory_if_exists",
                    "test_render_message_successful",
                    "test_render_message_template_not_found",
                    "test_render_message_general_exception",
                    "test_list_templates_success",
                    "test_list_templates_error"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 22
    },
    "tests\\test_discord_manager.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_load_config_file_not_exists",
            "test_save_and_load_config_success",
            "test_update_credentials",
            "test_map_prompt_to_channel",
            "test_unmap_prompt_channel",
            "test_get_channel_for_prompt",
            "test_run_bot_without_credentials",
            "test_run_bot_with_valid_credentials",
            "test_stop_bot",
            "test_send_message_when_bot_not_running",
            "test_send_file_when_bot_not_running",
            "test_send_dreamscape_episode_as_message",
            "test_send_dreamscape_episode_as_file",
            "test_send_prompt_response_text",
            "test_send_prompt_response_file",
            "test_send_event_notification",
            "test_update_status",
            "setUp",
            "test_update_credentials_success",
            "test_map_prompt_to_channel_success",
            "test_unmap_selected_prompt_success",
            "test_refresh_prompt_channel_list_with_mappings",
            "test_load_prompt_types_file_not_found"
        ],
        "classes": {
            "TestDiscordManager": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_load_config_file_not_exists",
                    "test_save_and_load_config_success",
                    "test_update_credentials",
                    "test_map_prompt_to_channel",
                    "test_unmap_prompt_channel",
                    "test_get_channel_for_prompt",
                    "test_run_bot_without_credentials",
                    "test_run_bot_with_valid_credentials",
                    "test_stop_bot",
                    "test_send_message_when_bot_not_running",
                    "test_send_file_when_bot_not_running",
                    "test_send_dreamscape_episode_as_message",
                    "test_send_dreamscape_episode_as_file",
                    "test_send_prompt_response_text",
                    "test_send_prompt_response_file",
                    "test_send_event_notification",
                    "test_update_status"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            },
            "TestDiscordSettingsDialog": {
                "methods": [
                    "setUp",
                    "test_update_credentials_success",
                    "test_map_prompt_to_channel_success",
                    "test_unmap_selected_prompt_success",
                    "test_refresh_prompt_channel_list_with_mappings",
                    "test_load_prompt_types_file_not_found"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 50
    },
    "tests\\test_dreamscape_generation_tab.py": {
        "language": ".py",
        "functions": [
            "qapp",
            "mock_services",
            "tab",
            "test_init",
            "test_template_loading",
            "test_cancel_generation",
            "test_episode_selection",
            "test_context_tree_filtering",
            "test_service_initialization_without_services"
        ],
        "classes": {},
        "routes": [],
        "complexity": 9
    },
    "tests\\test_dreamscape_integration.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_generate_episode_with_synthesized_context",
            "test_context_synthesis_integration"
        ],
        "classes": {
            "TestDreamscapeIntegration": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_generate_episode_with_synthesized_context",
                    "test_context_synthesis_integration"
                ],
                "docstring": "Test the integration between DreamscapeGenerationService and PromptContextSynthesizer.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "tests\\test_dreamscape_service.py": {
        "language": ".py",
        "functions": [
            "mock_logger",
            "mock_config",
            "service_patches",
            "test_service_initialization",
            "test_service_initialization_with_failures",
            "test_service_health_check",
            "test_chat_manager_creation",
            "test_service_shutdown",
            "test_dependencies_tracked_correctly",
            "test_specific_service_failure",
            "__init__",
            "get"
        ],
        "classes": {
            "MockConfig": {
                "methods": [
                    "__init__",
                    "get"
                ],
                "docstring": "Mock configuration for testing.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "tests\\test_dreamscape_tab_migration.py": {
        "language": ".py",
        "functions": [
            "setUpClass",
            "setUp",
            "test_core_attributes",
            "test_core_methods",
            "test_ui_components",
            "test_service_initialization",
            "test_enhanced_features",
            "test_async_support",
            "test_backwards_compatibility"
        ],
        "classes": {
            "TestDreamscapeTabMigration": {
                "methods": [
                    "setUpClass",
                    "setUp",
                    "test_core_attributes",
                    "test_core_methods",
                    "test_ui_components",
                    "test_service_initialization",
                    "test_enhanced_features",
                    "test_async_support",
                    "test_backwards_compatibility"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 18
    },
    "tests\\test_dreamscape_workflow.py": {
        "language": ".py",
        "functions": [
            "mock_chat_manager",
            "mock_response_handler",
            "mock_discord_manager",
            "dreamscape_generator",
            "test_model_availability",
            "test_model_append_to_url",
            "test_model_no_duplicate_param",
            "test_default_template_dir",
            "test_custom_template_dir",
            "test_chat_titles_population",
            "test_excluded_chat_filtering",
            "test_no_chats_available",
            "test_context_memory_updates",
            "test_toggle_combinations"
        ],
        "classes": {
            "TestModelSelection": {
                "methods": [
                    "test_model_availability",
                    "test_model_append_to_url",
                    "test_model_no_duplicate_param"
                ],
                "docstring": null,
                "base_classes": []
            },
            "TestTemplateDirectory": {
                "methods": [
                    "test_default_template_dir",
                    "test_custom_template_dir"
                ],
                "docstring": null,
                "base_classes": []
            },
            "TestTargetChatSelection": {
                "methods": [
                    "test_chat_titles_population",
                    "test_excluded_chat_filtering"
                ],
                "docstring": null,
                "base_classes": []
            },
            "TestGenerateEpisodesLogic": {
                "methods": [
                    "test_no_chats_available",
                    "test_context_memory_updates",
                    "test_toggle_combinations"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "tests\\test_DriverManager.py": {
        "language": ".py",
        "functions": [
            "test_driver_initialization_with_cache",
            "test_driver_download_when_cache_missing",
            "test_quit_driver"
        ],
        "classes": {
            "TestDriverManager": {
                "methods": [
                    "test_driver_initialization_with_cache",
                    "test_driver_download_when_cache_missing",
                    "test_quit_driver"
                ],
                "docstring": "Basic unit tests for DriverManager class.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "tests\\test_driver_manager.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "test_init_sets_directories",
            "test_download_driver_if_needed_downloads_when_missing",
            "test_download_driver_if_needed_uses_cache",
            "test_get_driver_initializes_driver",
            "test_get_driver_returns_existing",
            "test_quit_driver_with_temp_profile",
            "test_quit_driver_without_driver",
            "test_save_cookies_success",
            "test_save_cookies_no_driver",
            "test_load_cookies_success",
            "test_load_cookies_no_driver",
            "test_load_cookies_no_file",
            "test_is_logged_in_success",
            "test_is_logged_in_failure",
            "test_is_logged_in_no_driver",
            "test_scroll_into_view_success",
            "test_scroll_into_view_no_driver",
            "test_manual_scroll_success",
            "test_manual_scroll_no_driver"
        ],
        "classes": {
            "TestDriverManager": {
                "methods": [
                    "setUp",
                    "test_init_sets_directories",
                    "test_download_driver_if_needed_downloads_when_missing",
                    "test_download_driver_if_needed_uses_cache",
                    "test_get_driver_initializes_driver",
                    "test_get_driver_returns_existing",
                    "test_quit_driver_with_temp_profile",
                    "test_quit_driver_without_driver",
                    "test_save_cookies_success",
                    "test_save_cookies_no_driver",
                    "test_load_cookies_success",
                    "test_load_cookies_no_driver",
                    "test_load_cookies_no_file",
                    "test_is_logged_in_success",
                    "test_is_logged_in_failure",
                    "test_is_logged_in_no_driver",
                    "test_scroll_into_view_success",
                    "test_scroll_into_view_no_driver",
                    "test_manual_scroll_success",
                    "test_manual_scroll_no_driver"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 40
    },
    "tests\\test_engagement_agent.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "test_initialization",
            "test_handle_mentions_no_strategy",
            "test_handle_mentions_with_task_queue",
            "test_handle_mentions_direct_processing",
            "test_proactive_engagement_no_strategy",
            "test_proactive_engagement_with_task_queue",
            "test_proactive_engagement_direct_processing",
            "test_proactive_engagement_skips_already_engaged",
            "test_process_mention",
            "test_process_proactive",
            "test_log_interaction_successful"
        ],
        "classes": {
            "TestEngagementAgent": {
                "methods": [
                    "setUp",
                    "test_initialization",
                    "test_handle_mentions_no_strategy",
                    "test_handle_mentions_with_task_queue",
                    "test_handle_mentions_direct_processing",
                    "test_proactive_engagement_no_strategy",
                    "test_proactive_engagement_with_task_queue",
                    "test_proactive_engagement_direct_processing",
                    "test_proactive_engagement_skips_already_engaged",
                    "test_process_mention",
                    "test_process_proactive",
                    "test_log_interaction_successful"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 24
    },
    "tests\\test_enhanced_driver_manager.py": {
        "language": ".py",
        "functions": [
            "run_tests",
            "setUp",
            "tearDown",
            "test_singleton_pattern",
            "test_driver_initialization",
            "test_driver_navigation",
            "test_cookie_save_load",
            "test_wait_functions"
        ],
        "classes": {
            "TestEnhancedDriverManager": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_singleton_pattern",
                    "test_driver_initialization",
                    "test_driver_navigation",
                    "test_cookie_save_load",
                    "test_wait_functions"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 15
    },
    "tests\\test_event_message_builder.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "test_initialization",
            "test_build_message",
            "test_build_message_with_template",
            "test_build_message_with_custom_format",
            "test_build_message_with_attachments",
            "test_build_message_with_embeds",
            "test_build_message_with_actions",
            "test_build_message_with_metadata",
            "test_build_message_with_validation",
            "test_build_message_with_localization",
            "test_build_message_with_compression",
            "test_save_message",
            "test_load_message",
            "tearDown"
        ],
        "classes": {
            "TestEventMessageBuilder": {
                "methods": [
                    "setUp",
                    "test_initialization",
                    "test_build_message",
                    "test_build_message_with_template",
                    "test_build_message_with_custom_format",
                    "test_build_message_with_attachments",
                    "test_build_message_with_embeds",
                    "test_build_message_with_actions",
                    "test_build_message_with_metadata",
                    "test_build_message_with_validation",
                    "test_build_message_with_localization",
                    "test_build_message_with_compression",
                    "test_save_message",
                    "test_load_message",
                    "tearDown"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 30
    },
    "tests\\test_feedback_loop_manager.py": {
        "language": ".py",
        "functions": [
            "dummy_write_json_log",
            "__init__",
            "setUp",
            "test_calculate_success_rate",
            "test_get_top_tags",
            "test_auto_adjust_rate_limits",
            "test_generate_feedback_loops",
            "test_export_feedback_report"
        ],
        "classes": {
            "DummySocialConfig": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "TestAletheiaFeedbackLoopManager": {
                "methods": [
                    "setUp",
                    "test_calculate_success_rate",
                    "test_get_top_tags",
                    "test_auto_adjust_rate_limits",
                    "test_generate_feedback_loops",
                    "test_export_feedback_report"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 15
    },
    "tests\\test_FileManager.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_save_and_load_json",
            "test_save_and_load_yaml",
            "test_fail_on_invalid_load",
            "test_save_entry_invalid_json",
            "test_load_entry_invalid_json_content",
            "test_load_entry_invalid_yaml_content",
            "dummy_function"
        ],
        "classes": {
            "TestFileManager": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_save_and_load_json",
                    "test_save_and_load_yaml",
                    "test_fail_on_invalid_load",
                    "test_save_entry_invalid_json",
                    "test_load_entry_invalid_json_content",
                    "test_load_entry_invalid_yaml_content"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 17
    },
    "tests\\test_file_manager.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_save_response_creates_file",
            "test_save_response_creates_correct_path",
            "test_save_memory_state_creates_json_file",
            "test_save_log_creates_log_file",
            "test_archive_file_moves_file",
            "test_save_file_json_and_yaml",
            "test_save_file_handles_exceptions",
            "test_load_file_json_and_yaml",
            "test_load_file_handles_exceptions",
            "test_sanitize_filename_strips_and_replaces"
        ],
        "classes": {
            "TestFileManager": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_save_response_creates_file",
                    "test_save_response_creates_correct_path",
                    "test_save_memory_state_creates_json_file",
                    "test_save_log_creates_log_file",
                    "test_archive_file_moves_file",
                    "test_save_file_json_and_yaml",
                    "test_save_file_handles_exceptions",
                    "test_load_file_json_and_yaml",
                    "test_load_file_handles_exceptions",
                    "test_sanitize_filename_strips_and_replaces"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 24
    },
    "tests\\test_full_sync.py": {
        "language": ".py",
        "functions": [
            "template_manager",
            "project_context",
            "test_load_json_filter",
            "test_tojson_filter",
            "test_full_sync_templates"
        ],
        "classes": {},
        "routes": [],
        "complexity": 5
    },
    "tests\\test_generate_dreamscape_episode.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_generate_dreamscape_episode",
            "test_extract_episode_title",
            "test_slugify"
        ],
        "classes": {
            "TestDreamscapeEpisodeGeneration": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_generate_dreamscape_episode",
                    "test_extract_episode_title",
                    "test_slugify"
                ],
                "docstring": "Test suite for the dreamscape episode generation functionality.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "tests\\test_load_post_history_file_exists.py": {
        "language": ".py",
        "functions": [
            "test_load_post_history_file_exists"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "tests\\test_MemoryManager.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_initialization",
            "test_record_interaction",
            "test_initialize_conversation",
            "test_retrieve_conversation",
            "test_get_user_history",
            "test_user_sentiment_summary",
            "test_clear_user_history",
            "test_clear_platform_history"
        ],
        "classes": {
            "TestMemoryManager": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_initialization",
                    "test_record_interaction",
                    "test_initialize_conversation",
                    "test_retrieve_conversation",
                    "test_get_user_history",
                    "test_user_sentiment_summary",
                    "test_clear_user_history",
                    "test_clear_platform_history"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 20
    },
    "tests\\test_memory_cycle.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_conversation_cycle",
            "test_multiple_cycles",
            "test_template_rendering"
        ],
        "classes": {
            "TestMemoryCycle": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_conversation_cycle",
                    "test_multiple_cycles",
                    "test_template_rendering"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "tests\\test_memory_manager.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_set_get_memory_segment",
            "test_delete_and_clear_segment",
            "test_segment_size_and_keys",
            "test_user_history_operations",
            "test_narrative_generation",
            "test_json_memory_update",
            "test_initialize_and_export_conversation",
            "test_stats_reporting"
        ],
        "classes": {
            "TestMemoryManager": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_set_get_memory_segment",
                    "test_delete_and_clear_segment",
                    "test_segment_size_and_keys",
                    "test_user_history_operations",
                    "test_narrative_generation",
                    "test_json_memory_update",
                    "test_initialize_and_export_conversation",
                    "test_stats_reporting"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 20
    },
    "tests\\test_narrative_analytics.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "test_initialization",
            "test_update_analytics",
            "test_generate_visualizations",
            "test_generate_analytics_report",
            "tearDown"
        ],
        "classes": {
            "TestNarrativeAnalytics": {
                "methods": [
                    "setUp",
                    "test_initialization",
                    "test_update_analytics",
                    "test_generate_visualizations",
                    "test_generate_analytics_report",
                    "tearDown"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 12
    },
    "tests\\test_openai_client.py": {
        "language": ".py",
        "functions": [
            "temp_profile_dir",
            "mock_config",
            "test_init_paths",
            "test_config_loading",
            "test_driver_initialization",
            "test_fallback_paths",
            "test_platform_specific_paths"
        ],
        "classes": {},
        "routes": [],
        "complexity": 7
    },
    "tests\\test_openai_prompt_engine.py": {
        "language": ".py",
        "functions": [
            "dummy_wait",
            "__init__",
            "clear",
            "send_keys",
            "setUp",
            "tearDown",
            "test_render_prompt",
            "test_driver_health_check",
            "test_send_prompt_and_scrape_response",
            "test_retry_backoff_logic",
            "test_log_interaction",
            "flaky_function"
        ],
        "classes": {
            "DummyElement": {
                "methods": [
                    "__init__",
                    "clear",
                    "send_keys"
                ],
                "docstring": null,
                "base_classes": []
            },
            "OpenAIPromptEngineTest": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_render_prompt",
                    "test_driver_health_check",
                    "test_send_prompt_and_scrape_response",
                    "test_retry_backoff_logic",
                    "test_log_interaction"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 22
    },
    "tests\\test_post_history.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_01_add_post_should_store_correctly",
            "test_02_get_post_by_id_should_return_correct_post",
            "test_03_update_post_should_modify_correctly",
            "test_04_get_posts_by_platform_should_filter_correctly",
            "test_05_get_recent_posts_should_return_correct_timeframe",
            "test_06_get_engagement_metrics_should_calculate_correctly",
            "test_07_persistence_should_save_and_load_correctly",
            "test_08_error_handling_should_handle_invalid_inputs",
            "test_09_delete_post_should_remove_correctly"
        ],
        "classes": {
            "TestPostHistory": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_01_add_post_should_store_correctly",
                    "test_02_get_post_by_id_should_return_correct_post",
                    "test_03_update_post_should_modify_correctly",
                    "test_04_get_posts_by_platform_should_filter_correctly",
                    "test_05_get_recent_posts_should_return_correct_timeframe",
                    "test_06_get_engagement_metrics_should_calculate_correctly",
                    "test_07_persistence_should_save_and_load_correctly",
                    "test_08_error_handling_should_handle_invalid_inputs",
                    "test_09_delete_post_should_remove_correctly"
                ],
                "docstring": "Unit tests for PostHistory class.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 22
    },
    "tests\\test_PathManager.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_ensure_directories",
            "test_get_path",
            "test_register_path",
            "test_list_paths",
            "test_path_consistency"
        ],
        "classes": {
            "TestPathManager": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_ensure_directories",
                    "test_get_path",
                    "test_register_path",
                    "test_list_paths",
                    "test_path_consistency"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 14
    },
    "tests\\test_project_scanner.py": {
        "language": ".py",
        "functions": [
            "temp_project",
            "mock_cache",
            "test_language_analyzer_analyze_python",
            "test_language_analyzer_analyze_rust",
            "test_language_analyzer_analyze_javascript",
            "test_file_processor_hash_file",
            "test_file_processor_should_exclude",
            "test_report_generator_save_report",
            "test_report_generator_generate_init_files",
            "test_project_scanner_scan_project",
            "test_bot_worker",
            "test_multibot_manager"
        ],
        "classes": {},
        "routes": [],
        "complexity": 12
    },
    "tests\\test_PromptManager.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "test_get_prompt_devlog",
            "test_get_prompt_content_ideas",
            "test_get_prompt_dreamscape",
            "test_get_prompt_invalid_type",
            "test_list_available_prompts",
            "test_add_prompt",
            "test_remove_prompt",
            "test_remove_nonexistent_prompt"
        ],
        "classes": {
            "TestPromptManager": {
                "methods": [
                    "setUp",
                    "test_get_prompt_devlog",
                    "test_get_prompt_content_ideas",
                    "test_get_prompt_dreamscape",
                    "test_get_prompt_invalid_type",
                    "test_list_available_prompts",
                    "test_add_prompt",
                    "test_remove_prompt",
                    "test_remove_nonexistent_prompt"
                ],
                "docstring": "Unit tests for the AletheiaPromptManager class.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 18
    },
    "tests\\test_prompt_cycle_manager.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "test_initialization",
            "test_get_contextual_prompt",
            "test_extract_narrative_elements",
            "test_update_system_state",
            "test_update_memory",
            "test_generate_narrative_report",
            "test_perform_ai_audit",
            "test_broadcast_narrative_update",
            "tearDown",
            "setUp",
            "test_cycle_service_initialization",
            "test_prompt_handler_initialization",
            "test_discord_processor_initialization",
            "test_task_orchestrator_initialization"
        ],
        "classes": {
            "TestPromptCycleOrchestrator": {
                "methods": [
                    "setUp",
                    "test_initialization",
                    "test_get_contextual_prompt",
                    "test_extract_narrative_elements",
                    "test_update_system_state",
                    "test_update_memory",
                    "test_generate_narrative_report",
                    "test_perform_ai_audit",
                    "test_broadcast_narrative_update",
                    "tearDown"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            },
            "TestCycleServices": {
                "methods": [
                    "setUp",
                    "test_cycle_service_initialization",
                    "test_prompt_handler_initialization",
                    "test_discord_processor_initialization",
                    "test_task_orchestrator_initialization"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 30
    },
    "tests\\test_prompt_endpoints.py": {
        "language": ".py",
        "functions": [
            "test_execute_prompt",
            "test_execute_prompt_invalid_request",
            "test_start_cycle",
            "test_start_cycle_invalid_request"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "tests\\test_prompt_execution_tab.py": {
        "language": ".py",
        "functions": [
            "app",
            "prompt_manager_mock",
            "chat_manager_mock",
            "response_handler_mock",
            "prompt_execution_tab",
            "test_init_creates_ui_components",
            "test_update_managers_sets_managers",
            "test_load_prompt_sets_text",
            "test_load_prompt_handles_missing_manager",
            "test_update_execution_mode_updates_ui",
            "test_load_prompt_data",
            "test_exclusion_list_management",
            "test_execute_prompt_direct_mode",
            "test_execute_prompt_cycle_mode"
        ],
        "classes": {},
        "routes": [],
        "complexity": 14
    },
    "tests\\test_resilient_prompt_executor.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "test_initialization",
            "test_execute_prompt",
            "test_execute_prompt_with_retry",
            "test_execute_prompt_timeout",
            "test_execute_prompt_validation",
            "test_save_response",
            "test_load_response",
            "test_handle_error",
            "test_cleanup_old_responses",
            "test_get_execution_metrics",
            "test_validate_response",
            "test_preprocess_prompt",
            "test_postprocess_response",
            "tearDown",
            "slow_api_call"
        ],
        "classes": {
            "TestResilientPromptExecutor": {
                "methods": [
                    "setUp",
                    "test_initialization",
                    "test_execute_prompt",
                    "test_execute_prompt_with_retry",
                    "test_execute_prompt_timeout",
                    "test_execute_prompt_validation",
                    "test_save_response",
                    "test_load_response",
                    "test_handle_error",
                    "test_cleanup_old_responses",
                    "test_get_execution_metrics",
                    "test_validate_response",
                    "test_preprocess_prompt",
                    "test_postprocess_response",
                    "tearDown"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 31
    },
    "tests\\test_report_exporter.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\test_service_initializer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__init__",
            "__init__",
            "_initialize_component_managers",
            "__init__",
            "load_templates",
            "get_available_templates",
            "set_active_template",
            "render_template",
            "setup",
            "test_ui_manager_instantiation",
            "test_missing_template_manager",
            "test_missing_output_dir"
        ],
        "classes": {
            "TemplateManager": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "UIManager": {
                "methods": [
                    "__init__"
                ],
                "docstring": null,
                "base_classes": []
            },
            "ServiceInitializer": {
                "methods": [
                    "__init__",
                    "_initialize_component_managers"
                ],
                "docstring": null,
                "base_classes": []
            },
            "DummyTemplateManager": {
                "methods": [
                    "__init__",
                    "load_templates",
                    "get_available_templates",
                    "set_active_template",
                    "render_template"
                ],
                "docstring": null,
                "base_classes": [
                    "TemplateManager"
                ]
            },
            "TestServiceInitializer": {
                "methods": [
                    "setup",
                    "test_ui_manager_instantiation",
                    "test_missing_template_manager",
                    "test_missing_output_dir"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "tests\\test_signal_dispatcher.py": {
        "language": ".py",
        "functions": [
            "dispatcher",
            "recorder",
            "test_log_output_signal",
            "test_prompt_executed_signal",
            "test_dreamscape_generated_signal",
            "test_discord_event_signal",
            "test_task_signals",
            "test_listener_registration",
            "__init__",
            "on_log_output",
            "on_prompt_executed",
            "on_dreamscape_generated",
            "on_discord_event",
            "on_task_started",
            "on_task_progress",
            "on_task_completed",
            "on_task_failed",
            "on_status_update"
        ],
        "classes": {
            "SignalRecorder": {
                "methods": [
                    "__init__",
                    "on_log_output",
                    "on_prompt_executed",
                    "on_dreamscape_generated",
                    "on_discord_event",
                    "on_task_started",
                    "on_task_progress",
                    "on_task_completed",
                    "on_task_failed",
                    "on_status_update"
                ],
                "docstring": "Helper class to record emitted signals for testing.",
                "base_classes": [
                    "QObject"
                ]
            }
        },
        "routes": [],
        "complexity": 28
    },
    "tests\\test_ResponseHandler.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "test_fetch_response_returns_latest_text",
            "test_fetch_response_returns_empty_on_exception",
            "test_clean_response_trims_whitespace",
            "test_wait_for_stable_response_returns_stable_text",
            "side_effect"
        ],
        "classes": {
            "TestResponseHandler": {
                "methods": [
                    "setUp",
                    "test_fetch_response_returns_latest_text",
                    "test_fetch_response_returns_empty_on_exception",
                    "test_clean_response_trims_whitespace",
                    "test_wait_for_stable_response_returns_stable_text"
                ],
                "docstring": "Unit tests for ResponseHandler class.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 11
    },
    "tests\\test_simple.py": {
        "language": ".py",
        "functions": [
            "event_loop"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "tests\\test_specialized_agents.py": {
        "language": ".py",
        "functions": [
            "refactor_agent",
            "test_agent",
            "doc_agent",
            "sample_python_file",
            "test_refactor_agent_initialization",
            "test_refactor_agent_extract_method",
            "test_refactor_agent_rename_variable",
            "test_refactor_agent_inline_function",
            "test_refactor_agent_invalid_task",
            "test_refactor_agent_invalid_file",
            "test_refactor_agent_invalid_method_params",
            "test_refactor_agent_invalid_rename_params",
            "test_refactor_agent_unsupported_type",
            "test_test_agent_initialization",
            "test_test_agent_handle_task",
            "test_test_agent_invalid_task",
            "test_doc_agent_initialization",
            "test_doc_agent_handle_task",
            "test_doc_agent_handle_task_no_examples",
            "test_doc_agent_invalid_task"
        ],
        "classes": {},
        "routes": [],
        "complexity": 20
    },
    "tests\\test_system_boot.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "test_system_loader_initializes_core_services",
            "test_system_loader_gracefully_handles_missing_factories",
            "test_system_loader_dependency_injection",
            "test_complete_system_boot_sequence"
        ],
        "classes": {
            "TestSystemBoot": {
                "methods": [
                    "setUp",
                    "test_system_loader_initializes_core_services",
                    "test_system_loader_gracefully_handles_missing_factories",
                    "test_system_loader_dependency_injection",
                    "test_complete_system_boot_sequence"
                ],
                "docstring": "Test cases for the system loader and service initialization.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "tests\\test_system_health_monitor.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "test_initialization",
            "test_collect_system_metrics",
            "test_check_system_health",
            "test_generate_health_report",
            "test_monitor_system",
            "test_alert_handling",
            "test_cleanup_old_reports",
            "tearDown"
        ],
        "classes": {
            "TestSystemHealthMonitor": {
                "methods": [
                    "setUp",
                    "test_initialization",
                    "test_collect_system_metrics",
                    "test_check_system_health",
                    "test_generate_health_report",
                    "test_monitor_system",
                    "test_alert_handling",
                    "test_cleanup_old_reports",
                    "tearDown"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 18
    },
    "tests\\test_system_loader.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_init",
            "test_init_prompt_manager",
            "test_init_feedback_engine",
            "test_init_openai_client",
            "test_init_driver_manager",
            "test_init_prompt_service",
            "test_init_orchestration_services",
            "test_boot",
            "test_initialize_system"
        ],
        "classes": {
            "TestSystemLoader": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_init",
                    "test_init_prompt_manager",
                    "test_init_feedback_engine",
                    "test_init_openai_client",
                    "test_init_driver_manager",
                    "test_init_prompt_service",
                    "test_init_orchestration_services",
                    "test_boot",
                    "test_initialize_system"
                ],
                "docstring": "Test cases for the SystemLoader class.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 22
    },
    "tests\\test_tab_validator_service.py": {
        "language": ".py",
        "functions": [
            "app",
            "mock_services",
            "test_validate_all_tabs_success",
            "test_validate_all_tabs_missing_services",
            "test_validate_specific_tab_success",
            "test_validate_specific_tab_failure",
            "test_get_validation_status_unknown_tab",
            "test_validate_tab_wrong_type"
        ],
        "classes": {
            "TestTabValidatorService": {
                "methods": [
                    "test_validate_all_tabs_success",
                    "test_validate_all_tabs_missing_services",
                    "test_validate_specific_tab_success",
                    "test_validate_specific_tab_failure",
                    "test_get_validation_status_unknown_tab",
                    "test_validate_tab_wrong_type"
                ],
                "docstring": "Test suite for TabValidatorService.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "tests\\test_task_manager.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "test_initialization",
            "test_add_task",
            "test_get_task",
            "test_update_task",
            "test_delete_task",
            "test_list_tasks",
            "test_schedule_task",
            "test_task_priority_queue",
            "test_task_timeout",
            "test_task_retry",
            "test_task_dependencies",
            "test_task_metrics",
            "test_task_persistence",
            "tearDown"
        ],
        "classes": {
            "TestTaskManager": {
                "methods": [
                    "setUp",
                    "test_initialization",
                    "test_add_task",
                    "test_get_task",
                    "test_update_task",
                    "test_delete_task",
                    "test_list_tasks",
                    "test_schedule_task",
                    "test_task_priority_queue",
                    "test_task_timeout",
                    "test_task_retry",
                    "test_task_dependencies",
                    "test_task_metrics",
                    "test_task_persistence",
                    "tearDown"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 30
    },
    "tests\\test_task_queue_integration.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "_create_test_hook",
            "_example_task_function",
            "test_task_creation_and_validation",
            "test_task_queue_operations",
            "test_task_with_dependencies",
            "test_executor_parallel_tasks",
            "test_structured_logger",
            "test_lifecycle_hooks",
            "test_integration_all_components"
        ],
        "classes": {
            "TaskQueueIntegrationTests": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "_create_test_hook",
                    "_example_task_function",
                    "test_task_creation_and_validation",
                    "test_task_queue_operations",
                    "test_task_with_dependencies",
                    "test_executor_parallel_tasks",
                    "test_structured_logger",
                    "test_lifecycle_hooks",
                    "test_integration_all_components"
                ],
                "docstring": "Integration tests for the task queue system",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 22
    },
    "tests\\test_TemplateManager.py": {
        "language": ".py",
        "functions": [
            "setUpClass",
            "tearDownClass",
            "_create_test_templates",
            "setUp",
            "tearDown",
            "test_initialization",
            "test_render_discord_template",
            "test_render_message_template",
            "test_render_general_template",
            "test_invalid_category",
            "test_invalid_template_data",
            "test_list_templates",
            "test_template_not_found"
        ],
        "classes": {
            "TestTemplateManager": {
                "methods": [
                    "setUpClass",
                    "tearDownClass",
                    "_create_test_templates",
                    "setUp",
                    "tearDown",
                    "test_initialization",
                    "test_render_discord_template",
                    "test_render_message_template",
                    "test_render_general_template",
                    "test_invalid_category",
                    "test_invalid_template_data",
                    "test_list_templates",
                    "test_template_not_found"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 26
    },
    "tests\\test_thread_pool_manager.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "test_initialization",
            "test_submit_task",
            "test_submit_multiple_tasks",
            "test_task_priority",
            "test_task_cancellation",
            "test_task_timeout",
            "test_task_error_handling",
            "test_pool_shutdown",
            "test_task_metrics",
            "test_task_logging",
            "tearDown",
            "test_function",
            "test_function",
            "test_function",
            "long_running_function",
            "timeout_function",
            "error_function",
            "test_function",
            "test_function",
            "test_function"
        ],
        "classes": {
            "TestThreadPoolManager": {
                "methods": [
                    "setUp",
                    "test_initialization",
                    "test_submit_task",
                    "test_submit_multiple_tasks",
                    "test_task_priority",
                    "test_task_cancellation",
                    "test_task_timeout",
                    "test_task_error_handling",
                    "test_pool_shutdown",
                    "test_task_metrics",
                    "test_task_logging",
                    "tearDown"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 33
    },
    "tests\\test_ui_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "set_active_template",
            "render_template",
            "__init__",
            "setup",
            "_populate_test_episodes",
            "test_ui_manager_initialization_with_all_args",
            "test_ui_manager_initialization_missing_episode_list",
            "test_ui_manager_initialization_missing_parent_widget",
            "test_ui_manager_initialization_missing_logger",
            "test_ui_manager_initialization_missing_template_manager",
            "test_ui_manager_initialization_missing_output_dir"
        ],
        "classes": {
            "TemplateManager": {
                "methods": [
                    "__init__",
                    "set_active_template",
                    "render_template"
                ],
                "docstring": "Mock template manager for testing.",
                "base_classes": []
            },
            "UIManager": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Test implementation of UIManager.",
                "base_classes": []
            },
            "TestUIManager": {
                "methods": [
                    "setup",
                    "_populate_test_episodes",
                    "test_ui_manager_initialization_with_all_args",
                    "test_ui_manager_initialization_missing_episode_list",
                    "test_ui_manager_initialization_missing_parent_widget",
                    "test_ui_manager_initialization_missing_logger",
                    "test_ui_manager_initialization_missing_template_manager",
                    "test_ui_manager_initialization_missing_output_dir"
                ],
                "docstring": "Test suite for UIManager initialization and validation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "tests\\test_unified_config_manager.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "test_initialization",
            "test_load_config",
            "test_get_config",
            "test_update_config",
            "test_save_config",
            "test_validate_config",
            "test_get_environment_config",
            "test_merge_configs",
            "test_handle_config_error",
            "tearDown"
        ],
        "classes": {
            "TestConfigManager": {
                "methods": [
                    "setUp",
                    "test_initialization",
                    "test_load_config",
                    "test_get_config",
                    "test_update_config",
                    "test_save_config",
                    "test_validate_config",
                    "test_get_environment_config",
                    "test_merge_configs",
                    "test_handle_config_error",
                    "tearDown"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 22
    },
    "tests\\test_unified_discord_service.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "test_initialization",
            "test_get_channel",
            "test_send_message",
            "test_send_embed",
            "test_send_file",
            "test_create_channel",
            "test_delete_channel",
            "test_get_channel_history",
            "test_add_reaction",
            "test_handle_error",
            "tearDown"
        ],
        "classes": {
            "TestUnifiedDiscordService": {
                "methods": [
                    "setUp",
                    "test_initialization",
                    "test_get_channel",
                    "test_send_message",
                    "test_send_embed",
                    "test_send_file",
                    "test_create_channel",
                    "test_delete_channel",
                    "test_get_channel_history",
                    "test_add_reaction",
                    "test_handle_error",
                    "tearDown"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 24
    },
    "tests\\test_unified_dreamscape_generator.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "test_initialization",
            "test_generate_dreamscape",
            "test_generate_dreamscape_with_elements",
            "test_generate_dreamscape_with_style",
            "test_generate_dreamscape_with_constraints",
            "test_save_dreamscape",
            "test_load_dreamscape",
            "test_list_dreamscapes",
            "test_search_dreamscapes",
            "test_cleanup_old_dreamscapes",
            "test_validate_dreamscape",
            "test_preprocess_dreamscape",
            "test_postprocess_dreamscape",
            "tearDown"
        ],
        "classes": {
            "TestUnifiedDreamscapeGenerator": {
                "methods": [
                    "setUp",
                    "test_initialization",
                    "test_generate_dreamscape",
                    "test_generate_dreamscape_with_elements",
                    "test_generate_dreamscape_with_style",
                    "test_generate_dreamscape_with_constraints",
                    "test_save_dreamscape",
                    "test_load_dreamscape",
                    "test_list_dreamscapes",
                    "test_search_dreamscapes",
                    "test_cleanup_old_dreamscapes",
                    "test_validate_dreamscape",
                    "test_preprocess_dreamscape",
                    "test_postprocess_dreamscape",
                    "tearDown"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 30
    },
    "tests\\test_unified_logging_agent.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "test_initialization",
            "test_log_message",
            "test_log_with_context",
            "test_log_rotation",
            "test_log_analysis",
            "test_log_filtering",
            "test_log_export",
            "test_log_cleanup",
            "test_log_metrics",
            "tearDown"
        ],
        "classes": {
            "TestUnifiedLoggingAgent": {
                "methods": [
                    "setUp",
                    "test_initialization",
                    "test_log_message",
                    "test_log_with_context",
                    "test_log_rotation",
                    "test_log_analysis",
                    "test_log_filtering",
                    "test_log_export",
                    "test_log_cleanup",
                    "test_log_metrics",
                    "tearDown"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 22
    },
    "tests\\test_unified_feedback_memory.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "test_initialization",
            "test_store_memory",
            "test_get_memory",
            "test_update_memory",
            "test_delete_memory",
            "test_list_memories",
            "test_search_memories",
            "test_retrieve_memories",
            "test_cleanup_old_memories",
            "test_memory_compression",
            "test_memory_validation",
            "test_memory_aggregation",
            "test_memory_export",
            "test_memory_import",
            "tearDown"
        ],
        "classes": {
            "TestUnifiedFeedbackMemory": {
                "methods": [
                    "setUp",
                    "test_initialization",
                    "test_store_memory",
                    "test_get_memory",
                    "test_update_memory",
                    "test_delete_memory",
                    "test_list_memories",
                    "test_search_memories",
                    "test_retrieve_memories",
                    "test_cleanup_old_memories",
                    "test_memory_compression",
                    "test_memory_validation",
                    "test_memory_aggregation",
                    "test_memory_export",
                    "test_memory_import",
                    "tearDown"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 32
    },
    "tests\\test_wordpress_strategy.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_track_member_interaction",
            "test_get_community_metrics",
            "test_member_history",
            "test_error_handling",
            "test_data_persistence"
        ],
        "classes": {
            "TestWordPressCommunityStrategy": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_track_member_interaction",
                    "test_get_community_metrics",
                    "test_member_history",
                    "test_error_handling",
                    "test_data_persistence"
                ],
                "docstring": "Unit tests for WordPressCommunityStrategy class.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 14
    },
    "tests\\test_youtube_strategy.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\core\\recovery\\test_recovery_engine.py": {
        "language": ".py",
        "functions": [
            "mock_cursor_session",
            "mock_metrics_service",
            "recovery_engine",
            "test_initialization",
            "test_handle_stall_success",
            "test_handle_stall_max_retries",
            "test_execute_recovery_action",
            "test_get_recovery_stats",
            "test_strategy_selection",
            "test_metrics_update",
            "test_recommendations",
            "test_strategy_weight_updates",
            "test_error_handling",
            "test_strategy_loading"
        ],
        "classes": {},
        "routes": [],
        "complexity": 14
    },
    "tests\\e2e\\test_dreamscape_generation_e2e.py": {
        "language": ".py",
        "functions": [
            "test_output_dir",
            "test_memory_dir",
            "core_services",
            "test_dreamscape_generation_end_to_end"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "tests\\e2e\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\e2e\\test_dreamscape_generation_tab_e2e.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_post_init_setup",
            "init_ui",
            "refresh_episode_list",
            "load_episode_content",
            "_update_ui_for_generation",
            "share_to_discord",
            "save_context_schedule",
            "load_context_schedule",
            "refresh_context_memory",
            "setup_tab",
            "test_episode_interaction_workflow",
            "test_filter_context_memory"
        ],
        "classes": {
            "TestDreamscapeGenerationTab": {
                "methods": [
                    "__init__",
                    "_post_init_setup",
                    "init_ui",
                    "refresh_episode_list",
                    "load_episode_content",
                    "_update_ui_for_generation",
                    "share_to_discord",
                    "save_context_schedule",
                    "load_context_schedule",
                    "refresh_context_memory"
                ],
                "docstring": "Test version of DreamscapeGenerationTab.",
                "base_classes": [
                    "QWidget"
                ]
            },
            "TestDreamscapeGenerationTabE2E": {
                "methods": [
                    "setup_tab",
                    "test_episode_interaction_workflow",
                    "test_filter_context_memory"
                ],
                "docstring": "End-to-end tests for DreamscapeGenerationTab.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 26
    },
    "tests\\gui\\run_gui_tests.py": {
        "language": ".py",
        "functions": [
            "parse_args",
            "run_gui_tests"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "tests\\gui\\conftest.py": {
        "language": ".py",
        "functions": [
            "qapp",
            "qtbot",
            "mock_config_manager",
            "mock_analytics_manager",
            "mock_community_manager",
            "mock_chat_manager",
            "mock_template_manager",
            "mock_chat_engine",
            "mock_driver_manager",
            "format",
            "__init__",
            "get_credentials",
            "get_settings",
            "update_credentials",
            "update_settings",
            "__init__",
            "get_metrics",
            "refresh_data",
            "__init__",
            "get_platforms",
            "post_content",
            "get_members",
            "__init__",
            "send_message",
            "get_history",
            "__init__",
            "get_templates",
            "add_template",
            "update_template",
            "delete_template",
            "__init__",
            "execute_prompt",
            "get_response_history",
            "__init__",
            "start",
            "stop",
            "quit",
            "execute_command",
            "__init__",
            "addWidget",
            "waitExposed",
            "wait",
            "waitUntil",
            "mouseClick",
            "keyClick"
        ],
        "classes": {
            "SafeFormatter": {
                "methods": [
                    "format"
                ],
                "docstring": null,
                "base_classes": [
                    "logging.Formatter"
                ]
            },
            "MockConfigManager": {
                "methods": [
                    "__init__",
                    "get_credentials",
                    "get_settings",
                    "update_credentials",
                    "update_settings"
                ],
                "docstring": null,
                "base_classes": []
            },
            "MockAnalyticsManager": {
                "methods": [
                    "__init__",
                    "get_metrics",
                    "refresh_data"
                ],
                "docstring": null,
                "base_classes": []
            },
            "MockCommunityManager": {
                "methods": [
                    "__init__",
                    "get_platforms",
                    "post_content",
                    "get_members"
                ],
                "docstring": null,
                "base_classes": []
            },
            "MockChatManager": {
                "methods": [
                    "__init__",
                    "send_message",
                    "get_history"
                ],
                "docstring": null,
                "base_classes": []
            },
            "MockTemplateManager": {
                "methods": [
                    "__init__",
                    "get_templates",
                    "add_template",
                    "update_template",
                    "delete_template"
                ],
                "docstring": null,
                "base_classes": []
            },
            "MockChatEngine": {
                "methods": [
                    "__init__",
                    "execute_prompt",
                    "get_response_history"
                ],
                "docstring": null,
                "base_classes": []
            },
            "MockDriverManager": {
                "methods": [
                    "__init__",
                    "start",
                    "stop",
                    "quit",
                    "execute_command"
                ],
                "docstring": null,
                "base_classes": []
            },
            "MockQtBot": {
                "methods": [
                    "__init__",
                    "addWidget",
                    "waitExposed",
                    "wait",
                    "waitUntil",
                    "mouseClick",
                    "keyClick"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 81
    },
    "tests\\gui\\test_analytics_tab.py": {
        "language": ".py",
        "functions": [
            "test_analytics_tab_init",
            "test_platform_combo_initialization",
            "test_date_range_combo_initialization",
            "test_custom_date_range_visibility",
            "test_results_table_initialization",
            "test_refresh_analytics_empty_manager",
            "test_refresh_analytics_with_manager",
            "test_export_data",
            "test_update_managers",
            "mock_refresh"
        ],
        "classes": {
            "TestAnalyticsTab": {
                "methods": [
                    "test_analytics_tab_init",
                    "test_platform_combo_initialization",
                    "test_date_range_combo_initialization",
                    "test_custom_date_range_visibility",
                    "test_results_table_initialization",
                    "test_refresh_analytics_empty_manager",
                    "test_refresh_analytics_with_manager",
                    "test_export_data",
                    "test_update_managers"
                ],
                "docstring": "Test suite for the Analytics Tab component.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 19
    },
    "tests\\gui\\test_community_management_tab.py": {
        "language": ".py",
        "functions": [
            "test_community_tab_init",
            "test_platform_combo_initialization",
            "test_metrics_table_initialization",
            "test_refresh_metrics_empty_manager",
            "test_refresh_metrics_with_manager",
            "test_update_managers",
            "test_execute_action",
            "mock_refresh",
            "mock_refresh"
        ],
        "classes": {
            "TestCommunityManagementTab": {
                "methods": [
                    "test_community_tab_init",
                    "test_platform_combo_initialization",
                    "test_metrics_table_initialization",
                    "test_refresh_metrics_empty_manager",
                    "test_refresh_metrics_with_manager",
                    "test_update_managers",
                    "test_execute_action"
                ],
                "docstring": "Test suite for the Community Management Tab component.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "tests\\gui\\test_configuration_tab.py": {
        "language": ".py",
        "functions": [
            "config_manager_mock",
            "configuration_tab",
            "test_init_creates_ui_components",
            "test_load_config",
            "test_save_config",
            "test_reset_config",
            "test_browse_database_path",
            "test_validate_config_valid",
            "test_validate_config_invalid",
            "test_temperature_slider_changes_label",
            "test_model_selector_changes_max_tokens"
        ],
        "classes": {},
        "routes": [],
        "complexity": 11
    },
    "tests\\gui\\test_digital_dreamscape_tab.py": {
        "language": ".py",
        "functions": [
            "app",
            "template_manager",
            "chat_engine",
            "tab",
            "test_tab_initialization",
            "test_view_mode_changes",
            "test_theme_toggle",
            "test_template_control_panel",
            "test_prompt_debug_panel",
            "test_cycle_feedback_panel",
            "test_metrics_dashboard_update",
            "test_episode_publishing",
            "test_cleanup",
            "test_ui_density_changes"
        ],
        "classes": {
            "TestDigitalDreamscapeTab": {
                "methods": [
                    "app",
                    "template_manager",
                    "chat_engine",
                    "tab",
                    "test_tab_initialization",
                    "test_view_mode_changes",
                    "test_theme_toggle",
                    "test_template_control_panel",
                    "test_prompt_debug_panel",
                    "test_cycle_feedback_panel",
                    "test_metrics_dashboard_update",
                    "test_episode_publishing",
                    "test_cleanup",
                    "test_ui_density_changes"
                ],
                "docstring": "Test suite for the DigitalDreamscapeTab and its components.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 28
    },
    "tests\\gui\\test_dreamscape_generation_tab.py": {
        "language": ".py",
        "functions": [
            "prompt_manager_mock",
            "chat_engine_mock",
            "response_handler_mock",
            "memory_manager_mock",
            "discord_manager_mock",
            "dreamscape_generation_tab",
            "test_init_creates_ui_components",
            "test_update_managers_sets_managers",
            "test_load_prompt_template",
            "test_validate_inputs_valid",
            "test_validate_inputs_invalid",
            "test_add_character",
            "test_remove_character",
            "test_generate_dreamscape",
            "test_preview_dreamscape",
            "test_get_character_list",
            "test_reset_form"
        ],
        "classes": {},
        "routes": [],
        "complexity": 17
    },
    "tests\\gui\\test_historical_chats_tab.py": {
        "language": ".py",
        "functions": [
            "chat_history_mock",
            "historical_chats_tab",
            "test_init_creates_ui_components",
            "test_history_tree_has_columns",
            "test_load_chat_history",
            "test_display_chat_session",
            "test_export_chat_history",
            "test_search_chat_history",
            "test_clear_search",
            "test_delete_chat_session",
            "test_refresh_history"
        ],
        "classes": {},
        "routes": [],
        "complexity": 11
    },
    "tests\\gui\\test_logs_tab.py": {
        "language": ".py",
        "functions": [
            "logs_tab",
            "test_init_creates_ui_components",
            "test_clear_logs",
            "test_append_log",
            "test_multiple_log_entries",
            "test_log_text_is_read_only",
            "test_filter_logs"
        ],
        "classes": {},
        "routes": [],
        "complexity": 7
    },
    "tests\\gui\\test_main_tabs.py": {
        "language": ".py",
        "functions": [
            "test_main_tabs_init",
            "test_tab_properties",
            "test_tab_bar_properties",
            "test_tab_tooltips",
            "test_tab_dimensions",
            "test_set_managers",
            "test_tab_switching",
            "mock_dreamscape_update",
            "mock_community_update",
            "mock_analytics_update",
            "mock_settings_update"
        ],
        "classes": {
            "TestMainTabs": {
                "methods": [
                    "test_main_tabs_init",
                    "test_tab_properties",
                    "test_tab_bar_properties",
                    "test_tab_tooltips",
                    "test_tab_dimensions",
                    "test_set_managers",
                    "test_tab_switching"
                ],
                "docstring": "Test suite for the MainTabs component.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "tests\\gui\\test_prompt_execution_tab.py": {
        "language": ".py",
        "functions": [
            "prompt_manager_mock",
            "chat_manager_mock",
            "response_handler_mock",
            "prompt_execution_tab",
            "test_init_creates_ui_components",
            "test_update_managers_sets_managers",
            "test_load_prompt_sets_text",
            "test_load_prompt_handles_missing_manager",
            "test_update_execution_mode_updates_ui",
            "test_load_prompt_data",
            "test_exclusion_list_management",
            "test_execute_prompt_direct_mode",
            "test_execute_prompt_cycle_mode",
            "test_save_prompt_with_valid_manager",
            "test_save_prompt_with_missing_manager",
            "test_reset_prompts_with_valid_manager",
            "test_reset_prompts_with_missing_manager"
        ],
        "classes": {},
        "routes": [],
        "complexity": 17
    },
    "tests\\gui\\test_settings_tab.py": {
        "language": ".py",
        "functions": [
            "test_settings_tab_init",
            "test_password_fields_masked",
            "test_placeholder_text",
            "test_general_settings_init",
            "test_automation_settings_init",
            "test_validate_credentials_missing",
            "test_validate_credentials_complete",
            "test_save_settings_validates_first",
            "test_save_settings_success",
            "test_load_settings",
            "test_update_managers",
            "mock_load_settings"
        ],
        "classes": {
            "TestSettingsTab": {
                "methods": [
                    "test_settings_tab_init",
                    "test_password_fields_masked",
                    "test_placeholder_text",
                    "test_general_settings_init",
                    "test_automation_settings_init",
                    "test_validate_credentials_missing",
                    "test_validate_credentials_complete",
                    "test_save_settings_validates_first",
                    "test_save_settings_success",
                    "test_load_settings",
                    "test_update_managers"
                ],
                "docstring": "Test suite for the Settings Tab component.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 23
    },
    "tests\\gui\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\gui\\tabs\\isolated_meredith_test.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "cancel",
            "run",
            "__init__",
            "init_ui",
            "populate_model_selector",
            "switch_model",
            "run_full_scan",
            "stop_scan",
            "on_scan_completed",
            "populate_results_table",
            "analyze_profile",
            "export_results",
            "clear_results",
            "open_profile_in_browser",
            "log",
            "setUp",
            "tearDown",
            "test_ui_initialization",
            "test_clear_results_resets_state",
            "test_log_message_updates_text_edit"
        ],
        "classes": {
            "MockScraperThread": {
                "methods": [
                    "__init__",
                    "cancel",
                    "run"
                ],
                "docstring": "Mock implementation of the ScraperThread class.",
                "base_classes": [
                    "QThread"
                ]
            },
            "MeredithTab": {
                "methods": [
                    "__init__",
                    "init_ui",
                    "populate_model_selector",
                    "switch_model",
                    "run_full_scan",
                    "stop_scan",
                    "on_scan_completed",
                    "populate_results_table",
                    "analyze_profile",
                    "export_results",
                    "clear_results",
                    "open_profile_in_browser",
                    "log"
                ],
                "docstring": "Mock implementation of the MeredithTab class for testing.",
                "base_classes": [
                    "QWidget"
                ]
            },
            "MeredithTabTests": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_ui_initialization",
                    "test_clear_results_resets_state",
                    "test_log_message_updates_text_edit"
                ],
                "docstring": "Tests for the MeredithTab component.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 42
    },
    "tests\\gui\\tabs\\minimal_meredith_test.py": {
        "language": ".py",
        "functions": [
            "test_meredith_tab_exists"
        ],
        "classes": {
            "MeredithTabBasicTest": {
                "methods": [
                    "test_meredith_tab_exists"
                ],
                "docstring": "Minimal test for the MeredithTab component.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "tests\\gui\\tabs\\mocked_meredith_test.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "test_ui_initialization",
            "test_clear_results_resets_state",
            "test_log_message_updates_text_edit"
        ],
        "classes": {
            "MeredithTabTests": {
                "methods": [
                    "setUp",
                    "test_ui_initialization",
                    "test_clear_results_resets_state",
                    "test_log_message_updates_text_edit"
                ],
                "docstring": "Tests for the MeredithTab component.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 8
    },
    "tests\\gui\\tabs\\run_meredith_test.py": {
        "language": ".py",
        "functions": [
            "run_meredith_test"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "tests\\gui\\tabs\\standalone_meredith_test.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_ui_initialization",
            "test_model_selector_loads_models",
            "test_run_full_scan_starts_thread",
            "test_stop_scan_cancels_thread",
            "test_clear_results_resets_state",
            "test_log_message_updates_text_edit"
        ],
        "classes": {
            "MeredithTabTests": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_ui_initialization",
                    "test_model_selector_loads_models",
                    "test_run_full_scan_starts_thread",
                    "test_stop_scan_cancels_thread",
                    "test_clear_results_resets_state",
                    "test_log_message_updates_text_edit"
                ],
                "docstring": "Tests for the MeredithTab component.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 16
    },
    "tests\\gui\\tabs\\test_meredith_tab.py": {
        "language": ".py",
        "functions": [
            "app",
            "tab",
            "test_ui_initialization",
            "test_model_selector_loads_models",
            "test_run_full_scan_starts_thread",
            "test_stop_scan_cancels_thread",
            "test_clear_results_resets_state",
            "test_export_results_creates_file",
            "test_analyze_profile_updates_score",
            "test_switch_model_loads_model",
            "test_open_profile_in_browser",
            "test_on_scan_completed_updates_ui",
            "test_populate_results_table",
            "test_log_message_updates_text_edit"
        ],
        "classes": {},
        "routes": [],
        "complexity": 14
    },
    "tests\\gui\\tabs\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\gui\\tabs\\mocks\\mock_meredith_dependencies.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\gui\\tabs\\mocks\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\integration\\test_community_integration.py": {
        "language": ".py",
        "functions": [
            "setUpClass",
            "test_error_handling",
            "tearDownClass"
        ],
        "classes": {
            "TestCommunityIntegration": {
                "methods": [
                    "setUpClass",
                    "test_error_handling",
                    "tearDownClass"
                ],
                "docstring": "Integration tests for the community builder system.",
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "tests\\integration\\test_dreamscape_tab_integration.py": {
        "language": ".py",
        "functions": [
            "app",
            "mock_services",
            "tab",
            "test_episode_selection_flow",
            "test_save_output_flow",
            "test_context_update_flow",
            "test_cancel_generation_flow",
            "test_initial_load_flow",
            "test_cleanup_flow",
            "mock_get_save_filename"
        ],
        "classes": {},
        "routes": [],
        "complexity": 10
    },
    "tests\\integration\\test_merit_test_services.py": {
        "language": ".py",
        "functions": [
            "setup_test_environment",
            "test_merit_chain_save_load",
            "test_test_generator_integration",
            "__init__",
            "chat_completion"
        ],
        "classes": {
            "MockOpenAIClient": {
                "methods": [
                    "__init__",
                    "chat_completion"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 7
    },
    "tests\\integration\\test_platform_integration.py": {
        "language": ".py",
        "functions": [
            "setup"
        ],
        "classes": {
            "TestPlatformIntegration": {
                "methods": [
                    "setup"
                ],
                "docstring": "Integration tests for platform interactions.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "tests\\integration\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\interfaces\\pyqt\\test_dream_os_main_window.py": {
        "language": ".py",
        "functions": [
            "mock_metrics_service",
            "mock_cursor_session",
            "mock_chat_tab_manager",
            "main_window",
            "test_service_initialization",
            "test_handle_queued_task_success",
            "test_handle_queued_task_with_stall",
            "test_handle_queued_task_failure",
            "test_recovery_dashboard_refresh",
            "test_task_context_gathering",
            "test_task_prompt_building",
            "queue_with_stall"
        ],
        "classes": {},
        "routes": [],
        "complexity": 12
    },
    "tests\\interfaces\\pyqt\\tabs\\metrics_viewer\\test_metrics_viewer_tab.py": {
        "language": ".py",
        "functions": [
            "mock_recovery_engine",
            "mock_services",
            "app",
            "metrics_viewer",
            "test_initialization",
            "test_refresh_data",
            "test_performance_chart_update",
            "test_distribution_chart_update",
            "test_actions_table_update",
            "test_tasks_table_update",
            "test_insights_update",
            "test_time_range_change",
            "test_metric_type_change",
            "test_error_handling",
            "test_metrics_chart_plotting",
            "on_refresh"
        ],
        "classes": {},
        "routes": [],
        "complexity": 16
    },
    "tests\\isolated\\conftest.py": {
        "language": ".py",
        "functions": [
            "qapp"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "tests\\isolated\\test_dreamscape_generation_tab.py": {
        "language": ".py",
        "functions": [
            "mock_services",
            "test_env",
            "__init__",
            "init_ui",
            "refresh_episode_list",
            "load_episode_content",
            "_update_ui_for_generation",
            "share_to_discord",
            "save_context_schedule",
            "load_context_schedule",
            "refresh_context_memory",
            "setup",
            "test_episode_interaction_workflow",
            "test_filter_context_memory"
        ],
        "classes": {
            "TestDreamscapeGenerationTab": {
                "methods": [
                    "setup",
                    "test_episode_interaction_workflow",
                    "test_filter_context_memory"
                ],
                "docstring": "Test class for DreamscapeGenerationTab.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 17
    },
    "tests\\isolated\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\mocks\\cursor_dispatcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "connect",
            "disconnect",
            "send_message"
        ],
        "classes": {
            "CursorDispatcher": {
                "methods": [
                    "__init__",
                    "connect",
                    "disconnect",
                    "send_message"
                ],
                "docstring": null,
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "tests\\mocks\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\mocks\\chatgpt_automation\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\mocks\\chatgpt_automation\\views\\file_browser_widget.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_path",
            "set_path"
        ],
        "classes": {
            "FileBrowserWidget": {
                "methods": [
                    "__init__",
                    "get_path",
                    "set_path"
                ],
                "docstring": "Mock FileBrowserWidget class.",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "tests\\mocks\\chatgpt_automation\\views\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\mocks\\GUI\\GuiHelpers.py": {
        "language": ".py",
        "functions": [
            "create_button",
            "create_label",
            "create_text_edit",
            "create_line_edit",
            "create_combo_box",
            "create_checkbox",
            "create_list_widget"
        ],
        "classes": {
            "GuiHelpers": {
                "methods": [
                    "create_button",
                    "create_label",
                    "create_text_edit",
                    "create_line_edit",
                    "create_combo_box",
                    "create_checkbox",
                    "create_list_widget"
                ],
                "docstring": "Mock GuiHelpers class.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 14
    },
    "tests\\mocks\\GUI\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\performance\\test_performance.py": {
        "language": ".py",
        "functions": [
            "setup",
            "measure_execution_time",
            "test_04_memory_usage_performance",
            "test_09_cache_performance"
        ],
        "classes": {
            "TestPerformance": {
                "methods": [
                    "setup",
                    "measure_execution_time",
                    "test_04_memory_usage_performance",
                    "test_09_cache_performance"
                ],
                "docstring": "Performance tests for the community builder system.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "tests\\performance\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\test_logging\\test_async_dispatcher.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "tearDown",
            "test_dispatch_success",
            "test_dispatch_queue_full",
            "test_shutdown",
            "test_error_handling",
            "test_multiple_dispatches",
            "failing_callback"
        ],
        "classes": {
            "TestAsyncDispatcher": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_dispatch_success",
                    "test_dispatch_queue_full",
                    "test_shutdown",
                    "test_error_handling",
                    "test_multiple_dispatches"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 15
    },
    "tests\\test_logging\\test_composite_logger.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "log",
            "log_error",
            "log_debug",
            "log_event",
            "log_system_event",
            "setUp",
            "tearDown",
            "test_log_distribution",
            "test_error_handling",
            "test_logger_management",
            "test_all_log_types",
            "test_shutdown",
            "failing_logger"
        ],
        "classes": {
            "MockLogger": {
                "methods": [
                    "__init__",
                    "log",
                    "log_error",
                    "log_debug",
                    "log_event",
                    "log_system_event"
                ],
                "docstring": "Mock logger for testing.",
                "base_classes": [
                    "ILoggingAgent"
                ]
            },
            "TestCompositeLogger": {
                "methods": [
                    "setUp",
                    "tearDown",
                    "test_log_distribution",
                    "test_error_handling",
                    "test_logger_management",
                    "test_all_log_types",
                    "test_shutdown"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 27
    },
    "tests\\test_logging\\test_logger_factory.py": {
        "language": ".py",
        "functions": [
            "setUp",
            "test_create_console_logger",
            "test_create_file_logger",
            "test_create_discord_logger",
            "test_create_composite_logger",
            "test_fallback_to_console",
            "test_invalid_logger_type",
            "test_logger_initialization_error",
            "test_empty_logger_list"
        ],
        "classes": {
            "TestLoggerFactory": {
                "methods": [
                    "setUp",
                    "test_create_console_logger",
                    "test_create_file_logger",
                    "test_create_discord_logger",
                    "test_create_composite_logger",
                    "test_fallback_to_console",
                    "test_invalid_logger_type",
                    "test_logger_initialization_error",
                    "test_empty_logger_list"
                ],
                "docstring": null,
                "base_classes": [
                    "unittest.TestCase"
                ]
            }
        },
        "routes": [],
        "complexity": 18
    },
    "tests\\test_logging\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\unit\\test_config_manager.py": {
        "language": ".py",
        "functions": [
            "temp_config_file",
            "temp_yaml_config",
            "test_config_manager_singleton",
            "test_config_manager_init",
            "test_config_manager_set_get",
            "test_config_manager_delete",
            "test_config_manager_clear",
            "test_config_manager_persistence",
            "test_config_manager_yaml_loading",
            "test_config_manager_invalid_file",
            "test_config_manager_merge_config"
        ],
        "classes": {},
        "routes": [],
        "complexity": 11
    },
    "tests\\unit\\test_context_memory_manager.py": {
        "language": ".py",
        "functions": [
            "temp_dir",
            "mock_logger",
            "context_manager",
            "test_initialization",
            "test_initialize_fresh_context",
            "test_save_and_load_context",
            "test_update_with_episode",
            "test_get_context_summary",
            "test_get_episode_number",
            "test_extract_themes",
            "test_update_themes",
            "test_update_skill_levels",
            "test_extract_protocols",
            "test_update_architect_tier",
            "test_handle_tier_advancement",
            "test_update_quests",
            "test_initialization_with_invalid_directory",
            "test_error_handling_save_context",
            "test_concurrent_updates",
            "mock_json_dump",
            "update_thread"
        ],
        "classes": {},
        "routes": [],
        "complexity": 21
    },
    "tests\\unit\\test_dreamscape_generation_tab.py": {
        "language": ".py",
        "functions": [
            "setUpClass",
            "setUp",
            "tearDown",
            "test_init_services",
            "test_ui_initialization",
            "test_log_output",
            "test_refresh_episode_list",
            "test_share_to_discord",
            "test_generate_dreamscape_episodes",
            "test_validate_required_services",
            "test_confirm_generation",
            "test_update_ui_for_generation",
            "test_get_schedule_interval",
            "test_auto_select_dreamscape_chat",
            "test_load_schedule_settings",
            "tearDownClass"
        ],
        "classes": {
            "TestDreamscapeGenerationTab": {
                "methods": [
                    "setUpClass",
                    "setUp",
                    "tearDown",
                    "test_init_services",
                    "test_ui_initialization",
                    "test_log_output",
                    "test_refresh_episode_list",
                    "test_share_to_discord",
                    "test_generate_dreamscape_episodes",
                    "test_validate_required_services",
                    "test_confirm_generation",
                    "test_update_ui_for_generation",
                    "test_get_schedule_interval",
                    "test_auto_select_dreamscape_chat",
                    "test_load_schedule_settings",
                    "tearDownClass"
                ],
                "docstring": "Unit tests for DreamscapeGenerationTab.",
                "base_classes": [
                    "TestCase"
                ]
            }
        },
        "routes": [
            {
                "function": "test_refresh_episode_list",
                "method": "PATCH",
                "path": "os.path.exists"
            },
            {
                "function": "test_refresh_episode_list",
                "method": "PATCH",
                "path": "os.listdir"
            },
            {
                "function": "test_generate_dreamscape_episodes",
                "method": "PATCH",
                "path": "asyncio.create_task"
            }
        ],
        "complexity": 32
    },
    "tests\\unit\\test_output_display.py": {
        "language": ".py",
        "functions": [
            "app",
            "display",
            "test_init",
            "test_bind_events",
            "test_append_log",
            "test_set_content",
            "test_get_content",
            "test_clear",
            "test_save_content_success",
            "test_save_content_no_content",
            "test_save_content_user_cancels",
            "test_save_content_write_error",
            "on_save_txt",
            "on_save_md",
            "mock_get_save_filename",
            "mock_warning",
            "mock_get_save_filename",
            "mock_get_save_filename",
            "mock_critical"
        ],
        "classes": {},
        "routes": [],
        "complexity": 19
    },
    "tests\\unit\\test_episode_list.py": {
        "language": ".py",
        "functions": [
            "app",
            "episode_list",
            "test_init",
            "test_bind_events",
            "test_update_episodes",
            "test_get_selected_episode",
            "test_select_episode",
            "test_clear",
            "test_update_episodes_empty_list",
            "test_update_episodes_with_duplicates",
            "test_select_episode_case_sensitive",
            "on_selection_changed",
            "on_refresh"
        ],
        "classes": {},
        "routes": [],
        "complexity": 13
    },
    "tests\\unit\\test_generation_controls.py": {
        "language": ".py",
        "functions": [
            "app",
            "controls",
            "test_init",
            "test_model_dropdown_items",
            "test_bind_events",
            "test_set_generating_state",
            "test_get_generation_params",
            "test_prompt_text_edit_height",
            "test_cancel_button_initial_state",
            "test_checkbox_tooltips",
            "on_generate",
            "on_cancel"
        ],
        "classes": {},
        "routes": [],
        "complexity": 12
    },
    "tests\\unit\\test_template_manager.py": {
        "language": ".py",
        "functions": [
            "temp_dir",
            "mock_logger",
            "template_manager",
            "sample_template",
            "test_initialization",
            "test_ensure_template_dir",
            "test_get_available_templates",
            "test_load_template",
            "test_get_current_template",
            "test_validate_template",
            "test_generate_preview",
            "test_render_template",
            "test_create_template",
            "test_delete_template",
            "test_update_template",
            "test_initialization_with_invalid_directory",
            "test_error_handling_template_not_found",
            "test_template_cache_behavior",
            "test_concurrent_template_operations",
            "create_thread"
        ],
        "classes": {},
        "routes": [],
        "complexity": 20
    },
    "tests\\unit\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "tests\\unit\\dreamscape\\test_current_implementation.py": {
        "language": ".py",
        "functions": [
            "qapp",
            "mock_services",
            "current_tab",
            "test_current_tab_initialization",
            "test_refresh_episode_list",
            "test_generate_episodes",
            "test_share_to_discord"
        ],
        "classes": {},
        "routes": [],
        "complexity": 7
    },
    "tests\\unit\\dreamscape\\test_dreamscape_tab_integration.py": {
        "language": ".py",
        "functions": [
            "qapp",
            "mock_services",
            "mock_context_data",
            "patched_service_initializer",
            "dreamscape_tab",
            "test_generate_episode_integration",
            "test_ui_interaction_flow",
            "test_episode_list_interaction",
            "test_service_dependency_chain",
            "test_context_synthesis_integration"
        ],
        "classes": {},
        "routes": [],
        "complexity": 10
    },
    "tests\\unit\\dreamscape\\test_dreamscape_tab_unit.py": {
        "language": ".py",
        "functions": [
            "qapp",
            "mock_services",
            "mock_chat_data",
            "mock_episode_content",
            "patched_service_initializer",
            "dreamscape_tab",
            "test_tab_initialization",
            "test_load_available_chats",
            "test_load_episode_list",
            "test_load_selected_episode",
            "test_update_status",
            "test_generate_episode_no_chat_selected",
            "test_progress_bar_updates"
        ],
        "classes": {},
        "routes": [],
        "complexity": 13
    },
    "tests\\unit\\dreamscape\\test_dreamscape_ui_components.py": {
        "language": ".py",
        "functions": [
            "qapp",
            "mock_services",
            "patched_service_initializer",
            "dreamscape_tab",
            "ui_manager",
            "test_button_properties",
            "test_combo_box_properties",
            "test_episode_list_properties",
            "test_generate_all_checkbox",
            "test_progress_bar_properties",
            "test_episode_viewer_properties",
            "test_button_layout",
            "test_ui_manager_create_widgets",
            "test_ui_manager_layout_helpers",
            "test_ui_splitter_arrangement",
            "test_ui_components_disabled_during_generation",
            "mock_generate"
        ],
        "classes": {},
        "routes": [],
        "complexity": 17
    },
    "tests\\voice\\test_voice_mode.py": {
        "language": ".py",
        "functions": [
            "app",
            "mock_chat_manager",
            "mock_voice_service",
            "test_initialization",
            "test_listen_success",
            "test_speak_success",
            "test_event_handling",
            "test_config_update",
            "test_initialization",
            "test_status_update",
            "test_event_logging",
            "test_initialization",
            "test_voice_population",
            "test_config_emission",
            "test_initialization",
            "test_voice_input_flow",
            "test_speak_last_reply",
            "test_config_update"
        ],
        "classes": {
            "TestVoiceIOService": {
                "methods": [
                    "test_initialization",
                    "test_listen_success",
                    "test_speak_success",
                    "test_event_handling",
                    "test_config_update"
                ],
                "docstring": "Test cases for VoiceIOService.",
                "base_classes": []
            },
            "TestVoiceStatusWidget": {
                "methods": [
                    "test_initialization",
                    "test_status_update",
                    "test_event_logging"
                ],
                "docstring": "Test cases for VoiceStatusWidget.",
                "base_classes": []
            },
            "TestVoiceConfigWidget": {
                "methods": [
                    "test_initialization",
                    "test_voice_population",
                    "test_config_emission"
                ],
                "docstring": "Test cases for VoiceConfigWidget.",
                "base_classes": []
            },
            "TestVoiceModeTab": {
                "methods": [
                    "test_initialization",
                    "test_voice_input_flow",
                    "test_speak_last_reply",
                    "test_config_update"
                ],
                "docstring": "Integration tests for VoiceModeTab.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 33
    },
    "test_fortress\\failure_validator.py": {
        "language": ".py",
        "functions": [
            "pass_rate",
            "__init__",
            "validate_scenario",
            "_validate_rule",
            "_validate_log_messages",
            "_validate_backup_exists",
            "_validate_final_state",
            "_validate_memory_state",
            "_validate_lock_usage",
            "_validate_generic_state",
            "_is_valid_memory",
            "clear_cache"
        ],
        "classes": {
            "ValidationResult": {
                "methods": [
                    "pass_rate"
                ],
                "docstring": "Results of validating a failure scenario.",
                "base_classes": []
            },
            "FailureValidator": {
                "methods": [
                    "__init__",
                    "validate_scenario",
                    "_validate_rule",
                    "_validate_log_messages",
                    "_validate_backup_exists",
                    "_validate_final_state",
                    "_validate_memory_state",
                    "_validate_lock_usage",
                    "_validate_generic_state",
                    "_is_valid_memory",
                    "clear_cache"
                ],
                "docstring": "Validates that failure scenarios are handled according to their templates.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "test_fortress\\cli.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "_create_parser",
            "run",
            "_run_orchestrator_tests",
            "_save_results",
            "_display_results",
            "_write_text_report"
        ],
        "classes": {
            "TestFortressCLI": {
                "methods": [
                    "__init__",
                    "_create_parser",
                    "run",
                    "_run_orchestrator_tests",
                    "_save_results",
                    "_display_results",
                    "_write_text_report"
                ],
                "docstring": "Command-line interface for Test Fortress.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 15
    },
    "test_fortress\\setup.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "test_fortress\\test_runner.py": {
        "language": ".py",
        "functions": [
            "main",
            "__init__",
            "run_unit_tests",
            "run_mutation_tests",
            "inject_failures",
            "_test_failure_scenario",
            "_test_missing_file_scenario",
            "_test_invalid_input_scenario",
            "_test_service_failure_scenario",
            "run_all_tests",
            "_report_validation_failures"
        ],
        "classes": {
            "TestResult": {
                "methods": [],
                "docstring": "Represents the result of a test run.",
                "base_classes": []
            },
            "TestFortressRunner": {
                "methods": [
                    "__init__",
                    "run_unit_tests",
                    "run_mutation_tests",
                    "inject_failures",
                    "_test_failure_scenario",
                    "_test_missing_file_scenario",
                    "_test_invalid_input_scenario",
                    "_test_service_failure_scenario",
                    "run_all_tests",
                    "_report_validation_failures"
                ],
                "docstring": "Comprehensive test runner that combines multiple testing strategies.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 21
    },
    "test_fortress\\adapters\\orchestrator_adapter.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "inject_failure",
            "validate_recovery",
            "capture_state",
            "restore_state",
            "_inject_task_timeout",
            "_inject_execution_error",
            "_inject_invalid_state",
            "_inject_race_condition",
            "_validate_task_recovery",
            "_validate_state_consistency",
            "_validate_custom_rule",
            "_validate_retry_count",
            "_validate_task_order"
        ],
        "classes": {
            "OrchestratorAdapter": {
                "methods": [
                    "__init__",
                    "inject_failure",
                    "validate_recovery",
                    "capture_state",
                    "restore_state",
                    "_inject_task_timeout",
                    "_inject_execution_error",
                    "_inject_invalid_state",
                    "_inject_race_condition",
                    "_validate_task_recovery",
                    "_validate_state_consistency",
                    "_validate_custom_rule",
                    "_validate_retry_count",
                    "_validate_task_order"
                ],
                "docstring": "Adapter for testing PromptCycleOrchestrator.",
                "base_classes": [
                    "SubsystemAdapter",
                    "TestableSubsystem"
                ]
            }
        },
        "routes": [],
        "complexity": 28
    },
    "test_fortress\\examples\\test_dream_os.py": {
        "language": ".py",
        "functions": [
            "create_example_template",
            "run_example",
            "main"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "test_fortress\\runners\\orchestrator_test_runner.py": {
        "language": ".py",
        "functions": [
            "run_orchestrator_tests",
            "__init__",
            "_load_templates",
            "run_all_tests",
            "run_test",
            "_save_results",
            "_log_summary"
        ],
        "classes": {
            "OrchestratorTestRunner": {
                "methods": [
                    "__init__",
                    "_load_templates",
                    "run_all_tests",
                    "run_test",
                    "_save_results",
                    "_log_summary"
                ],
                "docstring": "Test runner for PromptCycleOrchestrator failure scenarios.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 13
    },
    "test_fortress\\interfaces\\testable.py": {
        "language": ".py",
        "functions": [
            "inject_failure",
            "validate_recovery",
            "capture_state",
            "restore_state",
            "__init__",
            "_save_state_file",
            "_load_state_file",
            "_track_resource",
            "_release_resource",
            "inject_failure",
            "validate_recovery",
            "capture_state",
            "restore_state",
            "_inject_memory_corruption",
            "_inject_missing_file",
            "_validate_memory_state",
            "_validate_logs",
            "_capture_logs",
            "register",
            "get_adapter",
            "create_adapter",
            "list_adapters"
        ],
        "classes": {
            "TestState": {
                "methods": [],
                "docstring": "Represents the state of a subsystem during testing.",
                "base_classes": []
            },
            "TestableSubsystem": {
                "methods": [
                    "inject_failure",
                    "validate_recovery",
                    "capture_state",
                    "restore_state"
                ],
                "docstring": "Interface for making subsystems testable by Test Fortress.\n\nAny Dream.OS subsystem that wants to support failure injection\nmust implement this interface or use an adapter.",
                "base_classes": [
                    "abc.ABC"
                ]
            },
            "SubsystemAdapter": {
                "methods": [
                    "__init__",
                    "_save_state_file",
                    "_load_state_file",
                    "_track_resource",
                    "_release_resource"
                ],
                "docstring": "Base adapter for making existing subsystems testable.\n\nUse this as a base class to create specific adapters for\ndifferent types of subsystems (e.g., MemoryManagerAdapter).",
                "base_classes": []
            },
            "MemoryManagerAdapter": {
                "methods": [
                    "inject_failure",
                    "validate_recovery",
                    "capture_state",
                    "restore_state",
                    "_inject_memory_corruption",
                    "_inject_missing_file",
                    "_validate_memory_state",
                    "_validate_logs",
                    "_capture_logs"
                ],
                "docstring": "Adapter for making MemoryManager testable.",
                "base_classes": [
                    "SubsystemAdapter",
                    "TestableSubsystem"
                ]
            },
            "SubsystemRegistry": {
                "methods": [
                    "register",
                    "get_adapter",
                    "create_adapter",
                    "list_adapters"
                ],
                "docstring": "Registry for testable subsystems.\n\nManages the registration and retrieval of subsystem adapters,\nensuring proper test integration across Dream.OS.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 44
    },
    "test_fortress\\tests\\test_orchestrator_runner.py": {
        "language": ".py",
        "functions": [
            "mock_orchestrator",
            "test_templates",
            "test_runner_initialization",
            "test_run_single_test",
            "test_run_all_tests",
            "test_results_saving",
            "test_convenience_function",
            "test_error_handling",
            "test_full_integration",
            "__init__",
            "force_task_timeout",
            "force_execution_error",
            "force_concurrent_execution",
            "override_state",
            "restore_state"
        ],
        "classes": {
            "MockOrchestrator": {
                "methods": [
                    "__init__",
                    "force_task_timeout",
                    "force_execution_error",
                    "force_concurrent_execution",
                    "override_state",
                    "restore_state"
                ],
                "docstring": "Mock PromptCycleOrchestrator for testing.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 21
    },
    "utils\\ai_output_logger.py": {
        "language": ".py",
        "functions": [
            "log_ai_output"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "utils\\driver_factory.py": {
        "language": ".py",
        "functions": [
            "create_driver"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "utils\\cookie_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_cookie_path",
            "load_cookies",
            "save_cookies",
            "wait_for_manual_login"
        ],
        "classes": {
            "CookieManager": {
                "methods": [
                    "__init__",
                    "_get_cookie_path",
                    "load_cookies",
                    "save_cookies",
                    "wait_for_manual_login"
                ],
                "docstring": "Manages loading, saving, and validating cookies for different platforms.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "utils\\emoji_cleaner.py": {
        "language": ".py",
        "functions": [
            "remove_emojis",
            "clean_file",
            "clean_directory"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "utils\\filesystem.py": {
        "language": ".py",
        "functions": [
            "sanitize_filename",
            "get_project_root",
            "ensure_directory_exists"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "utils\\git_utils.py": {
        "language": ".py",
        "functions": [
            "get_changed_directories"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "utils\\helpers.py": {
        "language": ".py",
        "functions": [
            "sanitize_filename"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "utils\\io.py": {
        "language": ".py",
        "functions": [
            "read_file",
            "write_file",
            "read_json",
            "write_json"
        ],
        "classes": {},
        "routes": [],
        "complexity": 4
    },
    "utils\\json_paths.py": {
        "language": ".py",
        "functions": [
            "get_path"
        ],
        "classes": {
            "JsonPaths": {
                "methods": [
                    "get_path"
                ],
                "docstring": "Centralized configuration for all JSON file paths in the application.\nUses PathManager to ensure consistent path resolution across the application.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "utils\\logging_utils.py": {
        "language": ".py",
        "functions": [
            "write_json_log",
            "log_success",
            "log_error"
        ],
        "classes": {},
        "routes": [],
        "complexity": 3
    },
    "utils\\prompt_tuner.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_reinforcement_feedback",
            "analyze_feedback",
            "tune_prompt"
        ],
        "classes": {
            "PromptTuner": {
                "methods": [
                    "__init__",
                    "load_reinforcement_feedback",
                    "analyze_feedback",
                    "tune_prompt"
                ],
                "docstring": "Class for tuning prompts based on reinforcement feedback.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 8
    },
    "utils\\nltk_init.py": {
        "language": ".py",
        "functions": [
            "ensure_nltk_data"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "utils\\proxy_utils.py": {
        "language": ".py",
        "functions": [
            "get_random_proxy"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "utils\\qasync_event_loop_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "start",
            "schedule_task",
            "_shutdown_handler",
            "shutdown"
        ],
        "classes": {
            "QAsyncEventLoopManager": {
                "methods": [
                    "__init__",
                    "start",
                    "schedule_task",
                    "_shutdown_handler",
                    "shutdown"
                ],
                "docstring": "Manages the qasync event loop, providing async task handling for PyQt applications.\nHandles lifecycle: initialization, task scheduling, and graceful shutdown.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "utils\\rate_limit_manager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_initialize_default_limits",
            "get_rate_limits",
            "adjust_rate_limit",
            "adjust_from_failures"
        ],
        "classes": {
            "RateLimitManager": {
                "methods": [
                    "__init__",
                    "_initialize_default_limits",
                    "get_rate_limits",
                    "adjust_rate_limit",
                    "adjust_from_failures"
                ],
                "docstring": "Manages rate limits for social media platforms.\nProvides functionality to adjust rate limits based on feedback.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 10
    },
    "utils\\reinforcement_trainer.py": {
        "language": ".py",
        "functions": [
            "process_feedback"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "utils\\run_summary.py": {
        "language": ".py",
        "functions": [
            "generate_full_run_json",
            "sanitize_filename"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "utils\\safe_json.py": {
        "language": ".py",
        "functions": [
            "repair_memory_files",
            "load_json_safe"
        ],
        "classes": {},
        "routes": [],
        "complexity": 2
    },
    "utils\\SentimentAnalyzer.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_lexicon",
            "analyze",
            "analyze_batch",
            "analyze_with_context",
            "analyze_trend",
            "get_keyword_sentiment",
            "analyze_feedback_trends",
            "_generate_trend_visualization",
            "extract_topics",
            "add_custom_keywords",
            "load_custom_lexicon"
        ],
        "classes": {
            "SentimentAnalyzer": {
                "methods": [
                    "__init__",
                    "load_lexicon",
                    "analyze",
                    "analyze_batch",
                    "analyze_with_context",
                    "analyze_trend",
                    "get_keyword_sentiment",
                    "analyze_feedback_trends",
                    "_generate_trend_visualization",
                    "extract_topics",
                    "add_custom_keywords",
                    "load_custom_lexicon"
                ],
                "docstring": "Analyzes sentiment in text content, optimized for social media posts and comments.\nSupports both individual and batch processing.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 24
    },
    "utils\\ua_utils.py": {
        "language": ".py",
        "functions": [
            "get_random_user_agent"
        ],
        "classes": {},
        "routes": [],
        "complexity": 1
    },
    "utils\\signal_dispatcher.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "emit_log_output",
            "emit_prompt_executed",
            "emit_dreamscape_generated",
            "emit_discord_event",
            "emit_task_started",
            "emit_task_progress",
            "emit_task_completed",
            "emit_task_failed",
            "emit_status_update",
            "emit_append_output",
            "emit_discord_log",
            "emit_automation_result",
            "register_listener",
            "unregister_listener"
        ],
        "classes": {
            "SignalDispatcher": {
                "methods": [
                    "__init__",
                    "emit_log_output",
                    "emit_prompt_executed",
                    "emit_dreamscape_generated",
                    "emit_discord_event",
                    "emit_task_started",
                    "emit_task_progress",
                    "emit_task_completed",
                    "emit_task_failed",
                    "emit_status_update",
                    "emit_append_output",
                    "emit_discord_log",
                    "emit_automation_result",
                    "register_listener",
                    "unregister_listener"
                ],
                "docstring": "Centralized dispatcher for decoupled, scalable tab communication.",
                "base_classes": [
                    "QObject"
                ]
            }
        },
        "routes": [],
        "complexity": 30
    },
    "utils\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "utils\\ai\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "utils\\web\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "web\\app.py": {
        "language": ".py",
        "functions": [
            "create_app",
            "start_flask_app",
            "index",
            "status"
        ],
        "classes": {},
        "routes": [
            {
                "function": "index",
                "method": "ROUTE",
                "path": "/"
            },
            {
                "function": "status",
                "method": "ROUTE",
                "path": "/api/status"
            }
        ],
        "complexity": 4
    },
    "web\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "import_test.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\core\\logging\\CompositeLogger_fixed.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_safe_log",
            "log",
            "log_error",
            "log_debug",
            "log_event",
            "log_system_event",
            "add_logger",
            "remove_logger",
            "shutdown"
        ],
        "classes": {
            "CompositeLogger": {
                "methods": [
                    "__init__",
                    "_safe_log",
                    "log",
                    "log_error",
                    "log_debug",
                    "log_event",
                    "log_system_event",
                    "add_logger",
                    "remove_logger",
                    "shutdown"
                ],
                "docstring": "Composite logger that manages multiple logging handlers.",
                "base_classes": [
                    "ILoggingAgent"
                ]
            }
        },
        "routes": [],
        "complexity": 20
    },
    "chat_mate\\interfaces\\pyqt\\components\\common\\CredentialInput.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "get_credentials"
        ],
        "classes": {
            "CredentialInput": {
                "methods": [
                    "__init__",
                    "get_credentials"
                ],
                "docstring": "Placeholder for Credential Input common component. ",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 4
    },
    "chat_mate\\interfaces\\pyqt\\components\\common\\ActionButtons.py": {
        "language": ".py",
        "functions": [
            "__init__"
        ],
        "classes": {
            "ActionButtons": {
                "methods": [
                    "__init__"
                ],
                "docstring": "Placeholder for Action Buttons common component. ",
                "base_classes": [
                    "QWidget"
                ]
            }
        },
        "routes": [],
        "complexity": 2
    },
    "chat_mate\\interfaces\\pyqt\\components\\common\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\discord\\__init__.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "core\\discord\\DiscordBot.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_setup_commands",
            "run_bot"
        ],
        "classes": {
            "DiscordBot": {
                "methods": [
                    "__init__",
                    "_setup_commands",
                    "run_bot"
                ],
                "docstring": "Discord bot specialized for interacting with Dreamscape episodes.",
                "base_classes": [
                    "commands.Bot"
                ]
            }
        },
        "routes": [],
        "complexity": 6
    },
    "core\\discord\\discord_integration.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_register_events",
            "load_config",
            "save_config",
            "run",
            "stop",
            "send_message",
            "send_file",
            "send_template",
            "get_status",
            "set_log_callback",
            "_log",
            "__init__",
            "launch_bot",
            "stop_bot",
            "send_message",
            "send_file",
            "send_template",
            "get_status",
            "is_running",
            "run_bot"
        ],
        "classes": {
            "UnifiedDiscordService": {
                "methods": [
                    "__init__",
                    "_register_events",
                    "load_config",
                    "save_config",
                    "run",
                    "stop",
                    "send_message",
                    "send_file",
                    "send_template",
                    "get_status",
                    "set_log_callback",
                    "_log"
                ],
                "docstring": "UnifiedDiscordService - Centralized Discord integration service.\nHandles all Discord-related functionality including:\n  - Bot lifecycle management\n  - Message dispatching\n  - Template rendering\n  - Channel management\n  - Status monitoring\n  - Event notifications",
                "base_classes": []
            },
            "DiscordService": {
                "methods": [
                    "__init__",
                    "launch_bot",
                    "stop_bot",
                    "send_message",
                    "send_file",
                    "send_template",
                    "get_status",
                    "is_running"
                ],
                "docstring": "DiscordService provides a Qt-friendly interface to the UnifiedDiscordService.\nIt exposes signals for logging and status changes and wraps the backend service methods.",
                "base_classes": [
                    "QObject"
                ]
            }
        },
        "routes": [],
        "complexity": 41
    },
    "core\\init\\service_initializer.py": {
        "language": ".py",
        "functions": [
            "initialize_all"
        ],
        "classes": {
            "ServiceInitializationError": {
                "methods": [],
                "docstring": "Custom exception for critical service initialization failures.",
                "base_classes": [
                    "Exception"
                ]
            },
            "ServiceInitializer": {
                "methods": [
                    "initialize_all"
                ],
                "docstring": "Handles the initialization of all core and UI services. Critical failures raise\nServiceInitializationError. Non-critical failures gracefully degrade to mock services.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 2
    },
    "core\\services\\elephant_builder_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "build_single_module",
            "build_from_spec"
        ],
        "classes": {
            "ElephantBuilderService": {
                "methods": [
                    "__init__",
                    "build_single_module",
                    "build_from_spec"
                ],
                "docstring": "ElephantBuilderService is responsible for automating the creation of new modules based\non a specification and a Jinja template. It reads module definitions from a spec file\nand renders prompts to generate production-ready code via the CursorDispatcher.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "core\\services\\task_queue_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "load_tasks",
            "save_tasks",
            "add_task",
            "process_queue",
            "get_tasks"
        ],
        "classes": {
            "TaskQueueService": {
                "methods": [
                    "__init__",
                    "load_tasks",
                    "save_tasks",
                    "add_task",
                    "process_queue",
                    "get_tasks"
                ],
                "docstring": "TaskQueueService loads a list of tasks from a JSON file, processes each task,\nand saves the updated queue back to disk. It is designed to work with the\nElephantBuilderService to automate module generation.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 12
    },
    "interfaces\\pyqt\\mock_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "__getattr__",
            "mock_method"
        ],
        "classes": {
            "MockService": {
                "methods": [
                    "__init__",
                    "__getattr__"
                ],
                "docstring": "Mock service for development/testing.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 5
    },
    "chat_mate\\core\\prompt_cycle\\MemoryManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_load_memory",
            "_save_memory",
            "store_insights",
            "get_insights",
            "update",
            "search_memory",
            "generate_memory_report"
        ],
        "classes": {
            "MemoryManager": {
                "methods": [
                    "__init__",
                    "_load_memory",
                    "_save_memory",
                    "store_insights",
                    "get_insights",
                    "update",
                    "search_memory",
                    "generate_memory_report"
                ],
                "docstring": "Manages memory for the prompt cycle system.\nHandles storing, retrieving, and updating insights from interactions.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 16
    },
    "core\\memory\\ContextMemoryManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_ensure_output_dir",
            "save_context",
            "load_context",
            "update_context",
            "_deep_update",
            "delete_context",
            "list_contexts",
            "clear_all"
        ],
        "classes": {
            "ContextMemoryManager": {
                "methods": [
                    "__init__",
                    "_ensure_output_dir",
                    "save_context",
                    "load_context",
                    "update_context",
                    "_deep_update",
                    "delete_context",
                    "list_contexts",
                    "clear_all"
                ],
                "docstring": "Manages context-specific memory storage and retrieval, particularly for\nDreamscape episode generation and other context-dependent features.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "core\\memory\\DatabaseManager.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_initialize_db",
            "record_interaction",
            "initialize_conversation",
            "get_conversation",
            "get_user_interactions",
            "get_conversation_metadata",
            "clear_user_interactions",
            "close"
        ],
        "classes": {
            "DatabaseManager": {
                "methods": [
                    "__init__",
                    "_initialize_db",
                    "record_interaction",
                    "initialize_conversation",
                    "get_conversation",
                    "get_user_interactions",
                    "get_conversation_metadata",
                    "clear_user_interactions",
                    "close"
                ],
                "docstring": "DatabaseManager stores interactions and conversation metadata for\nlong-term retention using SQLite.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 18
    },
    "core\\memory\\FeedbackEntry.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "to_dict",
            "from_dict",
            "__new__",
            "__init__",
            "_load_feedback",
            "_save_feedback",
            "add_feedback",
            "get_feedback",
            "mark_processed",
            "add_tags",
            "update_metadata",
            "clear_all",
            "get_stats"
        ],
        "classes": {
            "FeedbackEntry": {
                "methods": [
                    "__init__",
                    "to_dict",
                    "from_dict"
                ],
                "docstring": "Represents a single feedback entry with metadata.",
                "base_classes": []
            },
            "UnifiedFeedbackManager": {
                "methods": [
                    "__new__",
                    "__init__",
                    "_load_feedback",
                    "_save_feedback",
                    "add_feedback",
                    "get_feedback",
                    "mark_processed",
                    "add_tags",
                    "update_metadata",
                    "clear_all",
                    "get_stats"
                ],
                "docstring": "Manages unified feedback across different sources (Discord, UI).",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 28
    },
    "core\\services\\export_service.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_get_export_directory",
            "export"
        ],
        "classes": {
            "ExportService": {
                "methods": [
                    "__init__",
                    "_get_export_directory",
                    "export"
                ],
                "docstring": "Handles exporting data to specified formats and locations.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "core\\utils\\todo_scanner.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_find_full_function_def",
            "scan_and_queue_tasks"
        ],
        "classes": {
            "TodoScanner": {
                "methods": [
                    "__init__",
                    "_find_full_function_def",
                    "scan_and_queue_tasks"
                ],
                "docstring": "Scans project files for specific comment patterns (e.g., # TODO) and \nplaceholder functions, then queues tasks via PromptExecutionService \nto address them using appropriate templates.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    },
    "debug_imports.py": {
        "language": ".py",
        "functions": [],
        "classes": {},
        "routes": [],
        "complexity": 0
    },
    "chat_mate\\chat_mate\\chat_mate\\core\\logging\\CompositeLogger_fixed.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_safe_log",
            "log",
            "log_error",
            "log_debug",
            "log_event",
            "log_system_event",
            "add_logger",
            "remove_logger",
            "shutdown"
        ],
        "classes": {
            "CompositeLogger": {
                "methods": [
                    "__init__",
                    "_safe_log",
                    "log",
                    "log_error",
                    "log_debug",
                    "log_event",
                    "log_system_event",
                    "add_logger",
                    "remove_logger",
                    "shutdown"
                ],
                "docstring": "Composite logger that manages multiple logging handlers.",
                "base_classes": [
                    "ILoggingAgent"
                ]
            }
        },
        "routes": [],
        "complexity": 20
    },
    "chat_mate\\chat_mate\\core\\logging\\CompositeLogger.py": {
        "language": ".py",
        "functions": [
            "__init__",
            "_safe_log",
            "log",
            "log_error",
            "log_debug",
            "log_event",
            "log_system_event",
            "add_logger",
            "remove_logger",
            "shutdown"
        ],
        "classes": {
            "CompositeLogger": {
                "methods": [
                    "__init__",
                    "_safe_log",
                    "log",
                    "log_error",
                    "log_debug",
                    "log_event",
                    "log_system_event",
                    "add_logger",
                    "remove_logger",
                    "shutdown"
                ],
                "docstring": "Composite logger that manages multiple logging handlers.",
                "base_classes": [
                    "ILoggingAgent"
                ]
            }
        },
        "routes": [],
        "complexity": 20
    },
    "core\\interfaces\\ILoggingAgent.py": {
        "language": ".py",
        "functions": [
            "log",
            "log_error",
            "log_debug",
            "log_event",
            "log_system_event"
        ],
        "classes": {
            "ILoggingAgent": {
                "methods": [
                    "log",
                    "log_error",
                    "log_debug",
                    "log_event",
                    "log_system_event"
                ],
                "docstring": "Base interface for logging agents.",
                "base_classes": [
                    "ABC"
                ]
            }
        },
        "routes": [],
        "complexity": 10
    },
    "interfaces\\pyqt\\tabs\\task_management_factory.py": {
        "language": ".py",
        "functions": [
            "create",
            "_refresh_all",
            "_retry_load"
        ],
        "classes": {
            "TaskManagementTabFactory": {
                "methods": [
                    "create",
                    "_refresh_all",
                    "_retry_load"
                ],
                "docstring": "Factory for creating the consolidated task management tab.",
                "base_classes": []
            }
        },
        "routes": [],
        "complexity": 6
    }
}