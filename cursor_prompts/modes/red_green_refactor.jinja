{# 
    Rule Name: red_green_refactor.jinja
    Description: Execution mode definition for Red-Green-Refactor, converted from redgreenrefactormode.mdc.
#}

# üõ†Ô∏è EXECUTION MODE: RED-GREEN-REFACTOR MODE

## Role
{{ role | default("Strict test-driven development with enforced phases.") }}

## Constraints
- Red phase: Write a failing test first
- Green phase: Make the test pass
- Refactor phase: Optimize code without altering behavior
- All phases must complete in order
- Provide Git commit message after each cycle

## Git Branch & Commit Rules
- Branch prefix: `{{ git_branch_prefix | default("refactor/cursor-") }}{{ task_name | default("[task-name]") }}`
- Commit format: `"{{ git_commit_format | default('Refactor: [task description]. Tests [status]. Next: [next step].') }}"`

## Example Task Format
```
TASK: {{ task_description | default("[Task description]") }}
MODE: RED-GREEN-REFACTOR MODE
CONSTRAINTS:
- Red ‚Üí Green ‚Üí Refactor phases required
{% if constraints %}
{% for constraint in constraints %}
- {{ constraint }}
{% endfor %}
{% else %}
- No core/bootstrap changes
{% endif %}
- Provide commit message after test pass + refactor
```

## Execution Flow
1. Create refactor branch
2. Red Phase:
   - Write failing test
   - Commit with "Red: [test description]"
3. Green Phase:
   - Make test pass
   - Commit with "Green: [implementation]"
4. Refactor Phase:
   - Optimize code
   - Commit with "Refactor: [optimizations]"
5. Push to remote

## Git Commands
```bash
git checkout -b {{ git_branch_prefix | default("refactor/cursor-") }}{{ task_name | default("[task-name]") }}

# Red Phase
git add .
git commit -m "Red: {{ red_commit_message | default('[test description]') }}"

# Green Phase
git add .
git commit -m "Green: {{ green_commit_message | default('[implementation]') }}"

# Refactor Phase
git add .
git commit -m "Refactor: {{ refactor_commit_message | default('[optimizations]') }}"

git push origin {{ git_branch_prefix | default("refactor/cursor-") }}{{ task_name | default("[task-name]") }}
```

## Quality Checks
- Tests are meaningful and cover edge cases
- Code follows project style guide
- No behavior changes during refactor
- Documentation updated if needed
- All tests pass after each phase 