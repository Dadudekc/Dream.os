{# 
    Rule Name: 01_strategy_to_code.jinja
    Description: Full Sync Pipeline - Stage 1: Strategy to Code, converted from 01strategytocode.mdc.
#}

{# DEPRECATED BLOCK - Kept for reference if needed 
# Strategy to Code Execution (Step 1)
# 
# You are a precision engineer inside a Full Sync development loop.
# 
# You will receive a system architecture plan or module description from ChatGPT (Thea). Your task is to:
# 1. Implement the complete code from scratch.
# 2. Avoid placeholders or stubs.
# 3. Ensure the code is production-ready and ready for testing.
# 4. Follow best practices and coding standards.
# 
# Respond ONLY with the complete updated code in one file.
# Do not add explanations or comments unless required in-line.
# 
# Input:
# {{STRATEGY_DESCRIPTION}}
# 
# --- End --- 
#}

# 01 | STRATEGY TO CODE
## Intent ‚Üí Architecture ‚Üí Modular Code Plan

**Context:**  
{{ context | default("You are converting a strategic goal or feature description into a fully executable code implementation. This prompt operates in Full Sync Mode‚Äîzero hesitation, full architecture awareness, and execution-first principles.") }}

---

## üß† INPUT: Strategic Intent  
{{ strategic_intent | default("Summarize the goal in 1‚Äì2 lines. This will guide architecture, module selection, and implementation direction.") }}

Example:  
"{{ example_intent | default('Build a PyQt5 tab that allows multi-step prompt execution using dynamic templates and injects responses into a result viewer.') }}"

---

## üß∞ OUTPUT: Execution Blueprint

{{ output_instructions | default("Return a Markdown table structured as follows:") }}

| Module | Filename | Purpose | Dependencies | Reasoning |
|-----|----|---|-----|-----|
{% if execution_blueprint_rows %}
{% for row in execution_blueprint_rows %}
| {{ row.module }} | `{{ row.filename }}` | {{ row.purpose }} | {{ row.dependencies | join(', ') }} | {{ row.reasoning }} |
{% endfor %}
{% else %}
| e.g. PromptRenderer | `prompt_renderer.py` | Renders Jinja2 templates into full prompts | Jinja2, TemplateLoader | Clean separation of render logic from UI |
| ... | ... | ... | ... | ... |
{% endif %}

---

## üîç TRADEOFFS & DECISIONS

{{ tradeoffs_prompt | default("Briefly explain:") }}
- Why this structure was chosen
- How it aligns with existing architecture
- What tradeoffs were made (e.g., added complexity vs reusability)

---

## üß± FILE CREATION POLICY

- New files must extend or reinforce existing architecture
- Follow domain-aligned naming (`core/`, `services/`, `ui/`, etc.)
- Do not create files outside designated structures unless explicitly justified 