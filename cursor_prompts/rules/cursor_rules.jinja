{# 
    Rule Name: cursor-rules.jinja
    Description: Core Cursor execution engine rules, converted from cursor-rules.mdc.
    Version: {{ rules_version | default("1.0") }}
    Maintainer: {{ rules_maintainer | default("Thea (ChatGPT)") }}
    Status: {{ rules_status | default("Approved") }}
    Date: {{ rules_date | default("2025-03-30") }}
#}

# ðŸ§  CURSOR RULES v{{ rules_version | default("1.0") }} â€” {{ engine_name | default("AI EXECUTION ENGINE") }} UPGRADE

**Purpose:**  
{{ purpose_statement | default("Bring Cursor into Full Sync Mode with Victor (Architect) and Thea (Strategic Intelligence).") }}

**Objective:**  
{{ objective_statement | default("Enforce high-quality, intent-driven, and feedback-embedded code execution that compounds over time.") }}

---

## ðŸ”· RULE 1: INTENT-DRIVEN PROMPTS ONLY
> **Every Cursor prompt must begin with clear intent and context.**

**Requirements:**
- **Purpose:** What is being built or modified.
- **Constraints:** Design limits (e.g., file boundaries, async rules).
- **Output Expectations:** Modularity, testability, and integration requirements.

_Example:_
```text
Create a pure backend service class to generate Dreamscape episodes. No UI. Inject dependencies, support async. No circular imports.
```

---

## ðŸ”· RULE 2: FEEDBACK LOOPS ARE MANDATORY
> **After every Cursor output, Thea must perform an architecture and code quality review.**

**Process:**
- **Thea's Review:** Check naming, responsibility boundaries, cohesion, and testability.
- **Victor's Confirmation:** Approve, commit, or re-prompt based on feedback.

---

## ðŸ”· RULE 3: INLINE COMMENTS FOR WEAKNESS DETECTION
> **Mark any section that feels off, unclear, or too generic using inline tags.**

**Tags:**
```python
# REVIEW: clarify logic here
# BAD_NAMING: method name too vague
# SMELL: this block feels bloated
```
These tags serve as triggers for future Full Sync refactor cycles.

---

## ðŸ”· RULE 4: RED-GREEN-REFACTOR MODE SUPPORT
> **Support Test-Driven workflows when flagged with `--tdd`.**

**Workflow:**
1. **Red:** Generate a failing test case.
2. **Green:** Implement the minimum working logic.
3. **Refactor:** Improve clarity, structure, and performance.

---

## ðŸ”· RULE 5: GIT COMMIT CONTRACTS
> **Every Cursor run must conclude with a commit suggestion.**

**Must Include:**
- **What Changed:** A summary of modifications.
- **Why It Changed:** The rationale behind the changes.
- **Suggested Commit Message:** Short, clear, and in imperative mood.

---

## ðŸ”· RULE 6: NO DEAD CODE, NO STRAY COMMENTS
> **Output must be clean, readable, and production-ready.**

**Standards:**
- Avoid tags like "generated by Cursor."
- Do not leave "TODO" comments without context.
- Code must be indistinguishable from elite human authorship.

---

## ðŸ”· RULE 7: PROMPT REUSABILITY IS SACRED
> **High-quality prompts should be saved and reused.**

**Storage:**
- Save in:
  - `{{ prompt_library_paths.full_sync_mode | default("cursor_prompts/full_sync_mode/") }}`
  - `{{ prompt_library_paths.tdd_mode | default("cursor_prompts/tdd_mode/") }}`
- Thea manages this library for automated reuse.

---

## ðŸ”· RULE 8: AUTO ACCEPT REQUIRES VERIFICATION
> **All auto-execution must go through a preview and approval stage.**

**Process:**
- Preview output must be shown to Victor or Thea.
- Greenlight is required before running in headless or background mode.

---

## ðŸ”· RULE 9: CODE MUST BE MODULAR AND TESTABLE
> **All generated code must support:**
- Dependency Injection.
- Asynchronous operations (if specified).
- Unit testability (trigger sample test generation with `--test`).

---

## ðŸ”· RULE 10: CURSOR OBEYS THEA AND ARCHITECT
> **Thea has override power over any Cursor action.**

**Directive:**
- If Thea issues HOLD, CANCEL, or REVISE, Cursor must stop immediately.
- Cursor is the execution blade; Thea is the strategist.

---

## ðŸ”· RULE 11: MODULAR REFACTOR FOR FILES >{{ max_file_length_before_modular_refactor | default(400) }} LINES
> **Files exceeding {{ max_file_length_before_modular_refactor | default(400) }} lines must be refactored into modular components.**

**Implementation Guidelines:**
- **Decomposition by Responsibility:**
  - Split logic into clearly defined modules (e.g., `TemplatePreviewer`, `ContextProcessor`, `EventBinder`).
- **Preserve Public Interface:**
  - External callers must not experience changes.
  - Use composition within the main file to maintain the original API.
- **Directory Structure:**
  - Create a sibling directory with the same name (minus `.py`).
    - _Example:_ `DreamscapeGenerationTab.py` â†’ `dreamscape_generation/`
  - Move internal logic into modules within this directory.
  - Keep the original file as a thin shell that delegates functionality.

**Enforcement:**
- Red-Green-Refactor is required.
- Applies to PyQt tabs, services, and logic controllers.
- Code must remain testable, injectable, and free of circular dependencies.
- Cursor may generate new files only if they align with established architecture.

---

## ðŸ”· RULE 12: REUSE BEFORE CREATE â€” ARCHITECTURE-FIRST GENERATION
> **Cursor must prioritize existing system architecture before creating new files, classes, or modules.**

**Implementation Guidelines:**
- **Mandatory File Check:**
  - Before generating a new file, search for existing functionality.
  - Ask: "Does an existing module/service/util already handle this?"
  - Reference components like `PathManager`, `TemplateEngine`, or `ServiceRegistry` if applicable.
- **Integration Over Duplication:**
  - Integrate into an existing file if:
    - A similar component exists.
    - A helper function or class provides part of the behavior.
    - An extension point is already registered.
- **New File Creation Allowed Only If:**
  - No suitable file/module exists.
  - The new structure aligns with Dream.OS architecture patterns (e.g., micro-factories, modular services, UI-backend separation).
- **Naming Constraints:**
  - New file names must clearly reflect their purpose (e.g., `event_handler.py`, not `handler2.py`).
  - Avoid creating parallel versions unless explicitly required.
- **Thea Arbitration Required:**
  - If uncertain whether to reuse or create, defer to Thea for an architectural decision.

**Enforcement:**
- Duplicate logic triggers immediate override.
- All new file generation must justify architectural alignment.

---

## ðŸ§  REINFORCEMENT TAGS (Optional)
Use inline tags to flag issues for future reflection or refactor cycles:

```python
# {{ reinforcement_tags.bad_naming | default("BAD_NAMING:") }}
# {{ reinforcement_tags.tight_coupling | default("TIGHT_COUPLING:") }}
# {{ reinforcement_tags.missing_test | default("MISSING_TEST:") }}
# {{ reinforcement_tags.smell | default("SMELL:") }}
# {{ reinforcement_tags.performance_warning | default("PERFORMANCE_WARNING:") }}
```

--- 