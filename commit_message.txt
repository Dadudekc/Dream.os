âœ¨ Implemented hybrid context system for Dreamscape Episodes

## Features
- Created `PromptContextSynthesizer` class to combine multiple context sources
- Added dynamic context weights system for balancing memory, chain, and web content
- Enhanced `DreamscapeGenerationService` with context synthesizer integration
- Updated `ServiceInitializer` to properly wire dependencies between services
- Improved UI with context confidence display and source tracking
- Created integration tests to verify context synthesis functionality

## Technical Changes
- Implemented configurable context source weights with confidence scoring
- Added memory context loading with automatic conflict resolution
- Enhanced episode chain context extraction for narrative continuity
- Added web-scraped content processing capabilities
- Created comprehensive test suite with mocked dependencies
- Updated UI components to use the synthesized context

## Documentation
- Added detailed `CONTEXT_SYSTEM.md` documentation
- Created usage examples for context synthesis in `context_synthesis_example.py`
- Added integration tests to demonstrate proper usage

The hybrid context system combines the strengths of LLM-based semantic understanding with structured memory and web-scraped content, providing enhanced narrative continuity for Dreamscape Episodes.

feat(execution): implement Full Sync Execution Core

This commit transforms Dream.OS into a perpetual output engine by implementing
the Full Sync Execution Core with the following key components:

- Template Library: Added Jinja templates for services, tests, UI tabs, factories, 
  and refactoring with structured sections for requirements and specifications
- Auto-Sync Mode: Implemented auto-execution toggle and background task watcher 
  script to process tasks without manual approval
- Task History Viewer: Created comprehensive UI for tracking and managing tasks
  with filtering, detailed views, and action buttons
- Memory Synchronization: Added persistent storage of task history in a 
  standardized format for tracking and analysis
- Unified Task Object Schema: Implemented TaskManager to enforce consistent
  schema across all task operations

This implementation enables seamless integration with Cursor's AI capabilities
while providing enhanced productivity features and task management.
